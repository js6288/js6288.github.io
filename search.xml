<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>吴恩达机器学习 Course2 week1 神经网络</title>
      <link href="/2025/01/28/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-course2-week1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/01/28/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-course2-week1-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="吴恩达机器学习-Course2-week1-神经网络"><a href="#吴恩达机器学习-Course2-week1-神经网络" class="headerlink" title="吴恩达机器学习 Course2 week1 神经网络"></a>吴恩达机器学习 Course2 week1 神经网络</h1><h2 id="1-神经网络概述"><a href="#1-神经网络概述" class="headerlink" title="1 神经网络概述"></a>1 神经网络概述</h2><h3 id="1-1-关于Course-2"><a href="#1-1-关于Course-2" class="headerlink" title="1-1 关于Course 2"></a>1-1 关于Course 2</h3><p>Course2会学习“神经网络”(也被称为“深度学习”)、决策树等算法，这些是最强大、最广泛使用的机器学习算法之一。另外也会介绍构建机器学习系统的建议，比如在进行神经网络训练时，是应该收集更多数据？应该购买更强大的GPU来构建更大的神经网络？</p><blockquote><ol><li>Week1：使用别人训练好参数的神经网络，进行预测被称为“<strong>推理</strong>(infrence)”。本周重点介绍“神经网络”的计算原理和调用代码，只“推理”而不涉及“训练”。</li><li>week2: 介绍如何训练神经网络。也就是根据标记好的训练集，训练神经网络参数。</li><li>Week3：将给出构建机器学习系统的建议</li><li>Week4: 介绍“决策树(Decision trees)”，尽管和“神经网络”相比没有那么出名，但这也是一个很强大、广泛使用的机器学习方法。</li></ol></blockquote><h3 id="1-2-神经元和大脑"><a href="#1-2-神经元和大脑" class="headerlink" title="1-2 神经元和大脑"></a>1-2 神经元和大脑</h3><p>神经网络的起源：</p><blockquote><ul><li>1950’s年代：由于人脑或者说生物大脑的比任何“智能”都有着更高的水平，于是“神经网络”最初是想建立模仿大脑的软件。1950’s年代开始这项工作，但是后来就没落了(估计是因为算力不够+也不了解神经元)。</li><li>1980’s~1990’s早期：由于被应用于手写数字识别等应用中，“神经网络”再度被重视。比如识别邮政编码从而分拣信件、识别手写支票中的美元数字等。但是在1990’s晚期再度失宠。</li><li>大约2005年~至今：开始复苏，并被重新命名成“深度学习”。从那以后，“神经网络”在一个有一个领域取得了空前进展。<ol><li>第一个由于“神经网络”而取得巨大进步的领域是“语音识别(speech recognition)”，<a href="https://baike.baidu.com/item/%E9%82%93%E5%8A%9B/20811707">邓力</a> 和 <a href="https://baike.baidu.com/item/%E6%9D%B0%E5%BC%97%E9%87%8C%C2%B7%E8%BE%9B%E9%A1%BF/23419046">杰弗里·辛顿</a> 等人将现代深度学习算法应用到该领域。</li><li>然后就是“计算机视觉(cpmputer vision)”，2012年是ImageNet的推出对计算机视觉产生了重要的影响。</li><li>接下来几年进入了“文本处理”或“自然语言处理(NLP)”。</li><li>如今：神经网络被应用于方方面面，比如气候变化、医学成像、在线广告推广等。基本上很多推荐机制都是使用神经网络来完成。</li></ol></li></ul><p>注：“神经网络”被重新命名成“深度学习”，一方面是因为听起来更高大上，另一方面是因为人类根本不了解“神经元”的工作方式，现代的深度学习也不想再深究以前的生物学动机，只想从工程的角度构建更有效的算法，所以逐渐舍弃“神经网络”这种叫法。</p></blockquote><p>在几十年前，当“神经网络(neural networks)”被首次提出时，其最初的动机模仿(mimic)人脑或生物大脑学习和思考的方式，编写一个可以自动运行的软件。虽然如今的“神经网络”，也被称为“人工神经网络(artifical neural network)”，其原理已经和我们大脑实际上的工作方式相去甚远，但是我们还是会看到一些最初的“生物学动机(biological motivations)”。</p><p><strong>神经元简化结构</strong></p><p>人脑由几百亿个神经元组成，现在我们来看看神经元的简化结构。如下左图，单个神经元有很多“树突(dendrite)”作为输入端，通过“轴突(axon)”输出，该输出可以继续连接一个或多个神经元。于是，单个神经元可以看成“多个输入到单个输出的映射”。在下右图中，使用“蓝色小圈”表示单个神经元，于是“神经网络”就是由多个神经元组成的，能够将输入映射到输出的系统。</p><p><img src="http://img-md-js.linjsblog.top/img/202501122058213.png" alt="img"></p><p>注意这里的介绍只是一个简单的类比，实际上人脑的工作方式更加复杂和精妙，人类目前并不能完全了解人脑的工作方式。基本上每隔几年，神经科学家都会在人脑工作方式领域有根本性的突破。但即使是这些及其简化的神经元模型，也可以训练出很强大的深度学习模型。事实上，从事神经网络研究的人已经从寻找生物学动机渐渐远离，大家只是想从“工程原理”的角度来构建更有效的算法，所以不要太把自己局限在这些生物学动机当中。当然，时不时的想想神经元真正的工作方式也很有趣。 <strong>神经网络兴起的真正原因</strong></p><p>既然神经网络已经在几十年前就提出了，为什么最近几年才开始真正的发展呢？简单来说，是因为存储和算力的发展。在下图中，横轴表示对某问题所拥有的数据量，纵轴表示应用于该问题的“学习算法”的性能或精度。过去几十年间，随着互联网的发展，横轴上的数据在不断增长，若使用传统的机器学习算法，比如“线性回归”或“逻辑回归”，算法性能已经趋于上限。也就是说，传统的AI算法不能有效的利用现在庞大的数据。而得益于算力的发展，主要是GPU的发展，可以部署越来越大规模的神经网络模型，算法精度也相应的取得了质的提升。也就是说，得益于现在的存储和算力，神经网络才取得长足的发展。 <img src="http://img-md-js.linjsblog.top/img/202501122058543.png" alt="img"></p><h3 id="1-3-需求预测"><a href="#1-3-需求预测" class="headerlink" title="1-3 需求预测"></a>1-3 需求预测</h3><p>  为了说明神经网络的形成原理，本节先从一个小例子——“需求预测”问题开始：</p><blockquote><p>“<strong>需求预测</strong>(Demand Predication)”问题：预测某产品是否为畅销产品。</p><ul><li>输入特征：价格、运费、市场营销、材质等。</li><li>输出：二元输出，是否为畅销产品(0&#x2F;1)。</li></ul></blockquote><p>我们先只考虑“价格”这一个特征，对于这种二元分类问题，仿照“逻辑回归”，我们仍然可以使用Sigmoid函数来拟合单个神经元的模型函数。于是该神经元模型，输入价格特征 x ，输出当前衬衫为畅销产品的概率 f ( x )（在神经网络中被称为“激活值” a ）。这个小逻辑回归算法可以认为是非常简化的单个神经元模型，如下图所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202501122244770.png" alt="img"></p><blockquote><p>**<em>a</em>**表示“激活(activation)”。来自于神经科学中的术语，表示当前神经元向下一神经元发送的电脉冲强度(0~1之间的数字)。</p></blockquote><p>下面进一步改进模型，首先是将输入特征扩展为四个(价格、运费、市场营销、材质)，但若将这几个特征直接和最后一个神经元相连，这就回到之前的“逻辑回归”了，我们不能这么做。所以我们我们不妨添加一层“消费者因素”，我们定义消费者是否购买一件产品可能取决于三个因素(“心理预期价格”、“认可度”、“产品质量”)，这三种因素又取决于不同的输入特征(如下图黄色连线所示)。于是，将“输入特征”、“消费者因素”、“输出概率”这三者使用不同层的神经元连接在一起，每个神经元都是一个小型的逻辑回归算法，便将“单神经元模型”扩展为“神经网络模型”：</p><p><img src="http://img-md-js.linjsblog.top/img/202501122245072.png" alt="img"></p><blockquote><ul><li>输入层(input layer)：包含全部的特征，一般表示为 “输入特征向量“ $\vec{x}$</li><li>隐藏层(hidden layer)：对输入层的$\vec{x}$进行映射，得到”激活向量“ $\vec{a}$ ,发送给输出层</li><li>输出层(output layer)：根据 $\vec{a}$ 计算出最终的预测结果，也就是成为畅销产品的概率。</li></ul><p>注1：具有相似输入特征的神经元会被分组为同一“层”(layer)。 注2：除了输入层，所有隐藏层+输出层&#x3D;神经网络总层数。比如上图就是两层神经网络。</p></blockquote><p>上述就是整个神经网络的形成原理。但注意到上述我们手动规定了“隐藏层”的神经元数量、每个神经元与输入特征的关系。要是遇到庞大且复杂的神经网络，显然都靠手动规定几乎不可能！所以<strong>实际构建神经网络时，只需要设定隐藏层数量、以及每个隐藏层的神经元数量，其他的对应关系等无需规定，神经网络模型都可以自行学习</strong>（Week2介绍）。这也解释了，之所以称之为“隐藏层”，是因为我们一般只知 道数据集$(\vec{X},\vec{Y})$ ,而不会像上述一样预先设置好“消费者因素”，也就是说，我们一开始并不知道“隐藏层”间的神经元之间的对应关系。</p><p> 最后要说的一点是，上述只是具有单个隐藏层的神经网络模型，下面是具有多个隐藏层的，某些文献中也被称为“多层感知器(multilayer perceptron)”：</p><p><img src="http://img-md-js.linjsblog.top/img/202501122252246.png" alt="img"></p><h3 id="1-4-举例-图像感知"><a href="#1-4-举例-图像感知" class="headerlink" title="1-4 举例-图像感知"></a>1-4 举例-图像感知</h3><p>那“隐藏层”具体都在做什么事情呢？我们使用计算机视觉中的“人脸识别”来举例，现在有一个已经训练好的神经网络模型，下面来看看隐藏层在做什么工作（注意不同的神经网络可能不同）：</p><p>“<strong>人脸识别</strong>”(face recognition)问题：识别图片中的人脸是谁。</p><ul><li>输入特征：100x100的图片。</li><li>输出：图片中的人脸，是某个人的概率。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202501122316506.png" alt="img"></p><blockquote><ul><li><p>隐藏层1：识别一些很小的边缘或线，比如不同的神经元识别不同方向的小边缘或线。</p></li><li><p>隐藏层2：将小边缘组合在一起，识别面部的某个区域，比如鼻子、眼睛、嘴等。</p></li><li><p>隐藏层3：将上述面部区域再组合，检测到整张人脸，然后再根据脸型对比和目标人脸的相似程度。</p></li></ul><p>总结：越靠后的隐藏层，识别区域越大。 注：“汽车检测”的隐藏层功能也相似。</p></blockquote><p>可以看到，神经网络如此强大！我们预先并没有告诉这些隐藏层需要做什么，但仅仅通过学习输入的数据，神经网络便可以自动生成这些不同隐藏层的特征检测器。本周晚些时候还会介绍如何构建“手写数字识别”的神经网络。</p><h2 id="2-神经网络"><a href="#2-神经网络" class="headerlink" title="2 神经网络"></a>2 神经网络</h2><h3 id="2-1-神经网络中的网络层"><a href="#2-1-神经网络中的网络层" class="headerlink" title="2-1 神经网络中的网络层"></a>2-1 神经网络中的网络层</h3><blockquote><p>术语</p><p>上标方括号 $^{[l]}$: 表示第 l l_l_ 层神经网络</p><p>$w_{j}^{[l]},b_{j}^{[l]}$ : 第 $l$ 层神经网络的第 j 个参数</p><p>$ \vec{a} ^{[l]}$：第 $l$ 层神经网络输出的向量形式的“激活值”。</p><p>$a^{[l]}$ : 第 $l$ 层神经网络输出的单个“激活值”，一般是最后一层的“输出层”的输出。</p><p>$\vec{a}^{[0]}$ : 一般等价于输入特征$\vec{x}$, 该表达式是为了与隐藏层、输入层统一形式</p><p>g(.) : 默认表示Sigmoid函数，是神经网络“激活函数”的其中一种</p><p>按照惯例，神经网络的层数 &#x3D; 所有隐藏层 + 输出层。比如，两层神经网络就是只包含一个隐藏层。</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202501261942413.png" alt="img"></p><p>图1</p><p><img src="http://img-md-js.linjsblog.top/img/202501261942941.png" alt="img"></p><p>图2</p><p><img src="http://img-md-js.linjsblog.top/img/202501261942103.png" alt="img"></p><p>图3</p><blockquote><p>输入层(layer0)：给出特征向量 $\vec{x}$ ，比如令 $\vec{x}$⃗ &#x3D; [ 197 , 184 , 136 , 214 ] 。 隐藏层(layer1)：如图1，包括三个神经元，每个神经元使用Sigmoid函数，并且都有各自的参数$\vec{w}<em>{j}^{[l]},{b}</em>{j}^{[l]}$ ,j&#x3D;1,2,3; 假设这三个神经元的计算结果组成当前层的激活向量$\vec{a}^{[1]}&#x3D;[0.3,0.7,0.2]$.</p><p>输出层(layer2)：如图2，只有单个神经元，利用参数 $\vec{w}<em>{1}^{[2]},{b}</em>{1}^{[2]}$ 和输入的 $\vec{a}^{[1]} 计算出 \vec{a}^{[2]} &#x3D; 0.84$</p><p>判决：对于图3，对输出层的结果进行二进制判决，阈值可设置为0.5。这一步并不是必要的。</p></blockquote><h3 id="2-2-更复杂的神经网络"><a href="#2-2-更复杂的神经网络" class="headerlink" title="2-2 更复杂的神经网络"></a>2-2 更复杂的神经网络</h3><p><img src="http://img-md-js.linjsblog.top/img/202501262133006.png" alt="image-20250126213318916"></p><p>显然上图中，每一层都有一个输入向量，经过当前层所有神经元的得到输出向量，传递给下一层。将符号整理得更加清晰一些，于是第 $l$ 层神经网络的第 $j$ 个神经元的输出可以写成：</p><p>$$<br>a_{j}^{[l]} &#x3D; g(\vec{w}<em>{j}^{[l]} \cdot \vec{a}^{[l-1]} + b</em>{j}^{[l]})<br>$$</p><p>将输入特征写为 $\vec{x} &#x3D; \vec{a}^{[0]}$ 上式就具有通用性。</p><h3 id="2-3-神经网络前向传播"><a href="#2-3-神经网络前向传播" class="headerlink" title="2-3 神经网络前向传播"></a>2-3 神经网络前向传播</h3><p>“手写数字识别”问题：简洁起见，只识别手写数字0和1。</p><p>输入特征：8x8的灰度图(灰度级0~255)，0表示黑色，255表示白色。于是输入特征 $\vec{x}$的长度为64。 输出：二元分类，输入图片是数字1的概率。</p><p>假设我们使用三层神经网络，隐藏层1有25个神经元、隐藏层2有15个神经元，每层神经元的计算公式如下图所示，</p><p><img src="http://img-md-js.linjsblog.top/img/202501262357286.png" alt="img"></p><p>将上述表达式合并，于是第 $ l $ 层神经网络的输出为(矩阵格式)：</p><p>$\vec{A}^{[l]} &#x3D; g(\vec{W}^{[l]} \vec{A}^{[l-1]} + \vec{B}^{[l]})$</p><p>解释：</p><ul><li>约定当前层为 $l$ ，且当前层总共有 $M$个神经元。</li><li>$\vec{A}^{[l-1]}$ 或 $\vec{a}^{[l-1]}$ : N_1 的二维矩阵(列向量)， 上一层的激活向量，假设其长度为_ N*。</li><li>$\vec{W}^{[l]}$: M*N二维矩阵，当前层所有的 $\vec{w}<em>{j}^{[l]}$ 参数。第j行表示第j个神经元的参数$\vec{w}</em>{j}^{[l]}$（行向量）</li><li>$\vec{B}^{[l]}$: M*1 的二维矩阵(M维列向量), 当前层所有的$b_{j}^{[l]}$ 参数</li><li>$\vec{A}^{[l]}$ : M*1 当前层输出的激活向量。</li></ul><p>注：$或者反过来 1_N 行向量\vec{A}^{[l-1]}, 和 N_M 的 \vec{W}^{[l]} , 输出1*M的行向量$ 这样编程更方便</p><p>此时</p><p><img src="http://img-md-js.linjsblog.top/img/202501271144041.png" alt="image-20250127114401930"></p><p>定义每层的输出为行向量，主要为了编程方便，$\vec{x}$ 一般都会按行输入。</p><p>$\vec{A}^{[3]}$只有一个元素，所以可以认为是一个值。</p><h2 id="3-TensorFlow-简介"><a href="#3-TensorFlow-简介" class="headerlink" title="3 TensorFlow 简介"></a>3 TensorFlow 简介</h2><h3 id="3-1-配置tensorflow"><a href="#3-1-配置tensorflow" class="headerlink" title="3-1 配置tensorflow"></a>3-1 配置tensorflow</h3><p>TensorFlow是实现深度学习算法的框架之一，但目前国内最常使用PyTorch，但不用担心，两者代码几乎完全相同。</p><p>安装TensorFlow 的CPU版本</p><pre class="line-numbers language-none"><code class="language-none"># 安装时会自动选择和Python环境匹配的版本pip install tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装TensorFlow-GPU版本，硬件最好为AMD显卡(N卡)。然后，配置好CUDA</p><pre class="line-numbers language-none"><code class="language-none"># 安装时会自动选择和Python环境匹配的版本pip install tensorflow-gpu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：从 TensorFlow 2.1 开始，<code>tensorflow-gpu</code> 包已经被合并到 <code>tensorflow</code> 包中。你只需要安装 <code>tensorflow</code>，它会自动检测并利用 GPU。</p><h3 id="3-2-TensorFlow中的张量"><a href="#3-2-TensorFlow中的张量" class="headerlink" title="3-2 TensorFlow中的张量"></a>3-2 TensorFlow中的张量</h3><p>在Python中，大家最常使用“NumPy库”来完成线性代数的运算；而涉及到神经网络的计算，则通常交给Tensorflow完成。因为历史遗留问题，两者的数据格式并不统一。</p><p>如下所示，NumPy中行向量、列向量、数字列表的区别主要在于方括号的层数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 最外层方括号：表示定义矩阵</span><span class="token comment"># 里层的方括号：表示一行数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 行向量，1x2的二维数组</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 列向量，2x1的二维数组</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 数字列表，无法参与矩阵运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而TensorFlow旨在处理非常大的数据集，所以传入其内部的数据都会转化成“<strong>张量</strong>(tensor)”，这样可以使其内部计算更加高效。TensorFlow的二维张量和NumPy的二维数组，存储格式并不相同。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 直接打印</span>tf<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.7</span><span class="token punctuation">,</span>    <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token comment"># 转换成NumPy格式再打印</span>a1<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.3</span> <span class="token number">0.7</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span> <span class="token comment"># 不显示矩阵大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以建议：</p><ol><li>传入数据：要传递给TensorFlow的数据，都使用两层方括号定义成矩阵(二维张量)。</li><li>读出数据：TensorFlow处理完毕后，可以先将其转换成NumPy的数据格式，再调用NumPy的方法进行后续处理。</li></ol><h2 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4 代码实现"></a>4 代码实现</h2><h3 id="4-1-如何用代码实现推理-烤咖啡豆"><a href="#4-1-如何用代码实现推理-烤咖啡豆" class="headerlink" title="4-1 如何用代码实现推理-烤咖啡豆"></a>4-1 如何用代码实现推理-烤咖啡豆</h3><p>“烤咖啡豆”问题：判断咖啡豆是否烤得恰到好处。</p><ul><li>输入特征：“烘焙温度”、“烘焙时间”。</li><li>输出：二元分类，咖啡豆是否烤好了，红叉表示烤好了、蓝圈表示没烤好。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202501271300179.png" alt="img"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">200.0</span><span class="token punctuation">,</span><span class="token number">17.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输入特征</span>layer_1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>activation <span class="token operator">=</span> <span class="token string">'sigmoid'</span><span class="token punctuation">)</span> <span class="token comment">#定义隐藏层  dense 是神经网络单层(layer)的另一个名称</span>a_1 <span class="token operator">=</span> layer_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 计算激活向量</span><span class="token comment"># 输出层</span>layer_2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义输出层</span>a2 <span class="token operator">=</span> layer_2<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>                                <span class="token comment"># 计算输出值</span><span class="token comment"># 判决</span><span class="token keyword">if</span> a2 <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">:</span>    yhat <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    yhat <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202501271326983.png" alt="image-20250127132651855"></p><h3 id="4-2-搭建一个神经网络"><a href="#4-2-搭建一个神经网络" class="headerlink" title="4-2 搭建一个神经网络"></a>4-2 搭建一个神经网络</h3><p>我们希望它采用第一层和第二层并将它们串在一起形成一个神经网络，而不是手动获取数据将其传到第一层然后从一层获取激活并将其传递到第二层</p><p><img src="http://img-md-js.linjsblog.top/img/202501271558579.png" alt="image-20250127155850470"></p><p>sequential framework 可以为你做很多工作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 烤咖啡豆-代码整合</span><span class="token comment"># 定义训练集</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">120.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">425.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">212.0</span><span class="token punctuation">,</span> <span class="token number">18.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 定义神经网络</span>layer_1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义隐藏层</span>layer_2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义输出层</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>layer_1<span class="token punctuation">,</span> layer_2<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 连接两层</span><span class="token comment"># 编译并训练网络</span>model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token comment"># 编译整个神经网络，下周具体介绍</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>        <span class="token comment"># 训练数据集，下周具体介绍</span><span class="token comment"># 预测并判决</span>a_last <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_new<span class="token punctuation">)</span><span class="token keyword">if</span> a_last <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">:</span>    yhat <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    yhat <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-神经网络的内部实现"><a href="#4-3-神经网络的内部实现" class="headerlink" title="4-3 神经网络的内部实现"></a>4-3 神经网络的内部实现</h3><p>直接调用TensorFlow库代码即可实现神经网络的构建，虽然直接调用很有效率，但是了解其背后的工作原理还是非常重要的</p><p>还是刚才的“烤咖啡豆”模型。</p><ol><li><p>对每个神经元进行硬编码，如下图“烤咖啡豆”问题-每个神经元的计算</p><p><img src="http://img-md-js.linjsblog.top/img/202501271633637.png"></p></li><li><p>将每一层神经元的计算封装成一个 ，<code>dense(a_in,w,b,g)</code>函数，再将所有层封装成一个网络 <code>sequential()</code>。</p><p><img src="http://img-md-js.linjsblog.top/img/202501271657118.png" alt="img"></p><blockquote><p>shape会输出一个形状的列表[row,columns],然后对列表索引[0]就是行数，[1]就是列数，W.shape[0] –&gt; 代表行数 W.shape[1] –&gt;代表列数</p><p>在这个例子中，我们需要输出三个激活值，所以这只是将 a_out 初始化为[0,0,0]，一个由三个零组成的数组。</p><p>W[ : , j]二维数组切片，取第j列的每一行，也就是把第j列全取了</p></blockquote></li></ol><h3 id="4-4-通过矩阵乘法优化dense函数"><a href="#4-4-通过矩阵乘法优化dense函数" class="headerlink" title="4-4 通过矩阵乘法优化dense函数"></a>4-4 通过矩阵乘法优化dense函数</h3><p><img src="http://img-md-js.linjsblog.top/img/202501271712345.png" alt="img"></p><ul><li>左侧还有一些“数字列表”，右侧全是二维数组。也就是进行了“向量化”。</li><li><code>np.matmul()</code>函数是矩阵乘法函数，具体的矩阵乘法过程见“线性代数”知识</li><li><code>Z = np.matmul(AT,W)</code>等价于 <code>Z = AT @ W</code>，也就是说 <code>@</code>就是NumPy中的矩阵乘法符号</li></ul><p>神经网络的规模之所以可以越来越大，得益于“矢量化”，这保证神经网络可以使用矩阵运算高效地部署。这是因为并行计算硬件，比如GPU或者强大的CPU，非常擅长做非常大的矩阵运算。</p><h3 id="4-5-代码实现-手写数字识别"><a href="#4-5-代码实现-手写数字识别" class="headerlink" title="4-5 代码实现-手写数字识别"></a>4-5 代码实现-手写数字识别</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 手写数字识别-代码整合</span><span class="token comment"># 定义训练集</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment"># 1的训练图片</span>              <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 0的训练图片</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 定义神经网络</span>layer_1 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义隐藏层1</span>layer_2 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义隐藏层2</span>layer_3 <span class="token operator">=</span> Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义输出层</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>layer_1<span class="token punctuation">,</span> layer_2<span class="token punctuation">,</span> layer_3<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 连接三层</span><span class="token comment">###################也可以将上述四行合并####################</span><span class="token comment"># model = Sequential([</span><span class="token comment">#         Dense(units=25, activation='sigmoid'),  # 隐藏层1</span><span class="token comment">#         Dense(units=15, activation='sigmoid'),  # 隐藏层2</span><span class="token comment">#         Dense(units=1,  activation='sigmoid')]) # 输出层</span><span class="token comment">#########################################################</span><span class="token comment"># 编译并训练网络</span>model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment"># 编译整个神经网络，下周具体介绍</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>      <span class="token comment"># 训练数据集，下周具体介绍</span><span class="token comment"># 预测并判决</span>a_last <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_new<span class="token punctuation">)</span><span class="token keyword">if</span> a_last <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">:</span>    yhat <span class="token operator">=</span> 1python<span class="token keyword">else</span><span class="token punctuation">:</span>    yhat <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细代码见option lab C2_W1_Assignment</p><h2 id="5-强人工智能"><a href="#5-强人工智能" class="headerlink" title="5 强人工智能"></a>5 强人工智能</h2><p>谈谈“AGI(Artifical General Intelligence, 通用人工智能)”。老师一直梦想着构建一个和人一样聪明的AI系统，这也是全世界人工智能领域的愿景，但是前路漫漫，不知道几十年、上百年能否实现。不过，如今AGI的目标是构建一个“和人一样聪明的AI”，这让人兴奋但同时又有很多不切实际的炒作，比如《终结者》系列电影中的“天网”要灭绝人类，这引起一部分人对于AI的恐慌。但其实AI主要包括两方面完全不一样的内容：</p><ol><li>ANI(Artifical Narrow Intelligence, 狭义人工智能)：一次只做一件事的AI。比如智能扬声器、自动驾驶汽车、网络搜索、用于特定农场或工厂的AI等。过去几年间，ANI取得了巨大的进步并带动了巨大的社会经济效益，常见于生活的方方面面。</li><li>AGI(Artifical General Intelligence, 通用人工智能)：可以像人类一样做任何事的AI。</li></ol><p>并且，即使从“模拟人脑”的角度来看，要想实现真正的AGI依旧非常困难，主要有两个原因：</p><ol><li>目前的神经元模型非常简单，实际上人脑神经元的工作机制要复杂得多。</li><li>从医学角度来说，我们也不完全了解人脑是如何工作的。</li></ol><p>总结：老师认为仅通过“模拟大脑神经元”的方式，就实现了AGI，是非常困难的。 注：这大概也是现在改称“深度学习”的原因。</p><p>  虽然不用恐慌，但是我们就没有实现AGI的可能了吗？也不是，比如下面的几个实验就显示出，人类大脑的某个区域，即使是非常小的一块区域，都具有惊人的适应性、可塑性：</p><p><img src="http://img-md-js.linjsblog.top/img/202501271802740.png" alt="img"></p><ol><li>使用“听觉皮层”看：将大脑的“听觉皮层”和原有的神经切断，再连接上图像信号，那么一段时间后，该区域皮层就“学会了看”。用于感受触觉的“体感皮层”也是同理。</li><li>使用舌头看。头上安装摄像机，并将其拍摄到的灰度值映射到舌头上的电压矩阵。给盲人带上学习一段时间，盲人就可以“看见”物体。</li><li>人体声纳。训练人类发出“哒哒声”(类似于弹舌)，并观察声音是如何在环境中反射的。经过一段时间的训练，有些人可以实现“回声定位”。</li><li>方向感知。带上一个腰带，该腰带中指向北方的蜂鸣器会缓慢震动，一段时间后，就会一直知道北方在哪里(带着腰带)，而不是再去首先感受蜂鸣器振动。</li><li>植入第三只眼。一段时间后，青蛙就会熟练使用第三只眼。</li></ol><p>这一系列实验表明，大脑的许多区域，其功能仅取决于输入的数据，换言之，这些区域都有一个“通用算法”。如果我们能了解这一小块区域的算法，我们就能用计算机进行模拟，进而可能会创造出AGI。但显然这是一条很困难的道路，因为我们不确定大脑是不是就是一堆算法，就算是，我们也不知道这个算法是什么，但希望通过我们的努力在某一个可以接近这个“算法”。</p><p>  实现AGI的想法真的很迷人，我们应当理性看待，而不应过度炒作。但如果同学们觉得这些伦理问题困扰到了自己，就不用想这么多，也不用想什么AGI，只要知道神经网络是一个很有帮助的工具也很不错。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> deep learning </tag>
            
            <tag> tensorflow </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习吴恩达笔记 week3</title>
      <link href="/2024/12/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%90%B4%E6%81%A9%E8%BE%BE%E7%AC%94%E8%AE%B0-week3/"/>
      <url>/2024/12/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%90%B4%E6%81%A9%E8%BE%BE%E7%AC%94%E8%AE%B0-week3/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习吴恩达笔记-week3"><a href="#机器学习吴恩达笔记-week3" class="headerlink" title="机器学习吴恩达笔记 week3"></a>机器学习吴恩达笔记 week3</h1><h2 id="1-逻辑回归"><a href="#1-逻辑回归" class="headerlink" title="1 逻辑回归"></a>1 逻辑回归</h2><h3 id="1-1-动机与目的：线性回归不适用于分类问题"><a href="#1-1-动机与目的：线性回归不适用于分类问题" class="headerlink" title="1-1 动机与目的：线性回归不适用于分类问题"></a>1-1 动机与目的：线性回归不适用于分类问题</h3><p>概念明晰：</p><blockquote><p>本课程中，class&#x2F;category两者都表示“分类问题”的输出类别，两者意义相同。 “逻辑回归(logistic regression)算法”用来解决“分类问题(classfication)”。这是历史遗留的命名问题。</p></blockquote><p>本周将学习“分类问题”，其输出为<strong>有限取值</strong>，而不是某段范围内无限的数字。若分类问题的输出结果只有两种可能的分类&#x2F;类别(class&#x2F;category)，就被称为“二元分类(binary classfication)”，比如下面的三个问题：</p><blockquote><p>是否为垃圾邮件？（0&#x2F;1） 是否为交易欺诈？（0&#x2F;1） 是否为恶性肿瘤？（0&#x2F;1）下图与Week1“肿瘤分类”示意图的不同，仅在于下图画出了实际的纵轴。 惯例：0表示“否”，1表示“是”。0&#x2F;1 只有 否定&#x2F;肯定 含义，并不具有褒贬含义。</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202412291129251.png" alt="img"></p><p>若我们采用前面学过的“线性回归”，对于特定的训练集(没有最右侧样本)，看起来是合理的。因为此时以0.5作为阈值，其与样本拟合线(蓝色)相交在横轴上的点，便可以作为一个边界(蓝色)，边界左侧都是良性(0)，边界右侧都是恶性(1)。但此时额外添加一个最右侧的样本，显然拟合线(绿色)和横轴上的边界(绿色)都和预期不符：</p><p><img src="http://img-md-js.linjsblog.top/img/202412291129636.png" alt="img"></p><blockquote><ul><li>决策边界(<strong>decision boundary</strong>)：横轴上的边界。</li></ul></blockquote><p>  总的来说，有时候可以很幸运地使用“线性回归”解决“分类问题”，但大多数情况下都不行，<strong>线性拟合不适用于分类问题</strong>。于是下面将介绍“逻辑回归(logistic regression)”，来解决分类问题，这也是一种当今被广泛使用的算法。</p><h3 id="1-2-逻辑回归模型"><a href="#1-2-逻辑回归模型" class="headerlink" title="1-2 逻辑回归模型"></a>1-2 逻辑回归模型</h3><p>“逻辑回归”是一种当今被广泛使用的算法，比如生活中的“精准广告投放”算法，老师说他在工作中也经常用。“逻辑回归(logistic regression)”使用S型曲线来进行函数拟合，最常见的S型曲线就是 Sigmoid function，其也被称为 logistic function：</p><p><img src="http://img-md-js.linjsblog.top/img/202412291242663.png" alt="img"></p><p>只要根据样本的散点图，选择不同的方式对 $z$ 拟合(见下一小节)，就可以解决各种各样的分类问题。比如在“肿瘤分类问题”中，令 $z &#x3D; \vec{x} \cdot \vec{w} + b$ , 并将其代入到igmoid函数中，便可得到“(多元)逻辑回归算法”的数学模型： $$ f_{\vec{w},b}(\vec x) &#x3D; g(z) &#x3D; g(\vec{w} \cdot \vec{x} + b) &#x3D; \frac{1}{1+e^{-(\vec{w} \cdot \vec{x} + b)}} $$ 对于使用Sigmoid函数构建的“逻辑回归”的数学模型来说，输入相应的特征或特征集，就会输出一个0~1之间的数字，这个输出可以认为是 y &#x3D; 1 的“概率(probability)”：$f_{\vec{w},b}(\vec x) &#x3D; \mathrm{P}( y&#x3D;1 \mid \vec{x},\vec{w},b)$</p><p>也就是，在给定参数 $\vec{w}$ 和 $\vec{b}$、输入 $\vec{x}$ 的情况下，其输出 $y &#x3D; 1$的概率。比如对于上述“肿瘤分类问题”来说，输出的数字就表示“为恶性肿瘤的概率 P ( 1 ) ”，若输出0.7，则表示该模型认为有70%的可能是恶性肿瘤(30%的可能不是恶性肿瘤)。</p><p><img src="http://img-md-js.linjsblog.top/img/202412291311269.png" alt="image-20241229131141192"></p><h3 id="1-3-决策边界"><a href="#1-3-决策边界" class="headerlink" title="1-3 决策边界"></a>1-3 决策边界</h3><p>前面提到，“逻辑回归”的输出表示“输出为1的概率”。那么很自然的便想到，我们应当选取一个“阈值”，当输出概率大于这个“阈值”时，就可以认为输出结果为1，这个“阈值”就是“决策边界(decision boundary)”。显然，最直观的决策边界就是选取 $g(z) &#x3D; 0.5$，也就是：</p><p>$$ f_{\vec{w},b}(\vec x) &#x3D; g(z) \geq 0.5 \Rightarrow \hat{y} &#x3D; 1 \ f_{\vec{w},b}(\vec x) &#x3D; g(z) &lt; 0.5 \Rightarrow \hat{y} &#x3D; 0 $$ 而决策边界的形状是由 $z$ 决定，令 $z &#x3D; \vec{w} \cdot \vec{x} + b$ ,决策边界便为一条直线；令$z$ 为更高阶的多项式，则可以得到形状更复杂的决策边界，这便是“逻辑回归”可以学习相当复杂的数据集的奥妙所在。下面是两个示例：</p><p><strong>示例1：决策边界为直线</strong></p><p>令$z &#x3D; w_0x_0+w_1x_1 + b$： 假设$w_1 &#x3D; 1,w_2&#x3D;1,b&#x3D;-3$ ,决策边界g(z) &#x3D; 0.5 于是经过移项可得到决策边界为$x_1 + x_2 &#x3D; 3$</p><p>(下图紫色直线)，决策边界的下方认为是0、上方认为是1，符合直观</p><p><img src="http://img-md-js.linjsblog.top/img/202412291317749.png" alt="img"></p><p>$x_1,x_2$ 表示两种输入特征，红叉表示正向示例(1)，蓝圈表示反向示例(0)。</p><p><strong>示例2：决策边界为圆</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202412291322481.png" alt="img"></p><h2 id="2-逻辑回归的代价函数"><a href="#2-逻辑回归的代价函数" class="headerlink" title="2 逻辑回归的代价函数"></a>2 逻辑回归的代价函数</h2><p>概念明晰：</p><ul><li>本节中，<strong>单个样本</strong>使用“损失(<strong>loss</strong>)函数”，<strong>整个训练集</strong>使用“代价(<strong>cost</strong>)函数”。“代价”是所有样本“损失”的平均值。</li><li>本课程中，若无特殊说明，$log(\cdot)$函数都默认对<strong>自然函数e</strong> 取对数，即$log(\cdot)&#x3D;log_e(\cdot)&#x3D;ln(\cdot)$</li></ul><p>和“线性回归”类似，给定“逻辑回归”的模型后，也要讨论一下“逻辑回归”的“代价函数”，用来衡量当前参数对于训练集的匹配程度。在“线性回归”中，我们使用“平方误差”来计算模型的代价函数，但对于“逻辑回归”问题来说，若也采用平方误差函数，那么它的代价函数就如同下图所示，是一个非凸函数，任意一个局部极小值都可能让梯度下降法收敛。显然，“平方误差”不能作为“逻辑回归”的代价函数： <img src="http://img-md-js.linjsblog.top/img/202412291923619.png" alt="img"></p><p>于是定义下面这种形式的 <strong>负对数形式的损失函数</strong> $L( f_{\vec{w},b} (\vec{x}^{(i)}) , y^{(i)} )$ , 进而保证代价函数$J(\vec{w},b)$在逻辑回归中为凸函数，进而在后续可以使用梯度下降法。 $$ Logistic \ loss \ function: L( f_{\vec{w},b} (\vec{x}^{(i)}) , y^{(i)} ) &#x3D; \left{\begin{matrix} -log(f_{\vec{w},b} (\vec{x}^{(i)})), \ y^{(i)} &#x3D; 1 \ \ -log(1- f_{\vec{w},b} (\vec{x}^{(i)}) ), \ y^{(i)} &#x3D; 0 \end{matrix}\right. $$</p><blockquote><p>$L( f_{\vec{x},b} (\vec{x}^{(i)}) , y^{(i)} )$: <strong>损失函数</strong>，表示<strong>单个</strong>训练样本 $(\vec{x}^{(i)},y^{(i)})$ 的<strong>损失</strong>，在“线性回归”中，损失函数为 $\frac{1}{2} (f_{\vec w,b}(\vec x^{(i)}) - y^{(i)})^2 $</p><p>而在<strong>逻辑回归</strong>中 ， 损失函数如上面的公式所示</p><p>预测模型$0&lt;f_{\vec w,b}(\vec x^{(i)}) &lt; 1$</p></blockquote><p>可知<strong>逻辑回归代价函数</strong>（cost function）如下所示 $$ logistic \ cost \ function &#x3D; J(\vec w,b) &#x3D; \frac{1}{m} \sum_{i&#x3D;1}^{m} L( f_{\vec w,b} (\vec{x}^{(i)}) , y^{(i)} ) $$</p><ol><li><p>当训练数据 $y^{(i)} &#x3D; 1$时，如下图，预测值$f_{\vec w,b}(\vec x^{(i)})$ 越接近1，损失值越小甚至趋于0；越远离1，损失函数越大，并且损失的增长速度越来越快，甚至趋于无穷$∞$<img src="http://img-md-js.linjsblog.top/img/202412291953038.png" alt="img"></p></li><li><p>当训练数据 $y^{(i)} &#x3D; 0$时，如下图，预测值$f_{\vec w,b}(\vec x^{(i)})$ 越接近0，损失值越小甚至趋于0；越远离0，损失函数越大，并且损失的增长速度越来越快，甚至趋于无穷$∞$</p><p><img src="http://img-md-js.linjsblog.top/img/202412291959912.png" alt="img"></p></li></ol><h3 id="简化逻辑回归代价函数"><a href="#简化逻辑回归代价函数" class="headerlink" title="简化逻辑回归代价函数"></a>简化逻辑回归代价函数</h3><p><img src="http://img-md-js.linjsblog.top/img/202412292037205.png" alt="image-20241229203715069"></p><p><img src="http://img-md-js.linjsblog.top/img/202412292038865.png" alt="image-20241229203834729"></p><p>上述“代价函数”使用了统计学中“最大似然估计(maximum likehood estimation)”的原理。这只是个特定的代价函数，当然还有其他<strong>无数种代价函数</strong>。</p><h2 id="3-实现梯度下降"><a href="#3-实现梯度下降" class="headerlink" title="3 实现梯度下降"></a>3 实现梯度下降</h2><p>于是，对上一节给出的“代价函数”进行梯度下降，我们便可以完成整个“逻辑回归”，进而找到最合适的参数$ \vec{w}$和$b$。注意，“逻辑回归”中梯度下降法的表达式仍然和“线性回归”一样(计算上的巧合)：</p><p><img src="http://img-md-js.linjsblog.top/img/202412292246937.png" alt="image-20241229224606798"></p><p>推导过程如下： <img src="http://img-md-js.linjsblog.top/img/202412292247833.jpg" alt="59abef9b1909e9fae50ab4d2fc291c9"></p><p>逻辑回归的梯度下降过程：代码见吴恩达机器学习课程资料：C1_W3_Lab06_Gradient_Descent_Soln</p><p><img src="http://img-md-js.linjsblog.top/img/202412292326978.gif" alt="img"></p><h2 id="4-过拟合和正则化"><a href="#4-过拟合和正则化" class="headerlink" title="4 过拟合和正则化"></a>4 过拟合和正则化</h2><h3 id="4-1-过拟合"><a href="#4-1-过拟合" class="headerlink" title="4-1 过拟合"></a>4-1 过拟合</h3><p>现在已经学完“<strong>线性回归</strong>”和“<strong>逻辑回归</strong>”了，并且也介绍了“_学习曲线_”、“_向量化_”、“_特征缩放_”等一系列加速算法的方法。但是当梯度下降法迭代完成后，还有一类特殊的情况没有介绍，那就是“**过拟合(overfitting)<strong>”和“</strong>欠拟合(underfitting)<strong>”。本节将介绍这两个概念，并介绍解决这类问题的方法——“</strong>正则化(regularization)**”。</p><blockquote><p>注：“<strong>Underfit</strong>”和“<strong>High bias</strong>”都表示欠拟合；“<strong>Overfit</strong>”和“<strong>High variance</strong>”都表示过拟合。</p></blockquote><p>下面给出了“房价预测”、“肿瘤分类”两种问题中的“过拟合&#x2F;欠拟合”情况</p><p><img src="http://img-md-js.linjsblog.top/img/202412301347007.png" alt="img"></p><blockquote><p>图源：吴恩达机器学习课程 <a href="https://www.coursera.org/specializations/machine-learning-introduction">https://www.coursera.org/specializations/machine-learning-introduction</a></p></blockquote><ul><li><strong>欠拟合&#x2F;高偏差</strong>：特征太少，甚至都不能很好的拟合训练集。“高偏差”有两层含义，一方面是拟合线和训练集的偏差很大；另一方面是因为我们先入为主的使用直线拟合，这本身与实际情况就是一种很大的偏差。</li><li><strong>just right</strong>：恰到好处！没有特别的术语描述这种情况。但即使对于一个全新的输入，也可以给出恰当的输出，于是称这样的模型具有很好的“泛化(generazilization)”特性。</li><li><strong>过拟合&#x2F;高方差</strong>：有太多的特征，可以完美的拟合数据集。但对于全新的输入，并不能给出恰当的输出。甚至训练集稍微变化一点点，都会拟合出完全不一样的曲线，也就是“高方差”。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202412301349965.png" alt="img"></p><ul><li><strong>欠拟合&#x2F;高偏差</strong>：决策边界是一条直线，看起来还行，但显然没有很好的学习到训练集。</li><li><strong>just right</strong>：决策边界是椭圆或椭圆的一部分，较好的拟合了数据，虽然并不是完美符合所有的训练数据。</li><li><strong>过拟合&#x2F;高方差</strong>：决策边界非常扭曲，以图完美符合所有的训练数据，但显然并不具有泛化特性。</li></ul><h3 id="4-2-解决过拟合"><a href="#4-2-解决过拟合" class="headerlink" title="4-2 解决过拟合"></a>4-2 解决过拟合</h3><p>现在先只介绍如何解决过拟合，后续课程会介绍如何避免算法出错，并且介绍用于识别 欠拟合&#x2F;过拟合 的工具</p><ol><li><strong>扩大训练集</strong>：此时即使有很多特征，相比于训练集很小时，其拟合曲线也会相对平滑。缺点是不一定能获取更多的训练数据。 减少特征数：也称为“特征选择”。“特征选择”除了靠直觉，在Course2中也会介绍一种自动选择特征的方法。缺点是有可能会丢弃有用特征。</li><li><strong>减少特征数</strong>：也称为“特征选择”，选择出你认为最相关的一组特征，缺点是有可能会丢弃有用特征 。“特征选择”除了靠直觉，在Course2中也会介绍一种自动选择特征的方法。</li><li>**正则化(regularization)**：保留所有的特征，但对于某个很大的特征（幂次很高）x_j，减小其参数w_j（通常不会调整参数b)，这是一项非常有用的技术，可以用于训练学习算法，特别是神经网络。</li></ol><p><img src="http://img-md-js.linjsblog.top/img/202412301401783.png" alt="img"></p><p>注意：新版本sklearn如果出现type error 参数错误和需要修改下面的plt_overfit代码，</p><p><img src="http://img-md-js.linjsblog.top/img/202412301508701.png" alt="image-20241230150843581"></p><p>参数penalty是python None而不是字符串’none’，</p><p><img src="http://img-md-js.linjsblog.top/img/202412301510551.png" alt="image-20241230151011427"></p><p>normalize 参数已经在新版本被移除</p><h3 id="4-3-正则化"><a href="#4-3-正则化" class="headerlink" title="4-3 正则化"></a>4-3 正则化</h3><p>本节将具体介绍如何进行“正则化”。将会改进代价函数，来将其应用于“正则化”的本质就是改进代价函数，添加新的“**正则项(regularization term)**”，用于控制参数的大小： $$ Modified \ cost \ fuction: \min_{\vec w,b} J(\vec w,b)&#x3D; \underbrace{\frac{1}{m} \sum_{i&#x3D;1}^{m}L(f_{\vec w,b}(\vec x^{(i)}),y^{(i)})}<em>{\text{orginal cost}} \ + \ \underbrace{\frac{\lambda}{2m} \sum_{i&#x3D;1}^{m} w_j^2 }</em>{\text{regularization term}}</p><ul><li>\underbrace{\frac{\lambda}{2m} \sum_{i&#x3D;1}^{m}b^2}_{\text{no use}} $$</li></ul><hr><blockquote><ul><li><p>$\lambda$: 正则化参数(regularization parameter); λ&#x3D;0时，没有正则化，此时模型会尽可能完美拟合数据（也可能会过拟合）；随着$\lambda$增大，所有的$w_j$都会减少, 但 $\lambda$ 过大时，曲线会过于平滑，就会“欠拟合”。所以 $ \lambda $ 算是在平衡 “数据拟合” 和 “曲线平滑” 这两个目标。</p></li><li><p>$\frac{\lambda}{2m} \sum_{i&#x3D;1}^{m} w_j^2$ : 正则项(regularization term)。分母中的 “m” 是为了消除样本个数对于正则化效果的影响，而由于参数是平方项，分母中的 “2 ” 则是为了使代价函数偏导更加简洁。</p></li><li><p>$\frac{\lambda}{2m} \sum_{i&#x3D;1}^{m}b^2$ : 有些工程师会在代价函数后加上对参数 b 的惩罚项，但实际上并不会有什么帮助。</p></li></ul></blockquote><p>可见“正则化”主要用于 <strong>解决“过拟合”</strong>，其作用是 使 <strong>所有</strong> 参数 <strong>同时</strong> 增大或减小，但不同参数的变化速度不同。相比于范围较小的特征，<strong>“正则化”对于范围较大的特征的参数影响更大</strong>，也就起到了调节曲线平滑程度的作用。</p><h3 id="4-4-用于线性回归的正则化方法"><a href="#4-4-用于线性回归的正则化方法" class="headerlink" title="4-4 用于线性回归的正则化方法"></a>4-4 用于线性回归的正则化方法</h3><p>$Linear \ regression \ model: f_{\mathbf{w},b}(\mathbf{x}^{(i)}) &#x3D; \mathbf{w} \cdot \mathbf{x}^{(i)} + b$</p><p>$Linear \ cost \ function: J(\mathbf{w},b) &#x3D; \frac{1}{2m} \sum\limits_{i &#x3D; 0}^{m-1} (f_{\mathbf{w},b}(\mathbf{x}^{(i)}) - y^{(i)})^2 + \frac{\lambda}{2m} \sum_{j&#x3D;0}^{n-1} w_j^2$</p><p>梯度下降</p><p>$$\begin{align_} &amp;\text{repeat until convergence:} \; \lbrace \ &amp; \; \; \;w_j &#x3D; w_j - \alpha \frac{\partial J(\mathbf{w},b)}{\partial w_j} \tag{1} \; &amp; \text{for j :&#x3D; 0..n-1} \ &amp; \; \; \; \; \;b &#x3D; b - \alpha \frac{\partial J(\mathbf{w},b)}{\partial b} \ &amp;\rbrace update \ simultaneous \end{align_}$$</p><p>$$\begin{align_} \frac{\partial J(\mathbf{w},b)}{\partial w_j} &amp;&#x3D; \frac{1}{m} \sum\limits_{i &#x3D; 0}^{m-1} (f_{\mathbf{w},b}(\mathbf{x}^{(i)}) - y^{(i)})x_{j}^{(i)} + \frac{\lambda}{m} w_j \tag{2} \ \frac{\partial J(\mathbf{w},b)}{\partial b} &amp;&#x3D; \frac{1}{m} \sum\limits_{i &#x3D; 0}^{m-1} (f_{\mathbf{w},b}(\mathbf{x}^{(i)}) - y^{(i)}) \tag{3} \end{align_}$$</p><p>综上</p><p><img src="http://img-md-js.linjsblog.top/img/202412301721935.png" alt="image-20241230172142771"></p><p>下面来进一步分析参数的更新过程(同样也适用于“逻辑回归”中的正则方法)：</p><p>$$ w_j &#x3D; w_j - \frac{\alpha}{m} \left( \sum_{i&#x3D;1}^{m} \left[ (f_{\tilde{w}, b}(\vec{x}^{(i)}) - y^{(i)}) \cdot x_j^{(i)} \right] + \lambda w_j \right) $$</p><p>$$ &#x3D; \underbrace{\left(1 - \alpha \frac{\lambda}{m}\right) w_j}<em>{\text{shrink } w_j} - \underbrace{\frac{\alpha}{m} \sum</em>{i&#x3D;1}^{m} \left[ (f_{\tilde{w}, b}(\vec{x}^{(i)}) - y^{(i)}) \cdot x_j^{(i)} \right]}_{\text{usual update}} $$</p><p><img src="http://img-md-js.linjsblog.top/img/202412301745797.png" alt="image-20241230174507605"></p><blockquote><p>第一项：添加正则化后，会在每次迭代过程中，都使参数 $w_j$乘以一个略小于1的常数。</p><p>第二项：对于非正则化线性回归，正常的梯度下降法更新过程。</p></blockquote><h3 id="4-5-用于逻辑回归的正则化方法"><a href="#4-5-用于逻辑回归的正则化方法" class="headerlink" title="4-5 用于逻辑回归的正则化方法"></a>4-5 用于逻辑回归的正则化方法</h3><p>我们在先前的课程中学到逻辑回归的代价函数如下 :</p><p>$$ J(\mathbf{w},b) &#x3D; \frac{1}{m}\sum_{i&#x3D;0}^{m-1} \left[ (-y^{(i)} \log\left(f_{\mathbf{w},b}\left( \mathbf{x}^{(i)} \right) \right) - \left( 1 - y^{(i)}\right) \log \left( 1 - f_{\mathbf{w},b}\left( \mathbf{x}^{(i)} \right) \right)\right] $$</p><p>在这里逻辑回归模型:</p><p>$$ f_{\mathbf{w},b}(\mathbf{x}^{(i)}) &#x3D; sigmoid(\mathbf{w} \cdot \mathbf{x}^{(i)} + b) \tag{4} $$</p><p>因此，对于正则化的逻辑回归： $$J(\mathbf{w},b) &#x3D; \frac{1}{m} \sum_{i&#x3D;0}^{m-1} \left[ -y^{(i)} \log\left(f_{\mathbf{w},b}\left( \mathbf{x}^{(i)} \right) \right) - \left( 1 - y^{(i)}\right) \log \left( 1 - f_{\mathbf{w},b}\left( \mathbf{x}^{(i)} \right) \right) \right] + \frac{\lambda}{2m} \sum_{j&#x3D;0}^{n-1} w_j^2 \tag{3}$$</p><p>梯度下降和上节高度相似：</p><p><img src="http://img-md-js.linjsblog.top/img/202412302004461.png" alt="image-20241230200435245"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> machine learning </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scikit-Learn 中的`SGDRegressor`、`StandardScaler` 和 `LinearRegression`</title>
      <link href="/2024/12/28/scikit-learn-%E4%B8%AD%E7%9A%84sgdregressor%E3%80%81standardscaler-%E5%92%8C-linearregression/"/>
      <url>/2024/12/28/scikit-learn-%E4%B8%AD%E7%9A%84sgdregressor%E3%80%81standardscaler-%E5%92%8C-linearregression/</url>
      
        <content type="html"><![CDATA[<h2 id="Scikit-Learn-中的SGDRegressor、StandardScaler-和-LinearRegression"><a href="#Scikit-Learn-中的SGDRegressor、StandardScaler-和-LinearRegression" class="headerlink" title="Scikit-Learn 中的SGDRegressor、StandardScaler 和 LinearRegression"></a>Scikit-Learn 中的<code>SGDRegressor</code>、<code>StandardScaler</code> 和 <code>LinearRegression</code></h2><p><code>SGDRegressor</code>、<code>StandardScaler</code> 和 <code>LinearRegression</code> 是 Scikit-Learn 中用于不同目的的三个类。它们各自有不同的特性和用途，但有时会在同一个机器学习工作流中一起使用。下面我将详细解释这三个类的区别及其应用场景。</p><h3 id="1-LinearRegression"><a href="#1-LinearRegression" class="headerlink" title="1. LinearRegression"></a>1. <code>LinearRegression</code></h3><p><strong>特性：</strong></p><ul><li><strong>实现方法</strong>：<code>LinearRegression</code> 使用的是普通的最小二乘法（Ordinary Least Squares, OLS）来拟合线性模型。它直接求解正规方程，找到使残差平方和最小化的参数。</li><li><strong>速度与规模</strong>：适用于中小型数据集，因为它需要计算矩阵的逆，这在大规模数据集上可能会变得非常慢或不可行。</li><li><strong>正则化</strong>：默认情况下不包含正则化项，但如果需要 L2 正则化，可以使用 <code>Ridge</code> 回归，L1 正则化则可以使用 <code>Lasso</code>。</li></ul><p><strong>适用场景：</strong></p><ul><li>当数据集较小且特征数量适中时，适合使用 <code>LinearRegression</code>。</li><li>数据集中没有过多的噪声或异常值，因为 OLS 对这些敏感。</li></ul><h3 id="2-SGDRegressor"><a href="#2-SGDRegressor" class="headerlink" title="2. SGDRegressor"></a>2. <code>SGDRegressor</code></h3><p><strong>特性：</strong></p><ul><li><strong>实现方法</strong>：<code>SGDRegressor</code> 使用随机梯度下降（Stochastic Gradient Descent, SGD）来优化线性回归模型的参数。它每次迭代只用一个样本来更新权重，因此对于大规模数据集效率较高。</li><li><strong>速度与规模</strong>：非常适合处理大型数据集，因为它的内存占用低，并且可以在线更新模型参数。</li><li><strong>正则化</strong>：支持多种正则化选项（如 L1、L2 或弹性网），并且可以通过调整学习率等超参数来控制训练过程。</li></ul><p><strong>适用场景：</strong></p><ul><li>处理非常大的数据集时，<code>SGDRegressor</code> 是更好的选择。</li><li>当您希望引入正则化以防止过拟合时，<code>SGDRegressor</code> 提供了灵活的选择。</li><li>在流式数据环境中，<code>SGDRegressor</code> 可以逐步更新模型而无需重新训练整个数据集。</li></ul><h3 id="3-StandardScaler"><a href="#3-StandardScaler" class="headerlink" title="3. StandardScaler"></a>3. <code>StandardScaler</code></h3><p><strong>特性：</strong></p><ul><li><strong>功能</strong>：<code>StandardScaler</code> 并不是一个模型，而是一个预处理器，用于标准化特征数据。它通过减去均值并除以标准差的方式，使每个特征具有零均值和单位方差。</li><li><strong>作用</strong>：标准化是许多机器学习算法的一个重要预处理步骤，尤其是那些对输入特征的尺度敏感的算法（如基于距离的算法或使用梯度下降进行优化的模型）。</li></ul><p><strong>适用场景：</strong></p><ul><li>在使用任何对特征尺度敏感的机器学习算法之前，建议先使用 <code>StandardScaler</code> 对数据进行标准化。</li><li>特别是在使用 <code>SGDRegressor</code> 时，标准化可以帮助加速收敛，因为梯度下降更倾向于在特征尺度一致的情况下表现良好。</li></ul><h3 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h3><p>特性&#x2F;类</p><p><code>LinearRegression</code></p><p><code>SGDRegressor</code></p><p><code>StandardScaler</code></p><p><strong>主要用途</strong></p><p>拟合线性模型</p><p>拟合线性模型</p><p>标准化特征数据</p><p><strong>实现方法</strong></p><p>最小二乘法</p><p>随机梯度下降</p><p>均值和标准差变换</p><p><strong>适用数据规模</strong></p><p>中小型数据集</p><p>大型数据集</p><p>任何规模的数据</p><p><strong>正则化支持</strong></p><p>不直接支持</p><p>支持</p><p>不适用</p><p><strong>速度与效率</strong></p><p>较慢（对于大矩阵）</p><p>快速（特别是大数据）</p><p>预处理步骤</p><h3 id="结合使用"><a href="#结合使用" class="headerlink" title="结合使用"></a>结合使用</h3><p>通常，在实际应用中，您可能会结合使用 <code>StandardScaler</code> 和 <code>SGDRegressor</code> 或 <code>LinearRegression</code>。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token punctuation">,</span> SGDRegressor<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> make_pipeline<span class="token comment"># 创建预处理和建模管道</span>pipeline_lr <span class="token operator">=</span> make_pipeline<span class="token punctuation">(</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pipeline_sgd <span class="token operator">=</span> make_pipeline<span class="token punctuation">(</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SGDRegressor<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用管道拟合模型</span>pipeline_lr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>pipeline_sgd<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token comment"># 预测</span>y_pred_lr <span class="token operator">=</span> pipeline_lr<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>y_pred_sgd <span class="token operator">=</span> pipeline_sgd<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做的好处是可以确保特征被正确地标准化，并且模型可以直接在这个标准化后的数据上进行训练和预测。！</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scikit-Learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/2024/12/28/527/"/>
      <url>/2024/12/28/527/</url>
      
        <content type="html"><![CDATA[<p>$$ Modified \ cost \ fuction: \min_{\vec w,b} J(\vec w,b)&#x3D; \underbrace{\frac{1}{m} \sum_{i&#x3D;1}^{m}L(f_{\vec w,b}(\vec x^{(i)}),y^{(i)})}<em>{\text{orginal cost}} \ + \ \underbrace{\frac{\lambda}{2m} \sum_{i&#x3D;1}^{m} w_j^2 }</em>{\text{regularization term}}</p><ul><li>\underbrace{\frac{\lambda}{2m} \sum_{i&#x3D;1}^{m}b^2}_{\text{no use}} $$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>吴恩达机器学习week2</title>
      <link href="/2024/12/28/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0week2/"/>
      <url>/2024/12/28/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0week2/</url>
      
        <content type="html"><![CDATA[<h1 id="吴恩达机器学习week2"><a href="#吴恩达机器学习week2" class="headerlink" title="吴恩达机器学习week2"></a>吴恩达机器学习week2</h1><p>对于数学公式块无法显示的问题：目前blogger还在寻找方法解决：请先移步至csdn:<a href="https://blog.csdn.net/linjinshu1/article/details/144791222">https://blog.csdn.net/linjinshu1/article/details/144791222</a> 带来不便请谅解</p><h2 id="1-向量化和多元线性回归"><a href="#1-向量化和多元线性回归" class="headerlink" title="1 向量化和多元线性回归"></a>1 向量化和多元线性回归</h2><p>在“单变量线性回归”的基础上，我们将继续拓展到“多元线性回归”（第1节）、“多项式回归”（第3节），并介绍加速梯度下降法收敛的技巧（第2节）。</p><h3 id="1-1-多维特征"><a href="#1-1-多维特征" class="headerlink" title="1-1 多维特征"></a>1-1 多维特征</h3><p><img src="http://img-md-js.linjsblog.top/img/202412261259707.png" alt="image-20241226125631484"></p><p>首先将单个特征拓展到多个特征。下面是机器学习术语：</p><ul><li>$m$: 训练样本的总数</li><li>$n$: 表示输入特征(variables or features)的总数</li><li>$\vec X$ ：全部的输入变量(特征)(variables or features) 是一个<strong>二维向量</strong>（矩阵），每一行表示一个样本，每一列表示所有样本的单个特征（变量）</li><li>$\vec x_{j}$ ：表示第 j 个特征概念（<strong>一维向量</strong>），如Number of bedrooms<strong>列</strong>的所有值，j 的取值范围 j &#x3D; 1,2,…,n</li><li>$x_{j}^{(i)} $: 第 i 个训练样本的第 j 个特征，是 <strong>单个值</strong> 如图中，$ x_{1}^{(2)} &#x3D; 1416 $。</li><li>$y^{(i)}$: 第i个训练样本的目标值，是单个值</li><li>$\vec Y$：全部的训练样本的特征值，是一维向量</li></ul><p>注：若无特殊说明，所有的一维向量都默认为列向量。</p><p>概念区分：</p><ul><li>单变量线性回归(univariate linear regression)：只有单个特征的线性回归模型。</li><li>多元线性回归(multiple linear regression)：具有多维特征的线性回归模型。</li><li>multivariate regression：不是上述“多元回归”！另有别的意思，后面介绍。</li></ul><p> 如上图所示，将“房价预测”中的输入特征数量增加为4个：输入特征：房屋面积、卧室数量、房屋层数、房屋年龄。于是显然其线性回归模型也将从$f_{w,b} &#x3D; wx + b$ 拓展为下面的向量形式：</p><p>$$ f_{\vec w,b}(\vec x) &#x3D; w_1x_1 + w_2x_2 + w_3x_3 + w_4x_4 + b \ &#x3D;\sum_{j&#x3D;1}^n w_ix_i + b \ &#x3D;\vec w \cdot \vec x + b $$</p><blockquote><p>$\vec w$ &#x3D; $[w_1,w_2,…,w_n]^T$: 表示参数的（列）向量，$w_i$ 表示当前特征对房屋价格的影响</p><p>b： 常数项参数。可以理解为房屋的基价(base price)</p><p>$\vec x &#x3D; [x_1,x_2,…,x_n]^T$ :表示<strong>单个样本</strong>的特征(<strong>列</strong>)向量</p><p>$\vec w \cdot \vec x$ : 表示两个向量的点积</p></blockquote><h3 id="1-2-向量化"><a href="#1-2-向量化" class="headerlink" title="1-2 向量化"></a>1-2 向量化</h3><p>简单来说，所谓“向量化”就是将分散的数字绑在一起进行处理。虽然概念很简单，但是“向量化”对于机器学习来说非常重要，因为它可以使<strong>模型更简洁</strong>、<strong>代码更简洁</strong>，并且也可以<strong>加速代码运行速度</strong>。比如下图给出了三种书写求和公式的方法。可以发现，使用向量形式的模型表达式最简洁、代码最少(一行)：</p><p><img src="http://img-md-js.linjsblog.top/img/202412262046589.png" alt="image-20241226204617525"></p><blockquote><p>一个一个写：很麻烦，耗时耗力，也不会加快代码计算。 for循环：每次只能计算单个乘法并相加，n很大时非常耗时。 向量相乘：形式简洁、运行更快。这是因为 numpy.dot()可以并行计算所有乘法，再进行相加。甚至某些内置算法还会使用GPU加速运算。 注：Optional Lab C1_W2_Lab01_Python_Numpy_Vectorization_Soln介绍了一些NumPy的语法。</p></blockquote><p>并且梯度下降法的迭代计算中，使用向量更新参数也会非常简洁。所以<strong>机器学习中尽量使用向量化代码</strong>。</p><h3 id="1-3-用于线性回归的梯度下降法"><a href="#1-3-用于线性回归的梯度下降法" class="headerlink" title="1-3 用于线性回归的梯度下降法"></a>1-3 用于线性回归的梯度下降法</h3><p>有了“向量化”的铺垫，本节将前面的单变量线性回归问题扩展到多元线性回归。首先使用“向量”重写模型，然后也就可以写出<strong>梯度下降法</strong>的“向量”形式，进而迭代计算出模型参数： $$ Model: f_{\vec w,b}(\vec x) &#x3D; \vec w \cdot \vec x + b \ Cost function: \min_{\vec w,b} J(\vec w,b) &#x3D; \frac{1}{2m} \sum_{i &#x3D; 0}^{m-1} (f_{\vec w,b}(\vec x^{(i)}) - y^{i})^2 \ $$</p><p>$$ Gredient \ descent \ repeat \ until \ convergence:\ w_j &#x3D; w_j - \alpha \frac{\partial}{\partial w_j}J(\vec w,b) \ b &#x3D; b - \alpha \frac{\partial}{\partial b}J(\vec w,b) $$</p><p>其中： $$ \begin{align} \frac{\partial J(\mathbf{w},b)}{\partial w_j} &amp;&#x3D; \frac{1}{m} \sum\limits_{i &#x3D; 0}^{m-1} (f_{\mathbf{w},b}(\mathbf{x}^{(i)}) - y^{(i)})x_{j}^{(i)} \ \frac{\partial J(\mathbf{w},b)}{\partial b} &amp;&#x3D; \frac{1}{m} \sum\limits_{i &#x3D; 0}^{m-1} (f_{\mathbf{w},b}(\mathbf{x}^{(i)}) - y^{(i)}) \end{align} $$</p><blockquote><p>模型中$\vec x$ 表示单个变量的所有特征，是一维向量</p><p>$f_{\vec w,b}(\vec x^{(i)})$ 是一个值，$y^{(i)}$是一个值</p></blockquote><p>除了梯度下降法，还有一类求解模型参数的方法——**正规方程法(Normal rquation method)**。此方法利用线性代数的知识，直接令代价函数的梯度 $\frac{\partial}{\partial w_j}J(\vec w,b) &#x3D; 0$ , 便可以一步求解出代价函数极小点所对应的参数值：$\vec w &#x3D; (\vec X^T \vec X)^{-1} \vec X^T \vec Y$ 见“<a href="https://zhuanlan.zhihu.com/p/60719445">详解正规方程</a>”。但是这种方法有两个缺点：</p><blockquote><ol><li>适用面小：仅适用于线性拟合，无法应用于其他方法，比如下周要学的“逻辑回归算法(logistic regression algorithm)”或者神经网络(Course2)。</li><li>计算规模不能太大：如何特征值数量很大，矩阵的逆等求解非常慢。</li></ol></blockquote><p>正规方程法通常会包含在机器学习函数库中，我们无需关心具体的计算过程。对于大多数机器学习算法来说，<strong>梯度下降法仍然是推荐的方法</strong>。</p><h2 id="2-使梯度下降法更快收敛的技巧"><a href="#2-使梯度下降法更快收敛的技巧" class="headerlink" title="2 使梯度下降法更快收敛的技巧"></a>2 使梯度下降法更快收敛的技巧</h2><h3 id="2-1-特征缩放"><a href="#2-1-特征缩放" class="headerlink" title="2-1 特征缩放"></a>2-1 特征缩放</h3><p><strong>特征缩放(feature scaling)可以使梯度下降法更快收敛</strong>。这主要是因为&#x3D;&#x3D;不同特征的取值范围有很大不同，但所有特征所对应的参数的学习率是一致的&#x3D;&#x3D;。这就导致取值范围较小的特征的参数，会“跟不上”取值范围较大的特征的参数变化。比如我们来看看“特征值大小”和其关联的“参数大小”的关系，首先将“房价预测”的问题简化成两个特征： <img src="http://img-md-js.linjsblog.top/img/202412271444330.png" alt="img"></p><blockquote><p>$x_1$: 房屋面积，范围是300<del>2000平方英尺。 $x_2$: 卧室数量，范围是0</del>5。 参数选择：显然取值范围更大的$x_1$ 影响更大。</p><p>$w_1&#x3D;50,w_2&#x3D;0.1,b&#x3D;50$: 计算出来的房屋价格是 $100050.5 k$显然与实际的 $500k完全不符。</p><p>$w_1 &#x3D; 0.1 , w_2 &#x3D; 50 , b &#x3D; 50$: 计算出来的房屋价格是 $500 k，正好等于房屋实际价格。</p></blockquote><p>于是，便考虑将 <strong>特征值归一化</strong>，使所有特征值的取值范围大致相同，这样就不会影响参数的迭代计算了。如下图便给出了进行 <strong>特征缩放</strong> 前后的对比：</p><p><img src="http://img-md-js.linjsblog.top/img/202412271517462.png" alt="img"></p><blockquote><p>左两图是训练样本散点图；右两图是代价函数等高图。上两图对应特征缩放前；下两图对应特征缩放后。</p><p>特征缩放前：散点图呈现条形，等高图呈极窄的椭圆形。这是因为对于范围较大的特征值($x_1$)所对应的参数$w_1$，一点微小的改变就会导致代价函数剧烈变化，进而使得等高图呈椭圆状。在使用梯度下降法的时候，由于学习率一样，每走一小步，就会导致代价函数在$w_2$方向变化不多、但在$w_1$ 方向急剧变化，于是就会“反复横跳”，增加迭代次数和计算量，甚至不能收敛。 特征缩放后：散点图分布较为均匀，并且等高图呈圆形。梯度下降法可以径直朝最小值迭代，减少迭代次数、更快的得到结果。</p></blockquote><p>好，现在我们知道进行 <strong>特征缩放</strong> 很有必要，那具体如何进行“特征缩放”，来使得所有特征都有相近的范围大小呢？主要有下面三种方法，并给出了第三种方法“Z-score归一化”的特征缩放效果：</p><ol><li>除以最大值：所有特征除以各自的范围最大值，使得特征值范围都在0~1之间。于是$0.15 \leq \frac {x_1}{2000} \leq 1$、 $0 \leq \frac{x_2}{5} \leq 1$</li><li>均值归一化(Mean normalization)：使得特征值范围大致为-1~1。假设$x_1$ 的平均值为 $\mu_1 &#x3D;600、x_2的平均值为 \mu_2 &#x3D; 2.3 \ ，于是-0.18 \leq \frac{x_1-\mu_1}{2000-300} \leq 0.82、-0.46 \leq \frac{x_2 - \mu_2}{5-0} \leq 0.54$</li><li>Z-score归一化(Z-score normalization)【推荐】：使得特征值服从标准正态分布。假设$x_1$的平均值和标准差分别为$\mu_1 &#x3D; 600，\sigma_1 &#x3D; 450 ，x_2 $ 的平均值和标准差分别为$\mu_2 &#x3D; 2.3，\sigma_2 &#x3D; 1.4 $ 于是 $-0.67 \leq \frac{x_1 - \mu_1}{\sigma_1} \leq 3.1 $ , $-1.6 \leq \frac{x_2- \mu_2}{\sigma_2 } \leq 1.9 $</li></ol><blockquote><ol><li><p>注：Z-score归一化的合理性在于自然界中大部分数据都是服从正态分布的。</p></li><li><p>均值: $\mu_j &#x3D; \frac{1}{m} \sum_{i&#x3D;0}^{m-1} x_j^{(i)} , j&#x3D;0,1,2…n$</p></li><li><p>方差：$\sigma_j^2 &#x3D; \frac{1}{m} \sum_{i&#x3D;0}^{m-1} (x_j^{(i)} - \mu_j)^2 , j&#x3D;0,1…,n$</p></li><li><p>标准差：$\sigma_j &#x3D; \sqrt{\sigma_j^2} \ , \ j&#x3D;0,1,…n$</p></li></ol></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202412272115426.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202412272116297.png" alt="img"></p><p>上面三个图的横纵坐标分别为两个特征：房屋面积、房屋年龄。可以看到特征缩放后，样本散点图分布的更加均匀。 下面两个图的横纵坐标同样是两个特征：房屋面积、卧室数量。可以看到特征缩放后，等高线图趋近圆形。 图片来自：C1_W2_Lab03_Feature_Scaling_and_Learning_Rate_Soln：</p><p>最后要说明一点，特征缩放后，只要所有特征值的范围在一个数量级就都可以接受，但若数量级明显不对等就需要 <strong>重新缩放</strong>。</p><h3 id="2-2-判断梯度下降是否收敛"><a href="#2-2-判断梯度下降是否收敛" class="headerlink" title="2-2 判断梯度下降是否收敛"></a>2-2 判断梯度下降是否收敛</h3><p>本节主要介绍 横坐标为迭代次数 的“<strong>学习曲线</strong>(<strong>learning carve</strong>)”。学习曲线可以帮助我们判断梯度下降法 <strong>是否正在收敛</strong>，或者判断梯度下降法 <strong>是否已经收敛</strong>。如下图给出了正常的学习曲线，</p><p><img src="http://img-md-js.linjsblog.top/img/202412280034032.png" alt="img"></p><blockquote><p>正常情况：每次迭代后，代价函数都应该下降。直到某次迭代后，代价函数几乎不再下降，就认为是收敛。 算法没有收敛：若某次迭代后，代价函数变大，则算法没有收敛，可能意味着学习率$\alpha $过大。 算法已经收敛：上图中的红色段，可以看到代价函数几乎不再下降。 自动收敛测试(automatic convergence test)：若两次迭代之间，代价函数的减少值$\leq \varepsilon &#x3D; 10^{-3}$(自定义)，即可认为收敛。但是通$\epsilon$ 的选取很困难，所以还是建议使用上图所示的学习曲线进行判断。</p></blockquote><p>注意不同的算法或问题，其收敛的迭代次数都不同，有些问题可能几十次就收敛，有些问题可能需要上万次才能收敛。由于很难提前知道梯度下降法是否会收敛，所以可以根据这个学习曲线来进行判断。</p><h3 id="2-3-如何设置学习率"><a href="#2-3-如何设置学习率" class="headerlink" title="2-3 如何设置学习率"></a>2-3 如何设置学习率</h3><p>之前提到，学习率太小，收敛太慢；学习率太大，可能不会收敛。那如何选择合适的学习率呢？正确的做法是，迭代较小的次数，快速地、粗略地选出合适的学习率。具体的<strong>选择策略</strong>是从一个较小的学习率(如0.01)开始，逐渐增大，直到出现不收敛的情况。如下图所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202412280051978.png" alt="img"></p><ul><li>代价函数起伏不定：代码逻辑有bug(比如迭代方向写反)，或者学习率太大。</li><li>验证代码逻辑正常：当学习率很小时，代价函数会不断减小，即使很慢。</li></ul><h3 id="2-4-特征工程"><a href="#2-4-特征工程" class="headerlink" title="2-4 特征工程"></a>2-4 特征工程</h3><p>  最简单的特征工程就是“选择合适的特征”。比如下图中，原始特征应该为房子所在地块的长度(frontage)和宽度(depth)，但占地面积(frontage × depth)应该是更符合直观的特征，于是就利用两个原始特征创造出了新的特征。</p><p><img src="http://img-md-js.linjsblog.top/img/202412280055419.png" alt="img"></p><h3 id="2-6-多项式回归"><a href="#2-6-多项式回归" class="headerlink" title="2-6 多项式回归"></a>2-6 多项式回归</h3><p>  另一种特征工程就是<strong>对某个特征进行幂次</strong>，进而实现使用非直线来拟合数据，也就是“多项式回归(Polynomial Regression)”。比如给出下图中红叉所示的训练样本，显然用直线拟合并不符合直观，于是：</p><p>二次函数拟合：虽然前半段看起来很好，但是终归会下降，这不符合“面积越大，房子越贵”的常识。 三次函数拟合：符合直觉，但后面房价随面积快速上升。 开根号拟合：符合直觉，房价随着面积缓慢上升。 注：幂次越高，特征缩放就显得越重要，否则参数的为微小变化将引起代价函数的剧烈波动，很可能会导致算法无法收敛。</p><p><img src="http://img-md-js.linjsblog.top/img/202412280107353.png" alt="img"></p><p>在Course2中将介绍如何挑选不同的特征，现在只是明确用户可以挑选特征，并且使用“特征工程”和“多项式函数”可以拟合出曲线，来更加贴合样本。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>吴恩达机器学习课程笔记week1</title>
      <link href="/2024/12/28/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0week1/"/>
      <url>/2024/12/28/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0week1/</url>
      
        <content type="html"><![CDATA[<h1 id="吴恩达机器学习课程笔记week1"><a href="#吴恩达机器学习课程笔记week1" class="headerlink" title="吴恩达机器学习课程笔记week1"></a>吴恩达机器学习课程笔记week1</h1><p>对于数学公式块无法显示的问题：目前blogger还在寻找方法解决：请先移步至csdn:<a href="https://blog.csdn.net/linjinshu1/article/details/144791241">https://blog.csdn.net/linjinshu1/article/details/144791241</a> 带来不便请谅解</p><h2 id="1-机器学习应用"><a href="#1-机器学习应用" class="headerlink" title="1 机器学习应用"></a>1 机器学习应用</h2><ul><li><p>消费者应用领域：</p><ul><li>搜索引擎的排名机制。</li><li>社交软件为图片添加标签。</li><li>流媒体服务推荐机制，比如B站的“首页通知书”。</li><li>语音助手返回的答案，如问Siri附近的餐厅有哪些。</li><li>邮箱自动识别垃圾邮件。</li></ul></li><li><p>工业领域：</p><ul><li>优化风力涡轮机发电。</li><li>AI医学影像诊断。</li><li>Landing AI将计算机视觉应用到工厂中，帮助检查流水线产品质量等。</li></ul></li></ul><h2 id="2-机器学习简介"><a href="#2-机器学习简介" class="headerlink" title="2 机器学习简介"></a>2 机器学习简介</h2><h3 id="2-1-机器学习的定义"><a href="#2-1-机器学习的定义" class="headerlink" title="2-1 机器学习的定义"></a>2-1 机器学习的定义</h3><p><strong>“Field of study that gives computers ability to learn without being explicity programmed.” —Arthur Samuel(1959)</strong></p><p>本节课将学习很多机器学习算法，内容包括：</p><blockquote><ul><li>**有监督学习(Supervised learning)**：实际应用中，有监督学习使用最广泛，并取得了最快速的进步和创新。Course1、Course2聚焦于有监督学习。</li><li>**无监督学习(Unsupervised learning)**：Course3聚焦于无监督学习。</li><li>**强化学习(Reinforcement learning)**：由于应用没有前两者广泛，所以本课程没有简单介绍。</li><li>使用“学习算法”的实用建议（很重要）：“学习算法”本身只是一种工具，比工具本身更重要的是 如何正确使用这些工具。即使是某些大公司中最熟练的机器学习团队，可能也会因为最开始找错了算法方向而导致多年的成果付诸东流。所以本课程不仅会讲解机器学习算法，同时也会介绍最熟练的机器学习工程师是如何构建系统的，以及一些机器学习应用的最佳案例。</li><li>注：学习算法(Learning Algorithm)，是机器学习算法、深度学习算法等具备学习能力的算法的统称。</li></ul></blockquote><h3 id="2-2-有监督学习"><a href="#2-2-有监督学习" class="headerlink" title="2-2 有监督学习"></a>2-2 有监督学习</h3><p>“有监督学习”指的是学习从 输入 <em>x</em> (一个或多个) 映射到 输出 <em>y</em> 的算法。有监督学习算法的关键在于首先要提供正确的样本示例供算法学习，然后算法便可以针对未见过的输入，输出相应的预测结果。下面是一些有监督学习的在现实生活中的示例</p><ul><li>垃圾邮件过滤器：email –&gt; 垃圾邮件?(0&#x2F;1)</li><li>语音识别：语音 –&gt; 文本</li><li>机器翻译：英文 –&gt; 中文</li><li>广告投递：广告、用户信息 –&gt; 用户点击?(0&#x2F;1)</li><li>自动驾驶：图片、雷达信息 –&gt; 其他车辆位置</li><li>视觉检测：手机图片 –&gt; 有缺陷?(0&#x2F;1)</li></ul><p><strong>回归问题示例：房价预测</strong></p><p>  “房价预测”就是根据房子的面积计算价格。下图中的“红叉”就是预先提供的有正确映射关系的样本，“蓝色拟合线”就相当于算法学习输入样本，最后通过拟合线得到房价便是“预测”，这便是“有监督学习”的完整流程。注意到这个回归问题的输出(房价)可以是任意数字，于是便有无穷种可能。 <img src="http://img-md-js.linjsblog.top/img/202412231107016.png" alt="image-20241223110749793"></p><blockquote><p>直线拟合：根据拟合直线，可以预测房屋面积750feet^2^ 对应的价格大约为 $$150k$$。</p><p>曲线拟合：根据拟合曲线，可以预测房屋面积 750 feet^2^ 对应的价格大约为200k</p></blockquote><p><strong>分类问题示例：乳腺癌检测</strong></p><p>  乳腺癌检测问题就是根据输入的一系列信息，如肿瘤块的大小、患者年龄、肿瘤块的厚度、细胞大小的均匀性、细胞形状的均匀性等，来判断是否为恶性肿瘤(0表示良性&#x2F;1表示恶性)。下面给出“单输入的乳腺癌检测”、“两输入的乳腺癌检测”示意图：</p><p>单输入的乳腺癌检测：输入是“肿瘤的大小”，输出是“良性”、“恶性-类型1”、“恶性-类型2”。 两输入的乳腺癌检测：输入是“肿瘤的大小”、“患者年龄”，输出是“良性”、“恶性”。</p><p><img src="http://img-md-js.linjsblog.top/img/202412231120895.png" alt="image-20241223112035841"></p><p>​ 单输入的乳腺癌检测问题</p><p><img src="http://img-md-js.linjsblog.top/img/202412231120158.png" alt="image-20241223112057104"></p><p>​ 两输入的乳腺癌检测问题</p><h3 id="2-3-无监督学习"><a href="#2-3-无监督学习" class="headerlink" title="2-3 无监督学习"></a>2-3 无监督学习</h3><blockquote><p>无监督学习： Data only comes with inputs x, but not output labels y. Algorithm has to find <strong>structure</strong> in the data.</p></blockquote><p>在“有监督学习”之后，“无监督学习”也被广泛应用起来。“无监督学习”不是要找映射关系，而是想要从 没有标记的数据集 中发现一些有趣的东西，比如这个数据集中有什么 可能的模式或结构。无监督学习的主要类型有：</p><blockquote><p>聚类(Clustering)：将相似的数据点分成一组。</p><p>异常检测(Anomaly detection)：。有非常多的应用，比如在金融系统的诈骗检测中，异常时间、异常交易可能是欺诈。</p><p>降维(Dimensionality reduction)：在尽可能丢失少的信息的前提下，将大数据集压缩成小得多的数据集。</p></blockquote><p>Question: Of the following examples, which would you address using an unsupervised learning algorithm? × Given email labeled as spam&#x2F;not spam, learn a spam filter. √ Given a set of news articles found on the web, group them into sets of articles about the same story. √ Given a database of customer data, automatically discover market segments and group customers into different market segments. × Given a dataset of patients diagnosed as either having diabetes or not, learn to classify new patients as having diabetes or not.</p><p>知识点：有监督学习给数据和标签，重点在于对新输入预测出标签；无监督学习只给数据，重点在于自行分组。</p><p>下面给出“聚类”的3个示例，后续会再介绍“异常检测”和“降维”这两种无监督学习的示例：</p><p><strong>聚类算法示例1：新闻分类</strong>   “谷歌新闻”的任务就是将每天数十万的新闻进行聚类，找到提到相似词的文章并将其分组。很酷的是，聚类算法可以自己计算出哪些词暗示了这些文章属于同一个组，并且谷歌新闻的员工也没有事先告诉算法有哪些组。如下图所示，panda、twin、zoo都是相似的词，这些文章被归为一类。</p><p><img src="http://img-md-js.linjsblog.top/img/202412231359063.png" alt="image-20241223135945000"></p><p><strong>聚类算法示例2：基因分类</strong></p><p>  下图所示的基因图谱，每一列表示一个人的全部基因，每一行表示一种基因，不同的颜色表示该基因的活跃程度，这些基因包括瞳孔颜色、身高、不爱吃西蓝花&#x2F;包菜&#x2F;莴苣等。聚类算法仅根据这些基因数据，将人进行分组，进而找出“基因上很相似的人”。</p><p><img src="http://img-md-js.linjsblog.top/img/202412231400700.png" alt="img"></p><p><strong>聚类算法示例3：客户分群</strong></p><p>  还有一个很常见的聚类算法示例就是，根据客户信息数据库，将不同的客户划分进不同的细分市场，以便更有效的服务客户。比如深度学习团队“dot AI” 想知道 dot AI社区 中的人们，参加课程、订阅通知、参加AI活动等的动机是什么。于是通过调研团队便发现了拥有不同动机的人，比如：提升技能、发展事业、紧随AI潮流、或者哪个都不是。这个例子中调研团队就相当于无监督学习算法。</p><p><img src="http://img-md-js.linjsblog.top/img/202412231400464.png" alt="img"></p><h2 id="3-线性回归模型"><a href="#3-线性回归模型" class="headerlink" title="3 线性回归模型"></a>3 线性回归模型</h2><h3 id="3-1-线性回归模型"><a href="#3-1-线性回归模型" class="headerlink" title="3-1 线性回归模型"></a>3-1 线性回归模型</h3><ul><li>Training Set(数据集)：用于训练模型的数据集。</li><li>_x_：input variable(输入变量) &#x2F; feature(特征) &#x2F; input feature(输入特征)，也就是“特征值”。</li><li>_y_：output variable(输出变量) &#x2F; target variable(目标变量)，也就是“目标值”。</li><li>_m_：表示训练样本的数量。</li><li>(<em>x</em>,<em>y</em>)：单个训练样本。</li><li>(x^(i)^ ,y^(i)^) :第 i 个训练样本。上标加括号是为了和求幂次区别开来。</li><li>$\hat{y}$：表示对 <em>y</em> 的估计或预测</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202412231655900.png" alt="img"></p><ul><li>以前把 <em>f</em> 叫做hypothesis(假设)，但是老师不建议这种叫法，而是称之为function(函数)。</li></ul><p>  上图给出了整个“有监督学习”的流程，也就是“learning algorithm”根据输入的“训练集”得到一个 函数模型_f_，于是便可以通过 <em>f</em> 来对 输入_x_ 进行预测 输出$ \hat{y} $ 。而“线性回归模型”就是假设 函数模型_f_ 为一条直线，因为简单易用，这可能是世界上使用最广泛的学习算法，后续也会在其他机器学习模型中见到线性回归模型。   “线性回归”只是解决回归问题的方法之一，其他方法会在Course2中会介绍。现在以上一小节“房价预测”问题举例，若使用“线性回归模型”假设 <em>f</em> 就是一条直线，于是该模型就可以写成 $$ f_{w,b}(x)&#x3D;wx+b $$</p><blockquote><p>表示函数 <em>f</em> 以 <em>x</em> 为函数输入，其输出$\hat{y}$取决于_w_和_b_的值</p><ul><li>w、b：模型的参数(parameter)</li><li>$f_{w,b}(x)$通常会简写为$f(x)$</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202412231742784.png" alt="img"></p><h3 id="3-2-代价函数"><a href="#3-2-代价函数" class="headerlink" title="3-2 代价函数"></a>3-2 代价函数</h3><p>显然，虽然现在已经构建好了“线性回归模型”，但是过训练集的直线有无数种，如何找出 与训练数据最拟合的线 还不明确，于是本节就来介绍 代价函数(cost funtion)。在机器学习中，代价函数用于 衡量模型的好坏，最简单、最常用的代价函数是“平均误差代价函数”(Squared error cost function)：</p><p>$$ J(w,b) &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^m (\hat{y}^{(i)} - \hat{y}^{(i)}) ^{2} &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^m (f_{w,b}(x^{(i)}) - y^{(i)})^2 $$</p><blockquote><ul><li>$w$、$b$: 模型的参数</li><li>$i$: 训练样本的标号</li><li>$m$：训练样本的总数</li><li>$y^{(i)}$ :第 i 的样本的真实目标值</li><li>$\hat{y}^{(i)}$: 对$y^{(i)}$的预测目标值</li><li>除以 $2m$：按照惯例，机器学习中的平均代价函数会除以 2m 而非 m ，这是为了使后续的计算更加简洁。</li></ul></blockquote><p>现在来直观的看一下，最小化代价函数如何找到与训练数据最拟合的线。首先简化模型，设置参数 $b &#x3D; 0$ ，并假设训练数据只有三个点。下图给出了不同的 $w$ 所对应不同的 代价$J (w)$，显然在 $w &#x3D; 1$ 处代价最小，直线也最拟合： $$ \min_w J(w) &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^m (\hat{y}^{(i)} - \hat{y}^{(i)}) ^{2} &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^m (wx^{(i)} - y^{(i)})^{2} $$ <img src="http://img-md-js.linjsblog.top/img/202412232040779.png" alt="image-20241223204005657"></p><p><img src="http://img-md-js.linjsblog.top/img/202412232040250.png" alt="image-20241223204050148"></p><p>通过尝试不同的w最终绘制出J(w)曲线</p><p><img src="http://img-md-js.linjsblog.top/img/202412232043970.png" alt="img"></p><p>那回到刚才的问题中，同时将 $w$和$b$ 都考虑在内，并引入更多的训练数据，便可以得到下面的代价函数示意图。为了更好的将代价函数可视化，同时使用“等高线图”和“3D图”来展示不同的 $w$ 和 $b$ 所对应不同的 代价$J(w,b)$ 。“3D图”类似一个“碗”，显然在“碗”的底部，代价函数最小：</p><p><img src="http://img-md-js.linjsblog.top/img/202412232357781.png" alt="image-20241223235706685"></p><blockquote><p>课程资料：<a href="https://github.com/kaieye/2022-Machine-Learning-Specialization">https://github.com/kaieye/2022-Machine-Learning-Specialization</a></p><p>文件路径：Supervised Machine Learning Regression and Classification&#x2F;week1&#x2F;4.Regression Model</p></blockquote><p>虽然现在距离完成“线性回归问题”非常接近了，但是上述是通过人眼来直观的寻找代价函数的最小点，实际上要画出有足够多细节的3D图需要计算大量的 $J(w,b)$，而很多 $J(w,b)$点 都是没用的，这显然不划算。下一节就来介绍如何通过计算有限的 $J(w,b)$点 来找到代价函数最小点。</p><h2 id="4-梯度下降法"><a href="#4-梯度下降法" class="headerlink" title="4 梯度下降法"></a>4 梯度下降法</h2><h3 id="4-1-梯度下降法"><a href="#4-1-梯度下降法" class="headerlink" title="4-1 梯度下降法"></a>4-1 梯度下降法</h3><p>梯度下降(Gradient Desent)常用于寻找某函数(比如代价函数)的最大值、最小值。梯度下降不仅用于线性拟合，也用于训练如神经网络(Course2)等深度学习模型、以及一些最大型、最复杂的人工智能模型。下面以前面的 $\min_{w,b} J(w,b)$ 来举例，梯度下降算法的步骤为：</p><ol><li><p>选择初始点，一般在取值范围内选取简单的整数，如 $w &#x3D; 1 , b &#x3D; 0$。</p></li><li><p>沿着 $J$ 的“负梯度”方向，不断迭代计算 $w $、$b$。之所以沿着“负梯度”方向，是因为沿该方向下降速度最快(steepest descent, 最速下降)。如下：(<strong>注意这个等号是计算机语言的赋值符号</strong>) $$ w&#x3D;w-\alpha \frac {\partial}{\partial w} J(w,b) $$</p><p>$$ b &#x3D; b - \alpha \frac {\partial}{\partial b} J(w,b) $$</p></li></ol><blockquote><p>$\alpha$: 学习率(Learning rate)，用于控制步长。通常为介于0~1之间的一个小的正数，如0.01。</p><p>$\frac {\partial}{\partial w} J(w,b)$ ：代价函数对 $w $ 的偏导数(<strong>Partial</strong> <strong>Derivative</strong>)，其取负值表明的方向可以使 $J$ 下降。</p><p>$\frac {\partial}{\partial b} J(w,b)$: 代价函数对 $b$ 的偏导数，意义同上.</p></blockquote><p>注意：上面是 同时更新(Simultaneously update)，也就是使用旧的 $(w,b)$ 直接分别计算出新的 $w $、$b $；而不是先更新 $w$，再使用这个新的$ w $计算新的 $b$。<img src="http://img-md-js.linjsblog.top/img/202412242119503.png" alt="image-20241224211904055"></p><ol start="3"><li>直到 $w$和$b$的负梯度 都为0(或者0的邻域内)，即可认为找到 $J$的最低点。</li></ol><p>下面两张图很直观的给出了整个梯度下降法的过程。在下 图1 中，首先固定 b &#x3D; 0，只分析 w 对代价函数 J ( w ) 的影响。可以发现，若当前 w 在最低点右侧，由于“负梯度”小于0，于是下一个 w 将向左移动；反之若当前 w 在最低点左侧，由于“负梯度”大于0，下一个w 将向右迭代。只要选择合适的学习率α，最终就可以找到最低点所在的w。在 图2 中，则进一步同时考虑 w 和b，可以发现每次也是沿着“负梯度”下降最快的方向，最终可以到达最低点所在处。这个迭代的过程就是“梯度下降”，类似于“下山”的过程</p><p><img src="http://img-md-js.linjsblog.top/img/202412242127029.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202412242128696.png" alt="img"></p><h3 id="4-2-学习率α"><a href="#4-2-学习率α" class="headerlink" title="4-2 学习率α"></a>4-2 学习率α</h3><p>学习率α 的选取会对梯度下降的效果产生影响，如果α选的不好，可能会导致无法实现梯度下降</p><ul><li><p>α 选取的太小，会导致下降的速度非常慢(意味着需要计算很长时间)，但最终也会收敛(converge)到最小值。</p></li><li><p>α 选取的太大，很可能会导致在极值点附近反复横跳甚至越来越远，也就是不会收敛甚至发散(diverge)。</p></li><li><p>α 选取的合适，越接近代价函数极小值，梯度越来越小，就会导致步长越来越小。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202412242224348.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202412242225064.png" alt="img"></p><h3 id="4-3-用于线性回归的梯度下降"><a href="#4-3-用于线性回归的梯度下降" class="headerlink" title="4-3 用于线性回归的梯度下降"></a>4-3 用于线性回归的梯度下降</h3><p>介绍完梯度下降法，现在来总结一下，将前面的线性回归模型、代价函数、梯度下降算法结合起来，按照下面公式不断迭代直至其收敛：</p><p>到目前为止，在这个课程中，你已经开发了一个线性模型来预测 $f_{w,b}(x^{(i)})$: $$ Linears \ regression \ model:\ f_{w,b} &#x3D; wx + b \tag{1}\ $$</p><p>在线性回归中，通过最小化我们的预测$f_{w,b}(x^{(i)})$, 和实际数据 $y^{(i)}$之间的误差来利用输入训练数据来拟合参数$w$,$b$。该方法被称为损失函数（代价函数） $J(w,b)$。在训练中，你测量所有训练样本的成本 $$ Cost \ function: \ J(w,b) &#x3D; \frac{1}{2m} \sum_{i&#x3D;1}^{m} (f_{w,b}(x^{(i)}) - y^{(i)})^2 \tag{2} \ $$</p><p>在课程中，梯度下降定义如下： $$ \begin{align_} \text{repeat}&amp;\text{ until convergence:} \; \lbrace \newline \; w &amp;&#x3D; w - \alpha \frac{\partial J(w,b)}{\partial w} \tag{3} \; \newline b &amp;&#x3D; b - \alpha \frac{\partial J(w,b)}{\partial b} \newline \rbrace \end{align_} $$ 其中，参数$w,b$被同时更新，梯度定义为：</p><p>$$ \begin{align} \frac{\partial J(w,b)}{\partial w} &amp;&#x3D; \frac{1}{m} \sum\limits_{i &#x3D; 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})x^{(i)} \tag{4}\ \frac{\partial J(w,b)}{\partial b} &amp;&#x3D; \frac{1}{m} \sum\limits_{i &#x3D; 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)}) \tag{5}\ \end{align} $$</p><p>可以通过在代价（w,b）的等高线图上绘制迭代代价来显示梯度下降的执行过程。</p><p><img src="http://img-md-js.linjsblog.top/img/202412242351353.png" alt="image-20241224235153206"></p><p>从“等高线图”的角度来看，梯度下降法的迭代过程可能如下图红色箭头所示，从起始点不断收敛到最小值，并且注意到这个过程也是越来越慢的：</p><p>放大后，我们可以看到梯度下降的最后步骤。注意，当梯度趋于零时，步骤之间的距离会缩小</p><p><img src="http://img-md-js.linjsblog.top/img/202412242354883.png" alt="image-20241224235445743"></p><p>最后说明一下，由于在使用梯度下降法求解问题的过程中，每次迭代都会使用到所有的训练集数据计算代价函数及其梯度，所以这个梯度下降的过程称为“**批量梯度下降(Batch gradient descent)**”。当然本问题较为简单，在其他数据更为复杂的模型中，为了简化梯度下降法的计算量，每次只使用训练集的子集。</p><blockquote><p>代码：<a href="https://github.com/kaieye/2022-Machine-Learning-Specialization/tree/main/Supervised%20Machine%20Learning%20Regression%20and%20Classification/week1/6.Train%20the%20model%20with%20gradient%20descent">https://github.com/kaieye/2022-Machine-Learning-Specialization/tree/main/Supervised%20Machine%20Learning%20Regression%20and%20Classification/week1/6.Train%20the%20model%20with%20gradient%20descent</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> AI </tag>
            
            <tag> machine learning </tag>
            
            <tag> 吴恩达 </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语一大作文</title>
      <link href="/2024/12/28/%E8%8B%B1%E8%AF%AD%E4%B8%80%E5%A4%A7%E4%BD%9C%E6%96%87/"/>
      <url>/2024/12/28/%E8%8B%B1%E8%AF%AD%E4%B8%80%E5%A4%A7%E4%BD%9C%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="英语一大作文"><a href="#英语一大作文" class="headerlink" title="英语一大作文"></a>英语一大作文</h1><h2 id="温室的花朵经不起风雨"><a href="#温室的花朵经不起风雨" class="headerlink" title="温室的花朵经不起风雨"></a>温室的花朵经不起风雨</h2><p><strong>要求：</strong></p><p>Study the following set of drawings carefully and write an essay in which you should</p><ol><li>describe the set ofdrawings and interpret its meaning</li><li>point out its implications in our life</li></ol><p>You should write about 200 words.<img src="http://img-md-js.linjsblog.top/img/202411222341514.png" alt="image-20241122234141431"></p><p>【范文】</p><p><strong>These are two simple but thought-provoking drawings</strong>. Inside a huge warm house, <strong>there is a</strong> little and delicate flower, growing vigorously and blossoming, <strong>with the house protecting it from the outside severe weather.</strong> Although it seems quite healthy and strong in the house, the plant wither quickly after it is put in the rain, with its leaves falling in the wind. Finally some Chinese characters can be noticed, which say that flowers in the greenhouse cannot endure the wind and rain.</p><p>The <strong>contemporary</strong> Chinese families <strong>are characterized by</strong> “one family, one child”, <strong>and such a scene above can be associated with a host of</strong> parents and their kids in reality. <strong>Admittedly, an increasing number of</strong> parents, now, prepare almost everything for their children, such as foods, clothes, houses, tuition, marriage and even future jobs.<strong>This phenomenon, is particularly worth concerning for the reason that</strong> fathers and mothers pay excessive attention to youngsters’ comfort and enjoyment, <strong>ignoring the significance of</strong> independence for young. <strong>It is parents’ over-protection that result in(causes)</strong> young people not to build up inadequate competence or confidence to face the society.</p><p>However, independence, to my understanding, <strong>can be likened</strong>(被比喻成) to a journey leading to success. As a significant quality(素质), indenpendence may bring teenagers power, arouse their enthusiam for life, and help them win in the future social competition. <strong>Unfortunately</strong>, some parents’ too much love, like the greenhouse, <strong>has constituted</strong> an obstacle that hinders their children’s growth.</p><p>Hence, society as a whole should foster a postive atomsphere to criticize parents blind love. Furthermore,<strong>it is advicesable for</strong> parents <strong>to</strong> offer their kids freedom and opportunities to grow independently. <strong>To conclude</strong>, all people <strong>should bear mind</strong> and that they cannot protect their kids for a lifetime.</p><h2 id="偶像崇拜"><a href="#偶像崇拜" class="headerlink" title="偶像崇拜"></a>偶像崇拜</h2><p><img src="http://img-md-js.linjsblog.top/img/202411261306328.png" alt="image-20241126130652223"></p><p>【范文】</p><p><strong>These are two simple but ironic photos.</strong> On the left picture, there is a youngster, <strong>with</strong> the name “Beckham” wirtten on his face. On the right one, another young guy sits in barber’s shop, <strong>spending</strong> 300 yuan designing his hairstyle as cool as Beckham’s.</p><p><strong>Such a scene, apparently, can be associated with</strong> a host of crazy fans of stars in reality. <strong>Admittedly</strong>, an <strong>increasing number of</strong> young boys and young grils, nowadays, are fascinated by a various celebrities, such as champions, pop singers, renowned actors and so forth. <strong>This phenomenon is particularly worth attention for the reason that</strong> some of them focus only on stars’ superficialand fashionable lifestyle, <strong>ignoring the signficance of</strong> learn their merits or vitues. <strong>Unfortunately</strong>, <strong>this sort of blind</strong>(盲目，irrational) worship <strong>has constitute</strong> an <strong>obstacle</strong> that <strong>hinders</strong> <strong>their longer-term growth and progress.</strong></p><p><strong>Hence, society as a whole should foster a postive atmosphere to</strong> encourage and educate teenagers to support(love&#x2F;like) star <strong>in a rational way(manner)</strong>. Thus, as a youngster, I deem that we <strong>it is exceedingly necessary for</strong> us to choose excellent idols, which can bring us strength(power), <strong>arouse our passion&#x2F;enthusiasm for life</strong>, and help us better.</p><h2 id="终点又是起点"><a href="#终点又是起点" class="headerlink" title="终点又是起点"></a>终点又是起点</h2><p><img src="http://img-md-js.linjsblog.top/img/202412101527178.png" alt="image-20241210152656049"></p><p>To begin with, several chinese characters interpret the implied meaning of this drawing: an end means another new start. <strong>Then let us closely observe the drawing.</strong> On a running track(playground、race), there is a confident athlete, <strong>dashing to</strong>(冲向)（running to）end of race, with an optimistic smile on his face. Although he is rather(非常的) exhausted, the boy starts his next pursuit immediately.</p><p>Such a <strong>scenario</strong> , apparently, can be associated with a host of successful individuals(people,figure,celebrities) in reality. They achieve success in their field, but they are not proud or satisfied. Instead, they set for bigger targets at once. <strong>This virtue is particularly worth parising for the reason that it is</strong> their <strong>perseverance</strong> that enable them to success again and again.</p><p>Life, to my understanding, can be likened to a road with no everlasting success. <strong>A case in point</strong> is YaoMing, who has been a renowned basketball player. After his retirement, he continued to strive and created his own business. Actually, there are so many celebrities like Yao.</p><p><strong>Everyone should bear in mind that</strong> any success is temporary. Accordingly, <strong>society as a whole should foster a postive atmosphere to</strong> refuse or criticize the satisfaction for small success. <strong>Meanwhile, it is advisable for us, as a youngsters, to enhance ourselves by continually striving for bigger targets.</strong></p><h2 id="网络的近与远"><a href="#网络的近与远" class="headerlink" title="网络的近与远"></a>网络的近与远</h2><p><img src="http://img-md-js.linjsblog.top/img/202412101552220.png" alt="image-20241210155207168"></p><p>There is a throught-provoking drawing. Inside a large(huge) spider net, there are many people(netizens) siting in front of(before) the computer surfing the Internet. Although these people are quite close(near) with each other. But they hardly&#x2F;scarcely communicate face to face. Finally, several Chinese characters can be noticed which says that the “near” and “far” of the Internet.</p><p>上述场景，能被联想到互联网对当代生活积极或消极的影响。一方面，正是互联网使得不同城市的人们能够通过各种聊天软件和APP交流；另一方面，不得不承认，越来越多年轻人花费了太多时间在虚拟的世界里，忽略了现实生活与朋友和家人的交流。</p><p>Such a scenario, apparently, can be associated with the postive and nagative effects(influence) of internet upon the comtemporary(present-day, modern) life. <strong>For one thing</strong>, <strong>It is the</strong> internet <strong>that enables</strong> people in different cities <strong>to</strong> chat with each other by&#x2F;via various chatting softwares or APPs. <strong>For another</strong>, admittedly, an increasing number of youngsters spend too much time on the virtual world, <strong>ignoring(neglecting)</strong> the commuication with friends and family members in reality.</p><p>这种现象非常值得关注，事实上，网络已经构成一种障碍阻碍人与人之间的正常交流。</p><p><strong>This phenomenon is particularly worth attention and concerning</strong>. <strong>As a matter of fact</strong>, <strong>the</strong> internet <strong>has constitute an obstacle that hinders people</strong> normal communication with each other.</p><p>我作为一个年轻人，认为整个社会应该营造一种积极氛围去理性使用互联网。</p><p><strong>I, as a youngster, (To my understanding)I deem that society as a whole should foster a postive atmosphere to utilize Internet in an rational(appropriately) way(manner)</strong>. Besides(Furthermore), <strong>everbody is suppose to bear in mind that the network</strong> is just a tool.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 考研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 作文 </tag>
            
            <tag> 英语一 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode.704 二分查找 边界问题</title>
      <link href="/2024/12/28/leetcode-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/"/>
      <url>/2024/12/28/leetcode-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-704-二分查找-边界问题"><a href="#Leetcode-704-二分查找-边界问题" class="headerlink" title="Leetcode.704 二分查找 边界问题"></a>Leetcode.704 二分查找 边界问题</h1><p><a href="https://leetcode.cn/problems/binary-search/">力扣题目链接</a></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">输入: nums = [-1,0,3,5,9,12], target = 9     输出: 4       解释: 9 出现在 nums 中并且下标为 4     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例 2:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">输入: nums = [-1,0,3,5,9,12], target = 2     输出: -1        解释: 2 不存在 nums 中因此返回 -1        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>提示：</p><ul><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ul><h2 id="二分法易错点"><a href="#二分法易错点" class="headerlink" title="二分法易错点"></a>二分法易错点</h2><p>二分查找涉及的很多的边界条件，逻辑比较简单，但就是写不好。例如到底是 <code>while(left &lt; right)</code> 还是 <code>while(left &lt;= right)</code>，到底是<code>right = mid</code>呢，还是要<code>right = mid - 1</code>呢？</p><p>之前写二分法经常写乱，主要是因为<strong>对区间的定义没有想清楚，区间的定义就是不变量</strong>。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p><p>写二分法，区间的定义一般为两种，左闭右闭即[left, right]，或者左闭右开即[left, right)。</p><h3 id="第一种写法-左闭右闭"><a href="#第一种写法-左闭右闭" class="headerlink" title="第一种写法(左闭右闭)"></a>第一种写法(左闭右闭)</h3><p>第一种写法，我们定义 target 是在一个在<strong>左闭右闭</strong>的区间里，<strong>也就是[left, right]</strong> 。</p><ul><li><p><strong>while (left &lt;&#x3D; right) 要使用 &lt;&#x3D;</strong> ，因为left &#x3D;&#x3D; right是有意义的，所以使用 &lt;&#x3D;，如【1,1】</p></li><li><p>if (nums[mid] &gt; target) right 要赋值为 mid - 1，因为当前这个nums[mid]一定不是target，那么接下来要查找的左区间结束下标位置就是 mid - 1</p></li></ul><p>代码如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int search(vector&lt;int&gt;&amp; nums, int target) &#123;        int left &#x3D; 0;        int right &#x3D; nums.size()-1;        while(left&lt;&#x3D;right)&#123;            int mid &#x3D; left + ((right-left)&gt;&gt;1);            if(nums[mid] &#x3D;&#x3D; target)&#123;                return mid;            &#125;            if(nums[mid] &lt; target)&#123;                left &#x3D; mid + 1;            &#125;            if(nums[mid] &gt; target)&#123;                right &#x3D; mid - 1;            &#125;        &#125;        return -1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种写法（左闭右开）"><a href="#第二种写法（左闭右开）" class="headerlink" title="第二种写法（左闭右开）"></a>第二种写法（左闭右开）</h3><ul><li><strong>while (left &lt; right)，这里使用 &lt;</strong> ,因为left &#x3D;&#x3D; right在区间[left, right)是没有意义的</li><li><strong>if (nums[mid] &gt; target) right 更新为 mid</strong>，因为当前nums[mid]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为mid，即：下一个查询区间不会去比较nums[mid]</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 版本二class Solution &#123;public:    int search(vector&lt;int&gt;&amp; nums, int target) &#123;        int left &#x3D; 0;        int right &#x3D; nums.size(); &#x2F;&#x2F; 定义target在左闭右开的区间里，即：[left, right)        while (left &lt; right) &#123; &#x2F;&#x2F; 因为left &#x3D;&#x3D; right的时候，在[left, right)是无效的空间，所以使用 &lt;            int middle &#x3D; left + ((right - left) &gt;&gt; 1);            if (nums[middle] &gt; target) &#123;                right &#x3D; middle; &#x2F;&#x2F; target 在左区间，在[left, middle)中            &#125; else if (nums[middle] &lt; target) &#123;                left &#x3D; middle + 1; &#x2F;&#x2F; target 在右区间，在[middle + 1, right)中            &#125; else &#123; &#x2F;&#x2F; nums[middle] &#x3D;&#x3D; target                return middle; &#x2F;&#x2F; 数组中找到目标值，直接返回下标            &#125;        &#125;        &#x2F;&#x2F; 未找到目标值        return -1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>408-数据结构-中位数</title>
      <link href="/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="408-数据结构-中位数"><a href="#408-数据结构-中位数" class="headerlink" title="408-数据结构-中位数"></a>408-数据结构-中位数</h1><blockquote><p>2011统考真题</p></blockquote><p>一个长度为 L(L≥1) 的升序序列 S ，处在第 ⌈L&#x2F;2⌉ 个位置的数称为 S 的中位数。例如，若序列 S1&#x3D;⟨11,13,15,17,19⟩ ，则 S1 的中位数是 15 。两个序列的中位数是含它们所有元素的升序序列的中位数。例如，若序列 S2&#x3D;⟨2,4,6,8,20⟩ ，则 S1 和 S2 的中位数是 11 。现有两个等长的升序序列 A 和 B ，试设计一个在时间和空间两方面都尽可能高效的算法，找出两个序列 A 和 B 的中位数。要求：</p><p>⑴ 给出算法的基本设计思想。</p><p>⑵ 根据设计思想，采用C或C++或Java语言描述，关键之处给出注释。</p><p>⑶ 说明你所设计算法的时间复杂度和空间复杂度。</p><p><strong>最朴素解法</strong>：合并数组c[0:2n-1],返回c[n-1];</p><ul><li>时间复杂度： O(n) 。</li><li>空间复杂度： O(n) 。</li></ul><p><strong>方法一：双指针</strong></p><p>对两个序列从小到大顺序一次访问，当访问到两个序列长度的一半时，为中位数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int findMidNum(vector&lt;int&gt;&amp; s1,vector&lt;int&gt;&amp; s2)&#123;    int len1 &#x3D; s1.size();    int len2 &#x3D; s2.size();    int m &#x3D; (len1+len2)&gt;&gt;1;    int mid_index &#x3D; (len1+len2)%2 &#x3D;&#x3D; 0 ? m-1 : m;    int j &#x3D; 0,k &#x3D; 0,min &#x3D; 0;    for (int i &#x3D; 0; i &lt;&#x3D; mid_index; ++i) &#123;        if (s1[j] &gt;&#x3D; s2[k])&#123;            min &#x3D; s2[k];            k++;        &#125;else&#123;            min &#x3D; s1[j];            j++;        &#125;    &#125;    return min;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>空间复杂度：O(1);</li><li>时间复杂度：O(n)</li></ul><p><strong>方法二</strong>：</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>408-数据结构-顺序表删除相同元素</title>
      <link href="/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%88%A0%E9%99%A4%E7%9B%B8%E5%90%8C%E5%85%83%E7%B4%A0/"/>
      <url>/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%88%A0%E9%99%A4%E7%9B%B8%E5%90%8C%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="408-数据结构-顺序表删除相同元素"><a href="#408-数据结构-顺序表删除相同元素" class="headerlink" title="408-数据结构-顺序表删除相同元素"></a>408-数据结构-顺序表删除相同元素</h1><blockquote><p>王道书习题2.2.3 应用题05</p></blockquote><p>题目：从有序顺序表中删除所有其值重复的元素，使表中所有元素的值均不同。</p><p>算法步骤：</p><ol><li><strong>初始化检查</strong>: 如果数组为空，则直接返回。</li><li><strong>索引初始化</strong>: <code>index</code> 用于记录存放不同元素的位置，初始化为0。</li><li><strong>遍历数组</strong>: 从数组的第二个元素开始，逐个检查当前元素是否与前一个不同。如果不同，则将<code>index</code>加1，并将当前元素赋值到<code>index</code>位置。</li><li><strong>调整数组大小</strong>: 使用<code>resize</code>方法将数组大小调整为<code>index + 1</code>，从而删除多余的重复元素。</li><li><strong>输出结果</strong>: 最后，遍历并输出处理后的数组。</li></ol><p>这个算法的时间复杂度为O(n)，其中n是数组的大小。由于是对原数组进行操作，空间复杂度为O(1)。</p><p>代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void delSame(vector&lt;int&gt;&amp; arr)&#123;    if (arr.empty())&#123;        return;    &#125;    int i,j;    for (i &#x3D; 0,j &#x3D; 1; j &lt; arr.size(); j++) &#123;        if (arr[i]!&#x3D;arr[j])&#123;            i++;            arr[i] &#x3D; arr[j];        &#125;    &#125;    arr.resize(i+1);&#x2F;&#x2F;当你希望删除容器末尾的元素时，可以使用 resize 来缩小容器的大小。&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展：将本题中的有序表改为无序表，你能想到时间复杂度位O(n)的方法吗？</p><p>可以用散列表来实现</p><p>在C++中，可以使用哈希表（例如 <code>std::unordered_set</code>）来跟踪已看到的元素</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void delSameUnSorted(vector&lt;int&gt;&amp; arr)&#123;    std::unordered_set&lt;int&gt; seen;    size_t index &#x3D; 0;    for (size_t i &#x3D; 0; i &lt; arr.size(); ++i) &#123;        if (seen.find(arr[i]) &#x3D;&#x3D; seen.end()) &#123;            seen.insert(arr[i]);            arr[index++] &#x3D; arr[i];        &#125;    &#125;    arr.resize(index);  &#x2F;&#x2F; 调整数组大小，删除多余的元素&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>初始化哈希表</strong>：<code>std::unordered_set&lt;int&gt; seen</code> 用于跟踪已遇到的元素。</li><li><strong>遍历数组</strong>：对于数组中的每个元素，检查它是否已在 <code>seen</code> 中。</li><li><strong>插入新元素</strong>：如果元素不在 <code>seen</code> 中，则将其插入 <code>seen</code> 并将其存放在 <code>arr</code> 的当前索引位置，然后增加索引。</li><li><strong>调整数组大小</strong>：使用 <code>resize</code> 方法将数组大小调整为不重复元素的数量，删除多余的元素。</li><li><strong>输出结果</strong>：最后，遍历并输出处理后的数组。</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ul><li><strong>时间复杂度</strong>：由于哈希表的查找和插入操作平均为 O(1)，所以整个算法的时间复杂度为 O(n)，其中 n 是数组的大小。</li><li><strong>空间复杂度</strong>：使用了一个额外的哈希表来存储已遇到的元素，空间复杂度为 O(n)。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>408-数据结构-三个相同的元素</title>
      <link href="/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%89%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%85%83%E7%B4%A0/"/>
      <url>/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%89%E4%B8%AA%E7%9B%B8%E5%90%8C%E7%9A%84%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="408-数据结构-三个相同的元素"><a href="#408-数据结构-三个相同的元素" class="headerlink" title="408-数据结构-三个相同的元素"></a>408-数据结构-三个相同的元素</h1><blockquote><p>王道书习题2.2.3 应用题09</p></blockquote><p>给定三个序列A，B，C，长度均为n，且为均匀无重复递增序列，请设计一个时间上尽可能高效的算法，逐行输出同时存在于这三个序列中的所有元素。例如数组A为{1,2,3}，B&#x3D;{2,3,4}，C&#x3D;{-1,0,2}，则输出2。</p><p><strong>解法一：暴力枚举</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void sameKey(vector&lt;int&gt; a,vector&lt;int&gt; b,vector&lt;int&gt; c,int n)&#123;    for (int i &#x3D; 0; i &lt; n; ++i) &#123;        for (int j &#x3D; 0; j &lt;n; ++j) &#123;            for (int k &#x3D; 0; k &lt; n; ++k) &#123;                if (a[i] &#x3D;&#x3D; b[j] &amp;&amp; b[j] &#x3D;&#x3D; c[k])&#123;                    printf(&quot;%d \n&quot;,a[i]);                &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N^3)；</p><p>空间复杂度：O(1);</p><p><strong>解法二：指针</strong></p><p>使用三个下标变量从小到大遍历数组。当三个元素相等时，输出并向前推进指针，否则仅移动小于最大元素的下标数量，知道某个下标超出数组范围，即可停止。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void sameKey2(vector&lt;int&gt; a,vector&lt;int&gt; b,vector&lt;int&gt; c,int n)&#123;    int i&#x3D;0,j&#x3D;0,k&#x3D;0;    while (i&lt;n&amp;&amp;j&lt;n&amp;&amp;k&lt;n)&#123;        if (a[i] &#x3D;&#x3D; b[j] &amp;&amp; b[j]&#x3D;&#x3D;c[k])&#123;            printf(&quot;%d\n&quot;,a[i]);            i++,j++,k++;        &#125;else&#123;            int maxNum &#x3D; max(a[i], max(b[j],c[k]));            if (a[i] &lt; maxNum) i++;            if (b[j] &lt; maxNum) j++;            if (c[k] &lt; maxNum) k++;        &#125;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(N)</p><p>空间复杂度：O(1)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>408-数据结构-两个线性表互换位置</title>
      <link href="/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%A4%E4%B8%AA%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%BA%92%E6%8D%A2%E4%BD%8D%E7%BD%AE/"/>
      <url>/2024/12/28/408-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%B8%A4%E4%B8%AA%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%BA%92%E6%8D%A2%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="408-数据结构-两个线性表互换位置"><a href="#408-数据结构-两个线性表互换位置" class="headerlink" title="408-数据结构-两个线性表互换位置"></a>408-数据结构-两个线性表互换位置</h1><blockquote><p>王道书习题2.2.3 应用题07</p></blockquote><p>题目：已知一维数组A[m+n]中依次存放两个线性表(a1,a2,a3…am)和(b1,b2,b3…bn).编写一个函数，将数组中的两个顺序表位置互换，既将(a1,a2,a3…am)放在(b1,b2,b3…bn)前面</p><p>最开始想到的是循环左移m位。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void twoListReverse(vector&lt;int&gt;&amp; arr,int m ,int n)&#123;    &#x2F;&#x2F;循环左移m位    int temp &#x3D; arr[0];    for (int i &#x3D; 0; i &lt;m; ++i) &#123;        for (int j &#x3D; 1; j &lt; arr.size(); ++j) &#123;            arr[j-1] &#x3D; arr[j];        &#125;        arr[arr.size()-1] &#x3D; temp;        temp &#x3D; arr[0];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度O(nm)</p><p>解法二：</p><p>首先将A[m+n]中的全部元素(a1,a2,a3…am,b1,b2,b3…bn)原地逆置，(bn,b(n-1),…b1,am,a(m-1),…a1);最后分别对前n个元素和后m个元素使用逆置算法，既得(b1,b2,b3…bn,a1,a2,a3…am)</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Reverse(vector&lt;int&gt;&amp; arr,int left ,int right)&#123;    if (left&gt;&#x3D;right  right &gt;&#x3D; arr.size())&#123;        return;    &#125;    int mid &#x3D; (left+right)&gt;&gt;1;    for (int i &#x3D; 0; i &lt;&#x3D; mid-left; ++i) &#123;        int temp &#x3D; arr[left+i];        arr[left+i] &#x3D; arr[right-i];        arr[right-i] &#x3D; temp;    &#125;&#125;void Exchange(vector&lt;int&gt;&amp; arr,int m ,int n)&#123;    Reverse(arr,0,m+n-1);    Reverse(arr,0,n-1);    Reverse(arr,n,m+n-1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第6章（应用层）</title>
      <link href="/2024/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC6%E7%AB%A0%EF%BC%88%E5%BA%94%E7%94%A8%E5%B1%82%EF%BC%89/"/>
      <url>/2024/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC6%E7%AB%A0%EF%BC%88%E5%BA%94%E7%94%A8%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1、应用层概述"><a href="#6-1、应用层概述" class="headerlink" title="6.1、应用层概述"></a>6.1、应用层概述</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151636035.png" alt="image-20201023195112701"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636036.png" alt="image-20201023200511781"></p><p>我们在浏览器的地址中输入某个网站的域名后，就可以访问该网站的内容，这个就是<strong>万维网WWW应用</strong>，其相关的应用层协议为<strong>超文本传送协议HTTP</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636037.png" alt="image-20201023200819770"></p><p>用户在浏览器地址栏中输入的是“见名知意”的<strong>域名</strong>，而TCP&#x2F;IP的网际层使用<strong>IP地址</strong>来表示目的主机，从域名到IP地址的装转换，由属于<strong>应用层范畴的域名系统DNS</strong>，在后台帮用户完成</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636038.png" alt="image-20201023201028141"></p><p>常见的应用</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636039.png" alt="image-20201023201101024"></p><p>总结</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636040.png" alt="image-20201023201137047"></p><hr><h1 id="6-2、客户-服务器方式（C-S方式）和对等方式（P2P方式）"><a href="#6-2、客户-服务器方式（C-S方式）和对等方式（P2P方式）" class="headerlink" title="6.2、客户&#x2F;服务器方式（C&#x2F;S方式）和对等方式（P2P方式）"></a>6.2、客户&#x2F;服务器方式（C&#x2F;S方式）和对等方式（P2P方式）</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636041.png" alt="image-20201023201308269"></p><h2 id="客户-服务器方式（C-S方式）"><a href="#客户-服务器方式（C-S方式）" class="headerlink" title="客户&#x2F;服务器方式（C&#x2F;S方式）"></a>客户&#x2F;服务器方式（C&#x2F;S方式）</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636042.png" alt="image-20201023201610088"></p><h2 id="对等方式（P2P方式）"><a href="#对等方式（P2P方式）" class="headerlink" title="对等方式（P2P方式）"></a>对等方式（P2P方式）</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636043.png" alt="image-20201023202017683"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636044.png" alt="image-20201023202049202"></p><hr><h1 id="6-3、动态主机配置协议DHCP"><a href="#6-3、动态主机配置协议DHCP" class="headerlink" title="6.3、动态主机配置协议DHCP"></a>6.3、动态主机配置协议DHCP</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li>互联网广泛使用的<strong>动态主机配置协议 DHCP</strong> (Dynamic Host Configuration Protocol) 提供了<strong>即插即用连网</strong> (plug-and-play networking) 的机制。</li><li>这种机制允许一台计算机加入新的网络和获取 IP 地址，而不用手工配置。</li></ul><h2 id="DHCP的作用"><a href="#DHCP的作用" class="headerlink" title="DHCP的作用"></a>DHCP的作用</h2><p>在之前，如果要正常访问Web服务器，需要该主机手动配置网络的相关配置信息</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636045.png" alt="image-20201023205719672"></p><blockquote><p>如果主机数很多，就工作量大，容易出错</p></blockquote><p>如果我们给网络中添加一台DHCP服务器</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636046.png" alt="image-20201023210345650"></p><h2 id="DHCP的工作过程"><a href="#DHCP的工作过程" class="headerlink" title="DHCP的工作过程"></a>DHCP的工作过程</h2><p><strong>DHCP 使用客户 - 服务器方式</strong></p><ul><li>需要 IP 地址的主机在启动时就向 DHCP 服务器广播发送发现报文 （DHCP DISCOVER），这时该主机就成为 DHCP 客户。</li><li>本地网络上所有主机都能收到此广播报文，但只有 DHCP 服务器才回答此广播报文。</li><li>DHCP 服务器先在其数据库中查找该计算机的配置信息。若找到，则返回找到的信息。若找不到，则从服务器的 IP 地址池 (address pool) 中取一个地址分配给该计算机。DHCP服务器的回答报文叫做提供报文（DHCP OFFER）。</li></ul><p><strong>DHCP 工作方式</strong></p><ul><li>DHCP 使用客户-服务器方式，采用请求&#x2F;应答方式工作。</li><li>DHCP 基于 UDP 工作（DHCP报文在运输层会被封装成为UDP用户数据报），DHCP 服务器运行在 67 号端口， DHCP客户运行在 68 号端口。</li></ul><p><strong>DHCP交互过程</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636047.png" alt="image-20201023211525686"></p><blockquote><p><strong>DHCP客户端将广播发送DHCP发现报文（DHCP DISCOVER）</strong></p><ul><li>事务ID</li><li>DHCP客户端的MAC地址</li></ul><p><strong>封装该报文的IP数据报的源IP地址为0.0.0.0，这是因为主机目前还未分配到IP地址</strong>，因此使用该地址代替</p><p><strong>目的IP地址为广播地址255.255.255.255，之所以广播发送，是因为主机现在并不知道网络中有哪几个DHCP服务器</strong>。它们的IP地址各是什么</p><p><strong>DHCP服务器收到DHCP发现报文后，根据其中封装的DHCP客户端的MAC地址来查找自己的数据库</strong>，如果查到匹配信息，则使用这些配置信息来构建并发送DHCP提供报文，如果没有则采用默认配置信息来构建报文并发送</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151636048.png" alt="image-20201023213058543"></p><blockquote><p><strong>DHCP服务端将广播发送DHCP提供报文（DHCP OFFER）</strong></p><ul><li>事务ID：DHCP客户端会与之前DHCP发现报文的事务ID做对比，来判断该DHCP提供报文是否是自己的</li><li>配置信息：<ul><li>IP地址：DHCP服务器从自己的IP地址池中挑选待租用给主机的IP地址（使用ARP来确保所选IP地址未被网络中其他主机占用）</li><li>子网掩码</li><li>地址租期</li><li>默认网关</li><li>DNS服务器</li></ul></li></ul><p>源IP地址：发送DHCP提供报文的DHCP服务器的IP</p><p>目的地址：因为目的主机还没分配到IP，所以使用广播地址</p></blockquote><p>在本例中，DHCP客户会收到两个DHCP服务器发来的DHCP提供报文，DHCP客户从中选择一个，一般选择先到的，并向所选择的DHCP服务器发送DHCP请求报文</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636049.png" alt="image-20201023214542329"></p><blockquote><p><strong>DHCP客户端将广播发送DHCP请求报文（DHCP REQUEST）</strong></p><ul><li>事务ID</li><li>DHCP客户端的MAC地址</li><li>接收的租约中的IP地址</li><li>提供此租约的DHCP服务器端的IP地址</li></ul><p>源地址：0.0.0.0，因为此时DHCP客户才从多个DHCP服务器中挑选一个作为自己的DHCP服务器。它首先要征得该服务器的同意，之后才能正式使用向该DHCP服务器租用的IP地址</p><p>目的地址：广播地址，这样可以一次性向所有DHCP服务器发送DHCP请求报文，来告知它们是否请求它们作为自己的DHCP服务器</p></blockquote><p>在本例中，假设DHCP客户端选择DHCP服务器1作为自己的DHCP服务器，DHCP服务器1接受该请求，于是DHCP服务器1给DHCP客户端发送DHCP确认报文</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636050.png" alt="image-20201023215341522"></p><blockquote><p>源地址：DHCP服务器1的IP地址</p><p>目的地址：广播地址</p><p><strong>DHCP客户收到该报文后就可以使用租用的IP地址</strong></p><p><strong>在使用前还会进行ARP检测</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636052.png" alt="image-20201023215652859"></p></blockquote><p>剩下流程图示</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636053.png" alt="image-20201023220114952"></p><h2 id="DHCP中继代理"><a href="#DHCP中继代理" class="headerlink" title="DHCP中继代理"></a>DHCP中继代理</h2><p>下图的网络拓扑中的各主机是否可以通过DHCP来自动获取到网络配置？</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636054.png" alt="image-20201023221111923"></p><blockquote><p>使用DHCP中继代理是因为我们不用给每一个网络上都设置一个DHCP服务器，这样会使DHCP服务器的数量太多</p></blockquote><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636055.png" alt="image-20201023221251022"></p><hr><h1 id="6-4、域名系统DNS"><a href="#6-4、域名系统DNS" class="headerlink" title="6.4、域名系统DNS"></a>6.4、域名系统DNS</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>域名相比IP地址更容易记忆</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636056.png" alt="image-20201023234832678"></p><p>因特网是否可以只使用一台DNS服务器？</p><p>不行</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636057.png" alt="image-20201023235123151"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636058.png" alt="image-20201023235231869"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636059.png" alt="image-20201023235457857"></p><blockquote><p>名称相同的域名其等级未必相同</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151636060.png" alt="image-20201023235617575"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636061.png" alt="image-20201023235910545"></p><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636062.png" alt="image-20201024000255580"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636063.png" alt="image-20201024000335147"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636064.png" alt="image-20201024000408396"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636065.png" alt="image-20201024002135210"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636066.png" alt="image-20201024002224354"></p><hr><h1 id="6-5、文件传送协议FTP"><a href="#6-5、文件传送协议FTP" class="headerlink" title="6.5、文件传送协议FTP"></a>6.5、文件传送协议FTP</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636067.png" alt="image-20201024132745558"></p><h2 id="文件传送协议FTP的应用"><a href="#文件传送协议FTP的应用" class="headerlink" title="文件传送协议FTP的应用"></a>文件传送协议FTP的应用</h2><p>FTP采用C&#x2F;S方式（客户&#x2F;服务器方式）</p><p>FTP客户计算机可将各种类型的文件上传到FTP服务器计算机</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636068.png" alt="image-20201024133155327"></p><p>FTP客户计算机也可以从FTP服务器计算机下载文件</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636069.png" alt="image-20201024133247537"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636070.png" alt="image-20201024133400777"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636071.png" alt="image-20201024133601943"></p><h2 id="FTP基本工作原理"><a href="#FTP基本工作原理" class="headerlink" title="FTP基本工作原理"></a>FTP基本工作原理</h2><p>FTP服务器监听熟知端口（端口号为 21），使客户进程能够连接上。</p><p>FTP客户随机选择一个临时端口号与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送FTP的相关控制命令（这条连接是FTP客户与服务器之间的命令通道）</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636072.png" alt="image-20201024134319922"></p><p>下图为建立数据通道的TCP连接</p><p>FTP服务器使用自己的熟知端口号20与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送文件</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636073.png" alt="image-20201024134624114"></p><blockquote><p>上面例子是主动模式：建立数据通道时，FTP服务器主动连接FTP客户</p></blockquote><p>下图实例为被动模式</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636074.png" alt="image-20201024135018620"></p><p>两种模式对比</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636075.png" alt="image-20201024135050743"></p><blockquote><p>注意两种模式都是</p><p>控制连接在整个会话期间保持打开状态</p><p>数据连接传输完毕后就关闭</p></blockquote><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636076.png" alt="image-20201024135848563"></p><hr><h1 id="6-6、电子邮件"><a href="#6-6、电子邮件" class="headerlink" title="6.6、电子邮件"></a>6.6、电子邮件</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636077.png" alt="image-20201024151757221"></p><h2 id="邮件发送和接收过程"><a href="#邮件发送和接收过程" class="headerlink" title="邮件发送和接收过程"></a>邮件发送和接收过程</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636078.png" alt="image-20201024152052056"></p><h2 id="简单邮件传送协议SMTP（Simple-Mail-Transfer-Protocol）的基本工作原理"><a href="#简单邮件传送协议SMTP（Simple-Mail-Transfer-Protocol）的基本工作原理" class="headerlink" title="简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理"></a>简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636079.png" alt="image-20201024152628966"></p><h2 id="电子邮件的信息格式"><a href="#电子邮件的信息格式" class="headerlink" title="电子邮件的信息格式"></a>电子邮件的信息格式</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636080.png" alt="image-20201024153425016"></p><h2 id="邮件读取"><a href="#邮件读取" class="headerlink" title="邮件读取"></a>邮件读取</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636081.png" alt="image-20201024153736033"></p><h2 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636082.png" alt="image-20201024154039565"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636083.png" alt="image-20201024154744175"></p><hr><h1 id="6-7、万维网WWW"><a href="#6-7、万维网WWW" class="headerlink" title="6.7、万维网WWW"></a>6.7、万维网WWW</h1><h2 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h2><p><strong>概述</strong></p><ul><li><strong>万维网</strong> WWW (World Wide Web) 并非某种特殊的计算机网络。</li><li>万维网是一个大规模的、联机式的<strong>信息储藏所</strong>。</li><li>万维网用链接的方法能非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。</li><li>这种访问方式称为“<strong>链接</strong>”。</li></ul><p><strong>万维网的工作方式</strong></p><ul><li>万维网以<strong>客户 - 服务器</strong>方式工作。</li><li><strong>浏览器</strong>就是在用户计算机上的万维网<strong>客户程序</strong>。万维网文档所驻留的计算机则运行<strong>服务器程序</strong>，因此这个计算机也称为<strong>万维网服务器</strong>。</li><li>客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的<strong>万维网文档</strong>。</li><li>在一个客户程序主窗口上显示出的万维网文档称为<strong>页面</strong> (page)。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151636084.png" alt="image-20201024170819303"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636085.png" alt="image-20201024171432743"></p><p><strong>万维网应用举例</strong></p><p>访问网页</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636086.png" alt="image-20201024170923530"></p><p><strong>怎样标志分布在整个互联网上的万维网文档？</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636087.png" alt="image-20201024171058583"></p><p><strong>万维网的文档</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636088.png" alt="image-20201024171724030"></p><h2 id="超文本传输协议HTTP（Hyper-Transfer-Protocol）"><a href="#超文本传输协议HTTP（Hyper-Transfer-Protocol）" class="headerlink" title="超文本传输协议HTTP（Hyper Transfer Protocol）"></a>超文本传输协议HTTP（Hyper Transfer Protocol）</h2><h3 id="概念和传输过程"><a href="#概念和传输过程" class="headerlink" title="概念和传输过程"></a>概念和传输过程</h3><ul><li>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是<strong>超文本传送协议</strong> HTTP (HyperText Transfer Protocol)。</li><li>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151636089.png" alt="image-20201024222457800"></p><ul><li>每个万维网网点都有一个服务器进程，它不断地<strong>监听 TCP 的端口 80</strong>，以便发现是否有浏览器向它发出连接建立请求。</li><li>一旦监听到连接建立请求并建立了 TCP 连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。</li><li>最后，TCP 连接就被释放了。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151636090.png" alt="image-20201024222825888"></p><h3 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h3><p><strong>HTTP请求报文格式</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636091.png" alt="image-20201024224828528"></p><p><strong>HTTP响应报文格式</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151636092.png" alt="image-20201024224920638"></p><h3 id="使用Cookie在服务器上记录用户信息"><a href="#使用Cookie在服务器上记录用户信息" class="headerlink" title="使用Cookie在服务器上记录用户信息"></a>使用Cookie在服务器上记录用户信息</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151636093.png" alt="image-20201024224945200"></p><h3 id="万维网缓存与代理服务器"><a href="#万维网缓存与代理服务器" class="headerlink" title="万维网缓存与代理服务器"></a>万维网缓存与代理服务器</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151636094.png" alt="image-20201024224632514"></p><p>如果该请求有缓存</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636095.png" alt="image-20201024224720124"></p><p>如果该请求没有缓存</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636096.png" alt="image-20201024225013288"></p><blockquote><p>若WEb缓存的命中率比较高</p><p>则会大大减小了该链路上的通信量，因而减少了访问因特网的时延</p></blockquote><p>假设原始服务器的文档被更改，这样代理服务器的文档就不是最新的</p><p>所以原始服务器通常会为每个响应的对象设定一个<strong>修改时间字段</strong>和一个<strong>有效日期字段</strong></p><p>若未过期</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636097.png" alt="image-20201024225504869"></p><p>若过期并且代理服务器的文档和原始服务器的<strong>文档一致</strong>，原始服务器则给代理服务器发送不包含实体主体的响应</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636098.png" alt="image-20201024225846863"></p><p>若过期并且代理服务器的文档和原始服务器的<strong>文档不一致</strong>，原始服务器则给代理服务器发送封装有该文档的响应报文</p><p><img src="http://img-md-js.linjsblog.top/img/202406151636099.png" alt="image-20201024230242550"></p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151636100.png" alt="image-20201024231143505"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第5章（运输层）</title>
      <link href="/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC5%E7%AB%A0%EF%BC%88%E8%BF%90%E8%BE%93%E5%B1%82%EF%BC%89/"/>
      <url>/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC5%E7%AB%A0%EF%BC%88%E8%BF%90%E8%BE%93%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1、运输层概述"><a href="#5-1、运输层概述" class="headerlink" title="5.1、运输层概述"></a>5.1、运输层概述</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>进程之间的通信</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151633193.png" alt="image-20201020211725185"></p><ul><li>从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，<strong>它属于面向通信部分的最高层，同时也是用户功能中的最低层</strong>。</li><li>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，<strong>只有位于网络边缘部分的主机的协议栈才有运输层</strong>，而网络核心部分中的路由器在转发分组时都只用到三层（到网络层）的功能。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151629525.png" alt="image-20201020211339131"></p><p><strong>进程之间通信流程</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629526.png" alt="image-20201020213721054"></p><p>“逻辑通信”是指运输层之间的通信好像是沿水平方向传送数据，但事实上，这两条数据并没有一条水平方向的物理连接，要传送的数据是沿着图中上下多次的虚线方向传送的</p><blockquote><p>进程Ap1与Ap4之间进行基于网络的通信，进程Ap2与Ap3之间进行基于网络的通信</p><p>在运输层使用不同的端口，来对应不同的应用进程</p><p>然后通过网络层及其下层来传输应用层报文</p><p>接收方的运输层通过不同的端口，将收到的应用层报文，交付给应用层中相应的应用进程</p><p>这里端口并不是指看得见、摸得着的物理端口，而是指用来区分不同应用进程的标识符</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629527.png" alt="image-20201020220439303"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629528.png" alt="image-20201020220545411"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629529.png" alt="image-20201020222828878"></p><hr><h1 id="5-2、运输层端口号、复用与分用的概念"><a href="#5-2、运输层端口号、复用与分用的概念" class="headerlink" title="5.2、运输层端口号、复用与分用的概念"></a>5.2、运输层端口号、复用与分用的概念</h1><h2 id="为什么用端口号"><a href="#为什么用端口号" class="headerlink" title="为什么用端口号"></a>为什么用端口号</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629530.png" alt="image-20201020223242364"></p><h2 id="发送方的复用和接收方的分用"><a href="#发送方的复用和接收方的分用" class="headerlink" title="发送方的复用和接收方的分用"></a>发送方的复用和接收方的分用</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629531.png" alt="image-20201020223920225"></p><blockquote><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>发送</strong>数据称为 <strong>复用</strong></p><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>接收</strong>时叫做 <strong>分用</strong>。</p></blockquote><h2 id="TCP-IP体系的应用层常用协议所使用的运输层熟知端口号"><a href="#TCP-IP体系的应用层常用协议所使用的运输层熟知端口号" class="headerlink" title="TCP&#x2F;IP体系的应用层常用协议所使用的运输层熟知端口号"></a>TCP&#x2F;IP体系的应用层常用协议所使用的运输层熟知端口号</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629532.png" alt="image-20201020224521744"></p><h2 id="运输层传输流程"><a href="#运输层传输流程" class="headerlink" title="运输层传输流程"></a>运输层传输流程</h2><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629533.png" alt="image-20201020224658524"></p><blockquote><p>在浏览器输入域名，回车浏览</p><p>然后用户PC中的DNS客户端进程会发送一个DNS查询请求报文</p><p>DNS查询请求报文需要使用运输层的UDP协议</p><p>首部中的源端口字段的值，在短暂端口号49151~65535中挑选一个未被占用的，用来表示DNS客户端进程</p><p>首部中的目的端口字段的值：53，是DNS服务器端进程所使用的熟知端口号</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629534.png" alt="image-20201020225830336"></p><blockquote><p>之后，将UDP用户数据报封装在IP数据报中，通过以太网发送给DNS服务器</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629535.png" alt="image-20201020230059196"></p><blockquote><p>DNS服务器收到该IP数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为53，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS查询请求报文，交付给本服务器中的DNS服务器端进程</p><p>DNS服务器端进程解析DNS查询请求报文的内容，然后按其要求查找对应的IP地址</p><p>之后，会给用户PC发送DNS响应报文，DNS响应报文需要使用运输层的UDP协议封装成UDP用户数据报</p><p>其首部中的源端口字段的值设置为熟知端口号53，表明这是DNS服务器端进程所发送的UDP用户数据报，目的端口的值设置为49152，这是之前用户PC中发送DNS查询请求报文的DNS客户端进程所使用的短暂端口号</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629536.png" alt="image-20201020231032812"></p><blockquote><p>将UDP用户数据报封装在IP数据报中，通过以太网发送给用户PC</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629537.png" alt="image-20201020231308120"></p><blockquote><p>用户PC收到该数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为49152，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS响应报文，交付给用户PC中的DNS客户端进程</p><p>DNS客户端进程解析DNS响应报文的内容，就可知道自己之前所请求的Web服务器的域名对应的IP地址</p></blockquote><p>现在用户PC中的HTTP客户端进程可以向Web服务器发送HTTP请求报文（和DNS发送和接收流程差不多）</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629538.png" alt="image-20201020231935656"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629539.png" alt="image-20201020232517383"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629540.png" alt="image-20201020232132890"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629541.png" alt="image-20201020232548833"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629542.png" alt="image-20201020232337332"></p><hr><h1 id="5-3、UDP和TCP的对比"><a href="#5-3、UDP和TCP的对比" class="headerlink" title="5.3、UDP和TCP的对比"></a>5.3、UDP和TCP的对比</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li><strong>UDP</strong> 和 <strong>TCP</strong> 是TCP&#x2F;IP体系结构<strong>运输层</strong>中的两个重要协议</li><li>当运输层采用面向连接的 <strong>TCP</strong> 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</li><li>当运输层采用无连接的 <strong>UDP</strong> 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。</li></ul><p>可靠信道与不可靠信道</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629543.png" alt="image-20201021192221061"></p><ul><li><p>两个对等运输实体在通信时传送的数据单位叫作<strong>运输协议数据单元</strong> TPDU (Transport Protocol Data Unit)。</p></li><li><p>TCP 传送的数据单位协议是 <strong>TCP 报文段</strong>(segment)。</p></li><li><p>UDP 传送的数据单位协议是 <strong>UDP 报文</strong>或<strong>用户数据报</strong>。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151629544.png" alt="image-20201021193640130"></p><p>UDP的通信是无连接的，不需要套接字（Socket）</p><p>TCP是面向连接的，TCP之间的通信必须要在两个套接字（Socket）之间建立连接</p><h2 id="用户数据报协议UDP（User-Datagram-Protocol）"><a href="#用户数据报协议UDP（User-Datagram-Protocol）" class="headerlink" title="用户数据报协议UDP（User Datagram Protocol）"></a>用户数据报协议UDP（User Datagram Protocol）</h2><p>可以发送广播</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629545.png" alt="image-20201021194104694"></p><p>可以向某个多播组发送多播</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629546.png" alt="image-20201021194225567"></p><p>还可以发送单播</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629547.png" alt="image-20201021194341256"></p><blockquote><p>UDP 支持单播、多播以及广播</p><p>换句话说，UDP支持一对一，一对多，以及一对全的通信</p></blockquote><p>运输过程</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629548.png" alt="image-20201021195034383"></p><blockquote><p>UDP对应用进程交下来的报文既不合并也不拆分，而是保留这些报文的边界</p><p>换句话说，UDP是面向应用报文的</p></blockquote><p>UDP向上层提供无连接不可靠传输服务</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629549.png" alt="image-20201021204152175"></p><p>UDP结构</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629550.png" alt="image-20201021205214512"></p><h2 id="传输控制协议TCP（Transmission-Control-Protocol）"><a href="#传输控制协议TCP（Transmission-Control-Protocol）" class="headerlink" title="传输控制协议TCP（Transmission Control Protocol）"></a>传输控制协议TCP（Transmission Control Protocol）</h2><p>使用TCP协议的通信双方，在进行数据传输之前，必须使用“三报文握手”建立TCP连接</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629551.png" alt="image-20201021194557102"></p><p>TCP连接建立成功后，通信双方之间就好像有一条可靠的通信信道，通信双方使用这条基于TCP连接的可靠信道进行通信</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629552.png" alt="image-20201021194749562"></p><blockquote><p>很显然，TCP仅支持单播，也就是一对一的通信</p></blockquote><p>运输过程</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629553.png" alt="image-20201021195435677"></p><blockquote><p>发送方</p><ul><li><p>TCP会把应用进程交付下来的数据块看作是一连串无结构的字节流，TCP并不知道这些待传送的字节流的含义</p></li><li><p>并将他们编号，并存储在自己发送缓存中</p></li><li><p>TCP会根据发送策略，提取一定量的字节构建TCP报文并发送</p></li></ul><p>接收方</p><ul><li>一方面从所接受到的TCP报文段中，取出数据载荷部分并存储在接收缓存中；一方面将接收缓存中的一些字节交付给应用进程</li><li>TCP不保证接收方应用进程所收到的数据块与发送方发送的数据块，具有对应大小的关系（例如，发送方应用进程交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块，就把收到的字节流交付给了上层的应用进程，但接收方收到的字节流必须和发送方应用进程发出的字节流完全一样）</li><li>接收方的应用进程必须有能力识别收到的字节流，把它还原成有意义的应用层数据</li></ul><p>TCP是面向字节流的，这正是TCP实现可靠传输、流量控制、以及拥塞控制的基础</p><p>本图只画了一个方向的数据流，在实际网络中，基于TCP连接的两端，可以同时进行TCP报文段的发送和接收</p></blockquote><p>TCP向上层提供面向连接的可靠传输服务</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629554.png" alt="image-20201021204508839"></p><p>TCP结构</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629555.png" alt="image-20201021205307406"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629556.png" alt="image-20201023004653315"></p><hr><h1 id="5-4、TCP的流量控制"><a href="#5-4、TCP的流量控制" class="headerlink" title="5.4、TCP的流量控制"></a>5.4、TCP的流量控制</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629557.png" alt="image-20201021223432091"></p><p>举例</p><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=60">具体流程的视频</a></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629558.png" alt="image-20201021231801076"></p><p>上图主机A现在可将发送缓存中序号1~200的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629559.png" alt="image-20201021231904707"></p><p>上图主机A现在可将发送缓存中序号201~500的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629560.png" alt="image-20201021231945653"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629561.png" alt="image-20201021232027721"></p><p>上图主机A现在可将发送缓存中序号501~600的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629562.png" alt="image-20201021232600497"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629563.png" alt="image-20201021232645300"></p><blockquote><p>上图如果零窗口探测报文在发送过程中如果丢失，还是能打破死锁局面</p><p>因为零窗口探测报文段也有重传计时器，重传计时器超时后，零窗口探测报文段会被重传</p></blockquote><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629564.png" alt="image-20201021234004254"></p><hr><h1 id="5-5、TCP的拥塞控制"><a href="#5-5、TCP的拥塞控制" class="headerlink" title="5.5、TCP的拥塞控制"></a>5.5、TCP的拥塞控制</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629565.png" alt="image-20201022141057083"></p><p><strong>网络拥塞往往是由许多因素引起的。例如：</strong></p><ol><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li></ol><p><strong>拥塞控制的一般原理</strong></p><ul><li>拥塞控制的前提：网络能够承受现有的网络负荷。</li><li>实践证明，拥塞控制是很难设计的，因为它是一个<strong>动态问题</strong>。</li><li>分组的丢失是网络发生拥塞的<strong>征兆</strong>而不是原因。</li><li>在许多情况下，甚至正是<strong>拥塞控制本身</strong>成为引起网络性能恶化、甚至发生死锁的原因。</li></ul><p><strong>开环控制和闭环控制</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629566.png" alt="image-20201022142108309"></p><p><strong>监测网络的拥塞</strong></p><p>主要指标有：</p><ol><li>由于缺少缓存空间而被丢弃的分组的百分数；</li><li>平均队列长度；</li><li>超时重传的分组数；</li><li>平均分组时延；</li><li>分组时延的标准差，等等。</li></ol><p>上述这些指标的上升都标志着拥塞的增长。</p><h2 id="拥塞控制的算法"><a href="#拥塞控制的算法" class="headerlink" title="拥塞控制的算法"></a>拥塞控制的算法</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629567.png" alt="image-20201022141423443"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629568.png" alt="image-20201022141556134"></p><blockquote><p>真正的发送窗口值 &#x3D; Min (接收方窗口值，拥塞窗口值)</p></blockquote><p>下图的实例横纵坐标的意思</p><p>传输轮次：</p><ul><li>发送方给接收方发送数据报文段后，接收方给发送方发发回相应的确认报文段</li><li>一个传输轮次所经历的时间其实就是往返时间，往返时间并非是恒定的数值</li><li>使用传输轮次是为了强调把拥塞窗口所允许发送的报文段都连续发送出去，并受到了对已发送的最后一个报文段的确认</li></ul><p>拥塞窗口：</p><ul><li>它会随网络拥塞程度，以及所使用的拥塞控制算法动态变化</li></ul><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><h4 id="慢开始（slow-start）"><a href="#慢开始（slow-start）" class="headerlink" title="慢开始（slow-start）"></a>慢开始（slow-start）</h4><ul><li>目的：用来确定网络的负载能力或拥塞程度。</li><li>算法的思路：由小到大逐渐增大拥塞窗口数值。</li><li>两个变量：<ul><li><strong>拥塞窗口（cwnd）</strong>：初始拥塞窗口值：2 种设置方法。窗口值逐渐增大。</li><li>1 至 2 个最大报文段 （旧标准）</li><li>2 至 4 个最大报文段 （RFC 5681）</li><li><strong>慢开始门限（ssthresh）</strong>：防止拥塞窗口增长过大引起网络拥塞。</li></ul></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151629569.png" alt="image-20201022145631052"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629570.png" alt="image-20201022144725100"></p><blockquote><p>图中swnd是发送窗口</p><p>每经过一个传输轮次，拥塞窗口就加倍</p><p>窗口大小按<strong>指数增加</strong>，2的n-1次方</p></blockquote><h4 id="拥塞避免（congestion-avoidance）"><a href="#拥塞避免（congestion-avoidance）" class="headerlink" title="拥塞避免（congestion avoidance）"></a>拥塞避免（congestion avoidance）</h4><ul><li>思路：让拥塞窗口 cwnd <strong>缓慢地增大</strong>，避免出现拥塞。</li><li>每经过一个传输轮次，拥塞窗口 <strong>cwnd &#x3D; cwnd + 1</strong>。</li><li>使拥塞窗口 cwnd 按线性规律缓慢增长。</li><li>在拥塞避免阶段，具有 “<strong>加法增大</strong>” (Additive Increase) 的特点。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151629571.png" alt="image-20201022150143886"></p><p>如果在发送过程中出现部分报文段丢失，这必然会造成发送方对这些丢失报文段的超时重传</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629572.png" alt="image-20201022145749592"></p><p>这个时候又回到了慢开始</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629573.png" alt="image-20201022145544163"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629574.png" alt="image-20201022145824004"></p><h4 id="两个算法完整示意图"><a href="#两个算法完整示意图" class="headerlink" title="两个算法完整示意图"></a>两个算法完整示意图</h4><p><img src="http://img-md-js.linjsblog.top/img/202406151629575.png" alt="image-20201022150236926"></p><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151629576.png" alt="image-20201022150902709"></p><h4 id="快重传（fast-retrasmit）"><a href="#快重传（fast-retrasmit）" class="headerlink" title="快重传（fast retrasmit）"></a>快重传（fast retrasmit）</h4><p><img src="http://img-md-js.linjsblog.top/img/202406151629577.png" alt="image-20201022151250183"></p><h4 id="快恢复（fast-recovery）"><a href="#快恢复（fast-recovery）" class="headerlink" title="快恢复（fast recovery）"></a>快恢复（fast recovery）</h4><p><img src="http://img-md-js.linjsblog.top/img/202406151629578.png" alt="image-20201022151819265"></p><h4 id="改进后的整体算法的示意图"><a href="#改进后的整体算法的示意图" class="headerlink" title="改进后的整体算法的示意图"></a>改进后的整体算法的示意图</h4><p><img src="http://img-md-js.linjsblog.top/img/202406151629579.png" alt="image-20201022152041751"></p><hr><h1 id="5-6、TCP超时重传时间的选择"><a href="#5-6、TCP超时重传时间的选择" class="headerlink" title="5.6、TCP超时重传时间的选择"></a>5.6、TCP超时重传时间的选择</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151629581.png" alt="image-20201022152651184"></p><blockquote><p>如果超时重传时间RTO的值设置得比RTT0的值小很多，这会引起报文段不必要的重传，使网络负荷增大</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629582.png" alt="image-20201022152708875"></p><blockquote><p>如果超时重传时间RTO的值设置得远大于RTT0的值，这会使重传时间推迟的太长，使网络的空闲时间增大，降低传输效率</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629583.png" alt="image-20201022153244047"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629584.png" alt="image-20201022153518218"></p><p><strong>RFC6298建议使用下式计算超时重传时间RTO</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629585.png" alt="image-20201022153758413"></p><p><strong>往返时间RTT的测量比较复杂</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629586.png" alt="image-20201022154045440"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629587.png" alt="image-20201022154137911"></p><p><strong>TCP超时重传的计算</strong></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629588.png" alt="image-20201022154350745"></p><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629589.png" alt="image-20201022154418863"></p><hr><h1 id="5-7、TCP可靠传输的实现"><a href="#5-7、TCP可靠传输的实现" class="headerlink" title="5.7、TCP可靠传输的实现"></a>5.7、TCP可靠传输的实现</h1><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=63">本集具体讲解</a></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629590.png" alt="image-20201022161436801"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629591.png" alt="image-20201022161734997"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151629592.png" alt="image-20201022164339902"></p><hr><h1 id="5-8、TCP的运输连接管理"><a href="#5-8、TCP的运输连接管理" class="headerlink" title="5.8、TCP的运输连接管理"></a>5.8、TCP的运输连接管理</h1><h2 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151629593.png" alt="image-20201022193215183"></p><h2 id="TCP的连接建立"><a href="#TCP的连接建立" class="headerlink" title="TCP的连接建立"></a>TCP的连接建立</h2><ul><li>TCP 建立连接的过程叫做<strong>握手</strong>。</li><li>握手需要在客户和服务器之间交换三个 TCP 报文段。称之为<strong>三报文握手</strong>。</li><li>采用<strong>三报文握手</strong>主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</li></ul><h3 id="TCP的连接建立要解决以下三个问题"><a href="#TCP的连接建立要解决以下三个问题" class="headerlink" title="TCP的连接建立要解决以下三个问题"></a>TCP的连接建立要解决以下三个问题</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151629594.png" alt="image-20201022193418673"></p><h3 id="TCP使用“三报文握手”建立连接"><a href="#TCP使用“三报文握手”建立连接" class="headerlink" title="TCP使用“三报文握手”建立连接"></a>TCP使用“三报文握手”建立连接</h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li></ul><p>“握手”需要在TCP客户端和服务器之间交换三个TCP报文段</p><p>过程</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629595.png" alt="image-20201022194219693"></p><blockquote><p>最初两端的TCP进程都处于关闭状态</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629596.png" alt="image-20201022194350899"></p><blockquote><p>一开始，TCP服务器进程首先创建传输控制块，用来存储TCP连接中的一些重要信息。例如TCP连接表、指向发送和接收缓存的指针、指向重传队列的指针，当前的发送和接收序号等</p><p>之后，就准备接受TCP客户端进程的连接请求</p><p>此时，TCP服务器进程就进入监听状态，等待TCP客户端进程的连接请求</p></blockquote><p>TCP服务器进程是被动等待来自TCP客户端进程的连接请求，因此成为<strong>被动打开</strong>连接</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629597.png" alt="image-20201022194926877"></p><blockquote><p>TCP客户进程也是首先创建传输控制块</p></blockquote><p>由于TCP连接建立是由TCP客户端主动发起的，因此称为<strong>主动打开</strong>连接</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629598.png" alt="image-20201022195108616"></p><blockquote><p>然后，在打算建立TCP连接时，向TCP服务器进程发送TCP连接请求报文段，并进入同步已发送状态</p><p>TCP连接请求报文段首部中</p><ul><li>同步位SYN被设置为1，表明这是一个TCP连接请求报文段</li><li>序号字段seq被设置了一个初始值x，作为TCP客户端进程所选择的初始序号</li></ul><p>请注意：TCP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629599.png" alt="image-20201022195847144"></p><blockquote><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p>TCP连接请求确认报文段首部中</p><ul><li>同步位SYN和确认为ACK都设置为1，表明这是一个TCP连接请求确认报文段</li><li>序号字段seq被设置了一个初始值y，作为TCP服务器进程所选择的初始序号，</li><li>确认号字段ack的值被设置成了x+1，这是对TCP客户进程所选择的初始序号（seq）的确认</li></ul><p>请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629600.png" alt="image-20201022202010182"></p><blockquote><p>TCP客户进程收到TCP连接请求确认报文段后，还要向TCP服务器进程发送一个普通的TCP确认报文段，并进入连接已连接状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号字段seq被设置为x+1，这是因为TCP客户进程发送的第一个TCP报文段的序号为x，所以TCP客户进程发送的第二个报文段的序号为x+1</li><li>确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认</li></ul><p>请注意：TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629601.png" alt="image-20201022202932905"></p><blockquote><p>TCP服务器进程收到该确认报文段后也进入连接已建立状态</p><p>现在，TCP双方都进入了连接已建立状态，它们可以基于已建立好的TCP连接，进行可靠的数据传输</p></blockquote><p>为什么TCP客户进程最后还要发送一个普通的TCP确认报文段？能否使用“两报文握手”建立连接？</p><p>下图实例是“两报文握手”</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629602.png" alt="image-20201022203744174"></p><blockquote><p>为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误”，这种情况是：一端(client)A发出去的第一个连接请求报文并没有&gt; 丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个&gt; 早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同&gt; 意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因&gt; 此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。</p><p>所以并不<strong>多余</strong>，这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误</p></blockquote><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151629603.png" alt="image-20201022204422775"></p><h2 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h2><ul><li>TCP 连接释放过程比较复杂。</li><li>数据传输结束后，通信的双方都可释放连接。</li><li>TCP 连接释放过程是<strong>四报文握手</strong>。</li></ul><h3 id="TCP通过“四报文挥手”来释放连接"><a href="#TCP通过“四报文挥手”来释放连接" class="headerlink" title="TCP通过“四报文挥手”来释放连接"></a>TCP通过“四报文挥手”来释放连接</h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li><li><strong>任何一方都可以在数据传送结束后发出连接释放的通知</strong></li></ul><p>过程</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629604.png" alt="image-20201022205124204"></p><blockquote><p>现在TCP客户进程和TCP服务器进程都处于连接已建立状态</p><p>TCP客户进程的应用进程通知其主动关闭TCP连接</p><p>TCP客户进程会发送TCP连接释放报文段，并进入终止等待1状态</p><p>TCP连接释放报文段首部中</p><ul><li>终止位FIN和确认为ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的数据的最后一个字节的序号加1</li><li>确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最后一个字节的序号加1</li></ul><p>请注意：TCP规定终止位FIN等于1的报文段即使不携带数据，也要消耗掉一个序号</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629605.png" alt="image-20201022210030419"></p><blockquote><p>TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段并进入关闭等待状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1，这也与之前收到的TCP连接释放报文段中的确认号匹配</li><li>确认号ack字段的值设置为u+1，这是对TCP连接释放报文段的确认</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629606.png" alt="image-20201022232158631"></p><blockquote><p>TCP服务器进程应该通知高层应用进程，TCP客户进程要断开与自己的TCP连接</p><p>此时，从TCP客户进程到TCP服务器进程这个方向的连接就释放了</p><p>这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了</p><p>但如果TCP服务器进程还有数据要发送，TCP客户进程仍要接收，也就是说从TCP服务器进程到TCP客户进程这个方向的连接并未关闭</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629607.png" alt="image-20201022233050922"></p><blockquote><p>TCP客户进程收到TCP确认报文段后就进入终止等待2状态，等待TCP服务器进程发出的TCP连接释放报文段</p><p>若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接</p><p>由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629608.png" alt="image-20201022233941557"></p><blockquote><p>TCP服务器进程发送TCP连接释放报文段并进入最后确认状态</p><p>该报文段首部中</p><ul><li>终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值为w，这是因为在半关闭状态下，TCP服务器进程可能又发送</li><li>确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151629609.png" alt="image-20201022234741310"></p><blockquote><p>TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态</p><p>该报文段首部中</p><ul><li>确认为ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为u+1，这是因为TCP客户进程之前发送的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号</li><li>确认号ack字段的值设置为w+1，这是对所收到的TCP连接释放报文段的确认</li></ul><p>TCP服务器进程收到该报文段后就进入关闭状态，而TCP客户进程还要进过2MSL后才能进入关闭状态</p></blockquote><p>TCP客户进程在发送完最后一个确认报文后，为什么不直接进入关闭状态？而是要进入时间等待状态？</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629610.png" alt="image-20201022234942562"></p><blockquote><p>因为时间等待状态以及处于该状态2MSL时长，可以确保TCP服务器进程可以收到最后一个TCP确认报文段而进入关闭状态</p><p>另外，TCP客户进程在发送完最后一个TCP确认报文段后，在经过2MSL时长，就可以使本次连接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的TCP连接中，不会出现旧连接中的报文段</p></blockquote><h3 id="TCP保活计时器的作用"><a href="#TCP保活计时器的作用" class="headerlink" title="TCP保活计时器的作用"></a>TCP保活计时器的作用</h3><p>TCP双方已经建立了连接，后来，TCP客户进程所在的主机突然出现了故障</p><p>TCP服务器进程以后就不能再收到TCP客户进程发来的数据</p><p>因此，应当有措施使TCP服务器进程不要再白白等待下去</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629611.png" alt="image-20201022235800155"></p><hr><h1 id="5-9、TCP报文段的首部格式"><a href="#5-9、TCP报文段的首部格式" class="headerlink" title="5.9、TCP报文段的首部格式"></a>5.9、TCP报文段的首部格式</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151629612.png" alt="image-20201023000859363"></p><h2 id="各字段的作用"><a href="#各字段的作用" class="headerlink" title="各字段的作用"></a>各字段的作用</h2><p>源端口和目的端口</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629613.png" alt="image-20201023005210010"></p><p>序号、确认号和确认标志位</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629614.png" alt="image-20201023003826059"></p><p>数据偏移、保留、窗口和校验和</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629615.png" alt="image-20201023004227265"></p><p>同步标志位、终止标志位、复位标志位、推送标志位、紧急标志位和紧急指针</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629616.png" alt="image-20201023005001450"></p><p>选项和填充</p><p><img src="http://img-md-js.linjsblog.top/img/202406151629617.png" alt="image-20201023005132426"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第4章（网络层）</title>
      <link href="/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC4%E7%AB%A0%EF%BC%88%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%89/"/>
      <url>/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC4%E7%AB%A0%EF%BC%88%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1、网络层概述"><a href="#4-1、网络层概述" class="headerlink" title="4.1、网络层概述"></a>4.1、网络层概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>网络层的主要任务是<strong>实现网络互连</strong>，进而<strong>实现数据包在各网络之间的传输</strong></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618331.png" alt="image-20201017134630948"></p><blockquote><p>这些异构型网络N1~N7如果只是需要各自内部通信，他们只要实现各自的物理层和数据链路层即可</p><p>但是如果要将这些异构型网络互连起来，形成一个更大的互联网，就需要实现网络层设备路由器</p><p>有时为了简单起见，可以不用画出这些网络，图中N1~N7，而将他们看做是一条链路即可</p></blockquote><ul><li><p>要实现网络层任务，需要解决一下主要问题：</p><ul><li>网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）</li></ul><p>在数据链路层那课讲过的可靠传输，详情可以看那边的笔记：网络层对以下的<strong>分组丢失</strong>、<strong>分组失序</strong>、<strong>分组重复</strong>的传输错误采取措施，使得接收方能正确接受发送方发送的数据，就是<strong>可靠传输</strong>，反之，如果什么措施也不采取，则是<strong>不可靠传输</strong></p><ul><li>网络层寻址问题</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618332.png" alt="image-20201017135644630"></p><ul><li>路由选择问题</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618333.png" alt="image-20201017135710478"></p><blockquote><p>路由器收到数据后，是依据什么来决定将数据包从自己的哪个接口转发出去？</p><p><strong>依据数据包的目的地址和路由器中的路由表</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618334.png" alt="image-20201017135914985"></p><p>但在实际当中，路由器是怎样知道这些路由记录？</p><ul><li>由用户或网络管理员进行人工配置，这种方法只适用于规模较小且网络拓扑不改变的小型互联网</li><li><strong>另一种是实现各种路由选择协议，由路由器执行路由选择协议中所规定的路由选择算法，而自动得出路由表中的路有记录，这种方法更适合规模较大且网络拓扑经常改变的大型互联网</strong></li></ul></blockquote></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618335.png" alt="image-20201017142545630"></p><blockquote><p>补充 <strong>网络层（网际层）</strong>除了 <strong>IP协议</strong>外，还有之前介绍过的<strong>地址解析协议ARP</strong>，还有<strong>网际控制报文协议ICMP</strong>，<strong>网际组管理协议IGMP</strong></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618336.png" alt="image-20201017140623851"></p><hr><h1 id="4-2、网络层提供的两种服务"><a href="#4-2、网络层提供的两种服务" class="headerlink" title="4.2、网络层提供的两种服务"></a>4.2、网络层提供的两种服务</h1><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“<strong>面向连接</strong>”还是“<strong>无连接</strong>”）曾引起了长期的争论。</li><li>争论焦点的实质就是：<strong>在计算机通信中，可靠交付应当由谁来负责</strong>？是<strong>网络</strong>还是<strong>端系统</strong>？</li></ul><h2 id="面向连接的虚电路服务"><a href="#面向连接的虚电路服务" class="headerlink" title="面向连接的虚电路服务"></a>面向连接的虚电路服务</h2><p><strong>一种观点：让网络负责可靠交付</strong></p><ul><li>这种观点认为，应借助于电信网的成功经验，让网络负责可靠交付，计算机网络应模仿电信网络，使用<strong>面向连接</strong>的通信方式。</li><li>通信之前先建立<strong>虚电路</strong> (Virtual Circuit)，以保证双方通信所需的一切网络资源。</li><li>如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点，不丢失、不重复。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618337.png" alt="image-20201017141425892"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的所有分组都沿着同一条虚电路传送</p><blockquote><ul><li>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li><li>请注意，电路交换的电话通信是先建立了一条真正的连接。</li><li>因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样</li></ul></blockquote><h2 id="无连接的数据报服务"><a href="#无连接的数据报服务" class="headerlink" title="无连接的数据报服务"></a>无连接的数据报服务</h2><p><strong>另一种观点：网络提供数据报服务</strong></p><ul><li>互联网的先驱者提出了一种崭新的网络设计思路。</li><li>网络层向上只提供简单灵活的、<strong>无连接的</strong>、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong>。</li><li>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li><strong>网络层不提供服务质量的承诺</strong>。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618338.png" alt="image-20201017141851030"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的分组可能沿着不同路径传送</p><blockquote><p><strong>尽最大努力交付</strong></p><ul><li>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的<strong>主机中的运输层负责可靠交付（包括差错处理、流量控制等）</strong> 。</li><li><strong>采用这种设计思路的好处是</strong>：网络的造价大大降低，运行方式灵活，能够适应多种应用。</li><li>互连网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</li></ul></blockquote><h2 id="虚电路服务与数据报服务的对比"><a href="#虚电路服务与数据报服务的对比" class="headerlink" title="虚电路服务与数据报服务的对比"></a>虚电路服务与数据报服务的对比</h2><p><strong>对比的方面</strong></p><p><strong>虚电路服务</strong></p><p><strong>数据报服务</strong></p><p><strong>思路</strong></p><p><strong>可靠通信应当由网络来保证</strong></p><p><strong>可靠通信应当由用户主机来保证</strong></p><p><strong>连接的建立</strong></p><p><strong>必须有</strong></p><p><strong>不需要</strong></p><p><strong>终点地址</strong></p><p><strong>仅在连接建立阶段使用，每个分组使用短的虚电路号</strong></p><p><strong>每个分组都有终点的完整地址</strong></p><p><strong>分组的转发</strong></p><p><strong>属于同一条虚电路的分组均按照同一路由进行转发</strong></p><p><strong>每个分组独立选择路由进行转发</strong></p><p><strong>当结点出故障时</strong></p><p><strong>所有通过出故障的结点的虚电路均不能工作</strong></p><p><strong>出故障的结点可能会丢失分组，一些路由可能会发生变化</strong></p><p><strong>分组的顺序</strong></p><p><strong>总是按发送顺序到达终点</strong></p><p><strong>到达终点时不一定按发送顺序</strong></p><p><strong>端到端的差错处理和流量控制</strong></p><p><strong>可以由网络负责，也可以由用户主机负责</strong></p><p><strong>由用户主机负责</strong></p><hr><h1 id="4-3、IPv4"><a href="#4-3、IPv4" class="headerlink" title="4.3、IPv4"></a>4.3、IPv4</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618339.png" alt="image-20201017143206060"></p><h2 id="分类编制的IPv4地址"><a href="#分类编制的IPv4地址" class="headerlink" title="分类编制的IPv4地址"></a>分类编制的IPv4地址</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618340.png" alt="image-20201017144317166"></p><ul><li>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）。</li><li>主机号在它前面的网络号所指明的网络范围内必须是唯一的。</li><li>由此可见，<strong>一个 IP 地址在整个互联网范围内是唯一的</strong>。</li></ul><p><strong>A类地址</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618341.png" alt="image-20201017145210533"></p><p><strong>B类地址</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618342.png" alt="image-20201017145508001"></p><p><strong>C类地址</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618343.png" alt="image-20201017150204774"></p><p><strong>练习</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618344.png" alt="image-20201017150543386"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>IP 地址的指派范围</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618345.png" alt="image-20201017152911541"></p><p><strong>一般不使用的特殊的 IP 地址</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618346.png" alt="image-20201017152959586"></p><p><strong>IP 地址的一些重要特点</strong></p><p>(1) <strong>IP 地址是一种分等级的地址结构</strong>。分两个等级的好处是：</p><ul><li><strong>第一</strong>，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li><strong>第二</strong>，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li></ul><p>(2) <strong>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口</strong>。</p><ul><li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为<strong>多归属主机</strong> (multihomed host)。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此<strong>一个路由器至少应当有两个不同的 IP 地址</strong>。</li></ul><p>(3) <strong>用转发器或网桥连接起来的若干个局域网仍为一个网络</strong>，因此这些局域网都具有同样的网络号 net-id。</p><p>(4) <strong>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</strong></p><h2 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h2><h3 id="为什么要划分子网"><a href="#为什么要划分子网" class="headerlink" title="为什么要划分子网"></a>为什么要划分子网</h3><p>在 ARPANET 的早期，IP 地址的设计确实不够合理：</p><ul><li>IP 地址空间的利用率有时很低。</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</li><li>两级的 IP 地址不够灵活。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618347.png" alt="image-20201017154645198"></p><p>如果想要将原来的网络划分成三个独立的网路</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618348.png" alt="image-20201017154852896"></p><p>所以是否可以从主机号部分借用一部分作为子网号</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618349.png" alt="image-20201017155026814"></p><blockquote><p>但是如果未在图中标记子网号部分，那么我们和计算机又如何知道分类地址中主机号有多少比特被用作子网号了呢？</p><p>所以就有了划分子网的工具：<strong>子网掩码</strong></p><ul><li>从 1985 年起在 IP 地址中又增加了一个“<strong>子网号字段</strong>”，使两级的 IP 地址变成为<strong>三级的 IP 地址</strong>。</li><li>这种做法叫做<strong>划分子网</strong> (subnetting) 。</li><li>划分子网已成为互联网的正式标准协议。</li></ul></blockquote><h3 id="如何划分子网"><a href="#如何划分子网" class="headerlink" title="如何划分子网"></a>如何划分子网</h3><p>基本思路</p><ul><li>划分子网纯属一个<strong>单位内部的事情</strong>。单位对外仍然表现为没有划分子网的网络。</li><li>从主机号<strong>借用</strong>若干个位作为<strong>子网号</strong> subnet-id，而主机号 host-id 也就相应减少了若干个位。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618350.png" alt="image-20201017155930011"></p><ul><li>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的<strong>目的网络号</strong> net-id，先找到连接在本单位网络上的路由器。</li><li>然后<strong>此路由器</strong>在收到 IP 数据报后，再按<strong>目的网络号</strong> net-id 和<strong>子网号</strong> subnet-id 找到目的子网。</li><li>最后就将 IP 数据报直接交付目的主机。</li></ul><p>划分为三个子网后对外仍是一个网络</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618351.png" alt="image-20201017160116239"></p><blockquote><ul><li><strong>优点</strong><ol><li>减少了 IP 地址的浪费</li><li>使网络的组织更加灵活</li><li>更便于维护和管理</li></ol></li><li><strong>划分子网纯属一个单位内部的事情，对外部网络透明</strong>，对外仍然表现为没有划分子网的一个网络。</li></ul></blockquote><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618352.png" alt="image-20201017160252066"></p><blockquote><p><strong>(IP 地址) AND (子网掩码) &#x3D; 网络地址</strong> 重要，下面很多相关知识都会用到</p></blockquote><p>举例</p><p>例子1</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618353.png" alt="image-20201017161651058"></p><p>例子2</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618354.png" alt="image-20201017161719339"></p><p><strong>默认子网掩码</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618355.png" alt="image-20201017162807076"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618356.png" alt="image-20201017162938612"></p><blockquote><ul><li>子网掩码是一个网络或一个子网的重要属性。</li><li>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</li><li>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</li><li>若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</li></ul></blockquote><h2 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h2><h3 id="为什么使用无分类编址"><a href="#为什么使用无分类编址" class="headerlink" title="为什么使用无分类编址"></a>为什么使用无分类编址</h3><p><strong>无分类域间路由选择 CIDR</strong> (Classless Inter-Domain Routing)。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618357.png" alt="image-20201017164031532"></p><blockquote><p><strong>CIDR 最主要的特点</strong></p><ul><li>CIDR使用各种长度的“<strong>网络前缀</strong>”(network-prefix)来代替分类地址中的网络号和子网号。</li><li><strong>IP 地址从三级编址（使用子网掩码）又回到了两级编址</strong>。</li></ul></blockquote><h3 id="如何使用无分类编址"><a href="#如何使用无分类编址" class="headerlink" title="如何使用无分类编址"></a>如何使用无分类编址</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618358.png" alt="image-20201017165037268"></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618359.png" alt="image-20201017165113442"></p><h3 id="路由聚合（构造超网）"><a href="#路由聚合（构造超网）" class="headerlink" title="路由聚合（构造超网）"></a>路由聚合（构造超网）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618360.png" alt="image-20201017165615915"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618361.png" alt="image-20201017170552495"></p><h2 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h2><p>给定一个IPv4地址快，如何将其划分成几个更小的地址块，并将这些地址块分配给互联网中不同网络，进而可以给各网络中的主机和路由器接口分配IPv4地址</p><h3 id="定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）"><a href="#定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）" class="headerlink" title="定长的子网掩码FLSM（Fixed Length Subnet Mask）"></a>定长的子网掩码FLSM（Fixed Length Subnet Mask）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618362.png" alt="image-20201018143550103"></p><p><strong>划分子网的IPv4就是定长的子网掩码</strong></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618363.png" alt="image-20201018140809079"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618364.png" alt="image-20201018140916631"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618365.png" alt="image-20201018141132446"></p><blockquote><p>通过上面步骤分析，就可以从子网1<del>8中任选5个分配给左图中的N1</del>N5</p><p><strong>采用定长的子网掩码划分，只能划分出2^n个子网，其中n是从主机号部分借用的用来作为子网号的比特数量，每个子网所分配的IP地址数量相同</strong></p><p><strong>但是也因为每个子网所分配的IP地址数量相同，不够灵活，容易造成IP地址的浪费</strong></p></blockquote><h3 id="变长的子网掩码VLSM（Variable-Length-Subnet-Mask）"><a href="#变长的子网掩码VLSM（Variable-Length-Subnet-Mask）" class="headerlink" title="变长的子网掩码VLSM（Variable Length Subnet Mask）"></a>变长的子网掩码VLSM（Variable Length Subnet Mask）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618366.png" alt="image-20201018143632352"></p><p><strong>无分类编址的IPv4就是变长的子网掩码</strong></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618367.png" alt="image-20201018142333145"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618368.png" alt="image-20201018143344440"></p><hr><h1 id="4-4、IP数据报的发送和转发过程"><a href="#4-4、IP数据报的发送和转发过程" class="headerlink" title="4.4、IP数据报的发送和转发过程"></a>4.4、IP数据报的发送和转发过程</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151618369.png" alt="image-20201018144335297"></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618370.png" alt="image-20201018151314019"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618372.png" alt="image-20201018150151171"></p><p>源主机如何知道目的主机是否与自己在同一个网络中，是直接交付，还是间接交付？</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618373.png" alt="image-20201018150223497"></p><blockquote><p>可以通过<strong>目的地址IP</strong>和<strong>源地址的子网掩码</strong>进行<strong>逻辑与运算</strong>得到<strong>目的网络地址</strong></p><ul><li>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>相同</strong>，就是<strong>在同一个网络</strong>中，属于<strong>直接交付</strong></li><li>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>不相同</strong>，就<strong>不在同一个网络</strong>中，属于<strong>间接交付</strong>，传输给主机所在网络的<strong>默认网关</strong>（路由器——下图会讲解）,由默认网关帮忙转发</li></ul></blockquote><p>主机C如何知道路由器R的存在？</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618374.png" alt="image-20201018145501063"></p><blockquote><p>用户为了让本网络中的主机能和其他网络中的主机进行通信，就必须给其指定本网络的一个路由器的接口，由该路由器帮忙进行转发，<strong>所指定的路由器</strong>，也被称为<strong>默认网关</strong></p><p>例如。路由器的接口0的IP地址192.168.0.128做为左边网络的默认网关</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618375.png" alt="image-20201018150029179"></p><blockquote><p>主机A会将该IP数据报传输给自己的默认网关，也就是图中所示的路由器接口0</p></blockquote><p>路由器收到IP数据报后如何转发？</p><ul><li>检查IP数据报首部是否出错：<ul><li>若出错，则直接丢弃该IP数据报并通告源主机</li><li>若没有出错，则进行转发</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目：<ul><li>若找到匹配的条目，则转发给条目中指示的吓一跳</li><li>若找不到，则丢弃该数据报并通告源主机</li></ul></li></ul><p>假设IP数据报首部没有出错，路由器取出IP数据报首部各地址字段的值</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618376.png" alt="image-20201018151108989"></p><p>接下来路由器对该IP数据报进行查表转发</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618377.png" alt="image-20201018151528027"></p><blockquote><p>逐条检查路由条目，将目的地址与路由条目中的地址掩码进行逻辑与运算得到目的网络地址，然后与路由条目中的目的网络进行比较，如果相同，则这条路由条目就是匹配的路由条目，按照它的下一条指示，图中所示的也就是接口1转发该IP数据报</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618378.png" alt="image-20201018151956275"></p><p>路由器是隔离广播域的</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618379.png" alt="image-20201018152040610"></p><hr><h1 id="4-5、静态路由配置及其可能产生的路由环路问题"><a href="#4-5、静态路由配置及其可能产生的路由环路问题" class="headerlink" title="4.5、静态路由配置及其可能产生的路由环路问题"></a>4.5、静态路由配置及其可能产生的路由环路问题</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618380.png" alt="image-20201018155702081"></p><h2 id="多种情况举例"><a href="#多种情况举例" class="headerlink" title="多种情况举例"></a>多种情况举例</h2><p><strong>静态路由配置</strong></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618381.png" alt="image-20201018160349375"></p><p><strong>默认路由</strong></p><p>举例</p><p>默认路由可以被所有网络匹配，但路由匹配有优先级，默认路由是优先级最低的</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618382.png" alt="image-20201018160906284"></p><p><strong>特定主机路由</strong></p><p>举例</p><p>有时候，我们可以给路由器添加针对某个主机的特定主机路由条目</p><p>一般用于网络管理人员对网络的管理和测试</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618383.png" alt="image-20201018161440257"></p><blockquote><p>多条路由可选，匹配路由最具体的</p></blockquote><p><strong>静态路由配置错误导致路由环路</strong></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618384.png" alt="image-20201018161542579"></p><p>假设将R2的路由表中第三条目录配置错了下一跳</p><p>这导致R2和R3之间产生了路由环路</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618385.png" alt="image-20201018162041966"></p><p><strong>聚合了不存在的网络而导致路由环路</strong></p><p>举例</p><p>正常情况</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618386.png" alt="image-20201018162333671"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618387.png" alt="image-20201018162759562"></p><p>错误情况</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618388.png" alt="image-20201018163323343"></p><p>解决方法</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618389.png" alt="image-20201018163933715"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618390.png" alt="image-20201018164453398"></p><blockquote><p>黑洞路由的下一跳为null0，这是路由器内部的虚拟接口，IP数据报进入它后就被丢弃</p></blockquote><p><strong>网络故障而导致路由环路</strong></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618391.png" alt="image-20201018164811811"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618392.png" alt="image-20201018164913684"></p><p>解决方法</p><p>添加故障的网络为黑洞路由</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618393.png" alt="image-20201018165122023"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618394.png" alt="image-20201018165153517"></p><p>假设。一段时间后故障网络恢复了</p><p>R1又自动地得出了其接口0的直连网络的路由条目</p><p>针对该网络的黑洞网络会自动失效</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618395.png" alt="image-20201018165328319"></p><p>如果又故障</p><p>则生效该网络的黑洞网络</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618396.png" alt="image-20201018165521938"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618397.png" alt="image-20201018165709294"></p><hr><h1 id="4-6、路由选择协议"><a href="#4-6、路由选择协议" class="headerlink" title="4.6、路由选择协议"></a>4.6、路由选择协议</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618398.png" alt="image-20201019134827343"></p><p><strong>因特网所采用的路由选择协议的主要特点</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618399.png" alt="image-20201019134946971"></p><p><strong>因特网采用分层次的路由选择协议</strong></p><ul><li><strong>自治系统 AS</strong>：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618400.png" alt="image-20201019135122326"></p><blockquote><p>自治系统之间的路由选择简称为域间路由选择，自治系统内部的路由选择简称为域内路由选择</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618401.png" alt="image-20201019135328925"></p><blockquote><p>域间路由选择使用外部网关协议EGP这个类别的路由选择协议</p><p>域内路由选择使用内部网关协议IGP这个类别的路由选择协议</p><p><strong>网关协议</strong>的名称可称为<strong>路由协议</strong></p></blockquote><p><strong>常见的路由选择协议</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618402.png" alt="image-20201019140009740"></p><p><strong>路由器的基本结构</strong></p><p>路由器是一种具有多个输入端口，和输出端口的专用计算机，其任务是转发分组</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618403.png" alt="image-20201019140234652"></p><p>路由器结构可划分为两大部分：</p><p>1、<strong>分组转发部分</strong></p><p>由三部分构成</p><ul><li><p>交换结构</p></li><li><p>一组输入端口：</p><p>信号从某个输入端口进入路由器</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618404.png" alt="image-20201019141149194"></p><p>物理层将信号转换成比特流，送交数据链路层处理</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618405.png" alt="image-20201019141210774"></p><p>数据链路层识别从比特流中识别出帧，去掉帧头和帧尾后，送交网络层处理</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618406.png" alt="image-20201019141242246"></p><p>如果送交网络层的分组是普通待转发的数据分组</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618407.png" alt="image-20201019141305650"></p><p>则根据分组首部中的目的地址进行查表转发</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618408.png" alt="image-20201019141327380"></p><p>若找不到匹配的转发条目，则丢弃该分组，否则，按照匹配条目中所指示的端口进行转发</p></li><li><p>一组输出端口</p><p>网络层更新数据分组首部中某些字段的值，例如将数据分组的生存时间减1，然后送交数据链路层进行封装</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618409.png" alt="image-20201019141745375"></p><p>数据链路层将数据分组封装成帧，交给物理层处理</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618410.png" alt="image-20201019141838032"></p><p>物理层将帧看成比特流将其变换成相应的电信号进行发送</p></li></ul><blockquote><p>路由器的各端口还会有输入缓冲区和输出缓冲区</p><ul><li><p>输入缓冲区用来暂存新进入路由器但还来不及处理的分组</p></li><li><p>输出缓冲区用来暂存已经处理完毕但还来不及发送的分组</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618411.png" alt="image-20201019143040253"></p><p><strong>路由器的端口一般都具有输入和输出功能</strong>，这些实例分出了输入端口和输出端口是更好演示路由基本工作过程</p></blockquote><p>2、<strong>路由选择部分</strong></p><ul><li><p>路由选择部分的核心构件是路由选择处理机，它的任务是根据所使用的路由选择协议。周期性地与其他路由器 进行路由信息的交互，来更新路由表</p><p>如果送交给输入端口的网络层的分组是路由器之间交换路由信息的路由报文，则把这种分组送交给路由选择处理机</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618412.png" alt="image-20201019142228360"></p><p>路由选择处理机根据分组的内容来更新自己的<strong>路由表</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618413.png" alt="image-20201019142415055"></p><p>路由选择处理机还会周期性地给其他路由器发送自己所知道的路由信息</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618414.png" alt="image-20201019142924889"></p></li></ul><h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618415.png" alt="image-20201019144915687"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618416.png" alt="image-20201019145247606"></p><p><strong>RIP的基本工作过程</strong></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618417.png" alt="image-20201019145510947"></p><p><strong>RIP的路由条目的更新规则</strong></p><p>举例1</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618418.png" alt="image-20201019145627339"></p><blockquote><p>路由器C的表到达各目的网络的下一条都记为问号，可以理解为路由器D并不需要关心路由器C的这些内容</p><p>假设路由器C的RIP更新报文发送周期到了，则路由器C将自己路由表中的相关路由信息封装到RIP更新报文中发送给路由器D</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618419.png" alt="image-20201019150120900"></p><blockquote><p>路由器C能到达这些网络，说明路由器C的相邻路由器也能到达，只是比路由器C的距离大1，于是根据距离的对比，路由器D更新自己的路由表</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618420.png" alt="image-20201019150412666"></p><p>举例2</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618421.png" alt="image-20201019150525711"></p><p><strong>RIP存在“坏消息传播得慢”的问题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618422.png" alt="image-20201019151041492"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618423.png" alt="image-20201019151135255"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618424.png" alt="image-20201019151332767"></p><p>解决方法</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618425.png" alt="image-20201019151639181"></p><blockquote><p>但是，这些方法也不能完全解决“坏消息传播得慢”的问题，这是距离向量的本质决定</p></blockquote><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618426.png" alt="image-20201019152526098"></p><blockquote><p>RIP 协议的优缺点</p><p>优点：</p><ol><li>实现简单，开销较小。</li></ol><p>缺点：</p><ol><li><p>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</p></li><li><p>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</p></li><li><p>“坏消息传播得慢”，使更新过程的收敛时间过长。</p></li></ol></blockquote><h2 id="开放最短路径优先OSPF"><a href="#开放最短路径优先OSPF" class="headerlink" title="开放最短路径优先OSPF"></a>开放最短路径优先OSPF</h2><p><strong>开放最短路径优先 OSPF (Open Shortest Path First)</strong></p><p><strong>注意</strong>：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p><p><strong>概念</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618427.png" alt="image-20201019161841695"></p><p><strong>问候（Hello）分组</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618429.png" alt="image-20201019161653875"></p><blockquote><p>IP数据报首部中协议号字段的取值应为89，来表明IP数据报的数据载荷为OSPF分组</p></blockquote><p><strong>发送链路状态通告LSA</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618430.png" alt="image-20201019162341151"></p><blockquote><p>洪泛法有点类似于广播，就是从一个接口进来，从其他剩余所有接口出去</p></blockquote><p><strong>链路状态数据库同步</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618431.png" alt="image-20201019162933483"></p><p><strong>使用SPF算法计算出各自路由器到达其他路由器的最短路径</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618432.png" alt="image-20201019163148068"></p><p><strong>OSPF五种分组类型</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618433.png" alt="image-20201019163250129"></p><p><strong>OSPF的基本工作过程</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618434.png" alt="image-20201019163746254"></p><p><strong>OSPF在多点接入网络中路由器邻居关系建立</strong></p><p>如果不采用其他机制，将会产生大量的多播分组</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618435.png" alt="image-20201019164657606"></p><blockquote><p>若DR出现问题，则由BDR顶替DR</p></blockquote><p><strong>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域（Area）</strong></p><ul><li><p>在该自治系统内，所有路由器都使用OSPF协议，OSPF将该自治系统再划分成4个更小的区域</p></li><li><p>每个区域都有一个32比特的区域标识符</p></li><li><p>主干区域的区域标识符必须为0，主干区域用于连通其他区域</p></li><li><p>其他区域的区域标识符不能为0且不相同</p></li><li><p>每个区域一般不应包含路由器超过200个</p></li><li><p>划分区域的好处就是，利用洪泛法交换链路状态信息局限于每一个区域而不是自治系统，这样减少整个网络上的通信量</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618436.png" alt="image-20201019170100568"></p><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618437.png" alt="image-20201019170217622"></p><h2 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h2><p>BGP（Border Gateway Protocol） 是<strong>不同自治系统的路由器之间</strong>交换路由信息的协议</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618438.png" alt="image-20201019191438399"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618439.png" alt="image-20201019191718506"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618440.png" alt="image-20201019191836397"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618441.png" alt="image-20201019192031087"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618442.png" alt="image-20201019192059962"></p><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618443.png" alt="image-20201019192840368"></p><h2 id="直接封装RIP、OSPF和BGP报文的协议"><a href="#直接封装RIP、OSPF和BGP报文的协议" class="headerlink" title="直接封装RIP、OSPF和BGP报文的协议"></a>直接封装RIP、OSPF和BGP报文的协议</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618444.png" alt="image-20201019192800829"></p><hr><h1 id="4-7、IPv4数据报的首部格式"><a href="#4-7、IPv4数据报的首部格式" class="headerlink" title="4.7、IPv4数据报的首部格式"></a>4.7、IPv4数据报的首部格式</h1><h2 id="各字段的作用"><a href="#各字段的作用" class="headerlink" title="各字段的作用"></a>各字段的作用</h2><ul><li>一个 IP 数据报由<strong>首部</strong>和<strong>数据</strong>两部分组成。</li><li><strong>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。</strong></li><li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618445.png" alt="image-20201019205931748"></p><p>图中的每一行都由32个比特（也就是4个字节）构成，每个小格子称为字段或者域，每个字段或某些字段的组合用来表达IP协议的相关功能</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618446.png" alt="image-20201019211719880"></p><blockquote><p><strong>IP数据报的首部长度一定是4字节的整数倍</strong></p><p>因为首部中的可选字段的长度从1个字节到40个字节不等，那么，当20字节的固定部分加上1到40个字节长度不等的可变部分，<strong>会造成首部长度不是4字节整数倍时，就用取值为全0的填充字段填充相应个字节</strong>，以确保IP数据报的首部长度是4字节的整数倍</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618447.png" alt="image-20201019212617006"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618448.png" alt="image-20201019220435415"></p><p><strong>对IPv4数据报进行分片</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618449.png" alt="image-20201019221021157"></p><p>​ 现在假定分片2的IP数据报经过某个网络时还需要进行分片</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618450.png" alt="image-20201019221246870"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618451.png" alt="image-20201019222512112"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618452.png" alt="image-20201019222552444"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618453.png" alt="image-20201019222729797"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618454.png" alt="image-20201019223101434"></p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618455.png" alt="image-20201019225141559"></p><hr><h1 id="4-8、网际控制报文协议ICMP"><a href="#4-8、网际控制报文协议ICMP" class="headerlink" title="4.8、网际控制报文协议ICMP"></a>4.8、网际控制报文协议ICMP</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>架构IP网络时需要特别注意两点：</p><ul><li>确认网络是否正常工作</li><li>遇到异常时进行问题诊断</li></ul><p><strong>而ICMP就是实现这些问题的协议</strong></p><p>ICMP的主要功能包括：</p><ul><li>确认IP包是否成功送达目标地址</li><li>通知在发送过程当中IP包被废弃的具体原因</li><li>改善网络设置等</li></ul><p><strong>有了这些功能以后，就可以获得网络是否正常，设置是否有误以及设备有何异常等信息，从而便于进行网络上的问题诊断</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618456.png" alt="image-20201019232539898"></p><p><strong>ICMP 不是高层协议（看起来好像是高层协议，因为 ICMP 报文是装在 IP 数据报中，作为其中的数据部分），而是 IP 层的协议</strong></p><p>ICMP 报文的格式</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618457.png" alt="image-20201020001035813"></p><h2 id="ICMP差错报告报文"><a href="#ICMP差错报告报文" class="headerlink" title="ICMP差错报告报文"></a>ICMP差错报告报文</h2><h3 id="终点不可达"><a href="#终点不可达" class="headerlink" title="终点不可达"></a>终点不可达</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618458.png" alt="image-20201019230838587"></p><h3 id="源点抑制"><a href="#源点抑制" class="headerlink" title="源点抑制"></a>源点抑制</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618459.png" alt="image-20201019231022291"></p><h3 id="时间超过"><a href="#时间超过" class="headerlink" title="时间超过"></a>时间超过</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618460.png" alt="image-20201019231230798"></p><h3 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618461.png" alt="image-20201019231355471"></p><h3 id="改变路由（重定向）"><a href="#改变路由（重定向）" class="headerlink" title="改变路由（重定向）"></a>改变路由（重定向）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618462.png" alt="image-20201019231553990"></p><h3 id="不应发送ICMP差错报告报文情况"><a href="#不应发送ICMP差错报告报文情况" class="headerlink" title="不应发送ICMP差错报告报文情况"></a>不应发送ICMP差错报告报文情况</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618463.png" alt="image-20201019231733673"></p><h2 id="ICMP应用举例"><a href="#ICMP应用举例" class="headerlink" title="ICMP应用举例"></a>ICMP应用举例</h2><h3 id="分组网间探测PING（Packet-InterNet-Groper）"><a href="#分组网间探测PING（Packet-InterNet-Groper）" class="headerlink" title="分组网间探测PING（Packet InterNet Groper）"></a>分组网间探测PING（Packet InterNet Groper）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618464.png" alt="image-20201019233817921"></p><h3 id="跟踪路由（traceroute）"><a href="#跟踪路由（traceroute）" class="headerlink" title="跟踪路由（traceroute）"></a>跟踪路由（traceroute）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151618465.png" alt="image-20201019234123026"></p><p><strong>tracert命令的实现原理</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618466.png" alt="image-20201019234718107"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618467.png" alt="image-20201019234741268"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618468.png" alt="image-20201019234758693"></p><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618469.png" alt="image-20201019234909146"></p><hr><h1 id="4-9、虚拟专用网VPN与网络地址转换NAT"><a href="#4-9、虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="4.9、虚拟专用网VPN与网络地址转换NAT"></a>4.9、虚拟专用网VPN与网络地址转换NAT</h1><h2 id="虚拟专用网VPN（Virtual-Private-Network）"><a href="#虚拟专用网VPN（Virtual-Private-Network）" class="headerlink" title="虚拟专用网VPN（Virtual Private Network）"></a>虚拟专用网VPN（Virtual Private Network）</h2><ul><li>由于 <strong>IP 地址的紧缺</strong>，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。</li><li>考虑到<strong>互联网并不很安全</strong>，一个机构内也并不需要把所有的主机接入到外部的互联网。</li><li>假定在一个机构内部的计算机通信也是采用 TCP&#x2F;IP 协议，那么从原则上讲，对于这些仅在<strong>机构内部使用</strong>的计算机就可以由本机构<strong>自行分配其 IP 地址</strong>。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151618470.png" alt="image-20201019235534728"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618471.png" alt="image-20201019235631474"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618472.png" alt="image-20201019235718010"></p><blockquote><p>上图是因特网数字分配机构IANA官网查看IPv4地址空间中特殊地址的分配方案</p><p>用粉红色标出来的地址就是无需申请的、可自由分配的专用地址，或称私有地址</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618473.png" alt="image-20201020000136443"></p><blockquote><p>私有地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信</p><p>私有地址只能用作本地地址而不能用作全球地址</p><p>因特网中所有路由器对目的地址是私有地址的IP数据报一律不进行转发</p><p><strong>本地地址与全球地址</strong></p><ul><li><strong>本地地址</strong>——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</li><li><strong>全球地址</strong>——全球唯一的 IP 地址，必须向互联网的管理机构申请。</li><li><strong>问题</strong>：在内部使用的本地地址就有可能和互联网中某个 IP 地址重合，这样就会出现地址的二义性问题。</li></ul></blockquote><p>所以部门A和部门B至少需要一个 路由器具有合法的全球IP地址，这样各自的专用网才能利用公用的因特网进行通信</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618474.png" alt="image-20201020000618797"></p><p>部门A向部门B发送数据流程</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618475.png" alt="image-20201020001107425"></p><blockquote><p>两个专用网内的主机间发送的数据报是通过了公用的因特网，但在效果上就好像是在本机构的专用网上传送一样</p><p>数据报在因特网中可能要经过多个网络和路由器，但从逻辑上看，R1和R2之间好像是一条直通的点对点链路</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618476.png" alt="image-20201020001528569"></p><p>因此也被称为IP隧道技术</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618477.png" alt="image-20201020001935801"></p><h2 id="网络地址转换NAT（Network-Address-Translation）"><a href="#网络地址转换NAT（Network-Address-Translation）" class="headerlink" title="网络地址转换NAT（Network Address Translation）"></a>网络地址转换NAT（Network Address Translation）</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618478.png" alt="image-20201020002020607"></p><p>举例</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618479.png" alt="image-20201020002439942"></p><blockquote><p>使用私有地址的主机，如何才能与因特网上使用全球IP地址的主机进行通信？</p><p>这需要在专用网络连接到因特网的路由器上安装NAT软件</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151618480.png" alt="image-20201020002734192"></p><blockquote><p>专有NAT软件的路由器叫做NAT路由器</p><p>它至少有一个有效的外部全球IP地址</p><p>这样，所有使用私有地址的主机在和外界通信时，都要在NAT路由器上将其私有地址转换为全球IP地址</p></blockquote><p>假设，使用私有地址的主机要给因特网上使用全球IP地址的另一台主机发送IP数据报</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618481.png" alt="image-20201020003238729"></p><p>因特网上的这台主机给源主机发回数据报</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618482.png" alt="image-20201020003411024"></p><p>当专用网中的这两台使用私有地址的主机都要给因特网使用全球地址的另一台主机发送数据报时，在NAT路由器的NAT转换表中就会产生两条记录，分别记录两个私有地址与全球地址的对应关系</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618483.png" alt="image-20201020003658349"></p><p>这种基本转换存在一个问题</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618484.png" alt="image-20201020003733863"></p><p>解决方法</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618485.png" alt="image-20201020003840584"></p><blockquote><p>我们现在用的很多家用路由器都是这种NART路由器</p></blockquote><p>内网主机与外网主机的通信，是否能由外网主机首先发起？</p><p>否定</p><p><img src="http://img-md-js.linjsblog.top/img/202406151618486.png" alt="image-20201020004159360"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151618487.png" alt="image-20201020004312942"></p><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151618488.png" alt="image-20201020004447021"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第3章（数据链路层）</title>
      <link href="/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC3%E7%AB%A0%EF%BC%88%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%89/"/>
      <url>/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC3%E7%AB%A0%EF%BC%88%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1、数据链路层概述"><a href="#3-1、数据链路层概述" class="headerlink" title="3.1、数据链路层概述"></a>3.1、数据链路层概述</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>链路</strong>是从一个结点到相邻结点的一段物理线路，<strong>数据链路</strong>则是在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</p><p><strong>网络中的主机、路由器等都必须实现数据链路层</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611620.png" alt="image-20201011102531462"></p><p><strong>局域网中的主机、交换机等都必须实现数据链路层</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611621.png" alt="image-20201014004326549"></p><p><strong>从层次上来看数据的流动</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611623.png" alt="image-20201011102618878"></p><p><strong>仅从数据链路层观察帧的流动</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611624.png" alt="image-20201011102653161"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611625.png" alt="image-20201011102733584"></p><blockquote><p>主机H1 到主机H2 所经过的网络可以是多种不同类型的</p><p><strong>注意：不同的链路层可能采用不同的数据链路层协议</strong></p></blockquote><p><strong>数据链路层使用的信道</strong></p><p>数据链路层属于计算机网路的低层。<strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li>点对点信道</li><li>广播信道</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611626.png" alt="image-20201014004459744"></p><blockquote><p><strong>局域网属于数据链路层</strong></p><p>局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。</p><p>而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</p></blockquote><h2 id="三个重要问题"><a href="#三个重要问题" class="headerlink" title="三个重要问题"></a>三个重要问题</h2><p>数据链路层传送的协议数据单元是<strong>帧</strong></p><p><strong>封装成帧</strong></p><ul><li><strong>封装成帧</strong> (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611627.png" alt="image-20201011103650253"></p><p><strong>差错控制</strong></p><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0， 而 0 也可能变成 1。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611628.png" alt="image-20201011103917512"></p><p><strong>可靠传输</strong></p><p>接收方主机收到有误码的帧后，是不会接受该帧的，会将它丢弃</p><p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会再有更多措施</p><p><strong>如果数据链路层向其上层提供的是可靠服务，那就还需要其他措施，来确保接收方主机还可以重新收到被丢弃的这个帧的正确副本</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611629.png" alt="image-20201011105314053"></p><blockquote><p>以上三个问题都是使用<strong>点对点信道的数据链路层</strong>来举例的</p></blockquote><p><strong>如果使用广播信道的数据链路层除了包含上面三个问题外，还有一些问题要解决</strong></p><p>如图所示，主机A，B，C，D，E通过一根总线进行互连，主机A要给主机C发送数据，代表帧的信号会通过总线传输到总线上的其他各主机，那么主机B，D，E如何知道所收到的帧不是发送给她们的，主机C如何知道发送的帧是发送给自己的</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611630.png" alt="image-20201011105824466"></p><p>可以用编址（地址）的来解决</p><p>将帧的目的地址添加在帧中一起传输</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611631.png" alt="image-20201011110017415"></p><p>还有数据碰撞问题</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611632.png" alt="image-20201011110129994"></p><blockquote><p>随着技术的发展，交换技术的成熟，</p><p>在 有线（局域网）领域 使用<strong>点对点链路</strong>和<strong>链路层交换机</strong>的<strong>交换式局域网</strong>取代了共享式局域网</p><p>在无线局域网中仍然使用的是共享信道技术</p></blockquote><hr><h1 id="3-2、封装成帧"><a href="#3-2、封装成帧" class="headerlink" title="3.2、封装成帧"></a>3.2、封装成帧</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p><ul><li><strong>帧头和帧尾中包含有重要的控制信息</strong></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611633.png" alt="image-20201011110851301"></p><p>发送方的数据链路层将上层交付下来的协议数据单元封装成帧后，还要通过物理层，将构成帧的各比特，转换成电信号交给传输媒体，那么接收方的数据链路层如何从物理层交付的比特流中提取出一个个的帧？</p><p>答：需要帧头和帧尾来做<strong>帧定界</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611634.png" alt="image-20201011111334052"></p><p>但比不是每一种数据链路层协议的帧都包含有帧定界标志，例如下面例子</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611635.png" alt="image-20201011111729324"></p><blockquote><p>前导码</p><ul><li>前同步码：作用是使接收方的时钟同步</li><li>帧开始定界符：表明其后面紧跟着的就是MAC帧</li></ul></blockquote><p>另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611636.png" alt="image-20201011112450187"></p><h2 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h2><blockquote><p><strong>透明</strong></p><p>指某一个实际存在的事物看起来却好像不存在一样。</p></blockquote><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，好像数据链路层不存在一样</p><p>帧界定标志也就是个特定数据值，如果在上层交付的协议数据单元中， 恰好也包含这个特定数值，接收方就不能正确接收</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611637.png" alt="image-20201011113207944"></p><blockquote><p>所以数据链路层应该对上层交付的数据有限制，其内容不能包含帧定界符的值</p></blockquote><p><strong>解决透明传输问题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611638.png" alt="image-20201011113804721"></p><ul><li><strong>解决方法</strong>：面向字节的物理链路使用<strong>字节填充</strong> (byte stuffing) 或<strong>字符填充</strong> (character stuffing)，面向比特的物理链路使用<strong>比特填充</strong>的方法实现透明传输</li><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面<strong>插入一个转义字符“ESC”</strong>(其十六进制编码是1B)。</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li></ul><p><strong>帧的数据部分长度</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611639.png" alt="image-20201011115008209"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611640.png" alt="image-20201011115049672"></p><hr><h1 id="3-3、差错检测"><a href="#3-3、差错检测" class="headerlink" title="3.3、差错检测"></a>3.3、差错检测</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611641.png" alt="image-20201011133757804"></p><h2 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611642.png" alt="image-20201011234428217"></p><h2 id="循环冗余校验CRC-Cyclic-Redundancy-Check"><a href="#循环冗余校验CRC-Cyclic-Redundancy-Check" class="headerlink" title="循环冗余校验CRC(Cyclic Redundancy Check)"></a>循环冗余校验CRC(Cyclic Redundancy Check)</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611643.png" alt="image-20201011234605045"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611644.png" alt="image-20201011234701845"></p><p><strong>例题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611645.png" alt="image-20201011235128869"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611646.png" alt="image-20201011235325022"></p><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611647.png" alt="image-20201011235726437"></p><blockquote><p>循环冗余校验 CRC 是一种检错方法，而帧校验序列 FCS 是添加在数据后面的冗余码</p></blockquote><hr><h1 id="3-4、可靠传输"><a href="#3-4、可靠传输" class="headerlink" title="3.4、可靠传输"></a>3.4、可靠传输</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>下面是比特差错</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611648.png" alt="image-20201012153605893"></p><p><strong>其他传输差错</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611649.png" alt="image-20201012153811724"></p><ul><li>分组丢失</li></ul><p>路由器输入队列快满了，主动丢弃收到的分组</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611650.png" alt="image-20201012154910921"></p><ul><li>分组失序</li></ul><p>数据并未按照发送顺序依次到达接收端</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611651.png" alt="image-20201012155300937"></p><ul><li>分组重复</li></ul><p>由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成<strong>分组重复</strong>的传输差错</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611652.png" alt="image-20201012160026362"></p><h2 id="三种可靠协议"><a href="#三种可靠协议" class="headerlink" title="三种可靠协议"></a>三种可靠协议</h2><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><blockquote><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中</p></blockquote><h2 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h2><h3 id="停止-等待协议可能遇到的四个问题"><a href="#停止-等待协议可能遇到的四个问题" class="headerlink" title="停止-等待协议可能遇到的四个问题"></a>停止-等待协议可能遇到的四个问题</h3><p><strong>确认与否认</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611653.png" alt="image-20201012162009780"></p><p><strong>超时重传</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611654.png" alt="image-20201012162112151"></p><p><strong>确认丢失</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611655.png" alt="image-20201012162318298"> <img src="http://img-md-js.linjsblog.top/img/202406151611656.png" alt="image-20201012162348428"></p><blockquote><p>既然数据分组需要编号，确认分组是否需要编号？</p><p>要。如下图所示</p></blockquote><p><strong>确认迟到</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611657.png" alt="image-20201012162815885"></p><blockquote><p>注意，图中最下面那个数据分组与之前序号为0的那个数据分组不是同一个数据分组</p></blockquote><p><strong>注意事项</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611658.png" alt="image-20201012164008780"></p><h3 id="停止-等待协议的信道利用率"><a href="#停止-等待协议的信道利用率" class="headerlink" title="停止-等待协议的信道利用率"></a>停止-等待协议的信道利用率</h3><p>假设收发双方之间是一条直通的信道</p><ul><li><strong>TD</strong>：是发送方发送数据分组所耗费的发送时延</li><li><strong>RTT</strong>：是收发双方之间的往返时间</li><li><strong>TA</strong>：是接收方发送确认分组所耗费的发送时延</li></ul><p>TA一般都远小于TD，可以忽略，当RTT远大于TD时，信道利用率会非常低</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611659.png" alt="image-20201012164924635"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611660.png" alt="image-20201012181005719"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611661.png" alt="image-20201012181047665"></p><blockquote><p>像停止-等待协议这样通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ(<strong>A</strong>utomatic <strong>R</strong>epeat re<strong>Q</strong>uest)，意思是重传的请求是自动进行，因为不需要接收方显式地请求，发送方重传某个发送的分组</p></blockquote><h2 id="回退N帧协议GBN"><a href="#回退N帧协议GBN" class="headerlink" title="回退N帧协议GBN"></a>回退N帧协议GBN</h2><h3 id="为什么用回退N帧协议"><a href="#为什么用回退N帧协议" class="headerlink" title="为什么用回退N帧协议"></a>为什么用回退N帧协议</h3><p>在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611662.png" alt="image-20201012190027828"></p><p>回退N帧协议在流水线传输的基础上，利用发送窗口来限制发送方可连续发送数据分组的个数</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611663.png" alt="image-20201012190632086"></p><h3 id="无差错情况流程"><a href="#无差错情况流程" class="headerlink" title="无差错情况流程"></a>无差错情况流程</h3><p>发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611664.png" alt="image-20201012191936466"></p><p>他们经过互联网传输正确到达接收方，就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达了发送方</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611665.png" alt="image-20201012192932035"></p><p>发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611666.png" alt="image-20201012193212419"></p><h3 id="累计确认"><a href="#累计确认" class="headerlink" title="累计确认"></a><strong>累计确认</strong></h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611667.png" alt="image-20201012194304696"></p><blockquote><p>累计确认</p><p>优点:</p><ul><li>即使确认分组丢失，发送方也可能不必重传</li><li>减小接收方的开销</li><li>减小对网络资源的占用</li></ul><p>缺点：</p><ul><li>不能向发送方及时反映出接收方已经正确接收的数据分组信息</li></ul></blockquote><h3 id="有差错情况"><a href="#有差错情况" class="headerlink" title="有差错情况"></a><strong>有差错情况</strong></h3><p>例如</p><p>在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611668.png" alt="image-20201012195440780"></p><p>于是丢弃该分组，而后续到达的这剩下四个分组与接收窗口的序号不匹配</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611669.png" alt="image-20201012195629368"></p><p>接收同样也不能接收它们，讲它们丢弃，并对之前按序接收的最后一个数据分组进行确认，发送ACK4，<strong>每丢弃一个数据分组，就发送一个ACK4</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611670.png" alt="image-20201012195836902"></p><p>当收到重复的ACK4时，就知道之前所发送的数据分组出现了差错，于是可以不等超时计时器超时就立刻开始重传，具体收到几个重复确认就立刻重传，根据具体实现决定</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611671.png" alt="image-20201012200120166"></p><p>如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后。超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611672.png" alt="image-20201012200454557"></p><p>若WT超过取值范围，例如WT&#x3D;8，会出现什么情况？</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611673.png" alt="image-20201012201109774"></p><p>习题</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611674.png" alt="image-20201012202419107"></p><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611675.png" alt="image-20201012202222138"></p><ul><li>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议</li><li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</li><li>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高</li></ul><h2 id="选择重传协议SR"><a href="#选择重传协议SR" class="headerlink" title="选择重传协议SR"></a>选择重传协议SR</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611676.png" alt="image-20201012203638722"></p><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=27">具体流程请看视频</a></p><p><strong>习题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611678.png" alt="image-20201012205250996"></p><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611679.png" alt="image-20201012204742870"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611680.png" alt="image-20201012205133924"></p><hr><h1 id="3-5、点对点协议PPP"><a href="#3-5、点对点协议PPP" class="headerlink" title="3.5、点对点协议PPP"></a>3.5、点对点协议PPP</h1><ul><li>点对点协议PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议</li><li>PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661，RFC1662]</li><li>数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正差错；不使用序号，也不进行流量控制；可同时支持多种网络层协议</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611681.png" alt="image-20201012210844629"></p><ul><li>PPPoE 是为宽带上网的主机使用的链路层协议</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611682.png" alt="image-20201012211423528"></p><h2 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h2><p>必须规定特殊的字符作为帧定界符</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611683.png" alt="image-20201012211826281"></p><h2 id="透明传输-1"><a href="#透明传输-1" class="headerlink" title="透明传输"></a>透明传输</h2><p>必须保证数据传输的透明性</p><p>实现透明传输的方法</p><ul><li>面向字节的异步链路：字节填充法（插入“转义字符”）</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611684.png" alt="image-20201012212148803"></p><ul><li>面向比特的同步链路：比特填充法（插入“比特0”）</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611685.png" alt="image-20201012212255550"></p><h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><p>能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611686.png" alt="image-20201012212558654"></p><h2 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h2><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机</li><li>分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611687.png" alt="image-20201012213021860"></p><blockquote><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p></blockquote><hr><h1 id="3-6、媒体接入控制（介质访问控制）——广播信道"><a href="#3-6、媒体接入控制（介质访问控制）——广播信道" class="headerlink" title="3.6、媒体接入控制（介质访问控制）——广播信道"></a>3.6、媒体接入控制（介质访问控制）——广播信道</h1><p><strong>媒体接入控制（介质访问控制）使用一对多的广播通信方式</strong></p><blockquote><p><strong>Medium Access Control</strong>翻译成媒体接入控制，有些翻译成介质访问控制</p></blockquote><p><strong>局域网的数据链路层</strong></p><ul><li>局域网最主要的<strong>特点</strong>是：<ul><li>网络为一个单位所拥有；</li><li>地理范围和站点数目均有限。</li></ul></li><li>局域网具有如下<strong>主要优点</strong>：<ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611688.png" alt="image-20201013201521915"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611689.png" alt="image-20201013201533445"></p><p><strong>数据链路层的两个子层</strong></p><p>为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成<strong>两个子层</strong>：</p><ol><li><strong>逻辑链路控制</strong> LLC (Logical Link Control)子层；</li><li><strong>媒体接入控制</strong> MAC (Medium Access Control)子层。</li></ol><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。 <strong>不管采用何种协议的局域网，对 LLC 子层来说都是透明的。</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611690.png" alt="image-20201013201133903"></p><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>为什么要媒体接入控制（介质访问控制）？</p><p><strong>共享信道带来的问题</strong></p><p>若多个设备在共享信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611691.png" alt="image-20201013152007335"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611692.png" alt="image-20201013152453425"></p><blockquote><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术</p></blockquote><h2 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h2><p><strong>信道复用</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611693.png" alt="image-20201013153642544"></p><p><strong>频分复用FDM (Frequency Division Multiplexing)</strong></p><ul><li><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p></li><li><p><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611694.png" alt="image-20201013153947668"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611695.png" alt="image-20201013154142540"></p><p><strong>波分复用 WDM(Wavelength Division Multiplexing)</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611696.png" alt="image-20201013202218132"></p><blockquote><p>波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号</p><p>光信号传输一段距离后悔衰减，所以要用 掺铒光纤放大器 放大光信号</p></blockquote><p><strong>码分复用 CDM (Code Division Multiplexing)</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611697.png" alt="image-20201013203126625"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611698.png" alt="image-20201013203324709"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611699.png" alt="image-20201013203459640"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611700.png" alt="image-20201013203819578"></p><h2 id="动态接入控制"><a href="#动态接入控制" class="headerlink" title="动态接入控制"></a>动态接入控制</h2><p>受控接入</p><p><strong>受控接入在局域网中使用得较少，本书不再讨论</strong></p><p><strong>随机接入</strong></p><p><strong>重点</strong></p><h2 id="随机接入（CSMA-CD协议）"><a href="#随机接入（CSMA-CD协议）" class="headerlink" title="随机接入（CSMA&#x2F;CD协议）"></a>随机接入（CSMA&#x2F;CD协议）</h2><p><strong>总线局域网使用协议：CSMA&#x2F;CD</strong></p><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>最初</strong>的<strong>以太网</strong>是将许多计算机都连接到一根总线上。易于实现广播通信。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><blockquote><p><strong>以太网（Ethernet）</strong>是一种计算机<strong>局域网技术</strong>。IEEE组织的IEEE 802.3标准制定了<strong>以太网（Ethernet）</strong>的技术标准</p><p>以太网采用无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢弃，其他什么也不做</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611701.png" alt="image-20201013211620687"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611702.png" alt="image-20201013213102777"></p><h3 id="多址接入MA"><a href="#多址接入MA" class="headerlink" title="多址接入MA"></a>多址接入MA</h3><p>表示许多主机以多点接入的方式连接在一根总线上。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611703.png" alt="image-20201013215400688"></p><h3 id="载波监听CS"><a href="#载波监听CS" class="headerlink" title="载波监听CS"></a>载波监听CS</h3><p>是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611704.png" alt="image-20201013215530979"></p><p>总线上并没有什么“载波”。因此， <strong>“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</strong></p><h3 id="碰撞检测CD"><a href="#碰撞检测CD" class="headerlink" title="碰撞检测CD"></a>碰撞检测CD</h3><ul><li><strong>“碰撞检测”</strong>就是计算机<strong>边发送数据边检测</strong>信道上的信号电压大小。</li><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。</li><li>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</li><li><strong>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</strong></li><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</li><li><strong>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</strong></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611705.png" alt="image-20201013221240514"></p><blockquote><p>为什么要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611706.png" alt="image-20201013221834942"></p><p>A 需要单程传播时延的 2 倍的时间，才能检测到与 B 的发送产生了冲突</p></blockquote><h3 id="CSMA-CD-协议工作流程"><a href="#CSMA-CD-协议工作流程" class="headerlink" title="CSMA&#x2F;CD 协议工作流程"></a>CSMA&#x2F;CD 协议工作流程</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611707.png" alt="image-20201013221705893"></p><h3 id="CSMA-CD-协议工作——争用期（碰撞窗口）"><a href="#CSMA-CD-协议工作——争用期（碰撞窗口）" class="headerlink" title="CSMA&#x2F;CD 协议工作——争用期（碰撞窗口）"></a>CSMA&#x2F;CD 协议工作——争用期（碰撞窗口）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611708.png" alt="image-20201013223235305"></p><h3 id="CSMA-CD-协议工作——最小帧长"><a href="#CSMA-CD-协议工作——最小帧长" class="headerlink" title="CSMA&#x2F;CD 协议工作——最小帧长"></a>CSMA&#x2F;CD 协议工作——最小帧长</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611709.png" alt="image-20201013224051932"></p><h3 id="CSMA-CD-协议工作——最大帧长"><a href="#CSMA-CD-协议工作——最大帧长" class="headerlink" title="CSMA&#x2F;CD 协议工作——最大帧长"></a>CSMA&#x2F;CD 协议工作——最大帧长</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611710.png" alt="image-20201013225400777"></p><h3 id="CSMA-CD-协议工作——截断二进制指数退避算法"><a href="#CSMA-CD-协议工作——截断二进制指数退避算法" class="headerlink" title="CSMA&#x2F;CD 协议工作——截断二进制指数退避算法"></a>CSMA&#x2F;CD 协议工作——截断二进制指数退避算法</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611711.png" alt="image-20201013230717856"></p><h3 id="CSMA-CD-协议工作——信道利用率"><a href="#CSMA-CD-协议工作——信道利用率" class="headerlink" title="CSMA&#x2F;CD 协议工作——信道利用率"></a>CSMA&#x2F;CD 协议工作——信道利用率</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611712.png" alt="image-20201013231430295"></p><h3 id="CSMA-CD-协议工作——帧接收流程"><a href="#CSMA-CD-协议工作——帧接收流程" class="headerlink" title="CSMA&#x2F;CD 协议工作——帧接收流程"></a>CSMA&#x2F;CD 协议工作——帧接收流程</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611713.png" alt="image-20201013231703302"></p><h3 id="CSMA-CD-协议的重要特性"><a href="#CSMA-CD-协议的重要特性" class="headerlink" title="CSMA&#x2F;CD 协议的重要特性"></a>CSMA&#x2F;CD 协议的重要特性</h3><ul><li>使用 CSMA&#x2F;CD 协议的以太网不能进行全双工通信而<strong>只能进行双向交替通信（半双工通信）。</strong></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li><li>这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul><blockquote><p>CSMA&#x2F;CD协议曾经用于各种总线结构以太网和双绞线以太网的早起版本中。</p><p><strong>现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA&#x2F;CS协议</strong></p></blockquote><h2 id="随机接入（CSMA-CA协议）"><a href="#随机接入（CSMA-CA协议）" class="headerlink" title="随机接入（CSMA&#x2F;CA协议）"></a>随机接入（CSMA&#x2F;CA协议）</h2><p><strong>无线局域网使用的协议：CSMA&#x2F;CA</strong></p><h3 id="为什么无线局域网要使用CSMA-CA协议"><a href="#为什么无线局域网要使用CSMA-CA协议" class="headerlink" title="为什么无线局域网要使用CSMA&#x2F;CA协议"></a>为什么无线局域网要使用CSMA&#x2F;CA协议</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611714.png" alt="image-20201014192811760"></p><h3 id="帧间间隔IFS（InterFrame-Space）"><a href="#帧间间隔IFS（InterFrame-Space）" class="headerlink" title="帧间间隔IFS（InterFrame Space）"></a>帧间间隔IFS（InterFrame Space）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611715.png" alt="image-20201014200149717"></p><h3 id="CSMA-CA协议的工作原理"><a href="#CSMA-CA协议的工作原理" class="headerlink" title="CSMA&#x2F;CA协议的工作原理"></a>CSMA&#x2F;CA协议的工作原理</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611716.png" alt="image-20201014200833233"></p><blockquote><p><strong>源站为什么在检测到信道空闲后还要再等待一段时间DIFS？</strong></p><ul><li>考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送</li></ul><p><strong>目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧？</strong></p><ul><li>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧，在这段时间内，一个站点应当能够从发送方式切换到接收方式</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611717.png" alt="image-20201014201511741"></p><blockquote><p><strong>信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道？</strong></p><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><p><strong>使用退避算法的时机</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611718.png" alt="image-20201014201927680"></p><h3 id="CSMA-CA协议的退避算法"><a href="#CSMA-CA协议的退避算法" class="headerlink" title="CSMA&#x2F;CA协议的退避算法"></a>CSMA&#x2F;CA协议的退避算法</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611719.png" alt="image-20201014202213766"></p><p><strong>退避算法的示例</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611720.png" alt="image-20201014202819851"></p><h3 id="CSMA-CA协议的信道预约和虚拟载波监听"><a href="#CSMA-CA协议的信道预约和虚拟载波监听" class="headerlink" title="CSMA&#x2F;CA协议的信道预约和虚拟载波监听"></a>CSMA&#x2F;CA协议的信道预约和虚拟载波监听</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611721.png" alt="image-20201014203119710"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611722.png" alt="image-20201014203506878"></p><p><strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题的示例</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611723.png" alt="image-20201014203859033"></p><hr><h1 id="3-7、MAC地址、IP地址以及ARP协议"><a href="#3-7、MAC地址、IP地址以及ARP协议" class="headerlink" title="3.7、MAC地址、IP地址以及ARP协议"></a>3.7、MAC地址、IP地址以及ARP协议</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151611724.png" alt="image-20201014222831663"></p><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><blockquote><ul><li>使用点对点信道的数据链路层不需要使用地址</li><li>使用广播信道的数据链路层必须使用地址来区分各主机</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611725.png" alt="image-20201014223659993"></p><h3 id="广播信道的数据链路层必须使用地址（MAC）"><a href="#广播信道的数据链路层必须使用地址（MAC）" class="headerlink" title="广播信道的数据链路层必须使用地址（MAC）"></a>广播信道的数据链路层必须使用地址（MAC）</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611726.png" alt="image-20201014224732019"></p><blockquote><p><strong>MAC地址又称为硬件地址或物理地址</strong>。请注意：不要被 “物理” 二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴</p></blockquote><h3 id="IEEE-802局域网的MAC地址格式"><a href="#IEEE-802局域网的MAC地址格式" class="headerlink" title="IEEE 802局域网的MAC地址格式"></a>IEEE 802局域网的MAC地址格式</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611727.png" alt="image-20201014225358570"></p><blockquote><p><strong>组织唯一标识符OUI</strong></p><ul><li>生产网络设备的厂商，需要向IEEE的注册管理机构申请一个或多个OUI</li></ul><p><strong>网络接口标识符</strong></p><ul><li>由获得OUI的厂商自行随意分配</li></ul><p><strong>EUI-48</strong></p><ul><li>48是这个MAC地址的位数</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611728.png" alt="image-20201014230248959"></p><blockquote><p>对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年（直到2080年），但是鼓励采用EUI-64作为替代</p></blockquote><p><strong>关于无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li></ul><blockquote><p><strong>对于检查出的无效</strong> <strong>MAC</strong> <strong>帧就简单地丢弃。以太网不负责重传丢弃的帧。</strong></p></blockquote><h3 id="IEEE-802局域网的MAC地址发送顺序"><a href="#IEEE-802局域网的MAC地址发送顺序" class="headerlink" title="IEEE 802局域网的MAC地址发送顺序"></a>IEEE 802局域网的MAC地址发送顺序</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611729.png" alt="image-20201014230625182"></p><h3 id="单播MAC地址举例"><a href="#单播MAC地址举例" class="headerlink" title="单播MAC地址举例"></a>单播MAC地址举例</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611730.png" alt="image-20201014230822305"></p><blockquote><p>主机B给主机C发送<strong>单播帧</strong>，主机B首先要构建该<strong>单播帧</strong>，<strong>在帧首部中的目的地址字段填入主机C的MAC地址</strong>，源地址字段填入自己的MAC地址，再加上帧首部的其他字段、数据载荷以及帧尾部，就构成了该<strong>单播帧</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611731.png" alt="image-20201014231244655"></p><blockquote><p>主机B将该<strong>单播帧</strong>发送出去，主机A和C都会收到该<strong>单播帧</strong></p><p>主机A的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址不匹配，丢弃该帧</p><p>主机C的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址匹配，接受该帧</p><p>并将该帧交给其上层处理</p></blockquote><h3 id="广播MAC地址举例"><a href="#广播MAC地址举例" class="headerlink" title="广播MAC地址举例"></a>广播MAC地址举例</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611732.png" alt="image-20201014231754669"></p><blockquote><p>假设主机B要发送一个<strong>广播帧</strong>，主机B首先要构建该<strong>广播帧</strong>，<strong>在帧首部中的目的地址字段填入广播地址</strong>，也就是十六进制的全F，源地址字段填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>广播帧</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611733.png" alt="image-20201014232132424"></p><blockquote><p>主机B讲该<strong>广播帧</strong>发送出去，主机A和C都会收到该<strong>广播帧</strong>，<strong>发现该帧首部中的目的地址字段的内容是广播地址</strong>，就知道该帧是<strong>广播帧</strong>，主机A和主机C都接受该帧，并将该帧交给上层处理</p></blockquote><h3 id="多播MAC地址举例"><a href="#多播MAC地址举例" class="headerlink" title="多播MAC地址举例"></a>多播MAC地址举例</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611734.png" alt="image-20201014232714791"></p><blockquote><p>假设主机A要发送<strong>多播帧</strong>给该<strong>多播地址</strong>。将该<strong>多播地址</strong>的左起第一个字节写成8个比特，第一个字节的最低比特位是1，这就表明该地址是<strong>多播地址</strong>。</p><p>快速判断地址是不是<strong>多播地址</strong>，就是上图所示箭头所指的第十六进制数不能整除2（1,3,5,7,9,B,D,F），则该地址是<strong>多播地址</strong></p><p>假设主机B，C和D支持多播，各用户给自己的主机配置多播组列表<strong>如下所示</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611735.png" alt="image-20201015001243584"></p><blockquote><p>主机B属于两个多播组，主机C也属于两个多播组，而主机D不属于任何多播组</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611736.png" alt="image-20201015001535528"></p><blockquote><p>主机A首先要构建该<strong>多播帧</strong>，<strong>在帧首部中的目的地址字段填入该多播地址</strong>，源地址点填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>多播帧</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611738.png" alt="image-20201015002054876"></p><blockquote><p>主机A将该<strong>多播帧</strong>发送出去，主机B、C、D都会收到该<strong>多播帧</strong></p><p><strong>主机B和C发现该多播帧的目的MAC地址在自己的多播组列表中</strong>，主机B和C都会接受该帧</p><p>主机D发现该<strong>多播帧</strong>的目的MAC地址不在自己得多播组列表中，则丢弃该<strong>多播帧</strong></p><p>给主机配置多播组列表进行私有应用时，不得使用公有的标准多播地址</p></blockquote><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP地址属于网络层的范畴，不属于数据链路层的范畴</p><p>下面内容讲的是IP地址的使用，详细的IP地址内容在网络层中介绍</p><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611739.png" alt="image-20201015104441580"></p><h3 id="从网络体系结构看IP地址与MAC地址"><a href="#从网络体系结构看IP地址与MAC地址" class="headerlink" title="从网络体系结构看IP地址与MAC地址"></a>从网络体系结构看IP地址与MAC地址</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611740.png" alt="image-20201015104913755"></p><h3 id="数据包转发过程中IP地址与MAC地址的变化情况"><a href="#数据包转发过程中IP地址与MAC地址的变化情况" class="headerlink" title="数据包转发过程中IP地址与MAC地址的变化情况"></a>数据包转发过程中IP地址与MAC地址的变化情况</h3><p>图上各主机和路由器各接口的IP地址和MAC地址用简单的标识符来表示</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611741.png" alt="image-20201015105455043"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611742.png" alt="image-20210103212224961"></p><blockquote><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP协议</p></blockquote><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP（地址解析协议）</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611743.png" alt="image-20201015113826197"></p><p>ARP高速缓存表</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611744.png" alt="image-20201015114052206"></p><blockquote><p>当主机B要给主机C发送数据包时，会首先在自己的ARP高速缓存表中查找主机C的IP地址所对应的MAC地址，但未找到，因此，主机B需要发送ARP请求报文，来获取主机C的MAC地址</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611745.png" alt="image-20201015114444263"></p><blockquote><p>ARP请求报文有具体的格式，上图的只是简单描述</p><p>ARP请求报文被封装在MAC帧中发送，目的地址为广播地址</p><p>主机B发送封装有ARP请求报文的广播帧，总线上的其他主机都能收到该广播帧</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611746.png" alt="image-20201015114811501"></p><blockquote><p>收到ARP请求报文的主机A和主机C会把ARP请求报文交给上层的ARP进程</p><p>主机A发现所询问的IP地址不是自己的IP地址，因此不用理会</p><p>主机C的发现所询问的IP地址是自己的IP地址，需要进行相应</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611747.png" alt="image-20201015115212170"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611748.png" alt="image-20201015115236673"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611749.png" alt="image-20201015115252972"></p><p>动态与静态的区别</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611750.png" alt="image-20201015115831543"></p><p><strong>ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611751.png" alt="image-20201015120108028"></p><blockquote><p>ARP协议的使用是逐段链路进行的</p></blockquote><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611752.png" alt="image-20201015120707150"></p><blockquote><p>ARP表中的IP地址与MAC地址的对应关系记录，是<strong>会定期自动删除的</strong>，<strong>因为IP地址与MAC地址的对应关系不是永久性的</strong></p></blockquote><hr><h1 id="3-8、集线器与交换机的区别"><a href="#3-8、集线器与交换机的区别" class="headerlink" title="3.8、集线器与交换机的区别"></a>3.8、集线器与交换机的区别</h1><h2 id="集线器-在物理层扩展以太网"><a href="#集线器-在物理层扩展以太网" class="headerlink" title="集线器-在物理层扩展以太网"></a>集线器-在物理层扩展以太网</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611753.png" alt="image-20201015144628691"></p><blockquote><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</li><li>采用双绞线的以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做<strong>集线器</strong> (hub)。</li><li><strong>集线器</strong>是也可以看做多口中继器，每个端口都可以成为一个中继器，中继器是对减弱的信号进行放大和发送的设备</li><li><strong>集线器</strong>的以太网在逻辑上仍是个总线网，需要使用CSMA&#x2F;CD协议来协调各主机争用总线，只能工作在半双工模式，收发帧不能同时进行</li></ul></blockquote><h3 id="集线器HUB在物理层扩展以太网"><a href="#集线器HUB在物理层扩展以太网" class="headerlink" title="集线器HUB在物理层扩展以太网"></a>集线器HUB在物理层扩展以太网</h3><p><strong>使用集线器扩展</strong>：将多个以太网段连成更大的、多级星形结构的以太网</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611754.png" alt="image-20201015145732275"></p><blockquote><ul><li><strong>优点</strong><ol><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ol></li><li><strong>缺点</strong><ol><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ol></li></ul></blockquote><p><strong>碰撞域</strong></p><ul><li><strong>碰撞域（collision domain）</strong>又称为<strong>冲突域</strong>，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。</li><li>碰撞域越大，发生碰撞的概率越高。</li></ul><h2 id="以太网交换机-在数据链路层扩展以太网"><a href="#以太网交换机-在数据链路层扩展以太网" class="headerlink" title="以太网交换机-在数据链路层扩展以太网"></a>以太网交换机-在数据链路层扩展以太网</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>扩展以太网更常用的方法是在数据链路层进行。</li><li>早期使用<strong>网桥</strong>，现在使用<strong>以太网交换机</strong>。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611755.png" alt="image-20201015150620067"></p><blockquote><p><strong>网桥</strong></p><ul><li>网桥工作在数据链路层。</li><li>它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。</li><li>当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。</li></ul><p><strong>交换机</strong></p><ul><li>1990 年问世的交换式集线器 (switching hub) 可明显地提高以太网的性能。</li><li>交换式集线器常称为<strong>以太网交换机</strong> (switch) 或<strong>第二层交换机</strong> (L2 switch)，强调这种交换机工作在数据链路层。</li><li>以太网交换机实质上就是一个<strong>多接口的网桥</strong></li></ul></blockquote><h3 id="集线器HUB与交换机SWITCH区别"><a href="#集线器HUB与交换机SWITCH区别" class="headerlink" title="集线器HUB与交换机SWITCH区别"></a><strong>集线器HUB与交换机SWITCH区别</strong></h3><p><img src="http://img-md-js.linjsblog.top/img/202406151611756.png" alt="image-20201015152232158"></p><blockquote><p>使用<strong>集线器</strong>互连而成的共享总线式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧会通过共享总线传输到<strong>总线上的其他各个主机</strong></p><p>使用交换机互连而成的交换式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧进入交换机后，交换机会将该单播帧转发给目的主机，<strong>而不是网络中的其他各个主机</strong></p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611757.png" alt="image-20201015152858146"></p><blockquote><p><strong>以太网交换机的交换方式</strong></p><ul><li>存储转发方式<ul><li>把整个数据帧<strong>先缓存</strong>后再进行处理。</li></ul></li><li>直通 (cut-through) 方式<ul><li>接收数据帧的同时就<strong>立即按数据帧的目的 MAC 地址决定该帧的转发接口</strong>，因而提高了帧的转发速度。</li><li><strong>缺点</strong>是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站。</li></ul></li></ul><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>对比集线器和交换机</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611758.png" alt="image-20201015153907268"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611759.png" alt="image-20201015154523036"></p><blockquote><p>多台主机同时给另一台主机发送单播帧</p><p>集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机</p><p>交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞</p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>集线器扩展以太网和交换机扩展以太网区别</strong></p><p><strong>单播</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611760.png" alt="image-20201015155408692"></p><p><strong>广播</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611761.png" alt="image-20201015155440402"></p><p><strong>多个单播</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611762.png" alt="image-20201015155526386"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611763.png" alt="image-20201015155706698"></p><p>广播域（broadcast domain）：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611764.png" alt="image-20201015160146482"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611765.png" alt="image-20201015160526999"></p><blockquote><p>工作在数据链路层的以太网交换机，其性能远远超过工作在物理层的集线器，而且价格并不贵，这就使得集线器逐渐被市场淘汰</p></blockquote><hr><h1 id="3-9、以太网交换机自学习和转发帧的流程"><a href="#3-9、以太网交换机自学习和转发帧的流程" class="headerlink" title="3.9、以太网交换机自学习和转发帧的流程"></a>3.9、以太网交换机自学习和转发帧的流程</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611766.png" alt="image-20201015161015165"></p><h2 id="自学习和转发帧的例子"><a href="#自学习和转发帧的例子" class="headerlink" title="自学习和转发帧的例子"></a>自学习和转发帧的例子</h2><p>以下例子假设各主机知道网络中其他各主机的MAC地址（无需进行ARP）</p><p><strong>A -&gt; B</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611767.png" alt="image-20201015161458528"></p><blockquote><ol><li>A 先向 B 发送一帧。该帧从接口 1 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中左边）交换表中</li><li>交换机向除接口 1 以外的所有的接口广播这个帧</li><li>接口 4到接口 2，先查找（图中右边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中右边）交换表中</li><li>除B主机之外与该帧的目的地址不相符，将丢弃该帧</li><li>主机B发现是给自己的帧，接受该帧</li></ol></blockquote><p><strong>B -&gt; A</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611768.png" alt="image-20201015162310922"></p><blockquote><ol><li>B 向 A 发送一帧。该帧从接口 3 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>主机 A 发现目的地址是它，就接受该帧</li><li>交换机把这个帧的源地址 B 和接口 3 写入（图中左边）交换表中</li></ol></blockquote><p><strong>E -&gt; A</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611769.png" alt="image-20201015162622462"></p><blockquote><ol><li>E 向 A发送一帧</li><li>交换机收到帧后，先查找（图中右边）交换表。发现（图中右边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口2转发出去。于是就把这个帧传送到接口 2 转发给 接口 4。</li><li>交换机把这个帧的源地址 E 和接口 3 写入（图中右边）交换表中</li><li>接口 4 到 左边的交换机，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>交换机把这个帧的源地址 E 和接口 4 写入（图中左边）交换表中</li><li>主机 A 发现目的地址是它，就接受该帧</li></ol></blockquote><p><strong>G -&gt; A</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611770.png" alt="image-20201015163157140"></p><blockquote><p>主机 A、主机 G、交换机 1的接口 1就共享同一条总线（相当于总线式网络，可以想象成用集线器连接了）</p><ol><li>主机 G 发送给 主机 A 一个帧</li><li>主机 A 和 交换机接口 1都能接收到</li><li>主机 A 的网卡收到后，根据帧的目的MAC地址A，就知道是发送给自己的帧，就接受该帧</li><li>交换机 1收到该帧后，首先进行登记工作</li><li>然后交换机 1对该帧进行转发，该帧的MAC地址是A，在（图中左边）交换表查找MAC 地址有 A</li><li>MAC 地址为 A的接口号是1，但是该帧正是从接口 1 进入交换机的，交换机不会再从该接口 1 将帧转发出去，因为这是没有必要，于是丢弃该帧</li></ol></blockquote><p>随着网络中各主机都发送了帧后，网络中的各交换机就可以学习到各主机的MAC地址，以及它们与自己各接口的对应关系</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611771.png" alt="image-20201015164210543"></p><blockquote><p>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的<strong>有效时间</strong>。<strong>过期的项目就自动被删除</strong>。</p><p><strong>以太网交换机的这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置，因此非常方便。</strong></p></blockquote><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p><strong>交换机自学习和转发帧的步骤归纳</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611772.png" alt="image-20201015170656500"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611773.png" alt="image-20201015170739679"></p><hr><h1 id="3-10、以太网交换机的生成树协议STP"><a href="#3-10、以太网交换机的生成树协议STP" class="headerlink" title="3.10、以太网交换机的生成树协议STP"></a>3.10、以太网交换机的生成树协议STP</h1><h2 id="如何提高以太网的可靠性"><a href="#如何提高以太网的可靠性" class="headerlink" title="如何提高以太网的可靠性"></a>如何提高以太网的可靠性</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611774.png" alt="image-20201015171453001"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611775.png" alt="image-20201015171515481"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611776.png" alt="image-20201015171900775"></p><h2 id="生成树协议STP"><a href="#生成树协议STP" class="headerlink" title="生成树协议STP"></a>生成树协议STP</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611777.png" alt="image-20201015172204419"></p><blockquote><ul><li>IEEE 802.1D 标准制定了一个<strong>生成树协议 STP</strong> (Spanning Tree Protocol)。</li><li>其<strong>要点</strong>是：<strong>不改变</strong>网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是<strong>无环路的树状结构</strong>，从而消除了兜圈子现象。</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151611778.png" alt="image-20201015202257756"></p><hr><h1 id="3-11、虚拟局域网VLAN"><a href="#3-11、虚拟局域网VLAN" class="headerlink" title="3.11、虚拟局域网VLAN"></a>3.11、虚拟局域网VLAN</h1><h2 id="为什么要虚拟局域网VLAN"><a href="#为什么要虚拟局域网VLAN" class="headerlink" title="为什么要虚拟局域网VLAN"></a>为什么要虚拟局域网VLAN</h2><p><strong>广播风暴</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611779.png" alt="image-20201015202859124"></p><p><strong>分割广播域的方法</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611780.png" alt="image-20201015203113654"></p><blockquote><p>为了分割广播域，所以虚拟局域网VLAN技术应运而生</p></blockquote><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611781.png" alt="image-20201015203559548"></p><blockquote><ul><li>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</li><li>IEEE 802.1Q 对虚拟局域网 VLAN 的<strong>定义</strong>： <strong>虚拟局域网 VLAN</strong> 是由一些局域网网段构成的<strong>与物理位置无关的逻辑组</strong>，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</li><li>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</li><li><strong>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</strong></li><li>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。</li></ul></blockquote><h2 id="虚拟局域网VLAN的实现机制"><a href="#虚拟局域网VLAN的实现机制" class="headerlink" title="虚拟局域网VLAN的实现机制"></a>虚拟局域网VLAN的实现机制</h2><p>虚拟局域网VLAN技术是在交换机上实现的，需要交换机能够实现以下功能</p><ul><li>能够处理带有VLAN标记的帧——IEEE 802.1 Q帧</li><li>交换机的各端口可以支持不同的端口类型，不同端口类型的端口对帧的处理方式有所不同</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151611782.png" alt="image-20201015204639599"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611784.png" alt="image-20201015204749141"></p><p><strong>Access端口</strong></p><p>交换机与用户计算机之间的互连</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611785.png" alt="image-20201015205311757"></p><blockquote><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></blockquote><p><strong>Truck端口</strong></p><p>交换机之间或交换机与路由器之间的互连</p><p><img src="http://img-md-js.linjsblog.top/img/202406151611786.png" alt="image-20201015205947636"></p><p><strong>小例题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611787.png" alt="image-20201015210417695"></p><p><strong>华为交换机私有的Hybrid端口类型</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611788.png" alt="image-20201015211031361"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151611789.png" alt="image-20201015211349531"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151611790.png" alt="image-20201015211512622"></p><blockquote><p><strong>虚拟局域网优点</strong></p><p>虚拟局域网（VLAN）技术具有以下主要优点：</p><ol><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第2章（物理层）</title>
      <link href="/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC2%E7%AB%A0%EF%BC%88%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%89/"/>
      <url>/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC2%E7%AB%A0%EF%BC%88%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1、物理层的基本概念"><a href="#2-1、物理层的基本概念" class="headerlink" title="2.1、物理层的基本概念"></a>2.1、物理层的基本概念</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151607403.png" alt="image-20201008130211749"></p><hr><h1 id="2-2、物理层下面的传输媒体"><a href="#2-2、物理层下面的传输媒体" class="headerlink" title="2.2、物理层下面的传输媒体"></a>2.2、物理层下面的传输媒体</h1><p><strong>传输媒体</strong>也称为传输介质或传输媒介，他就是数据传输系统中在发送器和接收器之间的物理通路。<strong>传输媒体</strong>课分为两大类，即<strong>导引型传输媒体</strong>和<strong>非导引型传输媒体</strong></p><p>传输媒体不属于计算机网络体系结构的任何一层。如果非要将它添加到体系结构中，那只能将其放置到物理层之下。</p><h2 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h2><p>在导引型传输媒体中，电磁波被导引沿着固体媒体传播。</p><p><strong>同轴电缆</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607404.png" alt="image-20201008132050917"></p><p><strong>双绞线</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607405.png" alt="image-20201008132225715"></p><p><strong>光纤</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607406.png" alt="image-20201008132403903"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607407.png" alt="image-20201011001240573"></p><blockquote><p><strong>多模光纤</strong></p><ul><li>可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为<strong>多模光纤</strong>。</li></ul><p><strong>单模光纤</strong></p><ul><li>若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为<strong>单模光纤</strong>。</li></ul></blockquote><p><strong>电力线</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607408.png" alt="image-20201008132709015"></p><h2 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h2><p>非导引型传输媒体是指自由空间。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607409.png" alt="image-20201008132857833"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607410.png" alt="image-20201008132943176"></p><p><strong>无线电波</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607411.png" alt="image-20201008133135659"></p><p><strong>微波</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607412.png" alt="image-20201008133317293"></p><p><strong>红外线</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607413.png" alt="image-20201008133421986"></p><p><strong>可见光</strong></p><p><a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A7%81%E5%85%89%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/16268518?fromtitle=LiFi&fromid=5675729&fr=aladdin">LIFI</a></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607414.png" alt="image-20201008133718810"></p><hr><h1 id="2-3、传输方式"><a href="#2-3、传输方式" class="headerlink" title="2.3、传输方式"></a>2.3、传输方式</h1><h2 id="串行传输和并行传输"><a href="#串行传输和并行传输" class="headerlink" title="串行传输和并行传输"></a>串行传输和并行传输</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151607415.png" alt="image-20201008135603009"></p><blockquote><p><strong>串行传输</strong>：</p><ul><li>数据是一个比特一个比特依次发送的，因此在发送端与接收端之间，只需要一条数据传输线路即可</li></ul><p><strong>并行传输</strong>：</p><ul><li><p>一次发送n个比特，因此，在发送端和接收端之间需要有n条传输线路</p></li><li><p>并行传输的优点是比串行传输的速度n倍，但成本高</p></li></ul><p>数据在传输线路上的传输采用是<strong>串行传输</strong>，计算机内部的数据传输常用<strong>并行传输</strong></p></blockquote><h2 id="同步传输和异步传输"><a href="#同步传输和异步传输" class="headerlink" title="同步传输和异步传输"></a>同步传输和异步传输</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151607416.png" alt="image-20201008140209430"></p><blockquote><p><strong>同步传输</strong>：</p><ul><li>数据块以稳定的比特流的形式传输。字节之间没有间隔</li><li>接收端在每个比特信号的中间时刻进行检测，以判别接收到的是比特0还是比特1</li><li>由于不同设备的时钟频率存在一定差异，不可能做到完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差，会导致接收端对比特信号的判别错位</li></ul><p>所以要使收发双发时钟保持同步</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151607417.png" alt="image-20201008140850958"></p><blockquote><p><strong>异步传输</strong>：</p><ul><li>以字节为独立的传输单位，字节之间的时间间隔不是固定</li><li>接收端仅在每个字节的起始处对字节内的比特实现同步</li><li>通常在每个字节前后分别加上起始位和结束位</li></ul></blockquote><h2 id="单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）"><a href="#单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）" class="headerlink" title="单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）"></a>单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）</h2><p>在许多情况下，我们要使用“<strong>信道（channel）</strong>”这一名词。信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。</p><p>从通信的双方信息交互的方式来看，可以有以下三种基本方式：</p><p><strong>单向通信</strong>：</p><p>又称为<strong>单工通信</strong>，即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电以及电视广播就属于这种类型</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607418.png" alt="image-20201008141345239"></p><p><strong>双向交替通信</strong>：</p><p>又称为<strong>半双工通信</strong>，即通信的双方可以发送信息，但不能双方同时发送（当然也就不能同时接收）。这种通信方式使一方发送另一方接收，过一段时间后可以再反过来</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607419.png" alt="image-20201008141921924"></p><p><strong>双向同时通信</strong>：</p><p>又称为<strong>全双工通信</strong>，即通信的双发可以同时发送和接收信息。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607420.png" alt="image-20201008142037846"></p><blockquote><p><strong>单向通信</strong>只需要一条信道，而<strong>双向交替通信</strong>或<strong>双向同时通信</strong>则需要两条信道（每个方向各一条）</p><p><strong>双向同时通信</strong>的传输效率最高</p></blockquote><h1 id="2-4、编码与调制"><a href="#2-4、编码与调制" class="headerlink" title="2.4、编码与调制"></a>2.4、编码与调制</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151607421.png" alt="image-20201008144616896"></p><blockquote><p><strong>常用术语</strong></p><ul><li><p><strong>数据 (data)</strong> —— 运送消息的实体。</p></li><li><p><strong>信号 (signal)</strong> —— 数据的电气的或电磁的表现。</p></li><li><p><strong>模拟信号 (analogous signal)</strong> —— 代表消息的参数的取值是连续的。</p></li><li><p><strong>数字信号 (digital signal)</strong> —— 代表消息的参数的取值是离散的。</p></li><li><p><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p></li><li><p><strong>基带信号</strong>（即基本频带信号）—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</p></li><li><p>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行<strong>调制</strong> (modulation)。</p></li></ul></blockquote><p>在计算机网络中，常见的是将数字基带信号通过编码或调制的方法在相应信道进行传输</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607422.png" alt="image-20201008145747263"></p><h2 id="传输媒体与信道的关系"><a href="#传输媒体与信道的关系" class="headerlink" title="传输媒体与信道的关系"></a><strong>传输媒体与信道的关系</strong></h2><blockquote><p><strong>信道的几个基本概念</strong></p><ul><li><strong>信道</strong> —— 一般用来表示向某一个方向传送信息的媒体。</li><li><strong>单向通信（单工通信）</strong>——只能有一个方向的通信而没有反方向的交互。</li><li><strong>双向交替通信（半双工通信）</strong>——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li><li><strong>双向同时通信（全双工通信）</strong>——通信的双方可以同时发送和接收信息。</li></ul></blockquote><p>严格来说，传输媒体不能和信道划等号</p><p>对于单工传输，传输媒体只包含一个信道，要么是发送信道，要么是接收信道</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607423.png" alt="image-20201008145304974"></p><p>对于半双工和全双工，传输媒体中要包含两个信道，一个发送信道，另一个是接收信道</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607424.png" alt="image-20201008145329540"></p><blockquote><p>如果使用信道复用技术，一条传输媒体还可以包含多个信道</p></blockquote><h2 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h2><p><strong>不归零编码</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607425.png" alt="image-20201008150058039"></p><blockquote><ul><li><p>正电平表示比特1&#x2F;0</p></li><li><p>负电平表示比特0&#x2F;1</p></li></ul><p>中间的虚线是零电平，所谓不归零编码，就是指在整个码元时间内，电平不会出现零电平</p><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151607426.png" alt="image-20201008150528228"></p><blockquote><p>这需要发送方的发送与接收方的接收做到严格的同步</p><ul><li>需要<strong>额外一根传输线来传输时钟信号</strong>，使发送方和接收方同步，接收方按时钟信号的节拍来逐个接收码元</li><li><strong>但是</strong>对于计算机网络，<strong>宁愿利用这根传输线传输数据信号</strong>，而不是传输时钟信号</li></ul><p>由于<strong>不归零编码</strong>存在<strong>同步问题</strong>，因此计算机网络中的数据传输不采用这类编码！</p></blockquote><p><strong>归零编码</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607427.png" alt="image-20201008195033189"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607428.png" alt="image-20201008151347028"></p><blockquote><p><strong>归零编码</strong>虽然<strong>自同步</strong>，但<strong>编码效率低</strong></p></blockquote><p><strong>曼彻斯特编码</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607429.png" alt="image-20201008195148727"></p><blockquote><p>在每个码元时间的中间时刻，信号都会发生跳变</p><ul><li>负跳变表示比特1&#x2F;0</li><li>正跳变表示比特0&#x2F;1</li><li>码元中间时刻的跳变即表示时钟，又表示数据</li></ul><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p><p>传统以太网使用的就是曼切斯特编码</p></blockquote><p><strong>差分曼彻斯特编码</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607430.png" alt="image-20201008195235561"></p><blockquote><p>在每个码元时间的中间时刻，信号都会发送跳变，但与<strong>曼彻斯特不同</strong></p><ul><li><strong>跳变仅表示时钟</strong></li><li><strong>码元开始处电平是否变换表示数据</strong><ul><li>变化表示比特1&#x2F;0</li><li>不变化表示比特0&#x2F;1</li></ul></li></ul><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p><p>比曼彻斯特编码变化少，更适合较高的传输速率</p></blockquote><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607431.png" alt="image-20201008153522501"></p><h2 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h2><p>数字信号转换为模拟信号，在模拟信道中传输，例如WiFi，采用补码键控CCK&#x2F;直接序列扩频DSSS&#x2F;正交频分复用OFDM等<strong>调制</strong>方式。</p><p>模拟信号转换为另一种模拟信号，在模拟信道中传输，例如，语音数据加载到模拟的载波信号中传输。频分复用FDM技术，充分利用带宽资源。</p><p><strong>基本调制方法</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607432.png" alt="image-20201008155429044"></p><blockquote><ul><li><strong>调幅AM</strong>：所调制的信号由两种不同振幅的基本波形构成。每个基本波形只能表示1比特信息量。</li><li><strong>调频FM</strong>：所调制的信号由两种不同频率的基本波形构成。每个基本波形只能表示1比特信息量。</li><li><strong>调相PM</strong>：所调制的信号由两种不同初相位的基本波形构成。每个基本波形只能表示1比特信息量。</li></ul><p>但是使用基本调制方法，1个码元只能包含1个比特信息</p></blockquote><p><strong>混合调制</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607433.png" alt="image-20201008155804617"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607434.png" alt="image-20201008155835940"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607435.png" alt="image-20201008155955169"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607436.png" alt="image-20201008160133748"></p><blockquote><p>上图码元所对应的4个比特是错误的，码元不能随便对应4个比特</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151607437.png" alt="image-20201008160208060"></p><h2 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h2><p>在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形。</p><h1 id="2-5、信道的极限容量"><a href="#2-5、信道的极限容量" class="headerlink" title="2.5、信道的极限容量"></a>2.5、信道的极限容量</h1><ul><li>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。</li><li>码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，在信道的输出端的波形的失真就越严重。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151607438.png" alt="image-20201010204336400"></p><p>失真的原因：</p><ul><li>码元传输的速率越高</li><li>信号传输的距离越远</li><li>噪声干扰越大</li><li>传输媒体质量越差</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151607439.png" alt="image-20201010204818976"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607440.png" alt="image-20201010204928756"></p><p>奈氏准则和香农公式对比：</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607441.png" alt="image-20201010205029346"></p><h1 id="补充：信道复用技术"><a href="#补充：信道复用技术" class="headerlink" title="补充：信道复用技术"></a>补充：信道复用技术</h1><p>本节内容视频未讲到，是《计算机网络（第7版）谢希仁》物理层的内容</p><h2 id="频分复用、时分复用和统计时分复用"><a href="#频分复用、时分复用和统计时分复用" class="headerlink" title="频分复用、时分复用和统计时分复用"></a>频分复用、时分复用和统计时分复用</h2><p>复用 (multiplexing) 是通信技术中的基本概念。</p><p>它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607442.png" alt="image-20201011001949479"></p><p><strong>频分复用 FDM (Frequency Division Multiplexing)</strong></p><ul><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151607443.png" alt="image-20201011002236208"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151607444.png" alt="image-20201011002540041"></p><ul><li><strong>时分复用可能会造成线路资源的浪费</strong><ul><li>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。</li></ul></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151607445.png" alt="image-20201011002842704"></p><p><strong>统计时分复用 STDM (Statistic TDM)</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151607446.png" alt="image-20201011002953703"></p><h2 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h2><p>波分复用 WDM(Wavelength Division Multiplexing)</p><p><img src="http://img-md-js.linjsblog.top/img/202406151607447.png" alt="image-20201011003214653"></p><h2 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h2><p>码分复用 CDM (Code Division Multiplexing)</p><ul><li>常用的名词是<strong>码分多址</strong> CDMA (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第1章（概述）</title>
      <link href="/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC1%E7%AB%A0%EF%BC%88%E6%A6%82%E8%BF%B0%EF%BC%89/"/>
      <url>/2024/06/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC1%E7%AB%A0%EF%BC%88%E6%A6%82%E8%BF%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="图示说明"><a href="#图示说明" class="headerlink" title="图示说明"></a>图示说明</h1><p><img src="http://img-md-js.linjsblog.top/img/202406151547911.png" alt="image-20201007143815954">代表着主机</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547912.png" alt="image-20201007144130208"> 代表服务器</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547913.png" alt="image-20201007143904153"> 代表着路由器</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547914.png" alt="image-20201007143936128">代表着网络</p><h1 id="1-1、计算机网络在信息时代的作用"><a href="#1-1、计算机网络在信息时代的作用" class="headerlink" title="1.1、计算机网络在信息时代的作用"></a>1.1、计算机网络在信息时代的作用</h1><ul><li>计算机网络已由一种<strong>通信基础设施</strong>发展成为一种重要的<strong>信息服务基础设施</strong></li><li>计算机网络已经像水，电，煤气这些基础设施一样，成为我们<strong>生活中不可或缺</strong>的一部分</li></ul><h2 id="我国互联网发展状况"><a href="#我国互联网发展状况" class="headerlink" title="我国互联网发展状况"></a>我国互联网发展状况</h2><p><a href="http://www.cnnic.net.cn/">中国互联网络信息中心CNNIC</a></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547916.png" alt="image-20201006160618748"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547917.png" alt="image-20201006160645887"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547918.png" alt="image-20201006160715764"></p><hr><h1 id="1-2、因特网概述"><a href="#1-2、因特网概述" class="headerlink" title="1.2、因特网概述"></a>1.2、因特网概述</h1><h2 id="1、网络、互连网（互联网）和因特网"><a href="#1、网络、互连网（互联网）和因特网" class="headerlink" title="1、网络、互连网（互联网）和因特网"></a>1、网络、互连网（互联网）和因特网</h2><p>网络：网络（Network）由若干<strong>结点（Node）</strong>和连接这些结点的<strong>链路（Link）</strong>组成。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547919.png" alt="image-20201006163406232"></p><p>互连网（互联网）：多个网络通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互连网（互联网）。因此，互联网又称为“网络的网络（Network of Networks）”。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547920.png" alt="image-20201006163857236"></p><p>因特网：因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547921.png" alt="image-20201006164114523"></p><blockquote><p><strong>internet与Internet的区别</strong></p><ul><li><strong>internet(互联网或互连网)<strong>是一个通用名词，它泛指</strong>多个计算机网络互连而成的网络</strong>。在这些网络之间的通信协议可以是任意的。</li><li><strong>Internet（因特网）则是一个专用名词</strong>，它指<strong>当前全球最大的、开放的、由众多网络互连而成的特定计算机网络</strong>，它采用TCP&#x2F;IP协议族作为通信的规则，其前身是美国的ARPANET。</li></ul><p><strong>任意把几个计算机网络互连起来（不管采用什么协议），并能够相互通信，这样构成的是一个互连网(internet) ，而不是互联网(Internet)。</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547922.png" alt="image-20201010233227407"></p><h2 id="2、因特网发展的三个阶段"><a href="#2、因特网发展的三个阶段" class="headerlink" title="2、因特网发展的三个阶段"></a>2、因特网发展的三个阶段</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547923.png" alt="image-20201006164655173"></p><p><strong>因特网服务提供者<code>ISP</code>(<code>I</code>nternet <code>S</code>ervice <code>P</code>rovider)</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547924.png" alt="image-20201006165117756"></p><blockquote><p>普通用户是如何接入到因特网的呢？</p><p>答：<strong>通过ISP接入因特网</strong></p><p>ISP可以从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等联网设备。任何机构和个人只需缴纳费用，就可从<strong>ISP的得到所需要的IP地址</strong>。</p><p><strong>因为因特网上的主机都必须有IP地址才能进行通信，这样就可以通过该ISP接入到因特网</strong></p></blockquote><p><strong>中国的三大<code>ISP</code>：中国电信，中国联通和中国移动</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547925.png" alt="image-20201006165738879"></p><p><strong>基于ISP的三层结构的因特网</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547926.png" alt="image-20201006170140504"></p><blockquote><p>一旦某个用户能够接入到因特网，那么他也可以成为一个ISP，所需要做的就是购买一些如调制解调器或路由器这样的设备，让其他用户可以和他相连。</p></blockquote><h2 id="3、因特网的标准化工作"><a href="#3、因特网的标准化工作" class="headerlink" title="3、因特网的标准化工作"></a>3、因特网的标准化工作</h2><ul><li>因特网的标准化工作对因特网的发展起到了非常重要的作用。</li><li>因特网在指定其标准上的一个很大的特点是<strong>面向公众。</strong><ul><li>因特网所有的<strong>RFC</strong>(Request For Comments)技术文档都可从因特网上免费下载；</li><li>任何人都可以随时用电子邮件发表对某个文档的意见或建议。</li></ul></li><li><strong>因特网协会ISOC</strong>是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。<ul><li>因特网体系结构委员会IAB，负责管理因特网有关协议的开发；</li><li>因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化；</li><li>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。</li></ul></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547927.png" alt="image-20201006170959060"></p><ul><li><p>制订因特网的正式标准要经过一下<strong>4个阶段</strong>：</p><p>1、因特网草案（在这个阶段还不是RFC文档）</p><p>2、建议标准（从这个阶段开始就成为RFC文档）</p><p>3、草案标准</p><p>4、因特网标准</p></li></ul><h2 id="4、因特网的组成"><a href="#4、因特网的组成" class="headerlink" title="4、因特网的组成"></a>4、因特网的组成</h2><ul><li><p>边缘部分</p><p>由所有连接在因特网上的<strong>主机</strong>组成（台式电脑，大型服务器，笔记本电脑，平板，智能手机等）。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong>。</p></li><li><p>核心部分</p><p>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547928.png" alt="image-20201006180725282"></p><blockquote><p>路由器是一种专用计算机，但我们不称它为主机，路由器是实现分组交换的关键构建，其任务是转发收到的分组，这是网络核心最重要的部分。</p><p>处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为**端系统 (end system)**。</p><p><strong>端系统在功能上可能有很大的差别：</strong></p><ol><li><p>小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。</p></li><li><p>大的端系统则可以是一台非常昂贵的大型计算机。</p></li><li><p>端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个ISP。</p></li></ol></blockquote><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p><strong>端系统之间通信的含义</strong></p><p>“主机 A 和主机 B 进行通信”实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。<strong>即“主机</strong> <strong>A</strong> <strong>的某个进程和主机</strong> <strong>B</strong> <strong>上的另一个进程进行通信”。简称为“计算机之间通信”。</strong></p><p>端系统之间的通信方式通常可划分为两大类：</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547929.png" alt="image-20201010234145371"></p><p><strong>客户-服务器方式：</strong></p><ul><li>客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。</li><li>客户 - 服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方。</li></ul><blockquote><p><strong>服务请求方和服务提供方都要使用网络核心部分所提供的服务。</strong></p></blockquote><p><strong>对等连接方式：</strong></p><ul><li><strong>对等连接</strong> (peer-to-peer，简写为 <strong>P2P</strong> ) 是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件 ( P2P 软件) ，它们就可以进行<strong>平等的、对等连接通信</strong>。</li><li>双方都可以下载对方已经存储在硬盘中的共享文档。</li></ul><hr><h1 id="1-3-三种交换方式"><a href="#1-3-三种交换方式" class="headerlink" title="1.3 三种交换方式"></a>1.3 三种交换方式</h1><p>网络核心部分是互联网中最复杂的部分。</p><p>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</p><p>在网络核心部分起特殊作用的是<strong>路由器</strong>(router)。</p><p><strong>路由器</strong>是实现<strong>分组交换</strong> (packet switching) 的关键构件，其任务是<strong>转发</strong>收到的分组，这是网络核心部分最重要的功能。</p><h2 id="1、电路交换（Circuit-Switching）"><a href="#1、电路交换（Circuit-Switching）" class="headerlink" title="1、电路交换（Circuit Switching）"></a>1、电路交换（Circuit Switching）</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547930.png" alt="image-20201006182240000"></p><blockquote><p>传统两两相连的方式，当电话数量很多时，电话线也很多，就很不方便</p><p>所以要使得每一部电话能够很方便地和另一部电话进行通信，就应该使用一个<strong>中间设备</strong>将这些电话连接起来，这个中间设备就是<strong>电话交换机</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547931.png" alt="image-20201006182634249"></p><ul><li><p>电话交换机接通电话线的方式称为电路交换；</p></li><li><p>从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源；</p></li><li><p>电路交换的三个步骤：</p><p>1、建立连接（分配通信资源）</p><p>2、通话（一直占用通信资源）</p><p>3、释放连接（归还通信资源）</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547932.png" alt="image-20201006183020317"></p><blockquote><p>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。</p><p>这是因为计算机数据是突发式地出现在传输线路上的。</p><p>所以计算机通常采用的是<strong>分组交换</strong>，而不是线路交换</p></blockquote><h2 id="2、分组交换（Packet-Switching）"><a href="#2、分组交换（Packet-Switching）" class="headerlink" title="2、分组交换（Packet Switching）"></a>2、分组交换（Packet Switching）</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547933.png" alt="image-20201006183312843"></p><blockquote><p>通常我们把表示<strong>该消息的整块数据</strong>成为一个<strong>报文</strong>。</p><p>在发送报文之前，先把较长的报文划分成一个个更小的<strong>等长数据段</strong>，在每一个数据段前面。加上一些由必<strong>要的控制信息组成的首部</strong>后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。</p><p>首部包含了<strong>分组的目的地址</strong></p><p>分组从源主机到目的主机，可走不同的路径。</p></blockquote><p>发送方</p><ul><li>构造分组</li><li>发送分组</li></ul><p>路由器</p><ul><li>缓存分组</li><li>转发分组</li><li>简称为“分组转发”</li></ul><blockquote><p>在路由器中的输入和输出端口之间没有直接连线。</p><p>路由器处理分组的过程是：</p><ol><li>把收到的分组先<strong>放入缓存（暂时存储）；</strong></li><li><strong>查找转发表</strong>，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口<strong>转发</strong>出去。</li></ol></blockquote><p>接收方</p><ul><li>接收分组</li><li>还原报文</li></ul><h2 id="3、报文交换（Message-Switching）"><a href="#3、报文交换（Message-Switching）" class="headerlink" title="3、报文交换（Message Switching）"></a>3、报文交换（Message Switching）</h2><p>报文交换中的交换结点也采用存储转发方式，但报文交换对报文的大小没有限制，这就要求交换结点需要较大的缓存空间。报文交换主要用于早期的电报通信网，现在较少使用，<strong>通常被较先进的分组交换方式所取代</strong>。</p><h2 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h2><blockquote><p>假设A，B，C，D是分组传输路径所要经过的4个结点交换机，纵坐标为时间</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547934.png" alt="image-20201006184451671"></p><p>分析：</p><p>电路交换：</p><ul><li><p>通信之前首先要建立连接；连接建立好之后，就可以使用已建立好的连接进行数据传送；数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。</p></li><li><p>一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点；</p></li></ul><p>报文交换：</p><ul><li>可以随时发送报文，而不需要事先建立连接；整个报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。</li><li>整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间。</li></ul><p>分组交换：</p><ul><li>可以随时发送分组，而不需要事先建立连接。构成原始报文的一个个分组，依次在各结点交换机上存储转发。各结点交换机在发送分组的同时，还缓存接收到的分组。</li><li>构成原始报文的一个个分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，同时也有利于进行差错控制。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547935.png" alt="image-20201006185601460"></p><hr><h1 id="1-4-计算机网络的定义和分类"><a href="#1-4-计算机网络的定义和分类" class="headerlink" title="1.4 计算机网络的定义和分类"></a>1.4 计算机网络的定义和分类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>计算机网络的精确定义并未统一</li><li>计算机网络的最简单的定义是：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong>。<ul><li>互连：是指计算机之间可以通过有线或无线的方式进行数据通信；</li><li>自治：是指独立的计算机，他有自己的硬件和软件，可以单独运行使用；</li><li>集合：是指至少需要两台计算机；</li></ul></li><li>计算机网络的较好的定义是：计算机网络主要是由一些<strong>通用的，可编程的硬件（一定包含有中央处理机CPU）互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。<ul><li>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</li><li>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。</li></ul></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><strong>按交换技术分类：</strong></p><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><p><strong>按使用者分类：</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>按传输介质分类：</strong></p><ul><li>有线网络</li><li>无线网络</li></ul><p><strong>按覆盖范围分类：</strong></p><ul><li>广域网WAN（Wide Area Network）</li></ul><p>作用范围通常为几十到几千公里，因而有时也称为远程网（long haul network）。广域网是互联网的核心部分，其任务是通过长距离（例如，跨越不同的国家）运送主机所发送的数据。</p><ul><li>城域网MAN</li></ul><p>作用范围一般是一个城市，可跨越几个街区甚至整个城市</p><ul><li>局域网LAN</li></ul><p>一般用微型计算机或工作站通过高速通信线路相连（速率通常在 10 Mbit&#x2F;s 以上），但地理上范围较小（1 km 左右）</p><ul><li>个域网PAN</li></ul><p>就是在个人工作的地方把个人使用的电子设备用无线技术连接起来的网络。</p><p><strong>按拓扑结构分类：</strong></p><ul><li>总线型网络</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547936.png" alt="image-20201007005149993"></p><ul><li>星型网络</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547937.png" alt="image-20201007005203129"></p><ul><li>环形网络</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547938.png" alt="image-20201007005212345"></p><ul><li>网状型网络</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406151547939.png" alt="image-20201007005249137"></p><hr><h1 id="1-5-计算机网络的性能指标"><a href="#1-5-计算机网络的性能指标" class="headerlink" title="1.5 计算机网络的性能指标"></a>1.5 计算机网络的性能指标</h1><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547940.png" alt="image-20201007012419698"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547941.png" alt="image-20201007012439769"></p><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547942.png" alt="image-20201007012943970"></p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547943.png" alt="image-20201007013119621"></p><blockquote><p>带宽1 Gb&#x2F;s的以太网，代表其额定速率是1 Gb&#x2F;s，这个数值也是该以太网的<strong>吞吐量的绝对上限值</strong>。因此，对于带宽1 Gb&#x2F;s的以太网，可能实际吞吐量只有 700 Mb&#x2F;s，甚至更低。</p><p>注意：吞吐量还可以用每秒传送的字节数或帧数表示</p></blockquote><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>时延时指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</p><p>网络时延由几部分组成：</p><ul><li>发送时延</li></ul><p>主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</p><ul><li>传播时延</li></ul><p>电磁波在信道中传播一定的距离需要花费的时间。</p><ul><li>处理时延</li></ul><p>主机或路由器在收到分组时要花费一定时间进行处理</p><ul><li>排队时延</li></ul><p>分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。</p><blockquote><p>有时会把排队时延看成<strong>处理时延 一部分</strong></p><p>总时延 &#x3D; 发送时延 + 传播时延 + 处理时延 （处理时延 + 排队时延）</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547944.png" alt="image-20201007014139333"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547945.png" alt="image-20201007015401505"></p><blockquote><p>当处理时延忽略不计时，发送时延 和 传播时延谁占主导，要具体情况具体分析</p></blockquote><h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2><p>时延带宽积 &#x3D; 传播时延 * 带宽</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547946.png" alt="image-20201007115317347"></p><h2 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h2><p>互联网上的信息不仅仅单方向传输而是双向交互的。因此，我们有时很需要知道<strong>双向交互一次所需的时间</strong>。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547947.png" alt="image-20201007115647631"></p><h2 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h2><p>利用率有<strong>信道利用率</strong>和<strong>网络利用率</strong>两种。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547948.png" alt="image-20201012164544306"></p><h2 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547949.png" alt="image-20201007132900210"></p><hr><h1 id="1-6-计算机网络体系结构"><a href="#1-6-计算机网络体系结构" class="headerlink" title="1.6 计算机网络体系结构"></a>1.6 计算机网络体系结构</h1><h2 id="1、常见的计算机网络体系结构"><a href="#1、常见的计算机网络体系结构" class="headerlink" title="1、常见的计算机网络体系结构"></a>1、常见的计算机网络体系结构</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547950.png" alt="image-20201007133848212"></p><blockquote><p>如今用的最多的是TCP&#x2F;IP体系结构，现今规模最大的、覆盖全球的、基于TCP&#x2F;IP的互联网并未使用OSI标准。</p><p>TCP&#x2F;IP体系结构相当于将OSI体系结构的<strong>物理层</strong>和<strong>数据链路层</strong>合并为了<strong>网络接口层</strong>，并去掉了<strong>会话层</strong>和<strong>表示层</strong>。</p><p>TCP&#x2F;IP在网络层使用的协议是IP协议，IP协议的意思是网际协议，因此<strong>TCP&#x2F;IP体系结构的网络层称为网际层</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547951.png" alt="image-20201007135220030"></p><blockquote><p>在用户主机的操作系统中，通常都带有符合TCP&#x2F;IP体系结构标准的TCP&#x2F;IP协议族。</p><p>而用于网络互连的路由器中，也带有符合TCP&#x2F;IP体系结构标准的TCP&#x2F;IP协议族。</p><p>只不过路由器一般只包含网络接口层和网际层。</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547952.png" alt="image-20201007135518050"></p><blockquote><p><strong>网络接口层</strong>：并没有规定具体内容，这样做的目的是可以互连全世界各种不同的网络接口，例如：有线的以太网接口，无线局域网的WIFI接口等。</p><p><strong>网际层</strong>：它的核心协议是IP协议。</p><p><strong>运输层</strong>：TCP和UDP是这层的两个重要协议。</p><p><strong>应用层</strong>：这层包含了大量的应用层协议，如 HTTP , DNS 等。</p><p><strong>IP协议（网际层）</strong>可以将不同的<strong>网络接口（网络接口层）</strong>进行互连，并向其上的<strong>TCP协议和UDP协议（运输层）</strong>提供网络互连服务</p><p>而<strong>TCP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>可靠</strong>的传输服务。</p><p><strong>UDP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>不可靠</strong>的传输服务。</p><p>TCP&#x2F;IP体系结构中最重要的是<strong>IP协议</strong>和<strong>TCP协议</strong>，因此用TCP和IP来表示整个协议大家族。</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547953.png" alt="image-20201007141110338"></p><blockquote><p>教学时把TCP&#x2F;IP体系结构的<strong>网络接口层</strong>分成了<strong>物理层</strong>和<strong>数据链路层</strong></p></blockquote><h2 id="2、计算机网络体系结构分层的必要性"><a href="#2、计算机网络体系结构分层的必要性" class="headerlink" title="2、计算机网络体系结构分层的必要性"></a>2、计算机网络体系结构分层的必要性</h2><p><img src="http://img-md-js.linjsblog.top/img/202406151547954.png" alt="image-20201007141318411"></p><p><strong>物理层问题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547955.png" alt="image-20201007141806675"></p><blockquote><p>这图说明</p><ul><li>第一，严格来说，传输媒体并不属于物理层</li><li>计算机传输的信号，并不是图示的方波信号</li></ul><p>这样举例只是让初学者容易理解</p></blockquote><p><strong>数据链路层问题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547956.png" alt="image-20201007142049812"></p><p><strong>网络层问题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547957.png" alt="image-20201007142408792"></p><p><strong>运输层问题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547958.png" alt="image-20201007142631029"></p><blockquote><p>如何标识与网络通信相关的应用进程：一个分组到来，我们应该交给哪个进程处理呢？浏览器进程还是QQ进程</p></blockquote><p><strong>应用层问题</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547959.png" alt="image-20201007142755720"></p><blockquote><p>应用层该用什么方法（应用层协议）去解析数据</p></blockquote><p><strong>总结</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547960.png" alt="image-20201007204006284"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547961.png" alt="image-20201007143138937"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547962.png" alt="image-20201007195641140"></p><h2 id="3、计算机网络体系结构分层思想举例"><a href="#3、计算机网络体系结构分层思想举例" class="headerlink" title="3、计算机网络体系结构分层思想举例"></a>3、计算机网络体系结构分层思想举例</h2><p>例子：主机的浏览器如何与Web服务器进行通信</p><p><img src="http://img-md-js.linjsblog.top/img/202406151547963.png" alt="image-20201007144900565"></p><p><strong>解析：</strong></p><p>主机和Web服务器之间基于网络的通信，实际上是主机中的<strong>浏览器应用进程</strong>与Web服务器中的<strong>Web服务器应用进程</strong>之间基于<strong>网络的通信</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547964.png" alt="image-20201007145242020"></p><p><strong>体系结构的各层在整个过程中起到怎样的作用？</strong></p><p><strong>1、发送方发送</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547965.png" alt="image-20201007145441370"></p><blockquote><p>第一步：</p><ul><li><strong>应用层</strong>按照HTTP协议的规定构建一个<strong>HTTP请求报文</strong></li><li>应用层将<strong>HTTP请求报文</strong>交付给<strong>运输层</strong>处理</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547966.png" alt="image-20201007145720661"></p><blockquote><p>第二步：</p><ul><li><strong>运输层</strong>给<strong>HTTP请求报文</strong>添加一个<strong>TCP首部</strong>，使之成为<strong>TCP报文段</strong></li><li><strong>TCP报文段的首部格式</strong>作用是区分应用进程以及实现可靠传输</li><li><strong>运输层</strong>将T<strong>CP报文段</strong>交付给<strong>网络层</strong>处理</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547967.png" alt="image-20201007150234909"></p><blockquote><p>第三步：</p><ul><li><strong>网络层</strong>给<strong>TCP报文段</strong>添加一个<strong>IP首部</strong>，使之成为<strong>IP数据报</strong></li><li><strong>IP数据报的首部格式</strong>作用是使<strong>IP数据报</strong>可以在互联网传输，也就是被路由器转发</li><li><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong>处理</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547968.png" alt="image-20201007150723365"></p><blockquote><p>第四步：</p><ul><li><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong> （图示右边为首部，左边为尾部）</li><li>该<strong>首部</strong>的作用主要是为了让<strong>帧</strong>能够在一段链路上或一个网络上传输，能够被相应的目的主机接收</li><li>该<strong>尾部</strong>的作用是让目的主机检查所接收到的<strong>帧</strong>是否有误码</li><li><strong>数据链路层</strong>将<strong>帧</strong>交付给<strong>物理层</strong></li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547969.png" alt="image-20201007151342502"></p><blockquote><p>第五步：</p><ul><li><strong>物理层</strong>先将<strong>帧</strong>看做是<strong>比特流</strong>，这里的网络N1假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></li><li><strong>前导码</strong>的作用是为了让目的主机做好接收帧的准备</li><li><strong>物理层</strong>将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体</li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547970.png" alt="image-20201007151900254"></p><blockquote><p>第六步：</p><ul><li><strong>信号</strong>通过<strong>传输媒体</strong>到达<strong>路由器</strong></li></ul></blockquote><p><strong>2、路由器转发</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547972.png" alt="image-20201007152029458"> <img src="http://img-md-js.linjsblog.top/img/202406151547973.png" alt="image-20201007152138961"> <img src="http://img-md-js.linjsblog.top/img/202406151547974.png" alt="image-20201007152627778"></p><blockquote><p>在路由器中</p><ul><li><strong>物理层</strong>将<strong>信号</strong>变为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后，将其交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后，将其交付给<strong>网络层</strong>，这实际交付的是<strong>IP数据报</strong></li><li><strong>网络层</strong>解析<strong>IP数据报</strong>的<strong>首部</strong>，从中提取<strong>目的网络地址</strong></li></ul></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547975.png" alt="image-20201007152650863"> <img src="http://img-md-js.linjsblog.top/img/202406151547976.png" alt="image-20201007152812431"> <img src="http://img-md-js.linjsblog.top/img/202406151547977.png" alt="image-20201007153714840"></p><blockquote><p>在路由器中</p><ul><li>提取<strong>目的网络地址</strong>后查找<strong>自身路由表</strong>。确定<strong>转发端口</strong>， 以便进行转发</li><li><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong></li><li><strong>数据链路层</strong>将帧交付给<strong>物理层</strong></li><li><strong>物理层</strong>先将<strong>帧</strong>看成<strong>比特流</strong>，这里的网络N2假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></li><li>物理层将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体，信号通过传输媒体到达<strong>Web服务器</strong></li></ul></blockquote><p><strong>3、接收方接收</strong></p><blockquote><p>和发送方（主机）发送过程的封装正好是反着来</p><p>在Web 服务器上</p><ul><li><strong>物理层</strong>将<strong>信号</strong>变换为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后成为<strong>帧</strong>，交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后成为<strong>IP数据报</strong>，将其交付给<strong>网络层</strong></li><li><strong>网络层</strong>将<strong>IP数据报</strong>的<strong>首部</strong>去掉后成为<strong>TCP报文段</strong>，将其交付给<strong>运输层</strong></li><li><strong>运输层</strong>将<strong>TCP报文段</strong>的<strong>首部</strong>去掉后成为<strong>HTTP请求报文</strong>，将其交付给<strong>应用层</strong></li><li><strong>应用层</strong>对<strong>HTTP请求报文</strong>进行<strong>解析</strong>，然后给主机发回<strong>响应报文</strong></li></ul><p><strong>发回响应报文的步骤和之前过程类似</strong></p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151547978.png" alt="image-20201007155051275"></p><h2 id="4、计算机网络体系结构中的专用术语"><a href="#4、计算机网络体系结构中的专用术语" class="headerlink" title="4、计算机网络体系结构中的专用术语"></a>4、计算机网络体系结构中的专用术语</h2><p>以下介绍的专用术语来源于OSI的七层协议体系结构，但也适用于TCP&#x2F;IP的四层体系结构和五层协议体系结构</p><p><strong>实体</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547979.png" alt="image-20201007155444920"></p><p><strong>协议</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547980.png" alt="image-20201007155545934"></p><blockquote><p>协议：控制两个对等实体进行逻辑通信的规则的集合</p><p>协议三要素：</p><ul><li>语法：定义所交换信息的格式</li><li>语义：定义收发双方所要完成的操作</li><li>同步：定义收发双发的时序关系</li></ul></blockquote><p><strong>服务</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547981.png" alt="image-20201007160246561"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547982.png" alt="image-20201016104750288"></p><p><img src="http://img-md-js.linjsblog.top/img/202406151547983.png" alt="image-20201007162620250"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计-校内资源共享与交流平台(删改)</title>
      <link href="/2024/06/15/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1-%E6%A0%A1%E5%86%85%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BA%A4%E6%B5%81%E5%B9%B3%E5%8F%B0%E5%88%A0%E6%94%B9/"/>
      <url>/2024/06/15/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1-%E6%A0%A1%E5%86%85%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB%E4%B8%8E%E4%BA%A4%E6%B5%81%E5%B9%B3%E5%8F%B0%E5%88%A0%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>博主本科毕业设计完成于2023年大四，因为想把它作为博文分享到自己的个人博客所以在一年后，对论文做了一些删减（如论文的格式）。现在回国头来觉得写的很烂，不过也拿了90分，博主现在不打算再做Java方向了，辞职考研去了，现在就分享出来，毕业设计论文用Java的可以来找找灵感。论文转md可能会有一些错误、乱码等问题没有发现，可以留言。</p><h1 id="本科毕业论文（设计）"><a href="#本科毕业论文（设计）" class="headerlink" title="本科毕业论文（设计）"></a><strong>本科毕业论文（设计）</strong></h1><h1 id="校内资源共享与交流平台的设计与实现"><a href="#校内资源共享与交流平台的设计与实现" class="headerlink" title="校内资源共享与交流平台的设计与实现"></a><strong>校内资源共享与交流平台的设计与实现</strong></h1><hr><h1 id="摘-要"><a href="#摘-要" class="headerlink" title="摘 要"></a><strong>摘 要</strong></h1><p>近年来，随着互联网行业、技术的迅速发展，以及移动互联网的普及，高校学生在网络上的社交不断加深，从互联网中学习和获取知识信息也变得越来越普遍。由于互联网上的学习资源质量参差不起以及同学之间、师生之间存在信息交流闭塞的问题，导致学生很难获得合适的学习资源和交流环境。针对上述情况，设计开发一款集成校内社区交流功能与知识资源分享平台，为学生良好的社区交流环境，鼓励同学之间互帮互助，分享学习资源，降低资源搜集的成本。</p><p>该平台在技术上采用前后端分离架构，后端采用Java语言、基于Spring Boot框架开发、MyBatis作为持久层、Spring Security作为安全框架和MySQL数据库开发，并结合Redis缓存、RabbitMQ消息中间件、ElasticSearch搜索引擎等分布式中间件提高系统可靠性，前端基于Vue 3.0和Ant Design Vue组件库开发，实现社区、资源库、个人中心等功能。</p><p><strong>[关键词]：</strong>高校校园论坛；资源共享；Java；Spring Boot；Vue；</p><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>In recent years, with the rapid development of Internet industry and technology, and the popularity of mobile Internet, college students have deepened their social interaction on the network, and learning and obtaining knowledge and information from the Internet has become more and more common. Due to the uneven quality of learning resources on the Internet and the blocked information exchange between students and teachers and students, it is difficult for students to obtain suitable learning resources and communication environment. In view of the above situation, an integrated community communication function and knowledge resource sharing platform is designed and developed to provide students with a good community communication environment, encourage students to help each other, share learning resources, and reduce the cost of resource collection.</p><p>The back-end uses Java language, based on Spring Boot framework development, MyBatis as the persistence layer, Spring Security as the security framework and MySQL database development. Redis cache, RabbitMQ message middleware, ElasticSearch search engine and other distributed middleware are combined to improve the reliability of the system. The front-end is developed based on Vue 3.0 and Ant Design Vue component library to realize the functions of community, resource library, personal center and so on.</p><p><strong>[Key words]:</strong> College Campus Forum; Resource sharing; Java; Spring Boot; Vue</p><h1 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a><strong>目 录</strong></h1><p>略（目录太长，发博客太浪费空间了删了）</p><h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1 绪论"></a>1 绪论</h1><h2 id="1-1-研究背景"><a href="#1-1-研究背景" class="headerlink" title="1.1 研究背景"></a>1.1 研究背景</h2><p>随着互联网行业的迅速发展，以及移动互联网的普及，人们可以通过网络获得丰富的学习资源，使得人们的学习方式和学习效果得到了极大的提升。传统的课堂教学已经不能满足人们的学习需求，人们对于学习资源的需求越来越大。大学生可以通过各种社交网站交流日常生活或者学习心得，从各种技术论坛、社交视频网站、博客、公众号和各种资源网站获取知识和资源。但是由于互联网的知识资源质量往往良莠不齐，导致大学生们在搜集针对性学习资源时，尤其是校内资源，非常困难。</p><p>例如，大学生需要获取考研、考公、英语四六级等真题和学习资源，想解公共选修课的相关内容、老师，往届师兄师姐的经验分享，则需要关注大量的公众号获取相关资源和在浩瀚的互联网中搜集。想要获取校内专业课程的PPT、实验报告、期末试卷等校内资源更是难上加难，只能通过与熟悉的同学、老师沟通获取相关资源，这对于部分信息较为闭塞、社交较少的同学来说对未来的学习是不利的。</p><h2 id="1-2-研究意义与目的"><a href="#1-2-研究意义与目的" class="headerlink" title="1.2 研究意义与目的"></a>1.2 研究意义与目的</h2><p>针对上述问题，开发一个集成论坛社交功能与学习资源分享的平台，鼓励同学之间互助、交流，上传各种资料、分享学习生活心得，在平台参与讨论交流，拓宽学生信息渠道，促进信息资源流通。搜集各种资源不需要依托学校内的人际关系，或者在各大微信公众号和网站大海捞针，能在一定程度上解决学生之间学习信息交流封闭的问题，降低搜集资源的成本。这样的平台可以为大学生提供更好的学习资源和学习体验，促进知识的传播和交流，同时也可以帮助大学生们更好地完成学业，提高自身素质。</p><h2 id="1-3-国内外相关社交平台和论坛发展现状"><a href="#1-3-国内外相关社交平台和论坛发展现状" class="headerlink" title="1.3 国内外相关社交平台和论坛发展现状"></a>1.3 国内外相关社交平台和论坛发展现状</h2><h3 id="1-3-1-国内高校论坛与技术问答社区CSDN概况"><a href="#1-3-1-国内高校论坛与技术问答社区CSDN概况" class="headerlink" title="1.3.1 国内高校论坛与技术问答社区CSDN概况"></a>1.3.1 国内高校论坛与技术问答社区CSDN概况</h3><p>根据笔者在互联网的搜集与调查，国内外各大高校都有自己的BBS论坛，例如华南理工BBS、暨南大学BBS等等，这些论坛集成了求职就业、生活信息、社团组织的信息，作为师生表达观点、互帮互助、输出校园文化的重要平台。这些网站随着互联网各大社交平台的迅速发展，比如微博、虎扑、哔哩哔哩等。目前大多数学生很少浏览校内论坛，目前网站流量并不是很高，社区活跃度日渐下降，例如华南理工大学BBS论坛会员共74208人，日流量约9218，流量最高峰的时候在2017年，最高纪录是5209428，论坛功能并不能很好并且及时的满足学生获取相关资源的需要，由于BBS论坛起源于互联网刚刚兴起的时候，使用的是较老的技术，高校BBS论坛大多数使用PHP作为开发语言[1]，可以看到网站的首页图片展示还保留了已经淘汰的 Flash Player技术，2021年微软和adobe停止了对Adobe Flash Player的支持，目前大部分主流的浏览器已经不再支持flash 播放器。因此BBS论坛在无论在技术上还是在使用上都无法符合时代和学生的需要。</p><p>CSDN作为中文IT技术社区，包含app、博客、技术论坛和资源下载中心。其中CSDN下载中心我们可以搜索下载包含前端、后端、大数据、人工智能等各种计算机资源，但是CSDN下载需要充值C币，并且大部分资源价值不高但是价格昂贵，多为搬运GitHub的资源，并且受众有限，只适合IT从业者和计算机专业的同学[2]。</p><h3 id="1-3-2-国外的技术论坛Stack-Overflow"><a href="#1-3-2-国外的技术论坛Stack-Overflow" class="headerlink" title="1.3.2 国外的技术论坛Stack Overflow"></a>1.3.2 国外的技术论坛Stack Overflow</h3><p>2016年Stack Overflow的开发工程师Nick Craver在他的博客上发表过关于Stack Overflow的技术架构，Stack Overflow仅用35台服务器和.Net技术撑起了世界上最受欢迎的网站之一。Stack Overflow仅用35台服务器和.Net技术撑起了世界上最受欢迎的网站之一，2016年02月09日一天的HTTP请求数达209,420,973此，SQL查询数504,816,843，Redis命中数5,831,683,114，Elastic 查询次数17,158,874，接收数据总量569 GB，发送数据总量达3.08TB[13]。</p><p>在技术架构上，Stack Overflow在负载均衡使用的 HAProxy 1.5.15 和 CentOS 7，Web层架构使用IIS 8.5，ASP.Net MVC 5.2.3，和.Net 4.6.1，在缓存层使用了 Redis，Redis 服务器 256GB 内存，采用 master&#x2F;slave 结构部署，Stack Overflow的搜索采用 Elasticsearch 1.4，SQL Server 是 Stack Overflow 唯一的源数据库，所有 Elastic 和 Redis 的数据都来自 SQL Server[13]。Stack Overflow架构如图1.1所示。<img src="http://img-md-js.linjsblog.top/img/202406150933372.png">{width&#x3D;”4.914443350831146in” height&#x3D;”3.542351268591426in”}</p><p>图1.1 Stack Overflow 架构</p><blockquote><p>（资料来源：Stack Overflow：架构 - 2016 年版）</p></blockquote><h1 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h1><h2 id="2-1-业务需求分析"><a href="#2-1-业务需求分析" class="headerlink" title="2.1 业务需求分析"></a>2.1 业务需求分析</h2><p>校内资源共享平台与交流平台支持PC网页端，基本功能包括用户中心、资源库、社区、后台管理四大模块，第三方平台登录、短信服务、分布式限流等功能。</p><p>用户中心：用户中心包含了用户的注册、登录、个人信息管理、个人等级与积分账户等功能。用户登录包含账号密码登录、手机验证码登录和第三方平台登录三种方式。由于国内审核的限制，开发QQ登录授权功能需要开发中认证和网站备案，所以我打算优先完成GitHub第三方平台的授权登录。</p><p>用户等级与积分账户：等级分为1级到6级，用户注册时等级为初始为1级，每升一级需要不同的经验，用户通过上传资源、发表帖子获得一定的经验、提升等级；用户注册成功后系统赠送200积分，用户上传资源或其他用户下载该用户上传的资源获得积分，用户可以通过获得的积分下载资源。</p><p>资源库：用户可以上传与下载资源，上传资源并通过审核赠送积分，提升经验等级，下载积分资源需要消耗积分。</p><p>搜索功能：分为主页搜索和资源库搜索，主页搜索社区模块的文章和帖子，资源库搜索资源库的相关资源。</p><p>社区：用户可以发表文章或帖子，文章包含点赞和评论区，评论区包含点赞和回复功能。在设计与开发时，需要考虑用户可以发表帖子或文章，浏览用户可以对其点赞、评论，同时对评论内容可以进行点赞和回复，对回复也可以进行回复和点赞。</p><p>搜索功能：分为主页搜索和资源库搜索，主页搜索社区模块的文章和帖子，资源库搜索资源库的相关资源。</p><p>系统后台管理：后台管理系统独立于平台，主要由系统管理员登录和维护，包含用户管理、社区内容审核、资源库审核等功能。</p><h2 id="2-2-功能需求分析"><a href="#2-2-功能需求分析" class="headerlink" title="2.2 功能需求分析"></a>2.2 功能需求分析</h2><p>用例图是系统分析和设计中一种常用的建模工具，用例图可以帮助团队明确系统的功能需求和用户需求，以便在开发过程中能够更加清晰地明确和理解系统的目标。我们将用用例图来分析平台不同角色在各个模块的权限。平台面向的主要用户是在校大学生，平台的角色主要分为普通用户和系统管理员。普通用户主要使用的模块有个人中心、资源库和社区，系统管理员主要使用后台管理系统。</p><p>普通用户是平台最主要的使用者，用户在个人中心可以对自己发表的文章和上传的资源，并查询资源审核的进度。并且可以对自己的个人信息进行修改、接受系统通知，查询个人等级和积分余额。用户可以查看自己在社区和资源库收藏的文章和资源，方便重复浏览文章和资源。普通用户在个人中心的用例图如下图2.1所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150940118.png" alt="image-20240615094048081"></p><p>图2.1 个人中心用例图</p><p>用户可以在社区浏览文章、搜索文章，用户登录后可以发表文章、发表评论、收藏文章和点赞文章。社区的用例图如下图2.2所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150941887.png" alt="image-20240615094120846"></p><p>图2.2 社区用例图</p><p>用户可以在资源库浏览资源，用户登录后有权使用下载资源、收藏资源等功能。用户在下载资源后才能对资源发表评论。用户在资源库的用例图如下图2.3所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150941240.png" alt="image-20240615094144190"></p><p>图2.2 资源库用例图</p><p>系统管理员主要通过后台管理系统，后台管理系统独立于校内资源共享与交流平台，实现用户管理、文章管理、资源管理、审核等功能。后台管理系统用例图如图2.3所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150942072.png" alt="image-20240615094214025"></p><p>图2.2 后台管理用例图</p><h1 id="3-系统设计"><a href="#3-系统设计" class="headerlink" title="3 系统设计"></a>3 系统设计</h1><h2 id="3-1-系统总体功能结构图"><a href="#3-1-系统总体功能结构图" class="headerlink" title="3.1 系统总体功能结构图"></a>3.1 系统总体功能结构图</h2><p>校内资源共享与交流平台主要分为四大模块，分别为社区、用户中心、资源库和后台管理系统，总体功能结构图如图3.1所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150942605.png"></p><p>图3.1 校内资源共享与交流平台功能结构图</p><h2 id="3-2-系统关键功能设计"><a href="#3-2-系统关键功能设计" class="headerlink" title="3.2 系统关键功能设计"></a>3.2 系统关键功能设计</h2><h3 id="3-2-1-基于JWT实现用户认证和授权"><a href="#3-2-1-基于JWT实现用户认证和授权" class="headerlink" title="3.2.1 基于JWT实现用户认证和授权"></a>3.2.1 基于JWT实现用户认证和授权</h3><p>一般情况下，基于JWT登录的流程一般是，用户提交登录表单，服务器返回token作为凭证，用户请求数据时在请求头携带token获取数据。但是由于JWT的无状态性，服务端不能控制用户登录和退出。所以JWT本身就是不安全的，如果token没有过期，论是谁拿到token谁都可以访问，所以我们通常会把token的有效期设置的较短，那么token过期了怎么办呢？如何实现token的续期。参照Oauth2 的实现方案，这个时候我们就要使用两个token实现JWT的续期：access_token和refresh_token。</p><p>access_token过期时间比较短，通常设置30分钟，refresh_token设置的比较长可以是一个小时甚至1个星期或更长。这两个token的职责不一样：access_token用于业务系统交互，是最核心的数据。refresh_token只用于向认证中心获取新的access_token与refresh_token。我们假设access_token有效期为30分钟，refresh_token为60分钟。当用户超过30分钟而不到60分钟时，access_token失效，需要通过refresh_token调用刷新接口，生成新的access_token和refresh_token返回给前端替换旧的token。如果refresh_token过期则代表用户状态过期，则前端跳转页面重新登录。</p><p>refresh token存在的意义是为了安全性refresh token只有在需要刷新token的时候才会发送给服务端校验，使用频率低才能降低泄露风险，而不是每次都要把refresh token发给服务端。具体时序图如图3.2所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150943274.png">{width&#x3D;”5.772222222222222in” height&#x3D;”4.654166666666667in”}</p><p>图3.2 双token解决用户登录token续签问题</p><h3 id="3-2-2-手机验证码登录"><a href="#3-2-2-手机验证码登录" class="headerlink" title="3.2.2 手机验证码登录"></a>3.2.2 手机验证码登录</h3><p>基于JWT的登录流程开发手机号登录和注册。由于注册和手机号登录需要使用手机号接受短信验证码，所以我们采用阿里云短信API，实现短信发送功能。手机号登录流程如下图3.3所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150943885.png">{width&#x3D;”5.768055555555556in” height&#x3D;”6.322222222222222in”}</p><p>图3.3 手机号登录流程</p><h3 id="3-2-3-短信接口的实现"><a href="#3-2-3-短信接口的实现" class="headerlink" title="3.2.3 短信接口的实现"></a>3.2.3 短信接口的实现</h3><p>用户填写手机号码后，点击发送短信，请求应用服务器，应用服务器请求阿里短信云服务，由阿里云短信服务向用户手机号码发送短信。</p><p>为了实现短信验证码的校验，我们使用Redis实现验证码的校验，设计Redis的存储结构：拼接常量前缀和UUID最后在末尾加上手机号形成Redis的key，UUID由Java自带的UUID工具类生成，code值为验证码，由用户发送的验证码与Redis中的验证码比较是否相同，如果相同，则说明验证成功，如果不相同则验证失败。用户验证码Redis存储结构如下图3.4所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150944653.png">{width&#x3D;”4.438888888888889in” height&#x3D;”2.4430555555555555in”}</p><p>图3.4 手机验证码 Redis K-V数据结构</p><p>短信验证码校验流程如下图3.5所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150944518.png">{width&#x3D;”5.310416666666667in” height&#x3D;”4.385416666666667in”}</p><p>图3.5 短信验证码校验流程</p><h3 id="3-2-4-接口的分布式限流方案设计"><a href="#3-2-4-接口的分布式限流方案设计" class="headerlink" title="3.2.4 接口的分布式限流方案设计"></a>3.2.4 接口的分布式限流方案设计</h3><p>为了防止短信服务被盗刷，或者流量比较大的接口导致系统负载过高宕机我们需要限制对接口的请求，比如根据IP和手机号码进行限制。这里我结合Redis采用令牌桶算法，并通过注解和拦截器的形式对接口的进行限流。</p><p>（1）令牌桶算法</p><p>令牌桶算法是一种用于控制流量的算法，可以确保系统在任何时候都不会因为流量超出容量而崩溃。在令牌桶算法中，一个固定数量的令牌被放入到一个”桶”中，每当一个请求到达时，系统都会尝试从桶中取出一个令牌。如果桶中没有令牌可用，请求将被拒绝或排队等待^[15]^。</p><p>具体而言，令牌桶算法定义了一个桶，里面装有固定数量的令牌，以及一个令牌发放速率，即每秒放入桶中的令牌数量。每当一个请求到达时，如果桶中有令牌可用，则取出一个令牌并处理请求；如果桶中没有令牌，则拒绝请求或将其放入等待队列中，直到桶中有令牌可用为止。</p><p>令牌桶算法的优点在于可以在一定程度上平滑地控制请求的流量，并且可以灵活地调整令牌的发放速率以适应系统的负载情况。同时，它也有一些缺点，比如可能导致请求的延迟增加或者需要一定的额外开销来实现算法。令牌桶算法如下图3.6。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150944130.png">{width&#x3D;”3.952638888888889in” height&#x3D;”2.2808814523184604in”}</p><p>图3.6 令牌桶算法示意图</p><p>（2）基于Redis + Lua脚本 + 令牌桶算法实现限流控制</p><p>部分关键代码如下：</p><ul><li>自定义注解</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RateLimit</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//限流唯一标示</span>    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">//限流单位时间（单位为s）</span>    <span class="token keyword">int</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//单位时间内限制的访问次数</span>    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是否限制ip</span>    <span class="token keyword">boolean</span> <span class="token function">ipLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写Lua脚本：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">redis<span class="token punctuation">.</span><span class="token function">replicate_commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 参数中传递的key</span><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">-- 令牌桶填充 最小时间间隔</span><span class="token keyword">local</span> update_len <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">-- 记录 当前key上次更新令牌桶的时间的 key</span><span class="token keyword">local</span> key_time <span class="token operator">=</span> <span class="token string">'ratetokenprefix'</span><span class="token operator">..</span>key<span class="token comment">-- 获取当前时间(这里的curr_time_arr 中第一个是 秒数，第二个是 秒数后毫秒数)，由于我是按秒计算的，这里只要curr_time_arr[1](注意：redis数组下标是从1开始的)</span><span class="token comment">--如果需要获得毫秒数 则为 tonumber(arr[1]*1000 + arr[2])</span><span class="token keyword">local</span> curr_time_arr <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'TIME'</span><span class="token punctuation">)</span><span class="token comment">-- 当前时间秒数</span><span class="token keyword">local</span> nowTime <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>curr_time_arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">-- 从redis中获取当前key 对应的上次更新令牌桶的key 对应的value 上次更新时间秒数</span><span class="token keyword">local</span> curr_key_time <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>key_time<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">-- 获取当前key对应令牌桶中的令牌数</span><span class="token keyword">local</span> token_count <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- 当前令牌桶的容量</span><span class="token keyword">local</span> token_size <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">-- 令牌桶数量小于0 说明令牌桶没有初始化</span><span class="token keyword">if</span> token_count <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">then</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span>key_time<span class="token punctuation">,</span>nowTime<span class="token punctuation">)</span>    redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>token_size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> token_size <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">else</span>    <span class="token keyword">if</span> token_count <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">then</span> <span class="token comment">--当前令牌桶中令牌数够用</span>        redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>token_count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> token_count <span class="token operator">-</span><span class="token number">1</span>   <span class="token comment">--返回剩余令牌数</span>    <span class="token keyword">else</span>    <span class="token comment">--当前令牌桶中令牌数已清空</span>        <span class="token keyword">if</span> curr_key_time <span class="token operator">+</span> update_len <span class="token operator">&lt;</span> nowTime <span class="token keyword">then</span>    <span class="token comment">--判断一下，当前时间秒数 与上次更新时间秒数  的间隔，是否大于规定时间间隔数 （update_len）</span>            redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>token_size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span>key_time<span class="token punctuation">,</span>nowTime<span class="token punctuation">)</span>            <span class="token keyword">return</span> token_size <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Spring中注入拦截器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOG</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Serializable</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> redisLuaScript<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">assert</span> handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">;</span>        <span class="token class-name">HandlerMethod</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        <span class="token class-name">RateLimit</span> rateLimit <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RateLimit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当前方法上有我们自定义的注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rateLimit <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获得单位时间内限制的访问次数</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获得限流单位时间（单位为s）</span>            <span class="token keyword">int</span> time <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> ipLimit <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">ipLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//拼接 redis中的key</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">RATE_LIMIT_KEY</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果需要限制ip的话</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ipLimit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getIpAddress</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//执行lua脚本</span>            <span class="token class-name">Long</span> execute <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisLuaScript<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> time<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">assert</span> execute <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> execute<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">BaseResponse</span> resultModel <span class="token operator">=</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">RATE_LIMIT_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">901</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>resultModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前接口调用超过时间段内限流,key:&#123;&#125;"</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前访问时间段内剩余&#123;&#125;次访问次数"</span><span class="token punctuation">,</span> execute<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getIpAddress</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> ipAddress <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span>  ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span>  ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span>  ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ipAddress <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span>            <span class="token comment">// "***.***.***.***".length()</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// = 15</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    ipAddress <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ipAddress <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ipAddress<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在controller层添加注解即可使用，具体使用方法如下图3.7所示。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202406150956361.png">{width&#x3D;”5.768055555555556in” height&#x3D;”2.123611111111111in”}</p><p>图3.7 自定义限流注解的使用</p><h3 id="3-2-5-第三方平台OAuth登录"><a href="#3-2-5-第三方平台OAuth登录" class="headerlink" title="3.2.5 第三方平台OAuth登录"></a>3.2.5 第三方平台OAuth登录</h3><p>（1）QQ登录开发流程如下图3.8所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150957040.png">{width&#x3D;”5.772222222222222in” height&#x3D;”0.81875in”}</p><p>图3.8 QQ登录开发流程</p><p>首先获取Access Token，用户点击登录按钮后，通过OAuth2.0认证获取AccessToken，对于应用而言，需要进行两步^[9]^：</p><p>①获取Authorization Code；</p><p>②通过Authorization Code获取Access Token^[14]^；</p><p><img src="http://img-md-js.linjsblog.top/img/202406150957477.png">{width&#x3D;”5.433333333333334in” height&#x3D;”4.159722222222222in”}</p><p>图3.9 OAuth 2.0 获取access token</p><blockquote><p>（资料来源：OAuth2.0协议草案V21的4.1节 <a href="http://www.rfcreader.com/#rfc6749">http://www.rfcreader.com/#rfc6749</a>）</p></blockquote><p>首先获取Authorization Code。我们用通过GET方法发送HTTP请求访问<a href="https://graph.qq.com/oauth2.0/authorize">https://graph.qq.com/oauth2.0/authorize</a>接口，请求参数如下</p><p><img src="http://img-md-js.linjsblog.top/img/202406150957811.png">{width&#x3D;”5.646543088363955in” height&#x3D;”3.687995406824147in”}</p><p>图3.10 获取Authorization Code请求参数</p><p>如果用户成功登录并授权，则会跳转到指定的回调地址，并在redirect_uri地址后带上Authorization Code和原始的state值^[9]^。例如，通过Authorization Code获取Access Token。</p><p>请求地址：<a href="https://graph.qq.com/oauth2.0/token">https://graph.qq.com/oauth2.0/token</a></p><p>请求参数：</p><p><img src="http://img-md-js.linjsblog.top/img/202406150957514.png">{width&#x3D;”5.430003280839895in” height&#x3D;”2.394012467191601in”}</p><p>图3.11 获取Access Token请求参数</p><p>返回参数：</p><p><img src="http://img-md-js.linjsblog.top/img/202406150957416.png">{width&#x3D;”5.676288276465442in” height&#x3D;”1.0941174540682415in”}</p><p>图3.12 获取Access Token返回值</p><p>获取用户OpenID。通过上一步拿到的AccessToken，得到对应用户身份的OpenID。OpenID是此网站上或应用中唯一对应用户身份的标识，网站或应用可将此ID进行存储，便于用户下次登录时辨识其身份，或将其与用户在网站上或应用中的原有账号进行绑定^[9]^。</p><p>调用OpenID访问用户信息。调用get_user_info接口，获取用户QQ昵称、头像、性别，最后将获得的信息写入数据库保存，执行登录流程最终实现用户登录。</p><p>（2）GitHub登录</p><p>与QQ登录类似，用户跳转到Github进行授权，获取授权码，将拿到的授权码code向GitHub请求令牌，获得access token，拿到令牌后向API请求用户数据即可完成GitHub的第三方登录。</p><p>GitHub授权登录流程如图3.13、3.14所示</p><p><img src="http://img-md-js.linjsblog.top/img/202406150958021.png">{width&#x3D;”5.147916666666666in” height&#x3D;”2.7465277777777777in”}</p><p>图3.13 Github登录授权流程</p><p><img src="http://img-md-js.linjsblog.top/img/202406150958763.png">{width&#x3D;”5.656944444444444in” height&#x3D;”4.271527777777778in”}</p><p>图3.14 Github登录授权详细流程时序图</p><p>和手机验证码登录类似，第三方授权登录既可以实现注册也可以实现登录，如果用户已经注册账号和绑定了第三方账号，则自动登录，如果用户不存在，则需要保存用户信息到数据库。在从GitHub拿到用户信息跳转回平台，执行的具体逻辑如图3.15所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150958427.png">{width&#x3D;”5.772222222222222in” height&#x3D;”2.3229166666666665in”}</p><p>图3.15 Github登录授权流程</p><h3 id="3-2-6-文章的评论回复功能"><a href="#3-2-6-文章的评论回复功能" class="headerlink" title="3.2.6 文章的评论回复功能"></a>3.2.6 文章的评论回复功能</h3><p>为了实现文章评论区的无限盖楼回复，既用户可以对文章进行评论，也可以对评论进行回复，也可以对回复进行回复，也称多级评论。我们对评论区做出如下图3.16所示的树型结构设计。</p><p><img src="http://img-md-js.linjsblog.top/img/202406150958600.png">{width&#x3D;”4.404166666666667in” height&#x3D;”4.090972222222222in”}</p><p>图3.16 评论区表设计</p><p>以评论列表的访问为例，我们的查询SQL可能是（已简化）：</p><p>（1）查询时间序一级评论id列表：<code>SELECT id FROM article_cmmment WHERE</code> <code>article_id=? AND root_id=0 AND is_delete=0 ORDER BY create_time=? LIMIT</code> <code>0,20</code></p><p>（2）批量查询根评论基础信息：<code>SELECT \* FROM article_cmmment WHERE id in</code> <code>(?,?,\...)</code></p><p>（3）并发查询楼中楼评论id列表：<code>SELECT id FROM article_cmmment WHERE</code> <code>article_id =? AND root_id=? ORDER BY like_num LIMIT 0,3</code></p><p>（4）批量查询楼中楼评论基础信息：<code>SELECT \* FROM article_cmmment WHERE id</code> <code>in (?,?,\...)</code>^[11]^。</p><h3 id="3-2-7-点赞功能的设计"><a href="#3-2-7-点赞功能的设计" class="headerlink" title="3.2.7 点赞功能的设计"></a>3.2.7 点赞功能的设计</h3><p>点赞功能在文章和文章评论都有，当已登陆用户访问页面的时候，如果用户已经点赞，需要将点赞按钮高亮表示用户已经点亮，所以在前面数据库设计中，有两张表：文章点赞表article_like和文章评论点赞表comment_like,记录用户对当前文章和评论是否点赞。用户再点击一次按钮就是取消点赞。</p><p>因为点赞接口往往并发量较高，所以如果只有一层数据库，无论是查询和操作都需要消耗很大的性能。所以我们使用Redis作为缓存提高点赞功能的并发量和可靠性。</p><p>Redis缓存设计：</p><p>文章点赞列表如下图所示</p><blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151000884.png">{width&#x3D;”5.298611111111111in” height&#x3D;”1.875in”}</p><p>图3.17 Redis文章点赞列表</p></blockquote><p>Redis数据存储的键值对结构为Key-value&#x3D;user:article:likes:{articleId}-user(userId)-score(likeTimestamp)</p><p>用articleId作为key，value则是一个zset，user是这篇文章点赞的用户id，score是点赞的时间，当这篇文章某用户有新的点赞操作的时候，就会用zadd的方式把最新的点赞记录加入到该zset中来^[11]^。</p><p>评论点赞列表与文章点赞列表类似，只不过是把key值作了调整。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151000315.png">{width&#x3D;”5.683333333333334in” height&#x3D;”2.098611111111111in”}</p><blockquote><p>图3.18 Redis评论点赞列表</p></blockquote><h3 id="3-2-8-资源的上传和下载"><a href="#3-2-8-资源的上传和下载" class="headerlink" title="3.2.8 资源的上传和下载"></a>3.2.8 资源的上传和下载</h3><p>资源上传后需要经过后台审核通过才能上架资源库，才能被其他用户搜索和下载。资源的上传以及审核流程如下图3.19所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151000134.png">{width&#x3D;”5.601388888888889in” height&#x3D;”7.651388888888889in”}</p><p>图3.19 资源上传审核流程图</p><p>用户上传的资源文件最终是保存在阿里云OSS对象存储服务上，按照传统方案，用户从前端上传的文件经过后端服务器再上传到OSS,这会占用很大一部分服务器带宽。所以采用服务端签名后由前端直传到OSS方案，比从应用服务器作为桥梁传递资源节省了一倍的带宽，由于服务端签名直传无需将Access Key暴露在前端页面，相比JavaScript客户端签名直传具有更高的安全性^[12]^。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151000003.png">{width&#x3D;”5.7027777777777775in” height&#x3D;”3.2395833333333335in”}</p><p>图3.20 服务端签名直传流程</p><h3 id="3-2-9-搜索功能"><a href="#3-2-9-搜索功能" class="headerlink" title="3.2.9 搜索功能"></a>3.2.9 搜索功能</h3><p>平台的搜索功能分为文章搜索和资源搜索，搜索内容的来源是ElasticSearch, 因为用户上传资源并审核通过后才能上架，所以用户上传资源后，资源信息最先保存再MySQL数据库，当管理员从后台通过审核后，将MySQL数据库中的resource表资源状态status由0改为2（0-审核中 1-审核通过 2-审核通不过），此时将资源信息写入ElasticSearch 搜索引擎。而文章的发表不需要通过审核，所以文章发表后再写入数据库的同时将文章信息写入ElasticSearch。</p><p>我们结合文章的发表和资源的上传流程，结合搜索功能绘画出业务流程图如图3.21与3.22所示，注意，用户搜索到的资源信息和文章新信息都来源于ElasticSearch。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151001479.png">{width&#x3D;”5.045138888888889in” height&#x3D;”2.8756944444444446in”}</p><p>图3.21 文章上传与搜索流程</p><p><img src="http://img-md-js.linjsblog.top/img/202406151001199.png">{width&#x3D;”5.506944444444445in” height&#x3D;”3.602777777777778in”}</p><p>图3.22 资源上传与搜索流程</p><h3 id="3-2-10-文章的个性化推荐"><a href="#3-2-10-文章的个性化推荐" class="headerlink" title="3.2.10 文章的个性化推荐"></a>3.2.10 文章的个性化推荐</h3><p>（1）基于内容的个性化推荐</p><p>基于内容的推荐算法是一种常见的推荐算法，往往使用与简单的推荐系统实现，或与其他推荐算法结合使用。它主要利用物品的属性和用户的历史行为来进行推荐。该算法假设用户会对他们以前感兴趣的物品以及与这些物品相关的物品感兴趣。因此，该算法会根据物品的属性和用户的历史行为来推荐与用户先前感兴趣的物品相似的物品^[4]^。</p><p>基于内容的推荐算法通常具有以下步骤：</p><p>特征提取：对于每个物品，从其属性中提取特征，并将这些特征组合成一个向量。例如，对于电影，可以从电影的类型、导演、演员、年份等方面提取特征。</p><p>用户建模：对于每个用户，使用他们的历史行为来构建用户模型。例如，对于电影推荐，可以使用用户以前观看过的电影来构建用户模型。</p><p>相似度计算：对于每个物品，计算其与用户模型的相似度。例如，可以使用余弦相似度或欧几里得距离等度量方式来计算相似度。</p><p>推荐生成：根据相似度计算，选择最相似的物品来生成推荐列表。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151002225.png">{width&#x3D;”5.6in” height&#x3D;”3.6902777777777778in”}</p><p>图3.23 基于内容的推荐算法</p><p>（2）用户行为数据收集和文章的标签</p><p>用户在发表文章时会设定文章的标签；当用户对文章进行点赞、收藏操作时，会根据用户点赞、收藏的文章所属记录历史行为数据并保存到MySQL数据库，在进行个性化推荐时，系统会分析用户的历史行为数据，使用基于内容的推荐算法为用户生成推荐内容列表。</p><p>（3）余弦相似度计算</p><p>余弦相似度用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异的大小。余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫”余弦相似性”。我们用余弦相似度来计算每个列表标签的相似度。 <img src="http://img-md-js.linjsblog.top/img/202406151041711.png" alt="image-20240615104150683"></p><h2 id="3-2-数据库设计"><a href="#3-2-数据库设计" class="headerlink" title="3.2 数据库设计"></a>3.2 数据库设计</h2><h3 id="3-2-1-设计原则"><a href="#3-2-1-设计原则" class="headerlink" title="3.2.1 设计原则"></a>3.2.1 设计原则</h3><ol><li><p>数据库版本：MySQL 8.0</p></li><li><p>字符集：utf8mb4；utf8mb3是阉割版的UTF-8字符集，只用1-3个字节表示字符，utf8mb4使用1-4个字节表示字符，存储emoji等富文本内容需要用好4个字节，因此选用utf8mb4作为MySQL字符集。^[2]^</p></li><li><p>存储引擎：InnoDB</p></li></ol><p>MySQL支持多种存储引擎，通过”<code>show engines</code>“查看MySQL支持的存储引擎。如图3.24所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151028188.png">{width&#x3D;”5.768055555555556in” height&#x3D;”1.261111111111111in”}</p><p>图3.24 MySQL 支持的存储引擎</p><p>MySQL8.0 默认的存储引擎是InnoDB，InnoDB支持事务、行级锁和外键，外键对性能有一定损耗，因此我们在业务代码中保证数据一致性。</p><ol start="4"><li><p>比较规则：utf8mb4_general_ci 向下兼容5.7版本；</p></li><li><p>数据库表名命名规范：表名采用英文字母+下划线方式进行命名，举例: 表名BUSINESS_CODE_INFO组成， BUSINESS_CODE_INFO表示业务编码信息；</p></li><li><p>数据库字段名称命名规范：采用英文字母+下划线方式进行命名，举例：BUSINESS_CODE标识业务编码；</p></li><li><p>设计表结构时，不使用外键，因为使用外键会增加性能消耗，所以系统数据的一致性由业务代码维护，而不是使用外键保证数据一致性。</p></li></ol><h3 id="3-2-2-概念模型"><a href="#3-2-2-概念模型" class="headerlink" title="3.2.2 概念模型"></a>3.2.2 概念模型</h3><p>校内资源共享与交流平台的数据库ER图如图3.25所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202406151014484.png">{width&#x3D;”5.665972222222222in” height&#x3D;”5.956944444444445in”}</p><p>图3.25 ER图</p><h3 id="3-2-3-数据库表结构设计"><a href="#3-2-3-数据库表结构设计" class="headerlink" title="3.2.3 数据库表结构设计"></a>3.2.3 数据库表结构设计</h3><p>（1）文章article表结构如图表3.1所示。</p><p>表3.1 article表</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>article_id</p><p>bigint</p><p>NULL</p><p>否</p><p>文章id</p><p>article_title</p><p>varchar(255)</p><p>NULL</p><p>否</p><p>文章标题</p><p>type</p><p>int</p><p>0</p><p>是</p><p>文章类型 0-普通用户文章 1-官方文字</p><p>content</p><p>text</p><p>NULL</p><p>是</p><p>文章内容</p><p>order_images</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>文章前三章照片</p><p>comments_num</p><p>bigint</p><p>0</p><p>是</p><p>评论数</p><p>likes_num</p><p>bigint</p><p>0</p><p>是</p><p>点赞数</p><p>views_num</p><p>bigint</p><p>0</p><p>是</p><p>浏览数</p><p>collections_num</p><p>bigint</p><p>0</p><p>是</p><p>收藏数</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>发表时间</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>更新时间</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>status</p><p>int</p><p>0</p><p>是</p><p>状态 0-正常 1-下架</p><p>user_id</p><p>bigint</p><p>NULL</p><p>是</p><p>所属用户id</p><p>（2）文章收藏关系表</p><p>表3.2 article_collection表</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>article_id</p><p>bigint</p><p>NULL</p><p>否</p><p>文章id</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>is_delete</p><p>int</p><p>NULL</p><p>是</p><p>是否删除</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>创建时间</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>修改时间</p><p>（3）文章评论关系表</p><p>表3.3 article_comment表</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>评论id</p><p>content</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>评论内容</p><p>parent_id</p><p>bigint</p><p>NULL</p><p>否</p><p>父级评论</p><p>root_id</p><p>bigint</p><p>NULL</p><p>否</p><p>顶级评论</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>所属用户</p><p>article_id</p><p>bigint</p><p>NULL</p><p>否</p><p>所属文章</p><p>is_delete</p><p>int</p><p>NULL</p><p>是</p><p>是否删除</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>评论时间</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>修改时间</p><p>like_num</p><p>bigint</p><p>NULL</p><p>是</p><p>点赞数量</p><p>（4）文章点赞表</p><p>表3.4 article_likes表</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>article_id</p><p>bigint</p><p>NULL</p><p>否</p><p>文章id</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>创建时间</p><p>is_delete</p><p>int</p><p>NULL</p><p>是</p><p>是否删除</p><hr><p>（5）文章标签表article_tags</p><p>表3.5 article_tags表</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>标签id</p><p>tag_name</p><p>varchar(15)</p><p>NULL</p><p>否</p><p>标签名</p><p>tag_type</p><p>int</p><p>NULL</p><p>否</p><p>标签类型 0-系统标签 1-用户自定义标签</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>创建时间</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>修改时间</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>user_id</p><p>bigint</p><p>NULL</p><p>是</p><p>所属用户id</p><p>（6）等级表level</p><p>表3.6 level表</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>int</p><p>NULL</p><p>否</p><p>user_id</p><p>int</p><p>NULL</p><p>否</p><p>用户id</p><p>level</p><p>int</p><p>1</p><p>是</p><p>用户等级 1-6</p><p>experience</p><p>int</p><p>0</p><p>是</p><p>经验</p><p>（7）专业表major</p><p>表3.7 major表</p><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>int</p><p>NULL</p><p>否</p><p>major_name</p><p>varchar(100)</p><p>NULL</p><p>否</p><p>专业名</p><p>is_delete</p><p>int</p><p>0</p><p>否</p><p>是否删除</p><p>（8）消息表notice</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>title</p><p>varchar(100)</p><p>NULL</p><p>否</p><p>消息标题</p><p>content</p><p>varchar(255)</p><p>NULL</p><p>否</p><p>消息内容</p><p>create_time</p><p>datetime</p><p>NULL</p><p>是</p><p>创建时间</p><p>update_time</p><p>datetime</p><p>NULL</p><p>是</p><p>修改时间</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>（9）资源表resource</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>resource_id</p><p>bigint</p><p>NULL</p><p>否</p><p>资源id</p><p>user_id</p><p>bigint</p><p>NULL</p><p>是</p><p>所属用户</p><p>resource_name</p><p>varchar(255)</p><p>NULL</p><p>否</p><p>资源名称</p><p>resource_description</p><p>varchar(500)</p><p>NULL</p><p>是</p><p>资源描述</p><p>major_id</p><p>int</p><p>NULL</p><p>是</p><p>专业id</p><p>type</p><p>int</p><p>0</p><p>是</p><p>0-免费资源 1-付费资源</p><p>require_point</p><p>int</p><p>0</p><p>是</p><p>所需点数</p><p>status</p><p>int</p><p>0</p><p>是</p><p>0-审核中 1-审核不通过 2-审核通过</p><p>download_url</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>下载地址</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>创建时间</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>更新时间</p><p>collection_num</p><p>bigint</p><p>NULL</p><p>是</p><p>收藏数量</p><p>download_num</p><p>bigint</p><p>NULL</p><p>是</p><p>下载次数</p><p>file_size</p><p>double</p><p>NULL</p><p>是</p><p>文件大小</p><p>file_type</p><p>char(5)</p><p>NULL</p><p>是</p><p>文件类型（后缀）</p><hr><p>（10）资源收藏关系表resource_collection</p><p>表3.10 resource_collection表</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>resource_id</p><p>bigint</p><p>NULL</p><p>否</p><p>资源id</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>is_delete</p><p>int</p><p>0</p><p>否</p><p>是否删除</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>创建时间</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>更新时间</p><p>（11）资源评论表resource_comment</p><blockquote><p>表3.11 resource_comment表</p></blockquote><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>评论id</p><p>content</p><p>varchar(255)</p><p>NULL</p><p>否</p><p>评论内容</p><p>user_id</p><p>bigint</p><p>NULL</p><p>是</p><p>所属用户id</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>评论时间</p><p>update_time</p><p>datetime</p><p>NULL</p><p>是</p><p>修改时间</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>（12）资源标签表resource_tags</p><blockquote><p>表3.12 resource_tags表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>id</p><p>tag_name</p><p>varchar(15)</p><p>NULL</p><p>否</p><p>标签名</p><p>tag_type</p><p>int</p><p>NULL</p><p>是</p><p>0-分类（系统标签） 1-用户自定义标签</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>创建时间</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>修改时间</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>user_id</p><p>int</p><p>NULL</p><p>是</p><p>所属用户id</p><p>（13）文章标签关系表tag_article_rel</p><blockquote><p>表3.13 tag_article_rel表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>article_tag_id</p><p>bigint</p><p>NULL</p><p>否</p><p>文章标签id</p><p>is_delete</p><p>int</p><p>0</p><p>否</p><p>是否删除</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><hr><p>（14）资源标签关系表tag_resource_rel</p><blockquote><p>表3.14 tag_resource_rel表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>resource_tag_id</p><p>bigint</p><p>NULL</p><p>否</p><p>资源标签id</p><p>is_delete</p><p>int</p><p>0</p><p>否</p><p>是否删除</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>（15）院校库表university</p><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>university_name</p><p>varchar(100)</p><p>NULL</p><p>否</p><p>大学名称</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>（16）用户表user</p><blockquote><p>表3.16 user表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>username</p><p>varchar(255)</p><p>NULL</p><p>否</p><p>用户名</p><p>nickname</p><p>varchar(255)</p><p>NULL</p><p>否</p><p>昵称</p><p>password</p><p>varchar(255)</p><p>NULL</p><p>否</p><p>密码</p><p>personal_signature</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>个性签名</p><p>ip_address</p><p>bigint</p><p>NULL</p><p>是</p><p>ip地址</p><p>avatar_url</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>头像地址</p><p>school</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>学校</p><p>phone</p><p>varchar(20)</p><p>NULL</p><p>是</p><p>手机号</p><p>birthday</p><p>datetime</p><p>NULL</p><p>是</p><p>生日</p><p>gender</p><p>int</p><p>2</p><p>是</p><p>‘0’-男 ‘1’女 ‘2’保密 默认为2</p><p>user_role</p><p>int</p><p>0</p><p>是</p><p>用户角色 ‘0’-普通用户 ‘1’-管理员</p><p>read_num</p><p>bigint</p><p>NULL</p><p>是</p><p>阅读数</p><p>likes_num</p><p>bigint</p><p>NULL</p><p>是</p><p>获赞数</p><p>accumulate_points</p><p>bigint</p><p>0</p><p>是</p><p>积分</p><p>status</p><p>int</p><p>0</p><p>是</p><p>账号状态是否封禁 默认为0-正常 1-封禁</p><p>is_delete</p><p>int unsigned</p><p>0</p><p>是</p><p>逻辑删除 默认为0</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>更新时间</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>创建时间</p><p>（17）用户下载资源关系表user_download_resource</p><blockquote><p>表3.17 user_download_resource表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>resource_id</p><p>bigint</p><p>NULL</p><p>否</p><p>资源id</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>下载时间</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>修改时间</p><p>is_delete</p><p>int</p><p>0</p><p>是</p><p>是否删除</p><p>（18）用户标签关系表user_tag_rel</p><blockquote><p>表3.18 user_tag_rel表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>user_tag_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户标签id</p><p>is_delete</p><p>int</p><p>0</p><p>否</p><p>是否删除</p><p>create_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>update_time</p><p>datetime</p><p>CURRENT_TIMESTAMP</p><p>是</p><p>（19）用户标签表user_tags</p><blockquote><p>表3.19 user_tags表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>标签id</p><p>tag_name</p><p>varchar(20)</p><p>NULL</p><p>否</p><p>标签名</p><p>create_time</p><p>datetime</p><p>NULL</p><p>是</p><p>创建时间</p><p>update_time</p><p>datetime</p><p>NULL</p><p>是</p><p>修改时间</p><p>is_delete</p><p>int</p><p>NULL</p><p>是</p><p>是否删除</p><p>（20）第三方平台绑定表oauth</p><blockquote><p>表3.20 oauth表</p></blockquote><hr><p>字段名</p><p>数据类型</p><p>默认值</p><p>是否允许为空</p><p>字段说明</p><p>id</p><p>bigint</p><p>NULL</p><p>否</p><p>主键id</p><p>user_id</p><p>bigint</p><p>NULL</p><p>否</p><p>用户id</p><p>auth_type</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>第三方平台类型- QQ、GitHub等</p><p>open_id</p><p>varchar(255)</p><p>NULL</p><p>是</p><p>第三方平台用户的openId</p><h2 id="3-3-技术选型"><a href="#3-3-技术选型" class="headerlink" title="3.3 技术选型"></a>3.3 技术选型</h2><h3 id="3-3-1-前端技术路线"><a href="#3-3-1-前端技术路线" class="headerlink" title="3.3.1 前端技术路线"></a>3.3.1 前端技术路线</h3><p>（1）Vue 3.0开发框架</p><p>Vue是一款用于构建用户界面的渐进式JavaScript框架，它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。^[5]^</p><p>（2）Ant Design Vue组件库</p><p>使用 Vue 实现的遵循 Ant Design 设计规范的高质量 UI 组件库，用于开发和服务于企业级中后台产品，可以简化前端的开发。</p><p>（3）Vite</p><p>Vite是下一代前端开发和构建工具，使用Vite能够显著提升前端开发体验，随着构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长，基于 JavaScript 开发的工具就会开始遇到性能瓶颈，如Web应用重启缓慢。Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，且越来越多 JavaScript 工具使用编译型语言编写。</p><h3 id="3-3-2-后端技术路线"><a href="#3-3-2-后端技术路线" class="headerlink" title="3.3.2 后端技术路线"></a>3.3.2 后端技术路线</h3><p>（1）主语言：Java</p><p>Java具有面向对象、平台无关性、可靠性、支持多线程、安全性、解释与编译并存等特点，并且Java拥有强大的生态和社区支持。</p><p>（2）Spring Boot</p><p>Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。Spring 支持 IoC（Inversion of Control:控制反转） 和 AOP (Aspect-Oriented Programming:面向切面编程)、可以很方便地对数据库进行访问、可以很方便地集成第三方组件（电子邮件，任务，调度，缓存等等）。</p><p>Spring Boot 旨在简化 Spring 开发，Spring Boot 只是简化了配置，如果你需要构建 MVC 架构的 Web 程序，你还是需要使用 Spring MVC 作为 MVC 框架，只是说 Spring Boot 帮你简化了 Spring MVC 的很多配置，真正做到开箱即用</p><p>（3）MyBatis</p><p>MyBatis框架是一个开源的数据持久层框架。内部封装了通过JDBC访问数据库的操作，支持普通的SQL查询、存储过程和高级映射，几乎消除了所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis作为持久层框架，其主要思想是将程序中的大量SQL语句剥离出来，配置在配置文件当中，实现SQL的灵活配置。</p><p>（3）MyBatis-Plus</p><p>MyBatis-Plus简单的来说就是MyBatis的增强工具，在MyBatis的基础上只做增强不做改变，可以简化开发提高效率。MyBatis-Plus无侵入性、损耗小，内置通用Mapper、通用Service，通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求。支持Lambda形式调用，内置分页插件，因此使用MyBatis-Plus可以大幅提升开发效率。</p><p>（4）MySQL数据库</p><p>MySQL是关系型数据库管理系统，我们将使用MySQL8.0版本，InnoDB和MyISAM作为MySQL的主要存储引擎，InnoDB支持事务和行级锁、支持在数据库异常崩溃后的安全恢复，而MyISAM并不支持，在很多一直场景中，InnoDB的速度都可以让MyISAM望尘莫及，尤其是用到了聚簇索引，或者需要访问的数据都可以放入内存的应用，因此选择InnoDB作为存储引擎；MySQL将实现校内资源共享与交流平台最主要的数据库，Redis缓存和 Elasticsearch 中的数据都来源于MySQL，并会定时持久化到MySQL中。</p><p>（5）Redis</p><p>是开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。Redis单线程、使用多路IO复用模型，由于Redis基于内存，绝大部分请求是纯粹的内存操作，非常快速；Redis可以用来实现评论区和文章的点赞功能，并作为缓存和中间件提高系统性能。</p><p>（6）RabbitMQ</p><p>RabbitMQ是一种消息队列中间件，消息队列可以实现异步通信、流量削峰、解耦等功能,，RabbitMQ基于AMQP协议，具有易用性、扩展性、可靠性和高可用性等特点。在项目开发中，RabbitMQ将于MySQL和Redis结合使用，通过读取Binlog异步删除缓存，保证Redis缓存和MySQL的数据一致性。</p><p>（7）ElasticSearch搜索引擎</p><p>简单地说，ElasticSearch是一个分布式的使用 REST 接口的搜索引擎，是基于Apache Lucene(TM)的开源搜索引擎，无论在开源还是专有领域，Lucene 可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。完全基于Java语言开发，支持集群，面向文档，持久化。校内资源共享于交流平台的资源库搜索和社区搜索功能通过ElasticSearch的分词器和倒排索引实现。^[6]^</p><p>（8）Spring Security安全框架</p><p>Spring Security是一个功能强大、可高度定制的身份验证和访问控制框架。在和Spring 家族的其他成员如 Spring Boot、Spring Cloud等进行整合时，具有其他框架无可比拟的优势，同时对 OAuth2 有着良好的支持。具有身份认证、授权、防护攻击、加密、会话管理等功能。^[7]^</p><p>（9）JSON Web Token</p><p>是目前最流行的跨域认证解决方案，其本质是一个token，就是用过JSON形式作为Web应用中的令牌，用于在各方之间（例如前后端之间、A系统与B系统之间）安全地传输信息。由于此信息是经过数字签名的，因此可以被验证和信任。由头部（header）、载荷（payload）、签名（signature）组成。主要用于鉴权。</p><p>（10）阿里云OSS对象存储服务</p><p>是一款海量、安全、低成本、高可靠的云存储服务。支持Restful API、SDK接口访问OSS，支持多种存储方式。数据以对象（Object）的形式存储在OSS的存储空间（Bucket）中。支持海量的用户并发访问。主要用于实现文件资源的上传下载和管理功能。^[12]^</p><h2 id="3-4-平台架构设计"><a href="#3-4-平台架构设计" class="headerlink" title="3.4 平台架构设计"></a>3.4 平台架构设计</h2><p>前端Vue项目打包后，使用Nginx作为静态HTTP服务器，并将后端请求通过负载均衡反向代理到后端服务器。后端通过编写Dockerfile打包成Docker容器镜像。可以在微信云托管、安装有Docker阿里云服务器上发布，至于Redis、Elastic Search和MySQL等数据库则通过docker安装在阿里云服务器和百度云上。平台的部署架构图如图3.26所示。为了更清新的展示平台不同层次采用的技术，我们根据平台前后端的技术路线，我们将系统的技术架构分为网络通信端、前端服务、后端服务、数据存储服务和部署环境的技术架构,如图3.27所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151024054.png">{width&#x3D;”5.665277777777778in” height&#x3D;”3.7916666666666665in”}</p><p>图3.26 系统部署架构图</p><p><img src="http://img-md-js.linjsblog.top/img/202406151024449.png">{width&#x3D;”5.75625in” height&#x3D;”7.790277777777778in”}</p><p>图3.27 系统技术架构图</p><h1 id="4-系统实现"><a href="#4-系统实现" class="headerlink" title="4 系统实现"></a>4 系统实现</h1><h2 id="4-1-注册"><a href="#4-1-注册" class="headerlink" title="4.1 注册"></a>4.1 注册</h2><p>用户注册填写用户名（用户名用作账号登录），用户名必须唯一，昵称可以重复，密码，确认密码，并校验密码和确认密码相同，获取手机验证码绑定手机号，每次获取验证码间隔60s。点击注册按钮执行注册逻辑，如果手机号已经绑定已有账号，则返回错误信息；注册成功执行登录逻辑跳转至首页（社区）。用户注册成功后，为用户添加200积分。注册页面如图4.1 所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151024098.png">{width&#x3D;”4.906944444444444in” height&#x3D;”5.395138888888889in”}</p><p>图4.1 注册页面图</p><h2 id="4-2-手机号登录"><a href="#4-2-手机号登录" class="headerlink" title="4.2 手机号登录"></a>4.2 手机号登录</h2><p>手机号登录同时具有注册和登录两种功能，需验证真实的手机号，每次获取验证码等待60s，如果该手机号用户没有注册则自动注册并登录跳转主页，系统会自动为用户生成用户名、昵称等默认的个人信息，并为用户赠送200积分。如果用户存在执行登录操作跳转主页（社区）。手机号登录页面如图4.2所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151024201.png">{width&#x3D;”5.233333333333333in” height&#x3D;”3.9166666666666665in”}</p><p>图4.2 手机号登录页面</p><h2 id="4-3-账号密码登录"><a href="#4-3-账号密码登录" class="headerlink" title="4.3 账号密码登录"></a>4.3 账号密码登录</h2><p>与传统的账号密码登录别无二致，账号使用注册时的用户名，如果用户名不存在或密码不正确，则返回错误信息。登录成功跳转至首页（社区）。账号密码登录页面如下图4.3所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151024359.png">{width&#x3D;”5.252777777777778in” height&#x3D;”3.9625in”}</p><p>图4.3 用户名密码登录</p><h2 id="4-4-第三方平台登录"><a href="#4-4-第三方平台登录" class="headerlink" title="4.4 第三方平台登录"></a>4.4 第三方平台登录</h2><h3 id="4-1-1-QQ登录"><a href="#4-1-1-QQ登录" class="headerlink" title="4.1.1 QQ登录"></a>4.1.1 QQ登录</h3><p>用户点击按钮之后弹出QQ登录的窗口，在登录窗口中将显示网站自己的Logo标识，网站名称以及首页链接地址^[9]^。如图4.4所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202406151025023.png">{width&#x3D;”4.836837270341207in” height&#x3D;”2.7008497375328084in”}</p><p>图4.4 QQ登录</p><p>（资料来源：<a href="https://wiki.connect.qq.com/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B">https://wiki.connect.qq.com/网站应用接入流程</a> ）</p><p>如果用户已登录QQ软件，就不用重复输入帐号密码，可以一键实现快速登录并且可以选择授权允许网站访问自己的相关信息，如图4.5所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202406151025870.png">{width&#x3D;”5.17837489063867in” height&#x3D;”2.9520352143482063in”}</p><p>图4.5 QQ登录</p><p>（资料来源：<a href="https://wiki.connect.qq.com/%E7%BD%91%E7%AB%99%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B">https://wiki.connect.qq.com/网站应用接入流程</a> ）</p><h3 id="4-4-2-Github登录"><a href="#4-4-2-Github登录" class="headerlink" title="4.4.2 Github登录"></a>4.4.2 Github登录</h3><p>一个链接让用户跳转到GitHub，Github会让用户登录，登录后GitHub会询问用户，该应用正在请求数据，你是否统一授权。用户统一授权后，GitHub会跳转回应用^[8]^。Github授权页面如图4.6所示。</p><blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406151025655.png">{width&#x3D;”3.832437664041995in” height&#x3D;”3.380952537182852in”}</p></blockquote><p>图4.6 Github授权页面</p><h2 id="4-5-个人中心"><a href="#4-5-个人中心" class="headerlink" title="4.5 个人中心"></a>4.5 个人中心</h2><p>个人中心包含展示当前用户的基本信息，个人中心包含的功能有内容管理-我的投稿、我的收藏，个人信息设置，等级、积分系统，收藏的文章、资源和消息中心，进入个人中心时，默认路由到我的投稿页面。个人中心需要做好相关的权限控制，未登录用户和非当前用户只能展示顶部的信息卡片和历史投稿和上传的资源。只有登录的用户才能看到自己的个人信息卡片下方的功能展示，用户点击左下方的侧导航栏，路由到各个子页面组件如”我的资源”、”我的积分”等页面。个人中心首页如下图4.7所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151025335.png">{width&#x3D;”5.772222222222222in” height&#x3D;”2.4340277777777777in”}</p><p>图4.7 个人中心页面</p><h3 id="4-5-1-投稿管理"><a href="#4-5-1-投稿管理" class="headerlink" title="4.5.1 投稿管理"></a>4.5.1 投稿管理</h3><p>投稿管理展示当前用户发表的文章，点击删除按钮弹出对话框是否删除当前文章。点击编辑按钮跳转文章编辑页。点击文章标题跳转文章详情页。点击”点我立即投稿”按钮跳转文章发表页。个人中心-我的投稿如图4.8所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151025851.png">{width&#x3D;”5.5579593175853015in” height&#x3D;”3.2630938320209975in”}</p><p>图4.8 个人中心-我的投稿页面</p><h3 id="4-5-2-资源管理管理"><a href="#4-5-2-资源管理管理" class="headerlink" title="4.5.2 资源管理管理"></a>4.5.2 资源管理管理</h3><p>“我的资源”展示当前用户发表的文件，用户可以对自己上传的资源进行删除，显示用户上传资源的审核状态。点击”上传资源”按钮跳转上传资源页面。”我的资源”页面如图4.9所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151025241.png">{width&#x3D;”5.772222222222222in” height&#x3D;”6.211111111111111in”}</p><p>图4.9 个人中心-我的资源页面</p><h3 id="4-5-3-上传个人头像"><a href="#4-5-3-上传个人头像" class="headerlink" title="4.5.3 上传个人头像"></a>4.5.3 上传个人头像</h3><p>上传头像：点击上传照片将照片上传至OSS保存并回显至前端，点击保存更新数据库和前端的头像地址。上传和更新个人头像如下图4.10所示</p><p><img src="http://img-md-js.linjsblog.top/img/202406151025124.png">{width&#x3D;”5.772222222222222in” height&#x3D;”2.634027777777778in”}</p><p>图4.10 个人中心-上传头像</p><h3 id="4-5-4-编辑资料"><a href="#4-5-4-编辑资料" class="headerlink" title="4.5.4 编辑资料"></a>4.5.4 编辑资料</h3><p>用户名不可更改，如果用户没有绑定手机，则显示绑定手机链接，如果用户已经绑定手机号则显示手机号，隐藏中间第4-8位数，点击更换手机弹出对话框，输入手机号获取验证码绑定手机号。院校库信息由爬虫批量导入数据库，前端从后台查询所有院校，编辑资料页面和绑定手机号弹框如下图4.11和4.12所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151025640.png">{width&#x3D;”5.573611111111111in” height&#x3D;”3.477777777777778in”}</p><p>图4.11 个人中心-编辑资料页面</p><p><img src="http://img-md-js.linjsblog.top/img/202406151026112.png">{width&#x3D;”5.619047462817148in” height&#x3D;”3.179304461942257in”}</p><p>图4.12 绑定手机号对话框</p><h3 id="4-5-5-等级系统"><a href="#4-5-5-等级系统" class="headerlink" title="4.5.5 等级系统"></a>4.5.5 等级系统</h3><p>用户等级分为Lv1至Lv6,用户初始等级为Lv1，每个等级升级所需的经验都不同。升级到lv6后经验不在增加。可通过如下每日奖励规则获取经验升级：点赞文章增加2经验、收藏文章增加2经验，发表文章增加10经验，上传资源增加10经验,，经验的获取有限制次数，限制次数会在每天0点清零。我的等级页面如下图4.13所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151026930.png">{width&#x3D;”5.772222222222222in” height&#x3D;”3.4590277777777776in”}</p><p>图4.13 等级系统页面</p><h3 id="4-5-6-积分系统"><a href="#4-5-6-积分系统" class="headerlink" title="4.5.6 积分系统"></a>4.5.6 积分系统</h3><p>用户可以完成每日任务来获取积分，例如，新用户注册平台自动赠送200积分、上传一次资源并通过审核赠送10积分等。”我的积分”页面用户展示当前用户的积分余额和获取积分的规则，”我的积分”页面如下图所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151026400.png">{width&#x3D;”5.772222222222222in” height&#x3D;”3.5722222222222224in”}</p><p>图4.14 积分系统页面</p><h3 id="4-5-7-消息中心"><a href="#4-5-7-消息中心" class="headerlink" title="4.5.7 消息中心"></a>4.5.7 消息中心</h3><p>系统通知主要有资源审核通知和文章资源被平台下架通知。按照时间顺序排序。消息中心页面如图4.15所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151026149.png">{width&#x3D;”5.360416666666667in” height&#x3D;”3.15in”}</p><p>图4.15 消息中心</p><h2 id="4-6-首页文章展示"><a href="#4-6-首页文章展示" class="headerlink" title="4.6 首页文章展示"></a>4.6 首页文章展示</h2><p>社区文章展示模块，分为个性化推荐的文章、热门文章、最新文章三个栏目，可以根据导航栏进行切换。首页的文章列表由一个个文章卡片组成。首页的每个文章卡片展示文章的作者昵称、作者等级、发表时间、发表类型：分为官方和非官方两种类型、文章标题，并截取文章主体内容前20个字作为文章概要，每个文章卡片最多显示3章图片作文文章的封面图片，显示文章所携带的标签（包括系统默认标签和自定义标签，最多展示4个），显示文章数据：浏览量、点赞数、评论数。</p><h3 id="4-6-1-热门文章"><a href="#4-6-1-热门文章" class="headerlink" title="4.6.1 热门文章"></a>4.6.1 热门文章</h3><p>根据文章的用户点击量、点赞数、评论数、收藏量四个指标综合评价计算分数作为热度进行排序。文章综合分数越高，排名越高。展示越靠前。热门文章显示的是当月发表的热度排行的前10名。榜单数据会每隔10分钟会同步更新1次。热门文章平台界面如下图4.16所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151026045.png">{width&#x3D;”5.772222222222222in” height&#x3D;”2.560416666666667in”}</p><p>图4.16 热门文章</p><h3 id="4-6-2-最新文章列表的分页懒加载"><a href="#4-6-2-最新文章列表的分页懒加载" class="headerlink" title="4.6.2 最新文章列表的分页懒加载"></a>4.6.2 最新文章列表的分页懒加载</h3><p>最新文章列表主要展示用户最新发表的文章，按照文章按照时间顺序排序。</p><p>系统一般不会一次性显示所有文章列表，否则在数据量非常大的情况下会对数据库和应用系统造成很大的压力。用户通过点击文章列表默认的”点击加载更多内容”向下延伸展示下一分页的文章卡片，如图4.17 所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151026515.png">{width&#x3D;”5.7027777777777775in” height&#x3D;”4.305555555555555in”}</p><p>图4.17 文章懒加载</p><h2 id="4-7-文章发表和文章编辑"><a href="#4-7-文章发表和文章编辑" class="headerlink" title="4.7 文章发表和文章编辑"></a>4.7 文章发表和文章编辑</h2><p>用户点击首页”发表文章”进入文章编辑页，文章标题限30字，文章主体字数统一限制文章最大字数为20000个字符。文章内容前端使用markdown编辑器实现，方便文章内容在各大平台的迁移和复制。用户在文章插入图片时将图片上传至云端存储OSS，如果图片来自其他链接则不必上传。用户可以自定义标签和选择系统默认标签，每个文章最多携带5个标签。封面图片最多上传三张。上传的封面图片会在文章首页的文章卡片列表展示。而文章编辑页与文章发表页一致，文章编辑页会在各项表单显示文章的内容，允许用户修改并提交文章内容、标题、标签和封面图片。文章发表页面如图4.18所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151026711.png">{width&#x3D;”5.528150699912511in” height&#x3D;”6.558781714785652in”}</p><p>图4.18 文章发表页面</p><h2 id="4-8-文章详情页"><a href="#4-8-文章详情页" class="headerlink" title="4.8 文章详情页"></a>4.8 文章详情页</h2><p>在首页点击文章标题进入文章详情页，如果当前文章属于当前登录用户，则显示编辑按钮，如果该文章不属于当前用户则不显示编辑按钮。点击编辑按钮跳转至文章编辑页（文章发表页），前后端需对文章编辑做权限控制，如果不是文章不属于当前用户，则拒绝跳转，后端需对用户更新文章进行权限校验。用户点赞文章功能：用户点击点赞，则点赞按钮高亮，点赞数+1，如果用户已经点赞，再点一次取消高亮，点赞数-1。用户点击收藏，收藏按钮高亮，再点一次取消收藏，逻辑与点赞相似，并将收藏的文章加入用户收藏列表。用户点赞和收藏的文章之后可以在用户中心管理和查看。文章详情页如图4.19、4.20所示</p><p><img src="http://img-md-js.linjsblog.top/img/202406151027512.png">{width&#x3D;”5.501695100612423in” height&#x3D;”3.321813210848644in”}</p><p>图4.19 文章详情页页头</p><p><img src="http://img-md-js.linjsblog.top/img/202406151027245.png">{width&#x3D;”5.768055555555556in” height&#x3D;”1.761111111111111in”}</p><p>图4.20 文章详情页末尾</p><h2 id="4-9-文章评论区"><a href="#4-9-文章评论区" class="headerlink" title="4.9 文章评论区"></a>4.9 文章评论区</h2><p>评论区在每篇文章的下方。</p><p>评论的基础模块^[10]^：</p><p>①发布评论：支持无限盖楼回复；</p><p>②读取评论：按照时间、热度（点赞数量）；</p><p>③删除评论：系统管理员删除；</p><p>④评论互动：点赞。</p><p>评论区如图4.21所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151027077.png">{width&#x3D;”5.545833333333333in” height&#x3D;”4.019444444444445in”}</p><p>图4.21 文章评论区</p><h2 id="4-10-资源库"><a href="#4-10-资源库" class="headerlink" title="4.10 资源库"></a>4.10 资源库</h2><p>资源库主要用来为学生提供查找、下载资源的地方资源库主页如下图所示，最顶部展示轮播图，中间筛选栏用于根据资源的形式、分类、专业、格式筛选查找资源。可以与搜索栏合并搜索，下方的资源列表默认展示最新资源。资源只能展示审核通过的资源。资源库主页如图4.22所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151027995.png">{width&#x3D;”4.466330927384077in” height&#x3D;”5.898252405949257in”}</p><p>图4.22 资源库主页</p><h2 id="4-11-资源上传"><a href="#4-11-资源上传" class="headerlink" title="4.11 资源上传"></a>4.11 资源上传</h2><p>资源上传的文件大小限制在2GB，每次最多上传一个文件。如果要上传多个文件需要打包成压缩包。用户可为资源自定义标签，每个资源用户最多定义三个标签。所需分类、发布形式在数据库中都属于系统初始标签，专业从专业数据库搜索。如果用户发布形式选择积分资源，则需填写所需积分，积分必须为整数，下载资源所需积分的最大限度为500积分。资源上传后需要经过后台审核通过才能上架资源库，才能被其他用户搜索到。资源上传页面如下图4.23所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151028297.png">{width&#x3D;”5.7097123797025375in” height&#x3D;”5.838853893263342in”}</p><p>图4.23 资源上传</p><h2 id="4-12-资源详情页"><a href="#4-12-资源详情页" class="headerlink" title="4.12 资源详情页"></a>4.12 资源详情页</h2><p>资源详情页第一张卡片展示资源的基本信息：资源标题，资源标签，下载所需积分，下载量，收藏量，资源文件大小，上传时间，资源上传者头像和昵称。</p><p>点击立即下载，从对象存储服务下载文件，下载量+1，点击收藏将资源添加到个人的收藏列表（数据库添加关联信息），收藏量+1。第二张卡片，显示资源的简介。资源详情页如图4.24所示。</p><p><img src="http://img-md-js.linjsblog.top/img/202406151028711.png">{width&#x3D;”4.8541393263342085in” height&#x3D;”7.04696741032371in”}</p><p>图4.24 资源详情页</p><p>相比起文章评论区，资源评论区的结构要简单的多，并不需要实现无限盖楼的效果，只是一维的评论列表，并实现分页功能。只包含发表评论的用户头像、昵称、评论内容、发表时间。只有下载资源才能发表评论。发表评论获得5积分，每个资源发表评论只能获得一次积分。</p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>本文介绍了一款基于前后端分离架构的校内资源共享和交流平台的设计和实现。该平台主要由后端和前端两部分组成，后端采用Java语言、Spring Boot框架、MyBatis作为持久层、Spring Security作为安全框架和MySQL数据库开发，同时结合Redis缓存、RabbitMQ消息中间件、ElasticSearch搜索引擎等分布式中间件提高系统可靠性，前端则采用Vue 3.0和Ant Design Vue实现。</p><p>在系统的设计阶段，首先对平台进行了需求分析，确定了功能模块和用例，然后进行了系统的架构设计，包括系统的模块划分、组件之间的关系、接口的设计和实现等。在实现过程中，采用了Spring Boot框架和MyBatis作为持久层，实现了资源上传、下载、浏览和搜索等功能。同时，采用了Redis缓存、RabbitMQ消息中间件、ElasticSearch搜索引擎等分布式中间件提高系统的可靠性和性能。在前端实现方面，采用了Vue 3.0和Ant Design Vue框架，实现了用户注册、登录、资源上传、下载、浏览和搜索等功能。</p><p>在测试阶段，通过对系统进行了功能测试、性能测试和安全测试，证明了系统的功能和性能符合预期，并保证了系统的安全性。</p><p>在项目完成后，我们对该平台的创新点和不足进行了分析。创新点主要体现在采用前后端分离架构、采用Spring Security安全框架和结合Redis缓存、RabbitMQ消息中间件、ElasticSearch搜索引擎等分布式中间件提高系统可靠性。不足主要是在用户体验和部分功能上仍有改进空间，例如页面UI、资源推荐、社交互动等方面。</p><p>总的来说，该平台在校内资源共享和交流方面有着广泛的应用前景和社会价值，同时也对技术能力进行了全面提升。未来，我将进一步完善该平台的功能和性能，提高用户体验，为学生提供更好的服务。</p><blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><p>李鹏飞. 基于Web技术的校园论坛设计与实现[D]. 内蒙古科技大学, 2019.</p></li><li><p>李胜利,钟滢.中外技术问答社区的实证对比研究与启示——以CSDN和Stack Overflow为例[J]. 情报学报, 2020, 39(09): 989-1000.</p></li><li><p>小孩子4919. MySQL是怎样运行的[M]. 北京:人民邮电出版社, 2020:34-36.</p></li><li><p>杨博, 赵鹏飞. 推荐算法综述[J]. 山西大学学报(自然科学版), 2011, 34(03): 337-350.</p></li><li><p>刘亚茹, 张军. Vue.js框架在网站前端开发中的研究[J]. 电脑编程技巧与维护, 2022(01):18-19+39.</p></li><li><p>柳帆. 基于ElasticSearch的科技资源检索系统的研究与实现[J]. 现代计算机, 2021, 27(26): 93-100.</p></li><li><p>刘姚. 基于Spring和OAuth2.0的第三方授权框架[J]. 计算机技术与发展, 2017, 27(03): 167-170.</p></li><li><p>阮一峰. GitHub OAuth 第三方登录示例教程[EB&#x2F;OL]. (2019-04-21)[2023-03-08]. <a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">https://www.ruanyifeng.com/blog/2019/04/github-oauth.html</a></p></li><li><p>QQ互联. 网站应用接入[EB&#x2F;OL]. (2016-08-20)[2023-03-08]. <a href="https://wiki.connect.qq.com/%e7%bd%91%e7%ab%99%e5%ba%94%e7%94%a8%e6%8e%a5%e5%85%a5%e6%b5%81%e7%a8%8b">https://wiki.connect.qq.com/%e7%bd%91%e7%ab%99%e5%ba%94%e7%94%a8%e6%8e%a5%e5%85%a5%e6%b5%81%e7%a8%8b</a></p></li><li><p>黄振. B站评论架构设计[EB&#x2F;OL]. (2022-12-09)[2023-03-08]. <a href="https://www.bilibili.com/read/cv20346888">https://www.bilibili.com/read/cv20346888</a></p></li><li><p>芦文超. B站千亿级点赞系统服务架构设计[EB&#x2F;OL]. (2023-02-03)[2023-03-08]. <a href="https://www.bilibili.com/read/cv21576373">https://www.bilibili.com/read/cv21576373</a></p></li><li><p>阿里云. 阿里云OSS产品文档-最佳实践-服务端签名后直传[EB&#x2F;OL]. (2022-12-26)[2023-03-08]. <a href="https://help.aliyun.com/document_detail/31926.html">https://help.aliyun.com/document_detail&#x2F;31926.html</a></p></li><li><p>Nick Craver. Stack Overflow: The Architecture - 2016 Edition[EB&#x2F;OL]. <a href="https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/">https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/</a></p></li><li><p>D. Hardt, Ed. The OAuth 2.0 Authorization Framework[DB&#x2F;OL]. (2012-10-01)[2023-03-08].<a href="https://www.rfc-editor.org/rfc/rfc6749#section-4.1">https://www.rfc-editor.org/rfc/rfc6749#section-4.1</a></p></li><li><p>Wikipedia. Token bucket[DB&#x2F;OL]. (2023-02-07)[2023-03-08]. <a href="https://en.wikipedia.org/wiki/Token_bucket">https://en.wikipedia.org/wiki/Token_bucket</a></p></li></ol></blockquote><h1 id="致-谢"><a href="#致-谢" class="headerlink" title="致 谢"></a>致 谢</h1><p>在完成本文之际，首先还是要感谢在大学四年坚持自我学习、不懈补拙的自己。虽然在大学期间我完成通过团队或个人完成了不少类似于这次毕业设计的项目，但这次毕业设计是我四年独立完成、工作量最大、涉及技术面最广、最新、最难的一次项目，是我在大学所学计算机知识和相关技术栈的融会贯通，从2022年末开题至2023年3月底完成论文，中间花费了较多的时间和精力，没有长时间的学习和积累是无法完成的。</p><p>其次，要感谢帮助我在大一学习职业目标比较迷茫的时候为我指引方向的学长学姐，校园网络中心是我在大学唯一没有后悔加入校级组织，这里的学长学姐非常友好，遇到什么问题都会互帮互助，平时的活动也很少，是一个学习性组织，也是因为这些机遇，在前辈的指引下让我认识并参加大学计算机竞赛例如蓝桥杯等，让我明确之后的学习和职业方向，在大学期间不断紧随潮流学习新技术、夯实基础，为我在后来的开发以及大四找工作、考研提供很大的帮助。我的大学生涯相对来说单调一些，当然也有疫情的影响，在其他人看来，我比较特立独行，喜欢独处，喜欢独立思考、独立解决问题，更多的时间是在学习技术上，为找工作准备，也参加过研究生考试初试，不过很遗憾没有进入复试，庆幸的是秋招签了一家公司，打算先干着。总之，还是很感谢一路过来帮助我的同学和老师们。</p><p>最后要感谢的是我的论文指导老师张顺超老师，非常感谢老师花费时间和精力愿意指导和修改我的论文，不然我的论文可能会显得很不规范和粗糙。值此提交论文之时，向一路走来帮助我的人致以由衷的感谢。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> redis </tag>
            
            <tag> 毕业论文 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> MySQL </tag>
            
            <tag> 毕业设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【硬盘购买科普】 SATA M.2 NGFF NVME等是什么意思，解读硬盘的总线、协议和接口</title>
      <link href="/2024/06/15/%E3%80%90%E7%A1%AC%E7%9B%98%E8%B4%AD%E4%B9%B0%E7%A7%91%E6%99%AE%E3%80%91-sata-m-2-ngff-nvme%E7%AD%89%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%8C%E8%A7%A3%E8%AF%BB%E7%A1%AC%E7%9B%98%E7%9A%84/"/>
      <url>/2024/06/15/%E3%80%90%E7%A1%AC%E7%9B%98%E8%B4%AD%E4%B9%B0%E7%A7%91%E6%99%AE%E3%80%91-sata-m-2-ngff-nvme%E7%AD%89%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%EF%BC%8C%E8%A7%A3%E8%AF%BB%E7%A1%AC%E7%9B%98%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h2 id="【硬盘购买科普】-SATA-M-2-NGFF-NVME等是什么意思，解读硬盘的总线、协议和接口"><a href="#【硬盘购买科普】-SATA-M-2-NGFF-NVME等是什么意思，解读硬盘的总线、协议和接口" class="headerlink" title="【硬盘购买科普】 SATA M.2 NGFF NVME等是什么意思，解读硬盘的总线、协议和接口"></a>【硬盘购买科普】 SATA M.2 NGFF NVME等是什么意思，解读硬盘的总线、协议和接口</h2><h3 id="前景提要"><a href="#前景提要" class="headerlink" title="前景提要"></a>前景提要</h3><p>当硬件小白在各大平台购买硬盘时，总会碰到各种各样的名词：M.2、SATA、NGFF、NVME、PCIe、AHCI等等不熟悉的名词，这些和固态硬盘有关的英文到底时什么意思，如果你在网络上搜索有关硬盘的科普，你能找到SATA硬盘最快500MB&#x2F;s,m2又分为SATA和MVNe两种NVMe可以跑到4GB&#x2F;s,大多时类似不太详尽系统的描述，网络上都讲过的东西在cv一遍旧没有什么意思了。所以这篇文章将从计组的角度，探究关于硬盘—<strong>协议(protocol)<strong>、</strong>总线（Bus）</strong>、**接口(Interface)**三者之间的关系，让大家对硬盘的接口和协议的了解会更加深刻。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101055881.jpg" alt="dd6ec6fea0c2924e679e3fd4f0dfa68"></p><hr><h3 id="一、总线和协议"><a href="#一、总线和协议" class="headerlink" title="一、总线和协议"></a>一、总线和协议</h3><p>在这之前我们先介绍几个相关概念。</p><ol><li><p><strong>总线（Bus）</strong>：总线是一组能为多个部件分时共享的公共信息传输线路。分时和共享时总线的两个特点。</p><blockquote><p>袁春风. 计算机组成与系统结构[M]. 北京：清华大学出版社，2015</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202406101136230.png" alt="image-20240610113602877"></p><p>计算机内部有很多的电子元器件，那如果A元器件想给B元器件传输数据那他就需要建立通路</p><p><img src="http://img-md-js.linjsblog.top/img/202406101300867.png" alt="image-20240610130038511"></p><p>比如说CPU想和显卡交互数据，那CPU就需要拉一条通往显卡的电路，CPU要想和硬盘交互数据，那CPU就需要拉一条通往硬盘的电路，在电脑里像这种不同设备之间交互数据的通路就被我们称之为<strong>总线</strong>，无论是什么线路他都是基于目前的物理准则之上的，总线也是有一定的承载能力的，你不可能做到所有的数据秒传，总线在单位时间内也只能传输一定量的数据，就被我们称之为总线的<strong>带宽</strong>。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101303578.png" alt="image-20240610130331171"></p><hr></li><li><p><strong>协议（protocol）</strong>：是<strong>对数据格式和计算机之间交换数据时必须遵守的规则的正式描述</strong>。</p><blockquote><p>参见维基百科中的 <a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE">通信协议</a></p></blockquote><p>谈到固态硬盘的接口以及相容性就一定避不开协议这两个字，协议简单来讲就是电脑内部的一种规矩，其规定了两个设备通讯时如何识别对方、建立链接、使用的讯号类型、数据的编码解码方式、数据传输类型、数据传输方式、以及物理层面上的电压电流保持和截止时间等等规定、两个设备只有协议完全一样或者相容、他们之间才能够进行通讯。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101318115.png" alt="image-20240610131805806"></p><p>嗯。。。看起来挺枯燥令人费解的。。。为了能让大家更直观的理解协议这个概念，举一个例子：</p><p><img src="http://img-md-js.linjsblog.top/img/202406101321246.png" alt="image-20240610132124611"></p><p>假设A B元器件之间有一根电路，可以通电和断电，如果我不做任何的规定和约束，那这个总线除了能通电和断电之外，就无法实现任何的功能，而如果我规定<strong>一秒为10个周期</strong> <strong>通电为1 断电为0</strong>，那A只需要通过大量的通电和断电，就可以把想发送的信息以1秒10Bit的速度传输给B，而这个一秒为10个周期，通电代表1断电代表0这个规定，就是AB之间通讯的<strong>协议</strong>。</p><p>当然电脑那真正运作的协议远远比这个复杂的多，我只是这么举例方便小白们去理解。如果对计算机协议感兴趣的同学，可以研读这本书。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101326084.avif" alt="img"></p><p>那这里大家可以发现，如果A不按照这个协议去发送数据，或者B不按照这个协议去接受数据，那AB之间就无法达成有效的沟通，因此两个电子元器件如果要达成有效的数据传输，他们之间的协议必须要是相同或者相容。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101327094.png" alt="image-20240610132736544"><img src="http://img-md-js.linjsblog.top/img/202406101328725.png" alt="image-20240610132809317"></p><p>而除此之外一个更高效率的沟通协议可以非常显著的提高两者的沟通效率，但是反过来，高效率的协议同样需要硬件作为后背的支撑才能得以实现，<strong>所以简单理解就是，协议就是一种双方提前约定好采用某种形式，以某种规格利用某种物体把数据传输出去，而另一方再以同样的规则和流程，去接收数据的约定制度或者规章</strong>。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101331991.png" alt="image-20240610133110135"></p></li></ol><p>当你了解清楚总线和协议之后，接下来的内容就很好理解了，硬盘要想和电脑其他的元器件交互数据，那就一定需要数据协议作为沟通传输总线作为媒介，除此之外还需要<strong>物理接口</strong>，让硬盘能够接入。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101333352.png" alt="image-20240610133323192"></p><hr><h3 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h3><p>目前硬盘的数据协议有四种，大众民用的I<strong>DE AHCI和NVMe</strong>，IDE是早期硬盘使用的协议，目前已经被淘汰了，所以接下来就不讲他了，不大众的就是<strong>服务器</strong>用的比较多的<strong>SCSI协议</strong>了；</p><p>除开协议，你还是要总线做沟通来作为数据传输的载体，目前电脑内传输数据的总线也是三种：<strong>SATA总线和PCIe总线</strong>，同样不大众的是服务器上的<strong>SAS总线</strong>；<img src="http://img-md-js.linjsblog.top/img/202406101336198.png" alt="image-20240610133627160"></p><p>​ 当你有了协议和总线之后，你还是要物理层面的<strong>接口，</strong>把硬盘接入你的电脑，目前你能接触到的民用硬盘接口，主要就是五种：<strong>SATA MSATA SATA Express PCIe M.2</strong>，M.2又分为<strong>B-Key和M-Key</strong>两种，当然，除开民用企业级硬盘长用接口就是<strong>U.2和SAS</strong>了</p><p>这里面协议 总线 接口都能限制一块硬盘的性能发挥，你有一个超级强大的协议，但是总线或者接口无法承载起来，你也跑不动；你有一个超级强大的总线和接口，但是没有足够好的协议，数据也无法完成高速的传输；所以他们之间是相辅相成的，但是通常来讲，厂商都会保证这三者是处于一个匹配的状态，比如说一块性能很强大的固态；厂商一定会设计出性能足够强大的协议与总线，还有与之匹配的接口才会推出这款产品。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101345088.png" alt="image-20240610134504911"></p><p>所以大部分时候我们往往不需要考虑协议层面与接口层面，只是要看传输总线的承载能力即可，换而言之大部分硬盘的性能发挥其实是受制于传输总线，因此判断出一个硬盘的传输总线的承载能力，就能基本判断出一个硬盘的速率上限，这里我要强调一下，这里判断出来的是接口的速度上限，实际这个硬盘能跑多快，还是要看硬盘本身的设计与用料。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101347615.png" alt="image-20240610134755674"></p><hr><h4 id="常见总线：SATA总线、PCIE总线、SAS总线"><a href="#常见总线：SATA总线、PCIE总线、SAS总线" class="headerlink" title="常见总线：SATA总线、PCIE总线、SAS总线"></a>常见总线：SATA总线、PCIE总线、SAS总线</h4><p><img src="http://img-md-js.linjsblog.top/img/202406101350630.png" alt="image-20240610135038418"></p><p><strong>SATA总线</strong>的版本目前普及的比较广的是：<strong>SATA 3.0</strong> 理论带宽6Gbps，8:10编码，换算windows内显示的传输速度就是600MB&#x2F;S</p><p><img src="http://img-md-js.linjsblog.top/img/202406101351717.png" alt="image-20240610135146871"></p><p><strong>PCIe总线</strong>的版本目前普及的比较广是PCIe3.0和4.0，具体的带宽如图，PCIe的带宽和长度有关系，也就是上面那个乘几：×4的速率就是×1的四倍，×16的速度就是×4的四倍</p><p><img src="http://img-md-js.linjsblog.top/img/202406101356227.png" alt="image-20240610135641976"></p><p>服务器上用的<strong>SAS总线</strong>目前普及的比较广的是<strong>SAS 3.0</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406101359283.png" alt="image-20240610135916271"></p><p>接下来我们来一个个介绍接口：</p><hr><h4 id="常见接口"><a href="#常见接口" class="headerlink" title="常见接口"></a>常见接口</h4><p><img src="http://img-md-js.linjsblog.top/img/202406101401100.png" alt="image-20240610133627160"></p><p><strong>1.SATA</strong></p><p>最常见的接口就是SATA了,SATA接口使用的是SATA传输总线，协议是AHCI，目前几乎所有的民用<strong>3.5寸和2.5寸机械硬盘</strong>、<strong>2.5寸固态硬盘</strong>使用的都是这个接口。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101405513.png" alt="image-20240610140531259"></p><p><strong>SATA接口</strong>分为两部分：一个是<strong>长一点的供电</strong>，另一个<strong>短一点的则是数据</strong>，供电接驳在电脑电源上，数据则是用<strong>SATA数据线</strong>接驳到主板上。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101407874.png" alt="image-20240610140732227"></p><p>由于SATA3总线速率上限就是600MB&#x2F;S，再加上各种损耗和干扰，实际上这个接口的速度最多就只能跑到五百多兆每秒，所以凡是使用SATA3总线作为传输载体的硬盘，无论是固态硬盘还是机械硬盘，其速率都不可能突破五百多兆每秒。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101409480.png" alt="image-20240610140953281"></p><p><strong>2.mSATA</strong></p><p>下一个接口是mSATA: 同样是SATA总线 AHCI协议;这个接口在一些已经淘汰的老旧笔记本上非常常见, 其诞生的目的就是给接口的固态缩小体积。机械硬盘2.5寸基本上是填满的，而sata固态，如果你拆开，你会发现真正的硬盘基本上只有很小的一块儿。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101411577.png" alt="image-20240610141136457"></p><p>机械硬盘2.5寸基本上是填满的，而sata固态，如果你拆开，你会发现真正的硬盘基本上只有很小的一块儿。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101415878.png" alt="image-20240610141511114"></p><p>外壳的作用只是让它是一个2.5寸的规格而已，所以在固态硬盘刚刚普及的那会儿m.2接口还没有大面积的推广开来。为了节约空间，不少笔记本上就搭载了这个接口，可惜这个接口也没有绕开总线，速度500M每秒的限制。由于速率没有提升，也没有前瞻性的提供高带宽，只是单纯的减少体积，因此这个接口在m.2接口普及开来以后就消失掉了。</p><p><strong>3.SATA Experss接口</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406101417087.png" alt="image-20240610141740016"></p><p>下一个接口是SATA Experss，使用的PCIe_2总线，既可以走AHCI协议 也可以走NVMe协议，它的结构很有特色，为了向下兼容，你可以把它当成两个普通SATA用，也可以用一整个宽的接口然后走PCIe_1或者PCIe*2</p><p>虽然这个接口相对于SATA 3来讲速度翻倍，但是由于提升的速率有限，同样是对未来的产品不够具有前瞻性啊。而且接口体积过于庞大，所以这个接口基本上没出现，一两年就被淘汰掉了。由于SATA express消失的太快。市面上并没有对应的产品，这里就不多介绍了</p><p><img src="http://img-md-js.linjsblog.top/img/202406101421471.png" alt="image-20240610142115016"><img src="http://img-md-js.linjsblog.top/img/202406101421319.png" alt="image-20240610142138861"></p><p><strong>4. m.2接口</strong></p><p>接下来就是目前大家接触比较多的<strong>M.2</strong>接口了。<strong>NGFF</strong>则是m.2接口的行业规范的别名。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101423934.png" alt="image-20240610142259597"></p><p>今天在逛淘宝找移动硬盘盒的时候，🤣大家能发现商家的图片什么问题吗</p><p><img src="http://img-md-js.linjsblog.top/img/202406101428015.jpg" alt="036fa6f1d2c382cc8bb6c517557d92c"></p><p>好我们继续：</p><p>m2接口既可以走SATA总线AHCI协议，那此时它和普通的SATA硬盘没有区别，速率同样会被限制在550MB&#x2F;S左右，就是体积小一点。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101432000.png" alt="image-20240610143211901"></p><p>m2接口也可以走PCIE总线AHCI协议，比如说数量比较稀少的三星SM951 AHCI版本。速率上限由PCIe版本和长度决定.</p><p><img src="http://img-md-js.linjsblog.top/img/202406101434258.png" alt="image-20240610143431321"></p><p>除此之外,<strong>M.2</strong>还可以走<strong>PCIe总线NVMe协议</strong>,速率上限同样由PCIe版本和长度决定,这个也是目前<strong>用途最广泛的组合</strong>,大部分固态硬盘都是*_PCIe3.0_4*_，那也就是4GB&#x2F;S以内了，目前PCIe4.0_4的固态开始逐渐普及。那速度上限就是8GB&#x2F;S以内了</p><p>M.2接口又分为B-key和M-Key两种，B-key的豁口在左边 M-key则是在右边，扩展：有些固态为了兼容两个接口同时有b-key和m-key，例如SN500，现在不多见了。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101444529.png" alt="image-20240610144429360"></p><p>B-key被称为Socket2，支持SATA总线和PCIe_2，M-key则是被称为Socke3，支持SATA总线和PCIe_4。这里我要提醒一下大家，不能通过外形去判断M.2支持什么总线和协议，有的主板的B-key可能只能走SATA不能走PCIe总线，而有的M-key可能只能走PCIe 不能走SATA。具体你这个接口能走什么总线还是要看你主板官网的描述和主板的接口说明书。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101447579.png" alt="image-20240610144711183"></p><p><strong>5.PCIE接口</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406101448719.png" alt="image-20240610144827065"></p><p>接下来是PCIE接口，PCIE接口应该是除了m2和SATA接口之外，大家最熟悉的接口了。<strong>PCIE既可以作为总线承担传输通道的存在。也可以直接以接口的形式存在</strong>，</p><p>如果在<strong>PCIe插槽</strong>安装固态硬盘，使用的就是<strong>PCIe总线 NVMe协议</strong>，早期的企业级固态也有使用PCIe插槽，PCIe通道 SCSI协议的比如Intel的1910</p><p><img src="http://img-md-js.linjsblog.top/img/202406101452735.png" alt="image-20240610145225103"></p><p>本质上是多个SCSI协议的SAS硬盘，通过LSISAS控制器组建阵列然后接入PCIe总线的</p><p>通常主板上横着的那些长槽和短槽就是PCIe插槽，大部分人应该都是知道显卡是插在这里的，PCIe接口除了插显卡之外，还可以插无线网卡，有线网卡，声卡 采集卡 转接卡之类的，当然也可以直接插走<strong>PCIe通道</strong>，<strong>NVME协议</strong>的固态硬盘。</p><p>目前直接以PCIE为接口的固态硬盘常见于超高性能等级以及企业级固态硬盘上，民用级固态硬盘大多还是以m2接口为主。</p><p><strong>6.SAS接口</strong></p><p>接下来是SAS接口，SAS接口使用的是SAS总线，SCSI协议，这种接口通常来讲是服务器上用的非常多，你可以把他理解为一种强化版SATA接口。<img src="http://img-md-js.linjsblog.top/img/202406101457533.png" alt="image-20240610145733195"></p><p>在SATA上增加了更多的功能，并且支持更高速率的SAS总线，SAS总线还有一个特点他就是一分多以满足服务器硬盘柜多硬盘要求，由于是直接在SATA接口上改款而来的所以SAS接口可以向下兼容SATA硬盘，走<strong>AHCI</strong>协议；但是要注意这里是<strong>SAS接口兼容SATA硬盘</strong>，而<strong>SAS硬盘</strong>由于本身是SAS总线SCSI协议，所以他<strong>只能接在支持SAS总线的口</strong>上用。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101459621.png" alt="image-20240610145903000"></p><p><strong>7.U.2接口</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406101505258.png" alt="image-20240610150536200"></p><p>最后一个就是u2接口了，u2接口的是在接口上继续改款而来。除了兼容下面的SATA，还可以兼容sas，还额外提供了PCIE×4的总线支持，这个接口也是在服务器和高端HEDT平台上使用的比较多。很多的企业级固态使用的都是这种接口。和sas一样，除了硬盘架这种一体成型的母口外，还可以使用线缆接驳，U.2在主板上的接口非常类似，两个USB接口摞起来的形状。还是比较有辨识度的</p><p><img src="http://img-md-js.linjsblog.top/img/202406101509256.png" alt="image-20240610150911310"></p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>所有的硬盘和接口到这里，就算介绍完毕了，这时候你再回去看这个很乱的结构图，基本上大概就明白是啥意思了。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101510130.png" alt="image-20240610151023359"></p><p>这里面有一个比较有意思的点就是，PCIe总线的硬盘，他们之间的接口大部分都是可以互相转换的， 比如PCIe可以转成U.2 PCIe可以转成M.2 M.2可以反过来转成PCIe M.2还可以转成U.2 U.2反过来可以转成M.2</p><p><img src="http://img-md-js.linjsblog.top/img/202406101512704.png" alt="image-20240610151233453"></p><p><strong>所以你可以发现接口其实并不是完全限制速率发挥的因素，真正要判断一个硬盘所使用的接口，其速率上限以及你主板上的接口会不会限制你硬盘性能发挥？你最好是去参考一下他们所使用的总线比较好</strong>单纯的通过协议去判断，其实并不准确</p><hr><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>接下来我选几个例子配合接口总线协议图讲解一下。注意以下分析的速率都只是硬盘的接口理论，速率上限不是实际的硬盘运行速度，实际这个硬盘能跑多快还是要看硬盘本身的设计和用料了。</p><p><img src="http://img-md-js.linjsblog.top/img/202406101535107.png" alt="image-20240610153543978"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101605053.png" alt="image-20240610160505989"></p><p>如上图：传统的SATA3机械西数蓝盘1T，SATA接口 SATA3.0总线 AHCI协议，速率上限600MB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101538942.png" alt="image-20240610153808776"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101605053.png" alt="image-20240610160505989"></p><p>传统的SATA3固态铠侠 TC10 SATA接口 SATA3.0总线 AHCI协议 速率上限600MB&#x2F;S</p><hr><p><img src="C:\Users\ljs\Pictures\study\202406101540281.png" alt="image-20240610154020313"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101607449.png" alt="image-20240610160720507"></p><p>三星860EVO M.2版本，M.2 B&amp;M-key接口 SATA3.0总线 AHCI协议，速率上限600MB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101541135.png" alt="image-20240610154153894"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101608146.png" alt="image-20240610160846965"></p><p>三星SM951 ACHI版本，M.2 M-Key接口，PCIe3.0*4总线 AHCI协议，速率上限4GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101543381.png" alt="image-20240610154307235"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101610238.png" alt="image-20240610161039167"></p><p>三星XP941 M.2 M-Key接口 PCIe2.0*4总线 NVMe协议 速率上限2GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101544943.png" alt="image-20240610154422021"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101611687.png" alt="image-20240610161142753"></p><p>西部数据SN500 M.2 B&amp;M-Key接口 PCIe3.0*2总线 NVMe协议 速率上限2GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101545757.png" alt="image-20240610154528548"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101610238.png" alt="image-20240610161039167"></p><p>西部数据SN750 M.2 M-Key接口 PCIe3.0*4总线 NVMe协议 速率上限4GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101546721.png" alt="image-20240610154652542"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101614026.png" alt="image-20240610161039167"></p><p>三星980PRO M.2 M-Key接口 PCIe4.0*4总线 NVMe协议 速率上限8GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101549180.png" alt="image-20240610154924648"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101616137.png" alt="image-20240610161654797"></p><p>三星983ZET PCIe接口 PCIe3.0*4总线 NVMe协议 速率上限4GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101550413.png" alt="image-20240610155028069"></p><p>Intel910 PCIe接口 PCIe2.0*8总线 SCSI协议 速率上限4GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101551245.png" alt="image-20240610155128768"></p><p>希捷银河4T SAS接口 SAS3.0总线 SCSI协议 速率上限1.2GB&#x2F;S</p><hr><p><img src="http://img-md-js.linjsblog.top/img/202406101554609.png" alt="image-20240610155403431"></p><p><img src="http://img-md-js.linjsblog.top/img/202406101619373.png" alt="image-20240610161924999"></p><p>Intel P4510 U.2接口 PCIe3.0*4总线 NVMe协议 速率上限4GB&#x2F;S</p><hr><p>以上的硬盘例子，再加上之前那张协议总线接口的结构图稍微加以研究，基本上就能搞清楚一个硬盘以及它的接口。最快能跑到多快了，希望大家在看完这篇文章后，能够对硬盘的协议总线以及接口有一个大概的认知，将来选择硬盘的时候不会再被接口和协议迷惑。OK，关于固态硬盘的总线协议接口，我们就算全部介绍完毕了。</p><p>参考文献：</p><blockquote><p>【1】素材来源：B站硬件茶谈：详解硬盘的总线协议与接口 <a href="https://www.bilibili.com/video/BV1Qv411t7ZL">https://www.bilibili.com/video/BV1Qv411t7ZL</a></p><p>【2】袁春风. 计算机组成与系统结构[M]. 北京：清华大学出版社，2015</p><p>【3】英睿达：固态硬盘协议 <a href="https://www.crucial.cn/articles/about-ssd/what-is-the-interface-specification-for-ssd">https://www.crucial.cn/articles/about-ssd/what-is-the-interface-specification-for-ssd</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> M.2 </tag>
            
            <tag> Nvme </tag>
            
            <tag> PCIE </tag>
            
            <tag> SATA </tag>
            
            <tag> SSD </tag>
            
            <tag> 硬盘 </tag>
            
            <tag> 科普 </tag>
            
            <tag> 装机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Open-SSH局域网内两台windows电脑互传文件</title>
      <link href="/2024/06/10/%E9%80%9A%E8%BF%87open-ssh%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E4%B8%A4%E5%8F%B0windows%E7%94%B5%E8%84%91%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2024/06/10/%E9%80%9A%E8%BF%87open-ssh%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E4%B8%A4%E5%8F%B0windows%E7%94%B5%E8%84%91%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="通过Open-SSH局域网内两台windows电脑互传文件"><a href="#通过Open-SSH局域网内两台windows电脑互传文件" class="headerlink" title="通过Open-SSH局域网内两台windows电脑互传文件"></a>通过Open-SSH局域网内两台windows电脑互传文件</h1><p>最近想把家里自己在大学用的老笔记本电脑改装成服务器，作为我的个人博客网站，中间涉及到需要给我的服务器传文件。我打算像以前用云服务器一样使用SFTP给服务器电脑传文件。</p><p>所以需要给作为服务器的电脑安装SSH服务，由于我的老笔记本系统是win10，默认只有OpenSSH客户端没有服务端，所以需要安装OpenSSH服务端软件。</p><h2 id="安装适用于-Windows-的-OpenSSH"><a href="#安装适用于-Windows-的-OpenSSH" class="headerlink" title="安装适用于 Windows 的 OpenSSH"></a>安装适用于 Windows 的 OpenSSH</h2><ol><li><p>打开“设置”，选择“系统”，然后选择“可选功能”。<img src="http://img-md-js.linjsblog.top/img/202406141629600.png" alt="image-20240614162939049"></p></li><li><p>扫描列表，查看是否已安装 OpenSSH。 如果未安装，请在页面顶部选择“添加功能”，然后：</p><ul><li><p>找到<strong>“OpenSSH 客户端”</strong>，然后选择<strong>“安装”</strong></p></li><li><p>找到<strong>“OpenSSH Server”</strong>，然后选择<strong>“安装”</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202406141630616.png" alt="image-20240614163013023"></p></li></ul></li><li><p>打开<strong>“服务”</strong>桌面应用。 （选择<strong>“开始”</strong>，在搜索框中键入 <em>services.msc</em> ，然后选择<strong>“服务”</strong>应用或按 ENTER。）</p></li><li><p>在详细信息窗格中，双击<strong>“OpenSSH SSH 服务器”</strong>。</p></li><li><p>在“常规”选项卡上的“启动类型”下拉菜单中，选择“自动”，然后选择“确定”。</p></li><li><p>若要启动服务，请选择<strong>“启动”</strong>。</p></li></ol><h2 id="连接到-OpenSSH-服务器"><a href="#连接到-OpenSSH-服务器" class="headerlink" title="连接到 OpenSSH 服务器"></a>连接到 OpenSSH 服务器</h2><p>安装后，可以从安装了 OpenSSH 客户端的 Windows 或 Windows Server 设备连接到 OpenSSH 服务器。 在 PowerShell 提示符下，运行以下命令。</p><pre class="line-numbers language-none"><code class="language-none">ssh domain\username@servername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>domain 这是你的用户名所属的域。在 Windows 环境中，许多公司和组织使用域来管理用户账户。没有的话可以不填</p><p>username就是你的windows用户名</p><p>servername 可以是你的服务器IP地址</p><p>连接后，会收到类似如以下输出的消息。</p><pre class="line-numbers language-none"><code class="language-none">The authenticity of host &#39;servername (10.00.00.001)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:(&lt;a large string&gt;).Are you sure you want to continue connecting (yes&#x2F;no)?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入yes.此时，系统会提示输入密码。连接后，你将看到 Windows 命令行界面提示符：</p><pre class="line-numbers language-none"><code class="language-none">domain\username@SERVERNAME C:\Users\username&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SFTP连接电脑"><a href="#SFTP连接电脑" class="headerlink" title="SFTP连接电脑"></a>SFTP连接电脑</h2><p>在<strong>客户端</strong>打开SFTP。</p><p><img src="http://img-md-js.linjsblog.top/img/202406141635824.png" alt="image-20240614163526562"></p><p>连接成功！</p><p><img src="http://img-md-js.linjsblog.top/img/202406141637716.png" alt="image-20240614163729788"></p><p>参考文献</p><blockquote><p>微软文档：<a href="https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui">Get started with OpenSSH for Windows</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 装机 </tag>
            
            <tag> OpenSSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（十二）垃圾回收器</title>
      <link href="/2023/05/18/%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/"/>
      <url>/2023/05/18/%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="（十二）垃圾回收器"><a href="#（十二）垃圾回收器" class="headerlink" title="（十二）垃圾回收器"></a>（十二）垃圾回收器</h1><h2 id="1-GC-分类与性能指标"><a href="#1-GC-分类与性能指标" class="headerlink" title="1. GC 分类与性能指标"></a>1. GC 分类与性能指标</h2><h3 id="1-1-垃圾回收器概述"><a href="#1-1-垃圾回收器概述" class="headerlink" title="1.1. 垃圾回收器概述"></a>1.1. 垃圾回收器概述</h3><p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的 JVM 来实现。</p><p>由于 JDK 的版本处于高速迭代过程中，因此 Java 发展至今已经衍生了众多的 GC 版本。</p><p>从不同角度分析垃圾收集器，可以将 GC 分为不同的类型。</p><h3 id="1-2-垃圾收集器分类"><a href="#1-2-垃圾收集器分类" class="headerlink" title="1.2. 垃圾收集器分类"></a>1.2. 垃圾收集器分类</h3><p>按线程数分，可以分为串行垃圾回收器和并行垃圾回收器。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171038325.png" alt="image-20210512144253383"></p><p>串行回收指的是在同一时间段内只允许有一个 CPU 用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。</p><ul><li>在诸如单 CPU 处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，串行回收默认被应用在客户端的 Client 模式下的 JVM 中</li><li>在并发能力比较强的 CPU 上，并行回收器产生的停顿时间要短于串行回收器。</li></ul><p>和串行回收相反，并行收集可以运用多个 CPU 同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“Stop-the-World”机制。</p><p>按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。</p><ul><li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li><li>独占式垃圾回收器（Stop the world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305171039508.png" alt="image-20200713083443486"></p><p>按碎片处理方式分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。</p><p>- 压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</p><p>- 非压缩式的垃圾回收器不进行这步操作。</p><p>按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。</p><h3 id="1-3-评估-GC-的性能指标"><a href="#1-3-评估-GC-的性能指标" class="headerlink" title="1.3. 评估 GC 的性能指标"></a>1.3. 评估 GC 的性能指标</h3><ul><li>吞吐量：运行用户代码的时间占总运行时间的比例（总运行时间 &#x3D; 程序的运行时间 + 内存回收的时间）</li><li>垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。</li><li>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。</li><li>收集频率：相对于应用程序的执行，收集操作发生的频率。</li><li>内存占用：Java 堆区所占的内存大小。</li><li>快速：一个对象从诞生到被回收所经历的时间。</li></ul><p>吞吐量、暂停时间、内存占用 这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。</p><p>这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。</p><p>简单来说，主要抓住两点：吞吐量、暂停时间</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>吞吐量就是 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值，即吞吐量 &#x3D; 运行用户代码时间 &#x2F;（运行用户代码时间+垃圾收集时间）。比如：虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是 99%。</p><p>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的</p><p>吞吐量优先，意味着在单位时间内，STW 的时间最短：0.2 + 0.2 &#x3D; 0.4</p><p><img src="http://img-md-js.linjsblog.top/img/202305171040107.png" alt="image-20200713084726176"></p><h4 id="暂停时间"><a href="#暂停时间" class="headerlink" title="暂停时间"></a>暂停时间</h4><p>“暂停时间”是指一个时间段内应用程序线程暂停，让 GC 线程执行的状态。</p><p>例如，GC 期间 100 毫秒的暂停时间意味着在这 100 毫秒期间内没有应用程序线程是活动的。</p><p>暂停时间优先，意味着尽可能让单次 STW 的时间最短：0.1 + 0.1 + 0.1 + 0.1 + 0.1 &#x3D; 0.5</p><p><img src="https://img-blog.csdnimg.cn/img_convert/de90092e21cbff31926f7cc7dceebf25.png" alt="image-20200713085306400"></p><h4 id="吞吐量-vs-暂停时间"><a href="#吞吐量-vs-暂停时间" class="headerlink" title="吞吐量 vs 暂停时间"></a>吞吐量 vs 暂停时间</h4><p>高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</p><p>低暂停时间（低延迟）较好因为从最终用户的角度来看不管是 GC 还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的 200 毫秒暂停都可能打断终端用户体验。因此，具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序。</p><p>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）。</p><ul><li>因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致 GC 需要更长的暂停时间来执行内存回收。</li><li>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</li></ul><p>在设计（或使用）GC 算法时，我们必须确定我们的目标：一个 GC 算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。</p><p>现在标准：在最大吞吐量优先的情况下，降低停顿时间</p><h2 id="2-不同的垃圾回收器概述"><a href="#2-不同的垃圾回收器概述" class="headerlink" title="2. 不同的垃圾回收器概述"></a>2. 不同的垃圾回收器概述</h2><p>垃圾收集机制是 Java 的招牌能力，极大地提高了开发效率。这当然也是面试的热点。</p><h3 id="2-1-垃圾回收器发展史"><a href="#2-1-垃圾回收器发展史" class="headerlink" title="2.1. 垃圾回收器发展史"></a>2.1. 垃圾回收器发展史</h3><p>有了虚拟机，就一定需要收集垃圾的机制，这就是 Garbage Collection，对应的产品我们称为 Garbage Collector。</p><ul><li>1999 年随 JDK1.3.1 一起来的是串行方式的 serialGc，它是第一款 GC。ParNew 垃圾收集器是 Serial 收集器的多线程版本</li><li>2002 年 2 月 26 日，Parallel GC 和 Concurrent Mark Sweep GC 跟随 JDK1.4.2 一起发布·</li><li>Parallel GC 在 JDK6 之后成为 HotSpot 默认 GC。</li><li>2012 年，在 JDK1.7u4 版本中，G1 可用。</li><li>2017 年，JDK9 中 G1 变成默认的垃圾收集器，以替代 CMS。</li><li>2018 年 3 月，JDK10 中 G1 垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li><li>2018 年 9 月，JDK11 发布。引入 Epsilon 垃圾回收器，又被称为 “No-Op(无操作)“ 回收器。同时，引入 ZGC：可伸缩的低延迟垃圾回收器（Experimental）</li><li>2019 年 3 月，JDK12 发布。增强 G1，自动返回未用堆内存给操作系统。同时，引入 Shenandoah GC：低停顿时间的 GC（Experimental）。·</li><li>2019 年 9 月，JDK13 发布。增强 ZGC，自动返回未用堆内存给操作系统。</li><li>2020 年 3 月，JDK14 发布。删除 CMS 垃圾回收器。扩展 ZGC 在 macos 和 Windows 上的应用</li></ul><h3 id="2-2-7-种经典的垃圾收集器"><a href="#2-2-7-种经典的垃圾收集器" class="headerlink" title="2.2. 7 种经典的垃圾收集器"></a>2.2. 7 种经典的垃圾收集器</h3><ul><li>串行回收器：Serial、Serial Old</li><li>并行回收器：ParNew、Parallel Scavenge、Parallel old</li><li>并发回收器：CMS、G1</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305171047631.png" alt="image-20200713093551365"></p><p>官方手册：<a href="https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf">https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf</a></p><p><img src="http://img-md-js.linjsblog.top/img/202305171047680.png" alt="image-20210512145950897"></p><h3 id="2-3-7-款经典收集器与垃圾分代之间的关系"><a href="#2-3-7-款经典收集器与垃圾分代之间的关系" class="headerlink" title="2.3. 7 款经典收集器与垃圾分代之间的关系"></a>2.3. 7 款经典收集器与垃圾分代之间的关系</h3><p><img src="http://img-md-js.linjsblog.top/img/202305171054153.png" alt="image-20200713093757644"></p><ul><li><p>新生代收集器：Serial、ParNew、Parallel Scavenge；</p></li><li><p>老年代收集器：Serial Old、Parallel Old、CMS；</p></li><li><p>整堆收集器：G1；</p></li></ul><h3 id="2-4-垃圾收集器的组合关系"><a href="#2-4-垃圾收集器的组合关系" class="headerlink" title="2.4. 垃圾收集器的组合关系"></a>2.4. 垃圾收集器的组合关系</h3><p><img src="http://img-md-js.linjsblog.top/img/202305171054047.png" alt="image-20200713094745366"></p><ol><li>两个收集器间有连线，表明它们可以搭配使用：Serial&#x2F;Serial Old、Serial&#x2F;CMS、ParNew&#x2F;Serial Old、ParNew&#x2F;CMS、Parallel Scavenge&#x2F;Serial Old、Parallel Scavenge&#x2F;Parallel Old、G1；</li><li>其中 Serial Old 作为 CMS 出现”<code>Concurrent Mode Failure</code>“失败的后备预案。</li><li>（红色虚线）由于维护和兼容性测试的成本，在 JDK 8 时将 Serial+CMS、ParNew+Serial Old 这两个组合声明为废弃（JEP173），并在 JDK9 中完全取消了这些组合的支持（JEP214），即：移除。</li><li>（绿色虚线）JDK14 中：弃用 Parallel Scavenge 和 Serialold GC 组合（JEP366）</li><li>（绿色虚框）JDK14 中：删除 CMS 垃圾回收器（JEP363）</li></ol><h3 id="2-5-不同的垃圾收集器概述"><a href="#2-5-不同的垃圾收集器概述" class="headerlink" title="2.5. 不同的垃圾收集器概述"></a>2.5. 不同的垃圾收集器概述</h3><p>为什么要有很多收集器，一个不够吗？因为 Java 的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。</p><p>虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以我们选择的只是对具体应用最合适的收集器。</p><h3 id="2-6-如何查看默认垃圾收集器"><a href="#2-6-如何查看默认垃圾收集器" class="headerlink" title="2.6. 如何查看默认垃圾收集器"></a>2.6. 如何查看默认垃圾收集器</h3><p><code>-XX:+PrintCommandLineFlags</code>：查看命令行相关参数（包含使用的垃圾收集器）</p><p>使用命令行指令：<code>jinfo -flag 相关垃圾回收器参数 进程ID</code></p><h2 id="3-Serial-回收器：串行回收"><a href="#3-Serial-回收器：串行回收" class="headerlink" title="3. Serial 回收器：串行回收"></a>3. Serial 回收器：串行回收</h2><p>Serial 收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3 之前回收新生代唯一的选择。</p><p>Serial 收集器作为 HotSpot 中 client 模式下的默认新生代垃圾收集器。</p><p>Serial 收集器采用复制算法、串行回收和”stop-the-World”机制的方式执行内存回收。</p><p>除了年轻代之外，Serial 收集器还提供用于执行老年代垃圾收集的 Serial Old 收集器。Serial Old 收集器同样也采用了串行回收和”Stop the World”机制，只不过内存回收算法使用的是标记-压缩算法。</p><ul><li>Serial old 是运行在 Client 模式下默认的老年代的垃圾回收器</li><li>Serial 0ld 在 Server 模式下主要有两个用途：① 与新生代的 Parallel scavenge 配合使用 ② 作为老年代 CMS 收集器的后备垃圾收集方案</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305171112367.png" alt="image-20200713100703799"></p><p>这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个 CPU 或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（Stop The World）</p><p>优势：简单而高效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。运行在 Client 模式下的虚拟机是个不错的选择。</p><p>在用户的桌面应用场景中，可用内存一般不大（几十 MB 至一两百 MB），可以在较短时间内完成垃圾收集（几十 ms 至一百多 ms），只要不频繁发生，使用串行回收器是可以接受的。</p><p>在 HotSpot 虚拟机中，使用<code>-XX:+UseSerialGC</code>参数可以指定年轻代和老年代都使用串行收集器。等价于新生代用 Serial GC，且老年代用 Serial Old GC</p><p><strong>总结</strong></p><p>这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核 cpu 才可以用。现在都不是单核的了。</p><p>对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在 Java web 应用程序中是不会采用串行垃圾收集器的。</p><h2 id="4-ParNew-回收器：并行回收"><a href="#4-ParNew-回收器：并行回收" class="headerlink" title="4. ParNew 回收器：并行回收"></a>4. ParNew 回收器：并行回收</h2><p>如果说 Serial GC 是年轻代中的单线程垃圾收集器，那么 ParNew 收集器则是 Serial 收集器的多线程版本。Par 是 Parallel 的缩写，New：只能处理的是新生代</p><p>ParNew 收集器除了采用并行回收的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew 收集器在年轻代中同样也是采用复制算法、”Stop-the-World”机制。</p><p>ParNew 是很多 JVM 运行在 Server 模式下新生代的默认垃圾收集器。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171119848.png" alt="image-20200713102030127"></p><ul><li>对于新生代，回收次数频繁，使用并行方式高效。</li><li>对于老年代，回收次数少，使用串行方式节省资源。（CPU 并行需要切换线程，串行可以省去切换线程的资源）</li></ul><p>由于 ParNew 收集器是基于并行回收，那么是否可以断定 ParNew 收集器的回收效率在任何场景下都会比 serial 收集器更高效？</p><ul><li>ParNew 收集器运行在多 CPU 的环境下，由于可以充分利用多 CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。</li><li>但是在单个 CPU 的环境下，ParNew 收集器不比 Serial 收集器更高效。虽然 Serial 收集器是基于串行回收，但是由于 CPU 不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。</li></ul><p>因为除 Serial 外，目前只有 ParNew GC 能与 CMS 收集器配合工作</p><p>在程序中，开发人员可以通过选项”<code>-XX:+UseParNewGC</code>“手动指定使用 ParNew 收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p><p><code>-XX:ParallelGCThreads</code>限制线程数量，默认开启和 CPU 数据相同的线程数。</p><h2 id="5-Parallel-回收器：吞吐量优先"><a href="#5-Parallel-回收器：吞吐量优先" class="headerlink" title="5. Parallel 回收器：吞吐量优先"></a>5. Parallel 回收器：吞吐量优先</h2><p>HotSpot 的年轻代中除了拥有 ParNew 收集器是基于并行回收的以外，Parallel Scavenge 收集器同样也采用了复制算法、并行回收和”Stop the World”机制。</p><p>那么 Parallel 收集器的出现是否多此一举？</p><ul><li>和 ParNew 收集器不同，ParallelScavenge 收集器的目标则是达到一个可控制的吞吐量（Throughput），它也被称为吞吐量优先的垃圾收集器。</li><li>自适应调节策略也是 Parallel Scavenge 与 ParNew 一个重要区别。</li></ul><p>高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</p><p>Parallel 收集器在 JDK1.6 时提供了用于执行老年代垃圾收集的 Parallel Old 收集器，用来代替老年代的 Serial Old 收集器。</p><p>Parallel Old 收集器采用了标记-压缩算法，但同样也是基于并行回收和”Stop-the-World”机制。</p><p><img src="http://img-md-js.linjsblog.top/img/202305172001647.png" alt="image-20200713110359441"></p><p>在程序吞吐量优先的应用场景中，Parallel 收集器和 Parallel Old 收集器的组合，在 Server 模式下的内存回收性能很不错。在 Java8 中，默认是此垃圾收集器。</p><p><strong>参数配置</strong></p><ul><li><p><code>-XX:+UseParallelGC</code> 手动指定年轻代使用 Parallel 并行收集器执行内存回收任务。</p></li><li><p><code>-XX:+UseParallelOldGC</code> 手动指定老年代都是使用并行回收收集器。</p><ul><li><strong>分别适用于新生代和老年代。默认 jdk8 是开启的。</strong></li><li><strong>上面两个参数，默认开启一个，另一个也会被开启</strong>。（互相激活）</li></ul></li><li><p><code>-XX:ParallelGCThreads</code> 设置年轻代并行收集器的线程数。一般地，最好与 CPU 数量相等，以避免过多的线程数影响垃圾收集性能。<img src="http://img-md-js.linjsblog.top/img/202305171125558.png" alt="image-20230517112509927"></p></li><li><p><code>-XX:MaxGCPauseMillis</code> 设置垃圾收集器最大停顿时间（即 STw 的时间）。单位是毫秒。</p><ul><li>为了尽可能地把停顿时间控制在 MaxGCPauseMills 以内，收集器在工作时会调整 Java 堆大小或者其他一些参数。</li><li>对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合 Parallel，进行控制。</li><li>该参数使用需谨慎。</li></ul></li><li><p><code>-XX:GCTimeRatio</code> 垃圾收集时间占总时间的比例（&#x3D;1&#x2F;（N+1））。用于衡量吞吐量的大小。</p><ul><li>取值范围（0, 100）。默认值 99，也就是垃圾回收时间不超过 1%。</li><li>与前一个<code>-XX:MaxGCPauseMillis</code> 参数有一定矛盾性。暂停时间越长，Radio 参数就容易超过设定的比例。</li></ul></li><li><p><code>-XX:+UseAdaptivesizePolicy</code> 设置 Parallel Scavenge 收集器具有自适应调节策略</p><ul><li>在这种模式下，年轻代的大小、Eden 和 Survivor 的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</li><li>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（<code>GCTimeRatio</code>）和停顿时间（<code>MaxGCPauseMills</code>），让虚拟机自己完成调优工作。</li></ul></li></ul><h2 id="6-CMS-回收器：低延迟"><a href="#6-CMS-回收器：低延迟" class="headerlink" title="6. CMS 回收器：低延迟"></a>6. CMS 回收器：低延迟</h2><p>在 JDK1.5 时期，Hotspot 推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，这款收集器是 HotSpot 虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p><p>CMS 收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p><ul><li>目前很大一部分的 Java 应用集中在互联网站或者 B&#x2F;S 系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS 收集器就非常符合这类应用的需求。</li></ul><p>CMS 的垃圾收集算法采用标记-清除算法，并且也会”Stop-the-World”</p><p>不幸的是，CMS 作为<strong>老年代</strong>的收集器，却无法与 JDK1.4.0 中已经存在的新生代收集器 Parallel Scavenge 配合工作，所以在 JDK1.5 中使用 CMS 来收集老年代的时候，新生代只能选择 ParNew 或者 Serial 收集器中的一个。</p><p>在 G1 出现之前，CMS 使用还是非常广泛的。一直到今天，仍然有很多系统使用 CMS GC。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171239007.png" alt="image-20200713205154007"></p><p>CMS 整个过程比之前的收集器要复杂，整个过程分为 4 个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段</p><ul><li><strong>初始标记</strong>（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出 GCRoots 能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。</li><li><strong>并发标记</strong>（Concurrent-Mark）阶段：从 GC Roots 的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</li><li><strong>重新标记</strong>（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</li><li><strong>并发清除</strong>（Concurrent-Sweep）阶段：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li></ul><p>尽管 CMS 收集器采用的是并发回收（非独占式），但是在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“stop-the-World”，只是尽可能地缩短暂停时间。</p><p>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</p><p>另外，由于在垃圾收集阶段用户线程没有中断，所以在 CMS 回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS 收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在 CMS 工作过程中依然有足够的空间支持应用程序运行。要是 CMS 运行期间预留的内存无法满足程序需要，就会出现一次“<code>Concurrent Mode Failure</code>” 失败，这时虚拟机将启动后备预案：临时启用 Serial Old 收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p><p>CMS 收集器的垃圾收集算法采用的是标记清除算法，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会产生一些内存碎片。那么 CMS 在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171239365.png" alt="image-20200713212230352"></p><p><strong>有人会觉得既然 Mark Sweep 会造成内存碎片，那么为什么不把算法换成 Mark Compact？</strong></p><p>答案其实很简单，因为当并发清除的时候，用 Compact 整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact 更适合“Stop the World” 这种场景下使用</p><h3 id="6-1-CMS-的优点"><a href="#6-1-CMS-的优点" class="headerlink" title="6.1. CMS 的优点"></a>6.1. CMS 的优点</h3><ul><li>并发收集</li><li>低延迟</li></ul><h3 id="6-2-CMS-的弊端"><a href="#6-2-CMS-的弊端" class="headerlink" title="6.2. CMS 的弊端"></a>6.2. CMS 的弊端</h3><ul><li>会产生内存碎片，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发 FullGC。</li><li>CMS 收集器对 CPU 资源非常敏感。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li><li>CMS 收集器无法处理浮动垃圾。可能出现“<code>Concurrent Mode Failure</code>“失败而导致另一次 Full GC 的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS 将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行 GC 时释放这些之前未被回收的内存空间。</li></ul><h3 id="6-3-设置的参数"><a href="#6-3-设置的参数" class="headerlink" title="6.3. 设置的参数"></a>6.3. 设置的参数</h3><ul><li><p><code>-XX:+UseConcMarkSweepGC</code> 手动指定使用 CMS 收集器执行内存回收任务。</p><p>开启该参数后会自动将<code>-xx:+UseParNewGC</code>打开。即：ParNew（Young 区用）+CMS（Old 区用）+ Serial Old 的组合。</p></li><li><p><code>-XX:CMSInitiatingOccupanyFraction</code> 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。</p><ul><li>JDK5 及以前版本的默认值为 68，即当老年代的空间使用率达到 68%时，会执行一次 CMS 回收。JDK6 及以上版本默认值为 92%</li><li>如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低 CMS 的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低 Full Gc 的执行次数。</li></ul></li><li><p><code>-XX:+UseCMSCompactAtFullCollection</code> 用于指定在执行完 Full GC 后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。</p></li><li><p><code>-XX:CMSFullGCsBeforeCompaction</code> 设置在执行多少次 Full GC 后对内存空间进行压缩整理。</p></li><li><p><code>-XX:ParallelcMSThreads</code> 设置 CMS 的线程数量。</p><ul><li>CMS 默认启动的线程数是（ParallelGCThreads+3）&#x2F;4，ParallelGCThreads 是年轻代并行收集器的线程数。当 CPU 资源比较紧张时，受到 CMS 收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。</li></ul></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>HotSpot 有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC 这三个 Gc 有什么不同呢？</p><p>请记住以下口令：</p><ul><li>如果你想要最小化地使用内存和并行开销，请选 Serial GC；</li><li>如果你想要最大化应用程序的吞吐量，请选 Parallel GC；</li><li>如果你想要最小化 GC 的中断或停顿时间，请选 CMS GC。</li></ul><h3 id="6-4-JDK-后续版本中-CMS-的变化"><a href="#6-4-JDK-后续版本中-CMS-的变化" class="headerlink" title="6.4. JDK 后续版本中 CMS 的变化"></a>6.4. JDK 后续版本中 CMS 的变化</h3><p>JDK9 新特性：CMS 被标记为 Deprecate 了（JEP291）</p><ul><li>如果对 JDK9 及以上版本的 HotSpot 虚拟机使用参数<code>-XX: +UseConcMarkSweepGC</code>来开启 CMS 收集器的话，用户会收到一个警告信息，提示 CMS 未来将会被废弃。</li></ul><p>JDK14 新特性：删除 CMS 垃圾回收器（JEP363）</p><ul><li>移除了 CMS 垃圾收集器，如果在 JDK14 中使用 <code>-XX:+UseConcMarkSweepGC</code>的话，JVM 不会报错，只是给出一个 warning 信息，但是不会 exit。JVM 会自动回退以默认 GC 方式启动 JVM</li></ul><h2 id="7-G1-回收器：区域化分代式"><a href="#7-G1-回收器：区域化分代式" class="headerlink" title="7. G1 回收器：区域化分代式"></a>7. G1 回收器：区域化分代式</h2><p><strong>既然我们已经有了前面几个强大的 GC，为什么还要发布 Garbage First（G1）？</strong></p><p>原因就在于应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有 GC 就不能保证应用程序正常进行，而经常造成 STW 的 GC 又跟不上实际的需求，所以才会不断地尝试对 GC 进行优化。G1（Garbage-First）垃圾回收器是在 Java7 update4 之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。</p><p>与此同时，为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。</p><p>官方给 G1 设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望。</p><p><strong>为什么名字叫 Garbage First(G1)呢？</strong></p><p>因为 G1 是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的 Region 来表示 Eden、幸存者 0 区，幸存者 1 区，老年代等。</p><p>G1 GC 有计划地避免在整个 Java 堆中进行全区域的垃圾收集。G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p><p>由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给 G1 一个名字：垃圾优先（Garbage First）。</p><p>G1（Garbage-First）是一款面向服务端应用的垃圾收集器，主要针对配备多核 CPU 及大容量内存的机器，以极高概率满足 GC 停顿时间的同时，还兼具高吞吐量的性能特征。</p><p>在 JDK1.7 版本正式启用，移除了 Experimenta1 的标识，是JDK9 以后的默认垃圾回收器，取代了 CMS 回收器以及 Parallel+Parallel Old 组合。被 Oracle 官方称为“全功能的垃圾收集器”。</p><p>与此同时，CMS 已经在 JDK9 中被标记为废弃（deprecated）。G1在 jdk8 中还不是默认的垃圾回收器，需要使用<code>-XX:+UseG1GC</code>来启用。</p><h3 id="7-1-G1-回收器的特点（优势）"><a href="#7-1-G1-回收器的特点（优势）" class="headerlink" title="7.1. G1 回收器的特点（优势）"></a>7.1. G1 回收器的特点（优势）</h3><p>与其他 GC 收集器相比，G1 使用了全新的分区算法，其特点如下所示：</p><h4 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h4><ul><li>并行性：G1 在回收期间，可以有多个 GC 线程同时工作，有效利用多核计算能力。此时用户线程 STW</li><li>并发性：G1 拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况</li></ul><h4 id="分代收集"><a href="#分代收集" class="headerlink" title="分代收集"></a>分代收集</h4><ul><li>从分代上看，G1 依然属于分代型垃圾回收器，它会区分年轻代和老年代，年轻代依然有 Eden 区和 Survivor 区。但从堆的结构上看，它不要求整个 Eden 区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li><li>将堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代。</li><li>和之前的各类回收器不同，它同时兼顾年轻代和老年代。对比其他回收器，或者工作在年轻代，或者工作在老年代；</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305171355560.png" alt="image-20200713215105293"></p><p><img src="http://img-md-js.linjsblog.top/img/202305171355020.png" alt="image-20200713215133839"></p><h4 id="空间整合"><a href="#空间整合" class="headerlink" title="空间整合"></a>空间整合</h4><ul><li>CMS：“标记-清除”算法、内存碎片、若干次 Gc 后进行一次碎片整理</li><li>G1 将内存划分为一个个的 region。内存的回收是以 region 作为基本单位的。Region 之间是复制算法，但整体上实际可看作是标记-压缩（Mark-Compact）算法，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次 GC。尤其是当 Java 堆非常大的时候，G1 的优势更加明显。</li></ul><h4 id="可预测的停顿时间模型（即：软实时-soft-real-time）"><a href="#可预测的停顿时间模型（即：软实时-soft-real-time）" class="headerlink" title="可预测的停顿时间模型（即：软实时 soft real-time）"></a>可预测的停顿时间模型（即：软实时 soft real-time）</h4><p>这是 G1 相对于 CMS 的另一大优势，G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒。</p><ul><li>由于分区的原因，G1 可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。</li><li>G1 跟踪各个 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。保证了 G1 收集器在有限的时间内可以获取尽可能高的收集效率。</li><li>相比于 CMS GC，G1 未必能做到 CMS 在最好情况下的延时停顿，但是最差情况要好很多。</li></ul><h3 id="7-2-G1-垃圾收集器的缺点"><a href="#7-2-G1-垃圾收集器的缺点" class="headerlink" title="7.2. G1 垃圾收集器的缺点"></a>7.2. G1 垃圾收集器的缺点</h3><p>相较于 CMS，G1 还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1 无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（Overload）都要比 CMS 要高。</p><p>从经验上来说，在小内存应用上 CMS 的表现大概率会优于 G1，而 G1 在大内存应用上则发挥其优势。平衡点在 6-8GB 之间。</p><h3 id="7-3-G1-回收器的参数设置"><a href="#7-3-G1-回收器的参数设置" class="headerlink" title="7.3. G1 回收器的参数设置"></a>7.3. G1 回收器的参数设置</h3><ul><li><code>-XX:+UseG1GC</code>：手动指定使用 G1 垃圾收集器执行内存回收任务</li><li><code>-XX:G1HeapRegionSize</code> 设置每个 Region 的大小。值是 2 的幂，范围是 1MB 到 32MB 之间，目标是根据最小的 Java 堆大小划分出约 2048 个区域。默认是堆内存的 1&#x2F;2000。</li><li><code>-XX:MaxGCPauseMillis</code> 设置期望达到的最大 GC 停顿时间指标（JVM 会尽力实现，但不保证达到）。默认值是 200ms（人的平均反应速度）</li><li><code>-XX:+ParallelGCThread</code> 设置 STW 工作线程数的值。最多设置为 8（上面说过 Parallel 回收器的线程计算公式，当 CPU_Count &gt; 8 时，ParallelGCThreads 也会大于 8）</li><li><code>-XX:ConcGCThreads</code> 设置并发标记的线程数。将 n 设置为并行垃圾回收线程数（ParallelGCThreads）的 1&#x2F;4 左右。</li><li><code>-XX:InitiatingHeapOccupancyPercent</code> 设置触发并发 GC 周期的 Java 堆占用率阈值。超过此值，就触发 GC。默认值是 45。</li></ul><h3 id="7-4-G1-收集器的常见操作步骤"><a href="#7-4-G1-收集器的常见操作步骤" class="headerlink" title="7.4. G1 收集器的常见操作步骤"></a>7.4. G1 收集器的常见操作步骤</h3><p>G1 的设计原则就是简化 JVM 性能调优，开发人员只需要简单的三步即可完成调优：</p><ul><li>第一步：开启 G1 垃圾收集器</li><li>第二步：设置堆的最大内存</li><li>第三步：设置最大的停顿时间</li></ul><p>G1 中提供了三种垃圾回收模式：Young GC、Mixed GC 和 Full GC，在不同的条件下被触发。</p><h3 id="7-5-G1-收集器的适用场景"><a href="#7-5-G1-收集器的适用场景" class="headerlink" title="7.5. G1 收集器的适用场景"></a>7.5. G1 收集器的适用场景</h3><p>面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）</p><p>最主要的应用是需要低 GC 延迟，并具有大堆的应用程序提供解决方案；如：在堆大小约 6GB 或更大时，可预测的暂停时间可以低于 0.5 秒；（G1 通过每次只清理一部分而不是全部的 Region 的增量式清理来保证每次 GC 停顿时间不会过长）。</p><p>用来替换掉 JDK1.5 中的 CMS 收集器；在下面的情况时，使用 G1 可能比 CMS 好：</p><ul><li>超过 50%的 Java 堆被活动数据占用；</li><li>对象分配频率或年代提升频率变化很大；</li><li>GC 停顿时间过长（长于 0.5 至 1 秒）</li></ul><p>HotSpot 垃圾收集器里，除了 G1 以外，其他的垃圾收集器使用内置的 JVM 线程执行 GC 的多线程操作，而 G1 GC 可以采用应用线程承担后台运行的 GC 工作，即当 JVM 的 GC 线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p><h3 id="7-6-分区-Region：化整为零"><a href="#7-6-分区-Region：化整为零" class="headerlink" title="7.6. 分区 Region：化整为零"></a>7.6. 分区 Region：化整为零</h3><p>使用 G1 收集器时，它将整个 Java 堆划分成约 2048 个大小相同的独立 Region 块，每个 Region 块大小根据堆空间的实际大小而定，整体被控制在 1MB 到 32MB 之间，且为 2 的 N 次幂，即 1MB，2MB，4MB，8MB，16MB，32MB。可以通过<code>-XX:G1HeapRegionSize</code>设定。所有的 Region 大小相同，且在 JVM 生命周期内不会被改变。</p><p>虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分 Region（不需要连续）的集合。通过 Region 的动态分配方式实现逻辑上的连续。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171401344.png" alt="image-20200713223244886"></p><p>一个 region 有可能属于 Eden，Survivor 或者 Old&#x2F;Tenured 内存区域。但是一个 region 只可能属于一个角色。图中的 E 表示该 region 属于 Eden 内存区域，S 表示属于 survivor 内存区域，O 表示属于 Old 内存区域。图中空白的表示未使用的内存空间。</p><p>G1 垃圾收集器还增加了一种新的内存区域，叫做 Humongous 内存区域，如图中的 H 块。主要用于存储大对象，如果超过 1.5 个 region，就放到 H。</p><p>设置 H 的原因：对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1 划分了一个 Humongous 区，它用来专门存放大对象。如果一个 H 区装不下一个大对象，那么 G1 会寻找连续的 H 区来存储。为了能找到连续的 H 区，有时候不得不启动 Full GC。G1 的大多数行为都把 H 区作为老年代的一部分来看待。</p><p>每个 Region 都是通过指针碰撞来分配空间</p><p><img src="http://img-md-js.linjsblog.top/img/202305171403117.png" alt="image-20200713223509993"></p><h3 id="7-7-G1-垃圾回收器的回收过程"><a href="#7-7-G1-垃圾回收器的回收过程" class="headerlink" title="7.7. G1 垃圾回收器的回收过程"></a>7.7. G1 垃圾回收器的回收过程</h3><p>G1GC 的垃圾回收过程主要包括如下三个环节：</p><ul><li><p>年轻代 GC（Young GC）</p></li><li><p>老年代并发标记过程（Concurrent Marking）</p></li><li><p>混合回收（Mixed GC）</p><p>（如果需要，单线程、独占式、高强度的 Full GC 还是继续存在的。它针对 GC 的评估失败提供了一种失败保护机制，即强力回收。）</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305171403098.png" alt="image-20200713224113996"></p><p>顺时针，Young gc -&gt; Young gc + Concurrent mark-&gt;Mixed GC 顺序，进行垃圾回收。</p><p>应用程序分配内存，当年轻代的 Eden 区用尽时开始年轻代回收过程；G1 的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1GC 暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到 Survivor 区间或者老年区间，也有可能是两个区间都会涉及。</p><p>当堆内存使用达到一定值（默认 45%）时，开始老年代并发标记过程。</p><p>标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC 从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的 G1 回收器和其他 GC 不同，G1 的老年代回收器不需要整个老年代被回收，一次只需要扫描&#x2F;回收一小部分老年代的 Region 就可以了。同时，这个老年代 Region 是和年轻代一起被回收的。</p><p>举个例子：一个 Web 服务器，Java 进程最大堆内存为 4G，每分钟响应 1500 个请求，每 45 秒钟会新分配大约 2G 的内存。G1 会每 45 秒钟进行一次年轻代回收，每 31 个小时整个堆的使用率会达到 45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。</p><h3 id="7-8-Remembered-Set"><a href="#7-8-Remembered-Set" class="headerlink" title="7.8. Remembered Set"></a>7.8. Remembered Set</h3><ul><li><p>一个对象被不同区域引用的问题</p></li><li><p>一个 Region 不可能是孤立的，一个 Region 中的对象可能被其他任意 Region 中对象引用，判断对象存活时，是否需要扫描整个 Java 堆才能保证准确？</p></li><li><p>在其他的分代收集器，也存在这样的问题（而 G1 更突出）回收新生代也不得不同时扫描老年代？</p></li><li><p>这样的话会降低 MinorGC 的效率；</p></li></ul><p><strong>解决方法：</strong></p><p>无论 G1 还是其他分代收集器，JVM 都是使用 Remembered Set 来避免全局扫描：</p><p>每个 Region 都有一个对应的 Remembered Set；</p><p>每次 Reference 类型数据写操作时，都会产生一个 Write Barrier 暂时中断操作；</p><p>然后检查将要写入的引用指向的对象是否和该 Reference 类型数据在不同的 Region（其他收集器：检查老年代对象是否引用了新生代对象）；</p><p>如果不同，通过 CardTable 把相关引用信息记录到引用指向对象的所在 Region 对应的 Remembered Set 中；</p><p>当进行垃圾收集时，在 GC 根节点的枚举范围加入 Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171412777.png" alt="image-20200713224716715"></p><h3 id="7-9-G1-回收过程一：年轻代-GC"><a href="#7-9-G1-回收过程一：年轻代-GC" class="headerlink" title="7.9. G1 回收过程一：年轻代 GC"></a>7.9. G1 回收过程一：年轻代 GC</h3><p>JVM 启动时，G1 先准备好 Eden 区，程序在运行过程中不断创建对象到 Eden 区，当 Eden 空间耗尽时，G1 会启动一次年轻代垃圾回收过程。</p><p>年轻代垃圾回收只会回收 Eden 区和 Survivor 区。</p><p>首先 G1 停止应用程序的执行（Stop-The-World），G1 创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代 Eden 区和 Survivor 区所有的内存分段。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171859376.png" alt="image-20200713225100632"></p><p>然后开始如下回收过程：</p><ol><li>第一阶段，扫描根。根是指 static 变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同 RSet 记录的外部引用作为扫描存活对象的入口。</li><li>第二阶段，更新 RSet。处理 dirty card queue（见备注）中的 card，更新 RSet。此阶段完成后，RSet 可以准确的反映老年代对所在的内存分段中对象的引用。</li><li>第三阶段，处理 RSet。识别被老年代对象指向的 Eden 中的对象，这些被指向的 Eden 中的对象被认为是存活的对象。</li><li>第四阶段，复制对象。此阶段，对象树被遍历，Eden 区内存段中存活的对象会被复制到 Survivor 区中空的内存分段，Survivor 区内存段中存活的对象如果年龄未达阈值，年龄会加 1，达到阀值会被会被复制到 Old 区中空的内存分段。如果 Survivor 空间不够，Eden 空间的部分数据会直接晋升到老年代空间。</li><li>第五阶段，处理引用。处理 Soft，Weak，Phantom，Final，JNI Weak 等引用。最终 Eden 空间的数据为空，GC 停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</li></ol><h3 id="7-10-G1-回收过程二：并发标记过程"><a href="#7-10-G1-回收过程二：并发标记过程" class="headerlink" title="7.10. G1 回收过程二：并发标记过程"></a>7.10. G1 回收过程二：并发标记过程</h3><ol><li>初始标记阶段：标记从根节点直接可达的对象。这个阶段是 STW 的，并且会触发一次年轻代 GC。</li><li>根区域扫描（Root Region Scanning）：G1 GC 扫描 Survivor 区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在 YoungGC 之前完成。</li><li>并发标记（Concurrent Marking）：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被 YoungGC 中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</li><li>再次标记（Remark）：由于应用程序持续进行，需要修正上一次的标记结果。是 STW 的。G1 中采用了比 CMS 更快的初始快照算法：snapshot-at-the-beginning（SATB）。</li><li>独占清理（cleanup，STW）：计算各个区域的存活对象和 GC 回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是 STW 的。这个阶段并不会实际上去做垃圾的收集</li><li>并发清理阶段：识别并清理完全空闲的区域。</li></ol><h3 id="7-11-G1-回收过程三：混合回收"><a href="#7-11-G1-回收过程三：混合回收" class="headerlink" title="7.11. G1 回收过程三：混合回收"></a>7.11. G1 回收过程三：混合回收</h3><p>当越来越多的对象晋升到老年代 o1d region 时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即 Mixed GC，该算法并不是一个 Old GC，除了回收整个 Young Region，还会回收一部分的 Old Region。这里需要注意：是一部分老年代，而不是全部老年代。可以选择哪些 Old Region 进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是 Mixed GC 并不是 Full GC。</p><p><img src="http://img-md-js.linjsblog.top/img/202305171859532.png" alt="image-20200713225810871"></p><p>并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分 8 次（可以通过<code>-XX:G1MixedGCCountTarget</code>设置）被回收</p><p>混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden 区内存分段，Survivor 区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。</p><p>由于老年代中的内存分段默认分 8 次回收，G1 会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，<code>-XX:G1MixedGCLiveThresholdPercent</code>，默认为 65%，意思是垃圾占内存分段比例要达到 65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。</p><p>混合回收并不一定要进行 8 次。有一个阈值<code>-XX:G1HeapWastePercent</code>，默认值为 10%，意思是允许整个堆内存中有 10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于 10%，则不再进行混合回收。因为 GC 会花费很多的时间但是回收到的内存却很少。</p><h3 id="7-12-G1-回收可选的过程四：Full-GC"><a href="#7-12-G1-回收可选的过程四：Full-GC" class="headerlink" title="7.12. G1 回收可选的过程四：Full GC"></a>7.12. G1 回收可选的过程四：Full GC</h3><p>G1 的初衷就是要避免 Full GC 的出现。但是如果上述方式不能正常工作，G1 会停止应用程序的执行（Stop-The-World），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p><p>要避免 Full GC 的发生，一旦发生需要进行调整。什么时候会发生 Full GC 呢？比如堆内存太小，当 G1 在复制存活对象的时候没有空的内存分段可用，则会回退到 Full GC，这种情况可以通过增大内存解决。</p><p>导致 G1 Full GC 的原因可能有两个：</p><ul><li>Evacuation 的时候没有足够的 to-space 来存放晋升的对象；</li><li>并发处理过程完成之前空间耗尽。</li></ul><h3 id="7-13-补充"><a href="#7-13-补充" class="headerlink" title="7.13. 补充"></a>7.13. 补充</h3><p>从 Oracle 官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到 G1 只是回一部分 Region，停顿时间是用户可控制的，所以并不迫切去实现，而选择把这个特性放到了 G1 之后出现的低延迟垃圾收集器（即 ZGC）中。另外，还考虑到 G1 不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。</p><h3 id="7-14-G1-回收器优化建议"><a href="#7-14-G1-回收器优化建议" class="headerlink" title="7.14. G1 回收器优化建议"></a>7.14. G1 回收器优化建议</h3><p>年轻代大小</p><ul><li>避免使用<code>-Xmn</code>或<code>-XX:NewRatio</code>等相关选项显式设置年轻代大小</li><li>固定年轻代的大小会覆盖暂停时间目标</li></ul><p>暂停时间目标不要太过严苛</p><ul><li>G1 GC 的吞吐量目标是 90%的应用程序时间和 10% 的垃圾回收时间</li><li>评估 G1 GC 的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。</li></ul><h2 id="8-垃圾回收器总结"><a href="#8-垃圾回收器总结" class="headerlink" title="8. 垃圾回收器总结"></a>8. 垃圾回收器总结</h2><h3 id="8-1-7-种经典垃圾回收器总结"><a href="#8-1-7-种经典垃圾回收器总结" class="headerlink" title="8.1. 7 种经典垃圾回收器总结"></a>8.1. 7 种经典垃圾回收器总结</h3><p>截止 JDK1.8，一共有 7 款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。</p><p>垃圾收集器</p><p>分类</p><p>作用位置</p><p>使用算法</p><p>特点</p><p>适用场景</p><p>Serial</p><p>串行运行</p><p>作用于新生代</p><p>复制算法</p><p>响应速度优先</p><p>适用于单 CPU 环境下的 client 模式</p><p>ParNew</p><p>并行运行</p><p>作用于新生代</p><p>复制算法</p><p>响应速度优先</p><p>多 CPU 环境 Server 模式下与 CMS 配合使用</p><p>Parallel</p><p>并行运行</p><p>作用于新生代</p><p>复制算法</p><p>吞吐量优先</p><p>适用于后台运算而不需要太多交互的场景</p><p>Serial Old</p><p>串行运行</p><p>作用于老年代</p><p>标记-压缩算法</p><p>响应速度优先</p><p>适用于单 CPU 环境下的 Client 模式</p><p>Parallel Old</p><p>并行运行</p><p>作用于老年代</p><p>标记-压缩算法</p><p>吞吐量优先</p><p>适用于后台运算而不需要太多交互的场景</p><p>CMS</p><p>并发运行</p><p>作用于老年代</p><p>标记-清除算法</p><p>响应速度优先</p><p>适用于互联网或 B／S 业务</p><p>G1</p><p>并发、并行运行</p><p>作用于新生代、老年代</p><p>标记-压缩算法、复制算法</p><p>响应速度优先</p><p>面向服务端应用</p><p>GC 发展阶段：Serial &#x3D;&gt; Parallel（并行）&#x3D;&gt; CMS（并发）&#x3D;&gt; G1 &#x3D;&gt; ZGC</p><h3 id="8-2-垃圾回收器组合"><a href="#8-2-垃圾回收器组合" class="headerlink" title="8.2. 垃圾回收器组合"></a>8.2. 垃圾回收器组合</h3><p>不同厂商、不同版本的虚拟机实现差距比较大。HotSpot 虚拟机在 JDK7&#x2F;8 后所有收集器及组合如下图</p><p><img src="http://img-md-js.linjsblog.top/img/202305172011410.png" alt="image-20200714080151020"></p><ol><li><p>两个收集器间有连线，表明它们可以搭配使用：Serial&#x2F;Serial Old、Serial&#x2F;CMS、ParNew&#x2F;Serial Old、ParNew&#x2F;CMS、Parallel Scavenge&#x2F;Serial Old、Parallel Scavenge&#x2F;Parallel Old、G1;</p></li><li><p>其中 Serial Old 作为 CMS 出现＂<code>Concurrent Mode Failure</code>＂失败的后备预案。</p></li><li><p>（红色虚线）由于维护和兼容性测试的成本，在 JDK 8 时将 Serial ＋ CMS、ParNew ＋ Serial old 这两个组合声明为 Deprecated（JEP 173），并在 JDK 9 中</p></li></ol><p>完全取消了这些组合的支持（JEP214），即：移除。</p><ol start="4"><li><p>（绿色虚线）JDK 14 中：弃用 ParallelScavenge 和 SeriaOold GC 组合(JEP 366)</p></li><li><p>（绿色虚框）JDK 14 中：删除 CMS 垃圾回收器（JEP 363）</p></li></ol><h3 id="8-3-怎么选择垃圾回收器"><a href="#8-3-怎么选择垃圾回收器" class="headerlink" title="8.3. 怎么选择垃圾回收器"></a>8.3. 怎么选择垃圾回收器</h3><p>Java 垃圾收集器的配置对于 JVM 优化来说是一个很重要的选择，选择合适的垃圾收集器可以让 JVM 的性能有一个很大的提升。</p><p>怎么选择垃圾收集器？</p><ol><li><p>优先调整堆的大小让 JVM 自适应完成。</p></li><li><p>如果内存小于 100M，使用串行收集器</p></li><li><p>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</p></li><li><p>如果是多 CPU、需要高吞吐量、允许停顿时间超过 1 秒，选择并行或者 JVM 自己选择</p></li><li><p>如果是多 CPU、追求低停顿时间，需快速响应（比如延迟不能超过 1 秒，如互联网应用），使用并发收集器</p><p>官方推荐 G1，性能高。现在互联网的项目，基本都是使用 G1。</p></li></ol><p>最后需要明确一个观点：</p><ol><li>没有最好的收集器，更没有万能的收集</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ol><p><strong>面试</strong></p><p>对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。 这里较通用、基础性的部分如下：</p><ul><li><p>垃圾收集的算法有哪些？如何判断一个对象是否可以回收？</p></li><li><p>垃圾收集器工作的基本流程。</p></li></ul><p>另外，大家需要多关注垃圾回收器这一章的各种常用的参数</p><h2 id="9-GC-日志分析"><a href="#9-GC-日志分析" class="headerlink" title="9. GC 日志分析"></a>9. GC 日志分析</h2><p>通过阅读 Gc 日志，我们可以了解 Java 虚拟机内存分配与回收策略。 内存分配与垃圾回收的参数列表</p><ul><li><code>-XX:+PrintGC</code> 输出 GC 日志。类似：<code>-verbose:gc</code></li><li><code>-XX:+PrintGCDetails</code> 输出 GC 的详细日志</li><li><code>-XX:+PrintGCTimestamps</code> 输出 GC 的时间戳（以基准时间的形式）</li><li><code>-XX:+PrintGCDatestamps</code> 输出 GC 的时间戳（以日期的形式，如 2013-05-04T21：53：59.234+0800）</li><li><code>-XX:+PrintHeapAtGC</code> 在进行 GC 的前后打印出堆的信息</li><li><code>-Xloggc:../logs/gc.log</code> 日志文件的输出路径</li></ul><p>打开 GC 日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-verbose:gc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个只会显示总的 GC 堆的变化，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span> <span class="token number">80832</span>K<span class="token operator">-></span><span class="token function">19298K</span><span class="token punctuation">(</span><span class="token number">227840</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0084018</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Metadata</span> <span class="token constant">GC</span> <span class="token class-name">Threshold</span><span class="token punctuation">)</span> <span class="token number">109499</span>K<span class="token operator">-></span><span class="token function">21465K</span><span class="token punctuation">(</span><span class="token number">228352</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0184066</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Metadata</span> <span class="token constant">GC</span> <span class="token class-name">Threshold</span><span class="token punctuation">)</span> <span class="token number">21465</span>K<span class="token operator">-></span><span class="token function">16716K</span><span class="token punctuation">(</span><span class="token number">201728</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0619261</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数解析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">GC</span>、<span class="token class-name">Full</span> <span class="token constant">GC</span>：<span class="token constant">GC</span>的类型，<span class="token constant">GC</span>只在新生代上进行，<span class="token class-name">Full</span> <span class="token constant">GC</span>包括永生代，新生代，老年代。<span class="token class-name">Allocation</span> <span class="token class-name">Failure</span>：<span class="token constant">GC</span>发生的原因。<span class="token number">80832</span>K<span class="token operator">-></span><span class="token number">19298</span>K：堆在<span class="token constant">GC</span>前的大小和<span class="token constant">GC</span>后的大小。<span class="token number">228840</span>k：现在的堆大小。<span class="token number">0.0084018</span> secs：<span class="token constant">GC</span>持续的时间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 GC 日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-verbose:gc</span> <span class="token parameter variable">-XX:+PrintGCDetails</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入信息如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span><span class="token number">70640</span>K<span class="token operator">-></span><span class="token function">10116K</span><span class="token punctuation">(</span><span class="token number">141312</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">80541</span>K<span class="token operator">-></span><span class="token function">20017K</span><span class="token punctuation">(</span><span class="token number">227328</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0172573</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span>user<span class="token operator">=</span><span class="token number">0.03</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span>real<span class="token operator">=</span><span class="token number">0.02</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Metadata</span> <span class="token constant">GC</span> <span class="token class-name">Threshold</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span><span class="token number">98859</span>K<span class="token operator">-></span><span class="token function">8154K</span><span class="token punctuation">(</span><span class="token number">142336</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">108760</span>K<span class="token operator">-></span><span class="token function">21261K</span><span class="token punctuation">(</span><span class="token number">228352</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0151573</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span>user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>real<span class="token operator">=</span><span class="token number">0.02</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Metadata</span> <span class="token constant">GC</span> <span class="token class-name">Threshold</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span><span class="token number">8154</span>K<span class="token operator">-></span><span class="token function">0K</span><span class="token punctuation">(</span><span class="token number">142336</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">ParOldGen</span><span class="token operator">:</span><span class="token number">13107</span>K<span class="token operator">-></span><span class="token function">16809K</span><span class="token punctuation">(</span><span class="token number">62464</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">21261</span>K<span class="token operator">-></span><span class="token function">16809K</span><span class="token punctuation">(</span><span class="token number">204800</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Metaspace</span><span class="token operator">:</span><span class="token number">20599</span>K<span class="token operator">-></span><span class="token function">20599K</span><span class="token punctuation">(</span><span class="token number">1067008</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0.0639732</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span>user<span class="token operator">=</span><span class="token number">0.14</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span>real<span class="token operator">=</span><span class="token number">0.06</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数解析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token constant">GC</span>，<span class="token class-name">Full</span> <span class="token constant">FC</span>：同样是<span class="token constant">GC</span>的类型<span class="token class-name">Allocation</span> <span class="token class-name">Failure</span>：<span class="token constant">GC</span>原因<span class="token class-name">PSYoungGen</span>：使用了<span class="token class-name">Parallel</span> <span class="token class-name">Scavenge</span>并行垃圾收集器的新生代<span class="token constant">GC</span>前后大小的变化<span class="token class-name">ParOldGen</span>：使用了<span class="token class-name">Parallel</span> <span class="token class-name">Old</span>并行垃圾收集器的老年代<span class="token constant">GC</span>前后大小的变化<span class="token class-name">Metaspace</span>： 元数据区<span class="token constant">GC</span>前后大小的变化，<span class="token constant">JDK1</span><span class="token punctuation">.</span><span class="token number">8</span>中引入了元数据区以替代永久代xxx secs：指<span class="token constant">GC</span>花费的时间<span class="token class-name">Times</span>：user：指的是垃圾收集器花费的所有<span class="token constant">CPU</span>时间，sys：花费在等待系统调用或系统事件的时间，real：<span class="token constant">GC</span>从开始到结束的时间，包括其他进程占用时间片的实际时间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 GC 日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-verbose:gc</span> <span class="token parameter variable">-XX:+PrintGCDetails</span> <span class="token parameter variable">-XX:+PrintGCTimestamps</span> <span class="token parameter variable">-XX:+PrintGCDatestamps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入信息如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">24</span><span class="token constant">T22</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">24.518</span><span class="token operator">+</span><span class="token number">0800</span><span class="token operator">:</span> <span class="token number">3.287</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span><span class="token number">136162</span>K<span class="token operator">-></span><span class="token function">5113K</span><span class="token punctuation">(</span><span class="token number">136192</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">141425</span>K<span class="token operator">-></span><span class="token function">17632K</span><span class="token punctuation">(</span><span class="token number">222208</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0248249</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span>user<span class="token operator">=</span><span class="token number">0.05</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span>real<span class="token operator">=</span><span class="token number">0.03</span> secs<span class="token punctuation">]</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">24</span><span class="token constant">T22</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">25.559</span><span class="token operator">+</span><span class="token number">0800</span><span class="token operator">:</span> <span class="token number">4.329</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Metadata</span> <span class="token constant">GC</span> <span class="token class-name">Threshold</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span><span class="token number">97578</span>K<span class="token operator">-></span><span class="token function">10068K</span><span class="token punctuation">(</span><span class="token number">274944</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">110096</span>K<span class="token operator">-></span><span class="token function">22658K</span><span class="token punctuation">(</span><span class="token number">360960</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.0094071</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span>real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">24</span><span class="token constant">T22</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">25.569</span><span class="token operator">+</span><span class="token number">0800</span><span class="token operator">:</span> <span class="token number">4.338</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Metadata</span> <span class="token constant">GC</span> <span class="token class-name">Threshold</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span><span class="token number">10068</span>K<span class="token operator">-></span><span class="token function">0K</span><span class="token punctuation">(</span><span class="token number">274944</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">ParoldGen</span><span class="token operator">:</span><span class="token number">12590</span>K<span class="token operator">-></span><span class="token function">13564K</span><span class="token punctuation">(</span><span class="token number">56320</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">22658</span>K<span class="token operator">-></span><span class="token function">13564K</span><span class="token punctuation">(</span><span class="token number">331264</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">Metaspace</span><span class="token operator">:</span><span class="token number">20590</span>K<span class="token operator">-></span><span class="token function">20590K</span><span class="token punctuation">(</span><span class="token number">1067008</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0.0494875</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.17</span> sys<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">,</span>real<span class="token operator">=</span><span class="token number">0.05</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：带上了日期和实践</p><p>如果想把 GC 日志存到文件的话，是下面的参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-Xloggc:/path/to/gc.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>日志补充说明</strong></p><ul><li><p>“<code>[GC</code>“和”<code>[Full GC</code>“说明了这次垃圾收集的停顿类型，如果有”Full”则说明 GC 发生了”Stop The World”</p></li><li><p>使用 Serial 收集器在新生代的名字是 Default New Generation，因此显示的是”<code>[DefNew</code>“</p></li><li><p>使用 ParNew 收集器在新生代的名字会变成”<code>[ParNew</code>“，意思是”Parallel New Generation”</p></li><li><p>使用 Parallel scavenge 收集器在新生代的名字是”<code>[PSYoungGen</code>“</p></li><li><p>老年代的收集和新生代道理一样，名字也是收集器决定的</p></li><li><p>使用 G1 收集器的话，会显示为”garbage-first heap”</p></li><li><p>Allocation Failure</p><p>表明本次引起 GC 的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</p></li><li><p>[PSYoungGen：5986K-&gt;696K(8704K) ] 5986K-&gt;704K(9216K)</p><p>中括号内：GC 回收前年轻代大小，回收后大小，（年轻代总大小）</p><p>括号外：GC 回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</p></li><li><p>user 代表用户态回收耗时，sys 内核态回收耗时，rea 实际耗时。由于多核的原因，时间总和可能会超过 real 时间</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Heap</span>（堆）<span class="token class-name">PSYoungGen</span>（<span class="token class-name">Parallel</span> <span class="token class-name">Scavenge</span>收集器新生代）total <span class="token number">9216</span>K，used <span class="token number">6234</span>K <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span><span class="token punctuation">,</span><span class="token number">0x0000000100000000</span><span class="token punctuation">,</span><span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>eden space（堆中的<span class="token class-name">Eden</span>区默认占比是<span class="token number">8</span>）<span class="token number">8192</span>K，<span class="token number">768</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff600000</span><span class="token punctuation">,</span><span class="token number">0x00000000ffc16b08</span><span class="token punctuation">,</span><span class="token number">0x00000000ffe00000</span><span class="token punctuation">)</span>from space（堆中的<span class="token class-name">Survivor</span>，这里是<span class="token class-name">From</span> <span class="token class-name">Survivor</span>区默认占比是<span class="token number">1</span>）<span class="token number">1024</span>K， <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fff00000</span><span class="token punctuation">,</span><span class="token number">0x00000000fff00000</span><span class="token punctuation">,</span><span class="token number">0x0000000100000000</span><span class="token punctuation">)</span><span class="token keyword">to</span> <span class="token namespace">space</span>（堆中的<span class="token class-name">Survivor</span>，这里是<span class="token keyword">to</span> <span class="token class-name">Survivor</span>区默认占比是<span class="token number">1</span>，需要先了解一下堆的分配策略）<span class="token number">1024</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ffe00000</span><span class="token punctuation">,</span><span class="token number">0x00000000ffe00000</span><span class="token punctuation">,</span><span class="token number">0x00000000fff00000</span><span class="token punctuation">)</span><span class="token class-name">ParOldGen</span>（老年代总大小和使用大小）total <span class="token number">10240</span>K， used <span class="token number">7001</span>K ［<span class="token number">0x00000000fec00000</span><span class="token punctuation">,</span><span class="token number">0x00000000ff600000</span><span class="token punctuation">,</span><span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span>object space（显示个使用百分比）<span class="token number">10240</span>K，<span class="token number">688</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fec00000</span><span class="token punctuation">,</span><span class="token number">0x00000000ff2d6630</span><span class="token punctuation">,</span><span class="token number">0x00000000ff600000</span><span class="token punctuation">)</span><span class="token class-name">PSPermGen</span>（永久代总大小和使用大小）total <span class="token number">21504</span>K， used <span class="token number">4949</span>K <span class="token punctuation">[</span><span class="token number">0x00000000f9a00000</span><span class="token punctuation">,</span><span class="token number">0x00000000faf00000</span><span class="token punctuation">,</span><span class="token number">0x00000000fec00000</span><span class="token punctuation">)</span>object space（显示个使用百分比，自己能算出来）<span class="token number">21504</span>K， <span class="token number">238</span> used <span class="token punctuation">[</span><span class="token number">0x00000000f9a00000</span><span class="token punctuation">,</span><span class="token number">0x00000000f9ed55e0</span><span class="token punctuation">,</span><span class="token number">0x00000000faf00000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Minor-GC-日志"><a href="#Minor-GC-日志" class="headerlink" title="Minor GC 日志"></a>Minor GC 日志</h3><p><img src="http://img-md-js.linjsblog.top/img/202305172033719.png" alt="image-20200714082555688"></p><h3 id="Full-GC-日志"><a href="#Full-GC-日志" class="headerlink" title="Full GC 日志"></a>Full GC 日志</h3><p><img src="http://img-md-js.linjsblog.top/img/202305172033652.png" alt="image-20210512194815354"></p><p><strong>举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">;</span>    allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">testAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置 JVM 参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Xms10m</span> <span class="token parameter variable">-Xmx10m</span> <span class="token parameter variable">-XX:+PrintGCDetails</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>图示</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305172021040.png" alt="image-20200714083332238"></p><p><img src="http://img-md-js.linjsblog.top/img/202305172021517.png" alt="image-20200714083526790"></p><p>可以用一些工具去分析这些 GC 日志</p><p>常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat 等</p><h2 id="X-垃圾回收器的新发展"><a href="#X-垃圾回收器的新发展" class="headerlink" title="X. 垃圾回收器的新发展"></a>X. 垃圾回收器的新发展</h2><p>GC 仍然处于飞速发展之中，目前的默认选项G1 GC 在不断的进行改进，很多我们原来认为的缺点，例如串行的 Fu11GC、Card Table 扫描的低效等，都已经被大幅改进，例如，JDK10 以后，Fu11GC 已经是并行运行，在很多场景下，其表现还略优于 ParallelGC 的并行 Ful1GC 实现。</p><p>即使是 Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是 GC 相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，在 Serverless 等新的应用场景下，Serial GC 找到了新的舞台。</p><p>比较不幸的是 CMSGC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在 JDK9 中已经被标记为废弃，并在 JDK14 版本中移除</p><h3 id="X-1-JDK11-新特性"><a href="#X-1-JDK11-新特性" class="headerlink" title="X.1. JDK11 新特性"></a>X.1. JDK11 新特性</h3><p>Epsilon:A No-Op GarbageCollector（Epsilon 垃圾回收器，”No-Op（无操作）”回收器）<a href="http://openidk.iava.net/jeps/318">http://openidk.iava.net/jeps/318</a></p><p>ZGC:A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）<a href="http://openidk.iava.net/jeps/318">http://openidk.iava.net/jeps/333</a></p><p><img src="http://img-md-js.linjsblog.top/img/202305172051806.png" alt="image-20210512195426194"></p><p>现在 G1 回收器已成为默认回收器好几年了。</p><p>我们还看到了引入了两个新的收集器：ZGC（JDK11 出现）和 Shenandoah（Open JDK12）。主打特点：低停顿时间</p><p><img src="http://img-md-js.linjsblog.top/img/202305172051195.png" alt="image-20210512195528695"></p><h3 id="X-2-Open-JDK12-的-Shenandoash-GC"><a href="#X-2-Open-JDK12-的-Shenandoash-GC" class="headerlink" title="X.2. Open JDK12 的 Shenandoash GC"></a>X.2. Open JDK12 的 Shenandoash GC</h3><p>Open JDK12 的 Shenandoash GC：低停顿时间的 GC（实验性）</p><p>Shenandoah，无疑是众多 GC 中最孤独的一个。是第一款不由 oracle 公司团队领导开发的 Hotspot 垃圾收集器。不可避免的受到官方的排挤。比如号称 OpenJDK 和 OracleJDK 没有区别的 Oracle 公司仍拒绝在 OracleJDK12 中支持 Shenandoah。</p><p>Shenandoah 垃圾回收器最初由 RedHat 进行的一项垃圾收集器研究项目 Pauseless GC 的实现，旨在针对 JVM 上的内存回收实现低停顿的需求.。在 2014 年贡献给 OpenJDK。</p><p>Red Hat 研发 Shenandoah 团队对外宣称，Shenandoah 垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为 200MB 还是 200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。</p><p><img src="http://img-md-js.linjsblog.top/img/202305172052950.png" alt="image-20200714090608807"></p><p>这是 RedHat 在 2016 年发表的论文数据，测试内容是使用 Es 对 200GB 的维基百科数据进行索引。从结果看：</p><ul><li>停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。</li><li>而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。</li></ul><p>总结</p><ul><li>Shenandoah GC 的弱项：高运行负担下的吞吐量下降。</li><li>Shenandoah GC 的强项：低延迟时间。</li><li>Shenandoah GC 的工作过程大致分为九个阶段，这里就不再赘述。可以看尚硅谷Java12的新特性</li></ul><p>【Java12 新特性地址】</p><p><a href="http://www.atguigu.com/download_detail.shtml?v=222">http://www.atguigu.com/download_detail.shtml?v&#x3D;222</a></p><p>或</p><p><a href="https://www.bilibili.com/video/BV1jJ411M7kQ?from=search&seid=12339069673726242866">https://www.bilibili.com/video/BV1jJ411M7kQ?from=search&seid=12339069673726242866</a></p><h3 id="X-3-令人震惊、革命性的-ZGC"><a href="#X-3-令人震惊、革命性的-ZGC" class="headerlink" title="X.3. 令人震惊、革命性的 ZGC"></a>X.3. 令人震惊、革命性的 ZGC</h3><p>官方地址：<a href="https://docs.oracle.com/en/java/javase/12/gctuning/">https://docs.oracle.com/en/java/javase/12/gctuning/</a></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f78eebadbabf7450ded984f0f1e3a405.png" alt="image-20210512200236647"></p><p>ZGC 与 Shenandoah 目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。</p><p>《深入理解 Java 虚拟机》一书中这样定义 ZGC：ZGC 收集器是一款基于 Region 内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-压缩算法的，以低延迟为首要目标的一款垃圾收集器。</p><p>ZGC 的工作过程可以分为 4 个阶段：并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射 等。</p><p>ZGC 几乎在所有地方并发执行的，除了初始标记的是 STW 的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。</p><p>测试数据：</p><p><img src="http://img-md-js.linjsblog.top/img/202305172057804.png" alt="image-20200714091201073"></p><p><img src="http://img-md-js.linjsblog.top/img/202305172057401.png" alt="image-20200714091401511"></p><p>在 ZGC 的强项停顿时间测试上，它毫不留情的将 Parallel、G1 拉开了两个数量级的差距。无论平均停顿、95％停顿、99％停顿、99.9％停顿，还是最大停顿时间，ZGC 都能毫不费劲控制在 10 毫秒以内。</p><p>虽然 ZGC 还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。 未来将在服务端、大内存、低延迟应用的首选垃圾收集器。</p><p><img src="http://img-md-js.linjsblog.top/img/202305172057142.png" alt="image-20200714093243028"></p><p>JEP 364：ZGC 应用在 macos 上</p><p>JEP 365：ZGC 应用在 Windows 上</p><p>JDK14 之前，ZGC 仅 Linux 才支持。</p><p>尽管许多使用 zGc 的用户都使用类 Linux 的环境，但在 Windows 和 macos 上，人们也需要 ZGC 进行开发部署和测试。许多桌面应用也可以从 ZGC 中受益。因此，ZGC 特性被移植到了 Windows 和 macos 上。</p><p>现在 mac 或 Windows 上也能使用 zGC 了，示例如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+UnlockExperimentalVMOptions</span> <span class="token parameter variable">-XX:+UseZGC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="X-4-其他垃圾回收器：AliGC"><a href="#X-4-其他垃圾回收器：AliGC" class="headerlink" title="X.4. 其他垃圾回收器：AliGC"></a>X.4. 其他垃圾回收器：AliGC</h3><p>AliGC 是阿里巴巴 JVM 团队基于 G1 算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：</p><p><img src="http://img-md-js.linjsblog.top/img/202305172058971.png" alt="image-20200714093604012"></p><p>当然，其它厂商也提供了各种别具一格的 GC 实现，例如比较有名的低延迟 GC：Zing，有兴趣可以参考提供的链接 <a href="https://www.infoq.com/articles/azul_gc_in_detail">https://www.infoq.com/articles/azul_gc_in_detail</a></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(十一) 垃圾回收相关概念</title>
      <link href="/2023/05/16/%E5%8D%81%E4%B8%80-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>/2023/05/16/%E5%8D%81%E4%B8%80-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="十一-垃圾回收相关概念"><a href="#十一-垃圾回收相关概念" class="headerlink" title="(十一) 垃圾回收相关概念"></a>(十一) 垃圾回收相关概念</h1><h2 id="1-System-gc-的理解"><a href="#1-System-gc-的理解" class="headerlink" title="1. System.gc()的理解"></a>1. System.gc()的理解</h2><p>在默认情况下，通过 system.gc()或者 Runtime.getRuntime().gc() 的调用，会显式触发 Full GC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。</p><p>然而 System.gc() 调用附带一个免责声明，无法保证对垃圾收集器的调用。(不能确保立即生效)</p><p>JVM 实现者可以通过 System.gc() 调用来决定 JVM 的 GC 行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用 System.gc()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemGCTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">SystemGCTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 提醒JVM的垃圾回收器执行gc，但是不确定是否马上执行gc</span>        <span class="token comment">// 与Runtime.getRuntime().gc();的作用一样</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">runFinalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强制执行失去引用的对象的finalize()方法</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SystemGCTest 重写了finalize()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-内存溢出与内存泄露"><a href="#2-内存溢出与内存泄露" class="headerlink" title="2. 内存溢出与内存泄露"></a>2. 内存溢出与内存泄露</h2><h3 id="内存溢出（OOM）"><a href="#内存溢出（OOM）" class="headerlink" title="内存溢出（OOM）"></a>内存溢出（OOM）</h3><p>内存溢出相对于内存泄漏来说，尽管更容易被理解，但是同样的，内存溢出也是引发程序崩溃的罪魁祸首之一。</p><p>由于 GC 一直在发展，所有一般情况下，除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现 ooM 的情况。</p><p>大多数情况下，GC 会进行各种年龄段的垃圾回收，实在不行了就放大招，来一次独占式的 Full GC 操作，这时候会回收大量的内存，供应用程序继续使用。</p><p>javadoc 中对 OutOfMemoryError 的解释是，没有空闲内存，并且垃圾收集器也无法提供更多内存。</p><p>首先说没有空闲内存的情况：说明 Java 虚拟机的堆内存不够。原因有二：</p><ol><li><p>Java 虚拟机的堆内存设置不够。</p><p>比如：可能存在内存泄漏问题；也很有可能就是堆的大小不合理，比如我们要处理比较可观的数据量，但是没有显式指定 JVM 堆大小或者指定数值偏小。我们可以通过参数<code>-Xms</code> 、<code>-Xmx</code>来调整。</p></li><li><p>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）</p><p>对于老版本的 Oracle JDK，因为永久代的大小是有限的，并且 JVM 对永久代垃圾回收（如，常量池回收、卸载不再需要的类型）非常不积极，所以当我们不断添加新类型的时候，永久代出现 OutOfMemoryError 也非常多见，尤其是在运行时存在大量动态类型生成的场合；类似 intern 字符串缓存占用太多空间，也会导致 OOM 问题。对应的异常信息，会标记出来和永久代相关：“<code>java.lang.OutOfMemoryError: PermGen space</code>“。</p><p>随着元数据区的引入，方法区内存已经不再那么窘迫，所以相应的 ooM 有所改观，出现 OOM，异常信息则变成了：“<code>java.lang.OutofMemoryError:Metaspace</code>“。直接内存不足，也会导致 OOM。</p></li></ol><p>这里面隐含着一层意思是，在抛出 OutOfMemoryError 之前，通常垃圾收集器会被触发，尽其所能去清理出空间。</p><ul><li>例如：在引用机制分析中，涉及到 JVM 会去尝试回收软引用指向的对象等。</li><li>在<code>java.nio.BIts.reserveMemory()</code>方法中，我们能清楚的看到，<code>System.gc()</code>会被调用，以清理空间。</li></ul><p>当然，也不是在任何情况下垃圾收集器都会被触发的</p><ul><li>比如，我们去分配一个超大对象，类似一个超大数组超过堆的最大值，JVM 可以判断出垃圾收集并不能解决这个问题，所以直接抛出 OutOfMemoryError。</li></ul><h3 id="内存泄漏（Memory-Leak）"><a href="#内存泄漏（Memory-Leak）" class="headerlink" title="内存泄漏（Memory Leak）"></a>内存泄漏（Memory Leak）</h3><p>也称作“存储渗漏”。严格来说，只有对象不会再被程序用到了，但是 GC 又不能回收他们的情况，才叫内存泄漏。</p><p>但实际情况很多时候一些不太好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致 00M，也可以叫做宽泛意义上的“内存泄漏”。</p><p>尽管内存泄漏并不会立刻引起程序崩溃，但是一旦发生内存泄漏，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现 OutOfMemory 异常，导致程序崩溃。</p><p>注意，这里的存储空间并不是指物理内存，而是指虚拟内存大小，这个虚拟内存大小取决于磁盘交换区设定的大小。</p><p><img src="http://img-md-js.linjsblog.top/img/202305162200834.png" alt="image-20200712195158470"></p><p><strong>举例</strong></p><ol><li><p>单例模式</p><p>单例的生命周期和应用程序是一样长的，所以单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄漏的产生。</p></li><li><p>一些提供 close 的资源未关闭导致内存泄漏</p><p>数据库连接（dataSourse.getConnection() ），网络连接（socket）和 io 连接必须手动 close，否则是不能被回收的。</p></li></ol><h2 id="3-Stop-The-World"><a href="#3-Stop-The-World" class="headerlink" title="3. Stop The World"></a>3. Stop The World</h2><p>Stop-the-World，简称 STW，指的是 GC 事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为 STW。</p><p>可达性分析算法中枚举根节点（GC Roots）会导致所有 Java 执行线程停顿。</p><ul><li>分析工作必须在一个能确保一致性的快照中进行</li><li>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</li><li>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证</li></ul><p>被 STW 中断的应用程序线程会在完成 GC 之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样，所以我们需要减少 STW 的发生。</p><p>STW 事件和采用哪款 GC 无关，所有的 GC 都有这个事件。</p><p>哪怕是 G1 也不能完全避免 Stop-the-World 情况发生，只能说垃圾回收器越来越优秀，回收效率越来越高，尽可能地缩短了暂停时间。</p><p>STW 是 JVM 在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</p><p>开发中不要用 System.gc() 会导致 Stop-the-World 的发生。</p><h2 id="4-垃圾回收的并行与并发"><a href="#4-垃圾回收的并行与并发" class="headerlink" title="4. 垃圾回收的并行与并发"></a>4. 垃圾回收的并行与并发</h2><h3 id="并发（Concurrent）"><a href="#并发（Concurrent）" class="headerlink" title="并发（Concurrent）"></a>并发（Concurrent）</h3><p>在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行。</p><p>并发不是真正意义上的“同时进行”，只是 CPU 把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于 CPU 处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。</p><p><img src="http://img-md-js.linjsblog.top/img/202305162208814.png" alt="image-20200712202522051"></p><h3 id="并行（Parallel）"><a href="#并行（Parallel）" class="headerlink" title="并行（Parallel）"></a>并行（Parallel）</h3><p>当系统有一个以上 CPU 时，当一个 CPU 执行一个进程时，另一个 CPU 可以执行另一个进程，两个进程互不抢占 CPU 资源，可以同时进行，我们称之为并行（Parallel）。</p><p>其实决定并行的因素不是 CPU 的数量，而是 CPU 的核心数量，比如一个 CPU 多个核也可以并行。</p><p>适合科学计算，后台处理等弱交互场景</p><p><img src="http://img-md-js.linjsblog.top/img/202305162208337.png" alt="image-20200712202822129"></p><h3 id="并发-vs-并行"><a href="#并发-vs-并行" class="headerlink" title="并发 vs 并行"></a>并发 vs 并行</h3><ul><li><p>并发，指的是多个事情，在同一时间段内同时发生了。</p></li><li><p>并行，指的是多个事情，在同一时间点上同时发生了。</p></li><li><p>并发的多个任务之间是互相抢占资源的。</p></li><li><p>并行的多个任务之间是不互相抢占资源的。</p></li><li><p>只有在多 CPU 或者一个 CPU 多核的情况中，才会发生并行。</p></li><li><p>否则，看似同时发生的事情，其实都是并发执行的。</p></li></ul><h3 id="垃圾回收的并发与并行"><a href="#垃圾回收的并发与并行" class="headerlink" title="垃圾回收的并发与并行"></a>垃圾回收的并发与并行</h3><p>并发和并行，在谈论垃圾收集器的上下文语境中，它们可以解释如下：</p><h4 id="并行（Parallel）-1"><a href="#并行（Parallel）-1" class="headerlink" title="并行（Parallel）"></a>并行（Parallel）</h4><p>指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。如 ParNew、Parallel Scavenge、Parallel Old；</p><h4 id="串行（Serial）"><a href="#串行（Serial）" class="headerlink" title="串行（Serial）"></a>串行（Serial）</h4><p>相较于并行的概念，单线程执行。如果内存不够，则程序暂停，启动 JVM 垃圾回收器进行垃圾回收。回收完，再启动程序的线程。</p><p><img src="http://img-md-js.linjsblog.top/img/202305162208028.png" alt="image-20210512112822896"></p><h4 id="并发（Concurrent）-1"><a href="#并发（Concurrent）-1" class="headerlink" title="并发（Concurrent）"></a>并发（Concurrent）</h4><p>指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会停顿用户程序的运行。用户程序在继续运行，而垃圾收集程序线程运行于另一个 CPU 上；如：CMS、G1</p><p><img src="http://img-md-js.linjsblog.top/img/202305162208332.png" alt="image-20200712203815517"></p><h2 id="5-安全点与安全区域"><a href="#5-安全点与安全区域" class="headerlink" title="5. 安全点与安全区域"></a>5. 安全点与安全区域</h2><h3 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h3><p>程序执行时并非在所有地方都能停顿下来开始 GC，只有在特定的位置才能停顿下来开始 GC，这些位置称为“安全点（Safepoint）”。</p><p>Safe Point 的选择很重要，如果太少可能导致 GC 等待的时间太长，如果太频繁可能导致运行时的性能问题。大部分指令的执行时间都非常短暂，通常会根据“是否具有让程序长时间执行的特征”为标准。比如：选择一些执行时间较长的指令作为 Safe Point，如方法调用、循环跳转和异常跳转等。</p><p>如何在 GC 发生时，检查所有线程都跑到最近的安全点停顿下来呢？</p><h4 id="抢先式中断：（目前没有虚拟机采用了）"><a href="#抢先式中断：（目前没有虚拟机采用了）" class="headerlink" title="抢先式中断：（目前没有虚拟机采用了）"></a>抢先式中断：（目前没有虚拟机采用了）</h4><ul><li>首先中断所有线程。如果还有线程不在安全点，就恢复线程，让线程跑到安全点。\</li></ul><h4 id="主动式中断"><a href="#主动式中断" class="headerlink" title="主动式中断"></a>主动式中断</h4><p>设置一个中断标志，各个线程运行到 Safe Point 的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起。（有轮询的机制）</p><h3 id="安全区域（Safe-Resion）"><a href="#安全区域（Safe-Resion）" class="headerlink" title="安全区域（Safe Resion）"></a>安全区域（Safe Resion）</h3><p>Safepoint 机制保证了程序执行时，在不太长的时间内就会遇到可进入 GC 的 Safepoint。但是，程序“不执行”的时候呢？例如线程处于 Sleep 状态或 Blocked 状态，这时候线程无法响应 JVM 的中断请求，“走”到安全点去中断挂起，JVM 也不太可能等待线程被唤醒。对于这种情况，就需要安全区域（Safe Region）来解决。</p><p>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始 Gc 都是安全的。我们也可以把 Safe Region 看做是被扩展了的 Safepoint。</p><h3 id="实际执行时："><a href="#实际执行时：" class="headerlink" title="实际执行时："></a>实际执行时：</h3><ol><li>当线程运行到 Safe Region 的代码时，首先标识已经进入了 Safe Relgion，如果这段时间内发生 GC，JVM 会忽略标识为 Safe Region 状态的线程</li><li>当线程即将离开 Safe Region 时，会检查 JVM 是否已经完成 GC，如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开 Safe Region 的信号为止；</li></ol><h2 id="6-再谈引用：强引用"><a href="#6-再谈引用：强引用" class="headerlink" title="6. 再谈引用：强引用"></a>6. 再谈引用：强引用</h2><p>我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存中；如果内存空间在进行垃圾收集后还是很紧张，则可以抛弃这些对象。</p><p>【既偏门又非常高频的面试题】强引用、软引用、弱引用、虚引用有什么区别？具体使用场景是什么？</p><p>在 JDK1.2 版之后，Java 对引用的概念进行了扩充，将引用分为：强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）这 4 种引用强度依次逐渐减弱。</p><p>除强引用外，其他 3 种引用均可以在 java.lang.ref 包中找到它们的身影。如下图，显示了这 3 种引用类型对应的类，开发人员可以在应用程序中直接使用它们。</p><p>.<img src="http://img-md-js.linjsblog.top/img/202305162321650.png" alt="image-20200712205813321"></p><p>Reference 子类中只有终结器引用是包内可见的，其他 3 种引用类型均为 public，可以在应用程序中直接使用</p><ul><li>强引用（StrongReference）：最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“<code>Object obj = new Object()</code>”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</li><li>软引用（SoftReference）：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存流出异常。</li><li>弱引用（WeakReference）：被弱引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象。</li><li>虚引用（PhantomReference）：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</li></ul><h3 id="强引用（Strong-Reference）——不回收"><a href="#强引用（Strong-Reference）——不回收" class="headerlink" title="强引用（Strong Reference）——不回收"></a>强引用（Strong Reference）——不回收</h3><p>在 Java 程序中，最常见的引用类型是强引用（普通系统 99%以上都是强引用），也就是我们最常见的普通对象引用，也是默认的引用类型。</p><p>当在 Java 语言中使用 new 操作符创建一个新的对象，并将其赋值给一个变量的时候，这个变量就成为指向该对象的一个强引用。</p><p>强引用的对象是可触及的，垃圾收集器就永远不会回收掉被引用的对象。</p><p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 nu11，就是可以当做垃圾被收集了，当然具体回收时机还是要看垃圾收集策略。</p><p>相对的，软引用、弱引用和虚引用的对象是软可触及、弱可触及和虚可触及的，在一定条件下，都是可以被回收的。所以，强引用是造成 Java 内存泄漏的主要原因之一。</p><p><strong>强引用例子</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello mogublog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>局部变量 str 指向 StringBuffer 实例所在堆空间，通过 str 可以操作该实例，那么 str 就是 StringBuffer 实例的强引用</p><p><strong>对应内存结构</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305162322416.png" alt="image-20200712211501377"></p><p>此时，如果再运行一个赋值语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuffer</span> str1 <span class="token operator">=</span> str<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>对应的内存结构</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305162322934.png" alt="image-20200712211732976"></p><p>本例中的两个引用，都是强引用，强引用具备以下特点：</p><ul><li>强引用可以直接访问目标对象。</li><li>强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出 OOM 异常，也不会回收强引用所指向对象。</li><li>强引用可能导致内存泄漏。</li></ul><h2 id="7-再谈引用：-软引用"><a href="#7-再谈引用：-软引用" class="headerlink" title="7. 再谈引用： 软引用"></a>7. 再谈引用： 软引用</h2><h3 id="软引用（Soft-Reference）——内存不足即回收"><a href="#软引用（Soft-Reference）——内存不足即回收" class="headerlink" title="软引用（Soft Reference）——内存不足即回收"></a>软引用（Soft Reference）——内存不足即回收</h3><p>软引用是用来描述一些还有用，但非必需的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p><p>软引用通常用来实现内存敏感的缓存。比如：高速缓存就有用到软引用。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p><p>垃圾回收器在某个时刻决定回收软可达的对象的时候，会清理软引用，并可选地把引用存放到一个引用队列（Reference Queue）。</p><p>类似弱引用，只不过 Java 虚拟机会尽量让软引用的存活时间长一些，迫不得已才清理。</p><p>在 JDK1.2 版之后提供了 java.lang.ref.SoftReference 类来实现软引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 声明强引用</span><span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//销毁强引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-再谈引用：弱引用"><a href="#8-再谈引用：弱引用" class="headerlink" title="8. 再谈引用：弱引用"></a>8. 再谈引用：弱引用</h2><h3 id="弱引用（Weak-Reference）——发现即回收"><a href="#弱引用（Weak-Reference）——发现即回收" class="headerlink" title="弱引用（Weak Reference）——发现即回收"></a>弱引用（Weak Reference）——发现即回收</h3><p>弱引用也是用来描述那些非必需对象，只被弱引用关联的对象只能生存到下一次垃圾收集发生为止。在系统 GC 时，只要发现弱引用，不管系统堆空间使用是否充足，都会回收掉只被弱引用关联的对象。</p><p>但是，由于垃圾回收器的线程通常优先级很低，因此，并不一定能很快地发现持有弱引用的对象。在这种情况下，弱引用对象可以存在较长的时间。</p><p>弱引用和软引用一样，在构造弱引用时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。</p><p>软引用、弱引用都非常适合来保存那些可有可无的缓存数据。如果这么做，当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用。</p><p>在 JDK1.2 版之后提供了 WeakReference 类来实现弱引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 声明强引用</span><span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//销毁强引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>弱引用对象与软引用对象的最大不同就在于，当 GC 在进行回收时，需要通过算法检查是否回收软引用对象，而对于弱引用对象，GC 总是进行回收。弱引用对象更容易、更快被 GC 回收。</p><p><strong>面试题：你开发中使用过 WeakHashMap 吗？</strong></p><p>WeakHashMap 用来存储图片信息，可以在内存不足的时候，及时回收，避免了 OOM</p><h2 id="9-再谈引用：虚引用"><a href="#9-再谈引用：虚引用" class="headerlink" title="9. 再谈引用：虚引用"></a>9. 再谈引用：虚引用</h2><h3 id="虚引用（Phantom-Reference）——对象回收跟踪"><a href="#虚引用（Phantom-Reference）——对象回收跟踪" class="headerlink" title="虚引用（Phantom Reference）——对象回收跟踪"></a>虚引用（Phantom Reference）——对象回收跟踪</h3><p>也称为“幽灵引用”或者“幻影引用”，是所有引用类型中最弱的一个。</p><p>一个对象是否有虚引用的存在，完全不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它和没有引用几乎是一样的，随时都可能被垃圾回收器回收。</p><p>它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的 get()方法取得对象时，总是 null</p><p>为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被收集器回收时收到一个系统通知。</p><p>虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p><p>由于虚引用可以跟踪对象的回收时间，因此，也可以将一些资源释放操作放置在虚引用中执行和记录。</p><p>在 JDK1.2 版之后提供了 PhantomReference 类来实现虚引用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 声明强引用</span><span class="token class-name">ReferenceQueue</span> phantomQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> phantomQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-终结器引用"><a href="#10-终结器引用" class="headerlink" title="10. 终结器引用"></a>10. 终结器引用</h2><p>它用于实现对象的 finalize() 方法，也可以称为终结器引用。无需手动编码，其内部配合引用队列使用。</p><p>在 GC 时，终结器引用入队。由 Finalizer 线程通过终结器引用找到被引用对象调用它的 finalize()方法，第二次 GC 时才回收被引用的对象</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>（十）垃圾回收概述及算法</title>
      <link href="/2023/05/16/%EF%BC%88%E5%8D%81%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%AE%97%E6%B3%95/"/>
      <url>/2023/05/16/%EF%BC%88%E5%8D%81%EF%BC%89%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="（十）垃圾回收概述及算法"><a href="#（十）垃圾回收概述及算法" class="headerlink" title="（十）垃圾回收概述及算法"></a>（十）垃圾回收概述及算法</h1><h2 id="1-垃圾回收概述"><a href="#1-垃圾回收概述" class="headerlink" title="1. 垃圾回收概述"></a>1. 垃圾回收概述</h2><h3 id="1-1-什么是垃圾？"><a href="#1-1-什么是垃圾？" class="headerlink" title="1.1. 什么是垃圾？"></a>1.1. 什么是垃圾？</h3><p><img src="http://img-md-js.linjsblog.top/img/202305161840319.png" alt="image-20200712085456113"></p><p>垃圾收集，不是 Java 语言的伴生产物。早在 1960 年，第一门开始使用内存动态分配和垃圾收集技术的 Lisp 语言诞生。</p><p>关于垃圾收集有三个经典问题：</p><ul><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ul><p>垃圾收集机制是 Java 的招牌能力，极大地提高了开发效率。如今，垃圾收集几乎成为现代语言的标配，即使经过如此长时间的发展，Java 的垃圾收集机制仍然在不断的演进中，不同大小的设备、不同特征的应用场景，对垃圾收集提出了新的挑战，这当然也是面试的热点。</p><p><strong>大厂面试题</strong></p><blockquote><p>蚂蚁金服</p><ul><li><p>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下 cms 和 G1？</p></li><li><p>JVM GC 算法有哪些，目前的 JDK 版本采用什么回收算法？</p></li><li><p>G1 回收器讲下回收过程 GC 是什么？为什么要有 GC？</p></li><li><p>GC 的两种判定方法？CMS 收集器与 G1 收集器的特点</p></li></ul><p>百度</p><ul><li><p>说一下 GC 算法，分代回收说下</p></li><li><p>垃圾收集策略和算法</p></li></ul><p>天猫</p><ul><li><p>JVM GC 原理，JVM 怎么回收内存</p></li><li><p>CMS 特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？</p></li></ul><p>滴滴</p><ul><li>Java 的垃圾回收器都有哪些，说下 g1 的应用场景，平时你是如何搭配使用垃圾回收器的</li></ul><p>京东</p><ul><li><p>你知道哪几种垃圾收集器，各自的优缺点，重点讲下 cms 和 G1，</p></li><li><p>包括原理，流程，优缺点。垃圾回收算法的实现原理</p></li></ul><p>阿里</p><ul><li><p>讲一讲垃圾回收算法。</p></li><li><p>什么情况下触发垃圾回收？</p></li><li><p>如何选择合适的垃圾收集算法？</p></li><li><p>JVM 有哪三种垃圾回收器？</p></li></ul><p>字节跳动</p><ul><li>常见的垃圾回收器算法有哪些，各有什么优劣？</li><li>System.gc（）和 Runtime.gc（）会做什么事情？</li><li>Java GC 机制？GC Roots 有哪些？</li><li>Java 对象的回收方式，回收算法。</li><li>CMS 和 G1 了解么，CMS 解决什么问题，说一下回收的过程。</li><li>CMS 回收停顿了几次，为什么要停顿两次?</li></ul></blockquote><h4 id="什么是垃圾？"><a href="#什么是垃圾？" class="headerlink" title="什么是垃圾？"></a><strong>什么是垃圾？</strong></h4><p>&gt; An object is considered garbage when it can no longer be reached from any pointer in the running program</p><p>垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾。</p><p>如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序的结束，被保留的空间无法被其它对象使用，甚至可能导致内存溢出。</p><p><strong>磁盘碎片整理的日子</strong></p><p>机械硬盘需要进行磁盘整理，同时还有坏道</p><p><img src="http://img-md-js.linjsblog.top/img/202305161842215.png" alt="image-20200712090848669"></p><h2 id="1-2-为什么需要-GC"><a href="#1-2-为什么需要-GC" class="headerlink" title="1.2. 为什么需要 GC"></a>1.2. 为什么需要 GC</h2><p><strong>想要学习 GC，首先需要理解为什么需要 GC？</strong></p><p>对于高级语言来说，一个基本认知是如果不进行垃圾回收，内存迟早都会被消耗完，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不打扫一样。</p><p>除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，以便JVM 将整理出的内存分配给新的对象。</p><p>随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，没有 GC 就不能保证应用程序的正常进行。而经常造成 STW 的 GC 又跟不上实际的需求，所以才会不断地尝试对 GC 进行优化。</p><h2 id="1-3-早期垃圾回收"><a href="#1-3-早期垃圾回收" class="headerlink" title="1.3. 早期垃圾回收"></a>1.3. 早期垃圾回收</h2><p>在早期的 C&#x2F;C++时代，垃圾回收基本上是手工进行的。开发人员可以使用 new 关键字进行内存申请，并使用 delete 关键字进行内存释放。比如以下代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">MibBridge *pBridge&#x3D; new cmBaseGroupBridge();&#x2F;&#x2F;如果注册失败，使用Delete释放该对象所占内存区域if (pBridge-&gt;Register(kDestroy) !&#x3D; NO ERROR）    delete pBridge;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式可以灵活控制内存释放的时间，但是会给开发人员带来频繁申请和释放内存的管理负担。倘若有一处内存区间由于程序员编码的问题忘记被回收，那么就会产生内存泄漏，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成应用程序崩溃。</p><p>在有了垃圾回收机制后，上述代码极有可能变成这样</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">MibBridge *pBridge &#x3D; new cmBaseGroupBridge();pBridge-&gt;Register(kDestroy);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，除了 Java 以外，C#、Python、Ruby 等语言都使用了自动垃圾回收的思想，也是未来发展趋势，可以说这种自动化的内存分配和来及回收方式已经成为了现代开发语言必备的标准。</p><h2 id="1-4-Java-垃圾回收机制"><a href="#1-4-Java-垃圾回收机制" class="headerlink" title="1.4. Java 垃圾回收机制"></a>1.4. Java 垃圾回收机制</h2><p>自动内存管理，无需开发人员手动参与内存的分配与回收，这样降低内存泄漏和内存溢出的风险</p><ul><li>没有垃圾回收器，java 也会和 cpp 一样，各种悬垂指针，野指针，泄露问题让你头疼不已。</li></ul><p>自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以更专心地专注于业务开发</p><p>oracle 官网关于垃圾回收的介绍 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html</a></p><h4 id="担忧"><a href="#担忧" class="headerlink" title="担忧"></a>担忧</h4><p>对于 Java 开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于“自动”，那么这将会是一场灾难，最严重的就会弱化 Java 开发人员在程序出现内存溢出时定位问题和解决问题的能力。</p><p>此时，了解 JVM 的自动内存分配和内存回收原理就显得非常重要，只有在真正了解 JVM 是如何管理内存后，我们才能够在遇见 outofMemoryError 时，快速地根据错误异常日志定位问题和解决问题。</p><p>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。</p><h4 id="GC-主要关注的区域"><a href="#GC-主要关注的区域" class="headerlink" title="GC 主要关注的区域"></a>GC 主要关注的区域</h4><p>GC 主要关注于 方法区 和堆中的垃圾收集</p><p><img src="http://img-md-js.linjsblog.top/img/202305161848132.png" alt="image-20200712092427246"></p><p>垃圾收集器可以对年轻代回收，也可以对老年代回收，甚至是全栈和方法区的回收。其中，Java 堆是垃圾收集器的工作重点</p><p>从次数上讲：</p><ul><li>频繁收集 Young 区</li><li>较少收集 Old 区</li><li>基本不收集 Perm 区（元空间）</li></ul><h2 id="2-垃圾回收相关算法"><a href="#2-垃圾回收相关算法" class="headerlink" title="2. 垃圾回收相关算法"></a>2. 垃圾回收相关算法</h2><p><strong>对象存活判断</strong></p><p>在堆里存放着几乎所有的 Java 对象实例，在 GC 执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为己经死亡的对象，GC 才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。</p><p>那么在 JVM 中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</p><p>判断对象存活一般有两种方式：引用计数算法和可达性分析算法。</p><h3 id="2-1-标记阶段：引用计数算法"><a href="#2-1-标记阶段：引用计数算法" class="headerlink" title="2.1. 标记阶段：引用计数算法"></a>2.1. 标记阶段：引用计数算法</h3><h4 id="方式一：引用计数算法"><a href="#方式一：引用计数算法" class="headerlink" title="方式一：引用计数算法"></a>方式一：引用计数算法</h4><p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</p><p>对于一个对象 A，只要有任何一个对象引用了 A，则 A 的引用计数器就加 1；当引用失效时，引用计数器就减 1。只要对象 A 的引用计数器的值为 0，即表示对象 A 不可能再被使用，可进行回收。</p><p>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。</p><p>缺点：</p><ul><li>它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。</li><li>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。</li><li>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在 Java 的垃圾回收器中没有使用这类算法。</li></ul><h4 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h4><p>当 p 的指针断开的时候，内部的引用形成一个循环，这就是循环引用</p><p><img src="http://img-md-js.linjsblog.top/img/202305161855913.png" alt="image-20200712102205795"></p><p><strong>举例</strong></p><p>测试 Java 中是否采用的是引用计数算法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefCountGC</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这个成员属性的唯一作用就是占用一点内存</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 引用</span>    <span class="token class-name">Object</span> reference <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RefCountGC</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefCountGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RefCountGC</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefCountGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj1<span class="token punctuation">.</span>reference <span class="token operator">=</span> obj2<span class="token punctuation">;</span>        obj2<span class="token punctuation">.</span>reference <span class="token operator">=</span> obj1<span class="token punctuation">;</span>        obj1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        obj2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 显示的执行垃圾收集行为</span>        <span class="token comment">// 这里发生GC，obj1和obj2是否被回收？</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行结果</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">15490</span>K<span class="token operator">-></span><span class="token function">808K</span><span class="token punctuation">(</span><span class="token number">76288</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">15490</span>K<span class="token operator">-></span><span class="token function">816K</span><span class="token punctuation">(</span><span class="token number">251392</span>K<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述进行了 GC 收集的行为，所以可以证明 JVM 中采用的不是引用计数器的算法</p><p><img src="http://img-md-js.linjsblog.top/img/202305161856554.png" alt="image-20200712103230349"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的 Python，它更是同时支持引用计数和垃圾收集机制。</p><p>具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。</p><p>Java 并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。</p><p>Python 如何解决循环引用？</p><ul><li>手动解除：很好理解，就是在合适的时机，解除引用关系。 使用弱引用 weakref，weakref 是 Python 提供的标准库，旨在解决循环引用。</li></ul><h3 id="2-2-标记阶段：可达性分析算法"><a href="#2-2-标记阶段：可达性分析算法" class="headerlink" title="2.2. 标记阶段：可达性分析算法"></a>2.2. 标记阶段：可达性分析算法</h3><h4 id="可达性分析算法（根搜索算法、追踪性垃圾收集）"><a href="#可达性分析算法（根搜索算法、追踪性垃圾收集）" class="headerlink" title="可达性分析算法（根搜索算法、追踪性垃圾收集）"></a>可达性分析算法（根搜索算法、追踪性垃圾收集）</h4><p>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。</p><p>相较于引用计数算法，这里的可达性分析就是 Java、C#选择的。这种类型的垃圾收集通常也叫作追踪性垃圾收集（Tracing Garbage Collection）</p><p>所谓”GCRoots”根集合就是一组必须活跃的引用。</p><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><ul><li>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。</li><li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）</li><li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li><li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305161859238.png" alt="image-20210511195540451"></p><p><strong>在 Java 语言中，GC Roots 包括以下几类元素：</strong></p><ul><li>虚拟机栈中引用的对象<ul><li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li></ul></li><li>本地方法栈内 JNI（通常说的本地方法）引用的对象</li><li>方法区中类静态属性引用的对象<ul><li>比如：Java 类的引用类型静态变量</li></ul></li><li>方法区中常量引用的对象<ul><li>比如：字符串常量池（String Table）里的引用</li></ul></li><li>所有被同步锁 synchronized 持有的对象</li><li>Java 虚拟机内部的引用。<ul><li>基本数据类型对应的 Class 对象，一些常驻的异常对象（如：NullPointerException、OutOfMemoryError），系统类加载器。</li></ul></li><li>反映 java 虚拟机内部情况的 JMXBean、JVMTI 中注册的回调、本地代码缓存等。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305161900669.png" alt="image-20200712104622677"></p><p>除了这些固定的 GC Roots 集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整 GC Roots 集合。比如：分代收集和局部回收（PartialGC）。</p><p>如果只针对 Java 堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入 GCRoots 集合中去考虑，才能保证可达性分析的准确性。</p><p>小技巧：由于 Root 采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个 Root。</p><p><strong>注意</strong></p><p>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。</p><p>这点也是导致 GC 进行时必须“stop The World”的一个重要原因。</p><ul><li>即使是号称（几乎）不会发生停顿的 CMS 收集器中，枚举根节点时也是必须要停顿的。</li></ul><h3 id="2-3-对象的-finalization-机制"><a href="#2-3-对象的-finalization-机制" class="headerlink" title="2.3. 对象的 finalization 机制"></a>2.3. 对象的 finalization 机制</h3><p>Java 语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。</p><p>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的 finalize()方法。</p><p>finalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</p><p>永远不要主动调用某个对象的 finalize()方法 I 应该交给垃圾回收机制调用。理由包括下面三点：</p><ul><li>在 finalize()时可能会导致对象复活。</li><li>finalize()方法的执行时间是没有保障的，它完全由 GC 线程决定，极端情况下，若不发生 GC，则 finalize()方法将没有执行机会。</li><li>一个糟糕的 finalize()会严重影响 GC 的性能。</li></ul><p>从功能上来说，finalize()方法与 C++中的析构函数比较相似，但是 Java 采用的是基于垃圾回收器的自动内存管理机制，所以 finalize()方法在本质上不同于 C++中的析构函数。</p><p>由于 finalize()方法的存在，虚拟机中的对象一般处于三种可能的状态。</p><h4 id="生存还是死亡？"><a href="#生存还是死亡？" class="headerlink" title="生存还是死亡？"></a>生存还是死亡？</h4><p>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。一个无法触及的对象有可能在某一个条件下“复活”自己，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。如下：</p><ul><li>可触及的：从根节点开始，可以到达这个对象。</li><li>可复活的：对象的所有引用都被释放，但是对象有可能在 finalize()中复活。</li><li>不可触及的：对象的 finalize()被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为finalize()只会被调用一次。</li></ul><p>以上 3 种状态中，是由于 finalize()方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</p><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><p>判定一个对象 objA 是否可回收，至少要经历两次标记过程：</p><ol><li>如果对象 objA 到 GC Roots 没有引用链，则进行第一次标记。</li><li>进行筛选，判断此对象是否有必要执行 finalize()方法</li><li>如果对象 objA 没有重写 finalize()方法，或者 finalize()方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA 被判定为不可触及的。</li><li>如果对象 objA 重写了 finalize()方法，且还未执行过，那么 objA 会被插入到 F-Queue 队列中，由一个虚拟机自动创建的、低优先级的 Finalizer 线程触发其 finalize()方法执行。</li><li>finalize()方法是对象逃脱死亡的最后机会，稍后 GC 会对 F-Queue 队列中的对象进行第二次标记。如果 objA 在 finalize()方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA 会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize 方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的 finalize 方法只会被调用一次。</li></ol><p><strong>举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanReliveObj</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 类变量，属于GC Roots的一部分</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CanReliveObj</span> canReliveObj<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用当前类重写的finalize()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canReliveObj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        canReliveObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanReliveObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canReliveObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------第一次gc操作------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为Finalizer线程的优先级比较低，暂停2秒，以等待它</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>canReliveObj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is still alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------第二次gc操作------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canReliveObj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 下面代码和上面代码是一样的，但是 canReliveObj却自救失败了</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>canReliveObj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is still alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">-----------------第一次gc操作------------调用当前类重写的finalize()方法obj is still alive-----------------第二次gc操作------------obj is dead<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第一次 GC 时，执行了 finalize 方法，但 finalize()方法只会被调用一次，所以第二次该对象被 GC 标记并清除了。</p><h3 id="2-4-MAT-与-JProfiler-的-GC-Roots-溯源"><a href="#2-4-MAT-与-JProfiler-的-GC-Roots-溯源" class="headerlink" title="2.4. MAT 与 JProfiler 的 GC Roots 溯源"></a>2.4. MAT 与 JProfiler 的 GC Roots 溯源</h3><h4 id="MAT-是什么？"><a href="#MAT-是什么？" class="headerlink" title="MAT 是什么？"></a>MAT 是什么？</h4><p>MAT 是 Memory Analyzer 的简称，它是一款功能强大的 Java 堆内存分析器。用于查找内存泄漏以及查看内存消耗情况。</p><p>MAT 是基于 Eclipse 开发的，是一款免费的性能分析工具。</p><p>大家可以在 <a href="http://www.eclipse.org/mat/">http://www.eclipse.org/mat/</a> 下载并使用 MAT</p><h4 id="获取-dump-文件"><a href="#获取-dump-文件" class="headerlink" title="获取 dump 文件"></a>获取 dump 文件</h4><h5 id="方式一：命令行使用-jmap"><a href="#方式一：命令行使用-jmap" class="headerlink" title="方式一：命令行使用 jmap"></a>方式一：命令行使用 jmap</h5><p><img src="http://img-md-js.linjsblog.top/img/202305161939931.png" alt="image-20210512105418987"></p><h5 id="方式二：使用-JVisualVM-导出"><a href="#方式二：使用-JVisualVM-导出" class="headerlink" title="方式二：使用 JVisualVM 导出"></a>方式二：使用 JVisualVM 导出</h5><p>捕获的 heap dump 文件是一个临时文件，关闭 JVisualVM 后自动删除，若要保留，需要将其另存为文件。</p><p>可通过以下方法捕获 heap dump：</p><ul><li><p>在左侧“Application”（应用程序）子窗口中右击相应的应用程序，选择 Heap Dump（堆 Dump）。</p></li><li><p>在 Monitor（监视）子标签页中点击 Heap Dump（堆 Dump）按钮。</p></li></ul><p>本地应用程序的 Heap dumps 作为应用程序标签页的一个子标签页打开。同时，heap dump 在左侧的 Application（应用程序）栏中对应一个含有时间戳的节点。</p><p>右击这个节点选择 save as（另存为）即可将 heap dump 保存到本地。</p><h5 id="方式三：使用-MAT-打开-Dump-文件"><a href="#方式三：使用-MAT-打开-Dump-文件" class="headerlink" title="方式三：使用 MAT 打开 Dump 文件"></a>方式三：使用 MAT 打开 Dump 文件</h5><p><img src="http://img-md-js.linjsblog.top/img/202305161939938.png" alt="image-20200712112512720"></p><h4 id="JProfiler-的-GC-Roots-溯源"><a href="#JProfiler-的-GC-Roots-溯源" class="headerlink" title="JProfiler 的 GC Roots 溯源"></a>JProfiler 的 GC Roots 溯源</h4><p>我们在实际的开发中，一般不会查找全部的 GC Roots，可能只是查找某个对象的整个链路，或者称为 GC Roots 溯源，这个时候，我们就可以使用 JProfiler</p><p><img src="http://img-md-js.linjsblog.top/img/202305161939255.png" alt="image-20200712113256075"></p><h3 id="2-5-清除阶段：标记-清除算法"><a href="#2-5-清除阶段：标记-清除算法" class="headerlink" title="2.5. 清除阶段：标记-清除算法"></a>2.5. 清除阶段：标记-清除算法</h3><p>当成功区分出内存中存活对象和死亡对象后，GC 接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。</p><p>目前在 JVM 中比较常见的三种垃圾收集算法是标记一清除算法（Mark-Sweep）、复制算法（copying）、标记-压缩算法（Mark-Compact）</p><h4 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h4><p>标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被 J.McCarthy 等人在 1960 年提出并并应用于 Lisp 语言。</p><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为 stop the world），然后进行两项工作，第一项则是标记，第二项则是清除</p><ul><li><p>标记：Collector 从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的 Header 中记录为可达对象。</p></li><li><p>清除：Collector 对堆内存从头到尾进行线性的遍历，如果发现某个对象在其 Header 中没有标记为可达对象，则将其回收</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305162107900.png" alt="image-20200712150935078"></p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>标记清除算法的效率不算高</li><li>在进行 GC 的时候，需要停止整个应用程序，用户体验较差</li><li>这种方式清理出来的空闲内存是不连续的，产生内碎片，<strong>需要维护一个空闲列表</strong></li></ul><h4 id="何为清除？"><a href="#何为清除？" class="headerlink" title="何为清除？"></a>何为清除？</h4><p>这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。</p><h3 id="2-6-清除阶段：复制算法"><a href="#2-6-清除阶段：复制算法" class="headerlink" title="2.6. 清除阶段：复制算法"></a>2.6. 清除阶段：复制算法</h3><h4 id="复制（Copying）算法"><a href="#复制（Copying）算法" class="headerlink" title="复制（Copying）算法"></a>复制（Copying）算法</h4><p>为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky 于 1963 年发表了著名的论文，“使用双存储区的 Lisp 语言垃圾收集器 CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky 在该论文中描述的算法被人们称为复制（Copying）算法，它也被 M.L.Minsky 本人成功地引入到了 Lisp 语言的一个实现版本中。</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p><p><img src="http://img-md-js.linjsblog.top/img/202305162110915.png" alt="image-20200712151916991"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>没有标记和清除过程，实现简单，运行高效</li><li>复制过去以后保证空间的连续性，不会出现“碎片”问题。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>此算法的缺点也是很明显的，就是需要两倍的内存空间。</li><li>对于 G1 这种分拆成为大量 region 的 GC，复制而不是移动，意味着 GC 需要维护 region 之间对象引用关系，不管是内存占用或者时间开销也不小</li></ul><h4 id="特别的"><a href="#特别的" class="headerlink" title="特别的"></a>特别的</h4><p>如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，或者说非常低才行</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>在<strong>新生代</strong>，对常规应用的垃圾回收，一次通常可以回收 70% - 99% 的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。</p><p><img src="http://img-md-js.linjsblog.top/img/202305162109791.png" alt="image-20200712152847218"></p><h3 id="2-7-清除阶段：标记-压缩（整理）算法"><a href="#2-7-清除阶段：标记-压缩（整理）算法" class="headerlink" title="2.7. 清除阶段：标记-压缩（整理）算法"></a>2.7. 清除阶段：标记-压缩（整理）算法</h3><h4 id="标记-压缩（或标记-整理、Mark-Compact）算法"><a href="#标记-压缩（或标记-整理、Mark-Compact）算法" class="headerlink" title="标记-压缩（或标记-整理、Mark-Compact）算法"></a>标记-压缩（或标记-整理、Mark-Compact）算法</h4><p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。</p><p><strong>标记一清除算法的确可以应用在老年代中</strong>，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以 JVM 的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。</p><p>1970 年前后，G.L.Steele、C.J.Chene 和 D.s.Wise 等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。</p><h4 id="执行过程-1"><a href="#执行过程-1" class="headerlink" title="执行过程"></a>执行过程</h4><ol><li><p>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</p></li><li><p>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。</p></li><li><p>之后，清理边界外所有的空间。</p></li></ol><p><img src="http://img-md-js.linjsblog.top/img/202305162112472.png" alt="image-20200712153236508"></p><p>标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。</p><p>二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p><h4 id="指针碰撞（Bump-the-Pointer）"><a href="#指针碰撞（Bump-the-Pointer）" class="headerlink" title="指针碰撞（Bump the Pointer）"></a>指针碰撞（Bump the Pointer）</h4><p>如果内存空间以规整和有序的方式分布，即已用和未用的内存都各自一边，彼此之间维系着一个记录下一次分配起始点的标记指针，当为新对象分配内存时，只需要通过修改指针的偏移量将新对象分配在第一个空闲内存位置上，这种分配方式就叫做指针碰撞（Bump tHe Pointer）。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可。</li><li>消除了复制算法当中，内存减半的高额代价。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>从效率上来说，标记-整理算法要低于复制算法。</li><li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址</li><li>移动过程中，需要全程暂停用户应用程序。即：STW</li></ul><h3 id="2-8-小结"><a href="#2-8-小结" class="headerlink" title="2.8. 小结"></a>2.8. 小结</h3><p>Mark-Sweep</p><p>Mark-Compact</p><p>Copying</p><p><strong>速率</strong></p><p>中等</p><p>最慢</p><p>最快</p><p><strong>空间开销</strong></p><p>少（但会堆积碎片）</p><p>少（不堆积碎片）</p><p>通常需要活对象的 2 倍空间（不堆积碎片）</p><p><strong>移动对象</strong></p><p>否</p><p>是</p><p>是</p><p>效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。</p><p>而为了尽量兼顾上面提到的三个指标，标记-整理算法相对来说更平滑一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段</p><p>难道就没有一种最优算法吗？</p><p>回答：无，没有最好的算法，只有最合适的算法。</p><p><img src="http://img-md-js.linjsblog.top/img/202305162138086.png" alt="image-20210512104415281"></p><h3 id="2-9-分代收集算法"><a href="#2-9-分代收集算法" class="headerlink" title="2.9. 分代收集算法"></a>2.9. 分代收集算法</h3><p>前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</p><p>分代收集算法，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。</p><p>在 Java 程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关，比如Http 请求中的 Session 对象、线程、Socket 连接，这类对象跟业务直接挂钩，因此生命周期比较长。但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：String 对象，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。</p><p>目前几乎所有的 GC 都采用分代手机算法执行垃圾回收的。</p><p>在 HotSpot 中，基于分代的概念，GC 所使用的内存回收算法必须结合年轻代和老年代各自的特点。</p><h4 id="年轻代（Young-Gen）"><a href="#年轻代（Young-Gen）" class="headerlink" title="年轻代（Young Gen）"></a>年轻代（Young Gen）</h4><p>年轻代特点：<strong>区域相对老年代较小</strong>，<strong>对象生命周期短、存活率低，回收频繁</strong>。</p><p>这种情况<strong>复制算法</strong>的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过 hotspot 中的<strong>两个 survivor</strong> 的设计得到缓解。</p><h4 id="老年代（Tenured-Gen）"><a href="#老年代（Tenured-Gen）" class="headerlink" title="老年代（Tenured Gen）"></a>老年代（Tenured Gen）</h4><p>老年代特点：<strong>区域较大，对象生命周期长、存活率高</strong>，<strong>回收不及年轻代频繁</strong>。</p><p>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由<strong>标记-清除或者是标记-清除与标记-整理的混合实现</strong>。</p><ul><li>Mark 阶段的开销与存活对象的数量成正比。</li><li>Sweep 阶段的开销与所管理区域的大小成正相关。</li><li>Compact 阶段的开销与存活对象的数据成正比。</li></ul><p>以 HotSpot 中的 CMS 回收器为例，CMS 是基于 Mark-Sweep 实现的，对于对象的回收效率很高。而对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial Old 回收器作为补偿措施：当内存回收不佳（碎片导致的 Concurrent Mode Failure 时），将采用 Serial Old 执行 Full GC 以达到对老年代内存的整理。</p><p>分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代</p><h3 id="2-X-增量收集算法、分区算法"><a href="#2-X-增量收集算法、分区算法" class="headerlink" title="2.X. 增量收集算法、分区算法"></a>2.X. 增量收集算法、分区算法</h3><h4 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h4><p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种 Stop the World 的状态。在 Stop the World 状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p><h5 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h5><p>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</p><p>总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</p><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p><h4 id="分区算法"><a href="#分区算法" class="headerlink" title="分区算法"></a>分区算法</h4><p>一般来说，在相同条件下，堆空间越大，一次 Gc 时所需要的时间就越长，有关 GC 产生的停顿也越长。为了更好地控制 GC 产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次 GC 所产生的停顿。</p><p>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。</p><p>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p><p><img src="http://img-md-js.linjsblog.top/img/202305162145429.png" alt="image-20200712165318590"></p><h4 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h4><p>注意，这些只是基本的算法思路，实际 GC 实现过程要复杂的多，目前还在发展中的前沿 GC 都是复合算法，并且并行和并发兼备。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(九) StringTable</title>
      <link href="/2023/05/16/%E4%B9%9D-stringtable/"/>
      <url>/2023/05/16/%E4%B9%9D-stringtable/</url>
      
        <content type="html"><![CDATA[<h1 id="九-StringTable"><a href="#九-StringTable" class="headerlink" title="(九) StringTable"></a>(九) StringTable</h1><h2 id="1-String-的基本特性"><a href="#1-String-的基本特性" class="headerlink" title="1. String 的基本特性"></a>1. String 的基本特性</h2><ul><li>String：字符串，使用一对””引起来表示</li><li>String 声明为 final 的，不可被继承</li><li>String 实现了 Serializable 接口：表示字符串是支持序列化的。</li><li>String 实现了 Comparable 接口：表示 string 可以比较大小</li><li>String 在 jdk8 及以前内部定义了 final char[] value 用于存储字符串数据。JDK9 时改为 byte[]</li></ul><h3 id="1-1-String-在-jdk9-中存储结构变更"><a href="#1-1-String-在-jdk9-中存储结构变更" class="headerlink" title="1.1. String 在 jdk9 中存储结构变更"></a>1.1. String 在 jdk9 中存储结构变更</h3><p>官网地址：<a href="http://openjdk.java.net/jeps/254">JEP 254: Compact Strings (java.net)</a></p><blockquote><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>The current implementation of the <code>String</code> class stores characters in a <code>char</code> array, using two bytes (sixteen bits) for each character. Data gathered from many different applications indicates that strings are a major component of heap usage and, moreover, that most <code>String</code> objects contain only Latin-1 characters. Such characters require only one byte of storage, hence half of the space in the internal <code>char</code> arrays of such <code>String</code> objects is going unused.</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We propose to change the internal representation of the <code>String</code> class from a UTF-16 <code>char</code> array to a <code>byte</code> array plus an encoding-flag field. The new <code>String</code> class will store characters encoded either as ISO-8859-1&#x2F;Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</p><p>String-related classes such as <code>AbstractStringBuilder</code>, <code>StringBuilder</code>, and <code>StringBuffer</code> will be updated to use the same representation, as will the HotSpot VM’s intrinsic string operations.</p><p>This is purely an implementation change, with no changes to existing public interfaces. There are no plans to add any new public APIs or other interfaces.</p><p>The prototyping work done to date confirms the expected reduction in memory footprint, substantial reductions of GC activity, and minor performance regressions in some corner cases.</p></blockquote><p><strong>动机</strong></p><p>目前 String 类的实现将字符存储在一个 char 数组中，每个字符使用两个字节（16 位）。从许多不同的应用中收集到的数据表明，字符串是堆使用的主要组成部分，此外，大多数字符串对象只包含 Latin-1 字符。这些字符只需要一个字节的存储空间，因此这些字符串对象的内部字符数组中有一半的空间没有被使用。</p><p><strong>说明</strong></p><p>我们建议将 String 类的内部表示方法从 UTF-16 字符数组改为字节数组加编码标志域。新的 String 类将根据字符串的内容，以 ISO-8859-1&#x2F;Latin-1（每个字符一个字节）或 UTF-16（每个字符两个字节）的方式存储字符编码。编码标志将表明使用的是哪种编码。</p><hr><p>与字符串相关的类，如AbstractStringBuilder、StringBuilder 和 StringBuffer 将被更新以使用相同的表示方法，HotSpot VM 的内在字符串操作也是如此。</p><p>这纯粹是一个实现上的变化，对现有的公共接口没有变化。目前没有计划增加任何新的公共 API 或其他接口。</p><p>迄今为止所做的原型设计工作证实了内存占用的预期减少，GC 活动的大幅减少，以及在某些角落情况下的轻微性能倒退。</p><p>结论：String 再也不用 char[] 来存储了，改成了 byte [] 加上编码标记，节约了一些空间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Stable</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-String-的基本特性"><a href="#1-2-String-的基本特性" class="headerlink" title="1.2. String 的基本特性"></a>1.2. String 的基本特性</h3><p>String：代表不可变的字符序列。简称：不可变性。</p><ul><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的 value 进行赋值。</li><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</li><li>当调用 string 的 replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</li></ul><p>通过字面量的方式（区别于 new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</p><p>字符串常量池是不会存储相同内容的字符串的</p><p>String 的 String Pool 是一个固定大小的 Hashtable，默认值大小长度是 1009。如果放进 String Pool 的 String 非常多，就会造成 Hash 冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用 String.intern 时性能会大幅下降。</p><p>使用<code>-XX:StringTablesize</code>可设置 StringTable 的长度</p><ul><li><p>在 jdk6 中 StringTable 是固定的，就是 1009 的长度，所以如果常量池中的字符串过多就会导致效率下降很快。StringTablesize 设置没有要求</p></li><li><p>在 jdk7 中，StringTable 的长度默认值是 60013，StringTablesize 设置没有要求</p></li><li><p>在 JDK8 中，设置 StringTable 长度的话，1009 是可以设置的最小值</p></li></ul><h2 id="2-String-的内存分配"><a href="#2-String-的内存分配" class="headerlink" title="2. String 的内存分配"></a>2. String 的内存分配</h2><p>在 Java 语言中有 8 种基本数据类型和一种比较特殊的类型 String。这些类型为了使它们在运行过程中速度更快、更节省内存，都提供了一种常量池的概念。</p><p>常量池就类似一个 Java 系统级别提供的缓存。8 种基本数据类型的常量池都是系统协调的，String 类型的常量池比较特殊。它的主要使用方法有两种。</p><ul><li><p>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</p></li><li><p>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern()方法。这个后面重点谈</p></li></ul><p>Java 6 及以前，字符串常量池存放在永久代</p><p>Java 7 中 Oracle 的工程师对字符串池的逻辑做了很大的改变，即将字符串常量池的位置调整到 Java 堆内</p><ul><li><p>所有的字符串都保存在堆（Heap）中，和其他普通对象一样，这样可以让你在进行调优应用时仅需要调整堆大小就可以了。</p></li><li><p>字符串常量池概念原本使用得比较多，但是这个改动使得我们有足够的理由让我们重新考虑在 Java 7 中使用<code>String.intern()</code>。</p></li></ul><p>Java8 元空间，字符串常量在堆</p><p><img src="http://img-md-js.linjsblog.top/img/202305152124724.png" alt="image-20200711093546398"></p><p><img src="http://img-md-js.linjsblog.top/img/202305152124741.png" alt="image-20200711093558709"></p><p><strong>StringTable 为什么要调整？</strong></p><p>官网地址：<a href="https://www.oracle.com/java/technologies/javase/jdk7-relnotes.html#jdk7changes">Java SE 7 Features and Enhancements (oracle.com)</a></p><blockquote><p><strong>Synopsis:</strong> In JDK 7, interned strings are no longer allocated in the permanent generation of the Java heap, but are instead allocated in the main part of the Java heap (known as the young and old generations), along with the other objects created by the application. This change will result in more data residing in the main Java heap, and less data in the permanent generation, and thus may require heap sizes to be adjusted. Most applications will see only relatively small differences in heap usage due to this change, but larger applications that load many classes or make heavy use of the <code>String.intern()</code> method will see more significant differences.</p></blockquote><p>简介：在 JDK 7 中，内部字符串不再分配在 Java 堆的永久代中，而是分配在 Java 堆的主要部分（称为年轻代和老年代），与应用程序创建的其他对象一起。这种变化将导致更多的数据驻留在主 Java 堆中，而更少的数据在永久代中，因此可能需要调整堆的大小。大多数应用程序将看到由于这一变化而导致的堆使用的相对较小的差异，但加载许多类或大量使用 String.intern()方法的大型应用程序将看到更明显的差异。</p><p><strong>StringTable 为什么要调整？</strong></p><p>官网地址：<a href="https://www.oracle.com/java/technologies/javase/jdk7-relnotes.html#jdk7changes">Java SE 7 Features and Enhancements (oracle.com)</a></p><blockquote><p><strong>Synopsis:</strong> In JDK 7, interned strings are no longer allocated in the permanent generation of the Java heap, but are instead allocated in the main part of the Java heap (known as the young and old generations), along with the other objects created by the application. This change will result in more data residing in the main Java heap, and less data in the permanent generation, and thus may require heap sizes to be adjusted. Most applications will see only relatively small differences in heap usage due to this change, but larger applications that load many classes or make heavy use of the <code>String.intern()</code> method will see more significant differences.</p></blockquote><p>简介：在 JDK 7 中，内部字符串不再分配在 Java 堆的永久代中，而是分配在 Java 堆的主要部分（称为年轻代和老年代），与应用程序创建的其他对象一起。这种变化将导致更多的数据驻留在主 Java 堆中，而更少的数据在永久代中，因此可能需要调整堆的大小。大多数应用程序将看到由于这一变化而导致的堆使用的相对较小的差异，但加载许多类或大量使用 String.intern()方法的大型应用程序将看到更明显的差异。</p><h2 id="3-String-的基本操作"><a href="#3-String-的基本操作" class="headerlink" title="3. String 的基本操作"></a>3. String 的基本操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2321</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2330</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2321</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2322</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2330</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java 语言规范里要求完全相同的字符串字面量，应该包含同样的 Unicode 字符序列（包含同一份码点序列的常量），并且必须是指向同一个 String 类实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Memory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//line 1</span>        <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//line 2</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//line 3</span>        <span class="token class-name">Memory</span> mem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Line 4</span>        mem<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Line 5</span>    <span class="token punctuation">&#125;</span><span class="token comment">//Line 9</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//line 6</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//line 7</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//Line 8</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202305152131804.png" alt="image-20210511111607132"></p><h2 id="4-字符串拼接操作"><a href="#4-字符串拼接操作" class="headerlink" title="4. 字符串拼接操作"></a>4. 字符串拼接操作</h2><ul><li>常量与常量的拼接结果在常量池，原理是编译期优化</li><li>常量池中不会存在相同内容的变量</li><li>只要其中有一个是变量，结果就在堆中。变量拼接的原理是 StringBuilder</li><li>如果拼接的结果调用 intern()方法，则主动将常量池中还没有的字符串对象放入池中，并返回此对象地址</li></ul><p><strong>举例 1</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 都是常量，前端编译期会进行代码优化</span>    <span class="token comment">// 通过idea直接看对应的反编译的class文件，会显示 String s1 = "abc"; 说明做了代码优化</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token comment">// true，有上述可知，s1和s2实际上指向字符串常量池中的同一个值</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例 2</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token comment">//如果拼接符号的前后出现了变量，则相当于在堆空间中new String(), 具体内容为拼接的结果</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 编译期优化</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false s1是变量，不能编译期优化</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false s2是变量，不能编译期优化</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false s1、s2都是变量</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false s5、s6 不同的对象实例</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false s5、s7 不同的对象实例</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false s6、s7 不同的对象实例</span>    <span class="token class-name">String</span> s8 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true intern之后，s8和s3一样，指向字符串常量池中的"javaEEhadoop"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例 3</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s0 <span class="token operator">=</span> <span class="token string">"beijing"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"bei"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"jing"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s0 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false s3指向对象实例，s0指向字符串常量池中的"beijing"</span>    <span class="token class-name">String</span> s7 <span class="token operator">=</span> <span class="token string">"shanxi"</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"shan"</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"xi"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s6 <span class="token operator">=</span> s4 <span class="token operator">+</span> s5<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true s4和s5是final修饰的，编译期就能确定s6的值了</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不使用 final 修饰，即为变量。如 s3 行的 s1 和 s2，会通过 new StringBuilder 进行拼接</li><li>使用 final 修饰，即为常量。会在编译器进行代码优化。在实际开发中，能够使用 final 的，尽量使用</li></ul><p><strong>举例 4</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字节码</strong></p><p>我们拿例 4 的字节码进行查看，可以发现<code>s1 + s2</code>实际上是 new 了一个 StringBuilder 对象，并使用了 append 方法将 s1 和 s2 添加进来，最后调用了 toString 方法赋给 s4</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token number">0</span> ldc <span class="token comment">#2 &lt;a></span> <span class="token number">2</span> astore_1 <span class="token number">3</span> ldc <span class="token comment">#3 &lt;b></span> <span class="token number">5</span> astore_2 <span class="token number">6</span> ldc <span class="token comment">#4 &lt;ab></span> <span class="token number">8</span> astore_3 <span class="token number">9</span> new <span class="token comment">#5 &lt;java/lang/StringBuilder></span><span class="token number">12</span> dup<span class="token number">13</span> invokespecial <span class="token comment">#6 &lt;java/lang/StringBuilder.&lt;init>></span><span class="token number">16</span> aload_1<span class="token number">17</span> invokevirtual <span class="token comment">#7 &lt;java/lang/StringBuilder.append></span><span class="token number">20</span> aload_2<span class="token number">21</span> invokevirtual <span class="token comment">#7 &lt;java/lang/StringBuilder.append></span><span class="token number">24</span> invokevirtual <span class="token comment">#8 &lt;java/lang/StringBuilder.toString></span><span class="token number">27</span> astore <span class="token number">4</span><span class="token number">29</span> getstatic <span class="token comment">#9 &lt;java/lang/System.out></span><span class="token number">32</span> aload_3<span class="token number">33</span> aload <span class="token number">4</span><span class="token number">35</span> if_acmpne <span class="token number">42</span> <span class="token punctuation">(</span>+7<span class="token punctuation">)</span><span class="token number">38</span> iconst_1<span class="token number">39</span> goto <span class="token number">43</span> <span class="token punctuation">(</span>+4<span class="token punctuation">)</span><span class="token number">42</span> iconst_0<span class="token number">43</span> invokevirtual <span class="token comment">#10 &lt;java/io/PrintStream.println></span><span class="token number">46</span> <span class="token builtin class-name">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串拼接操作性能对比</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>        <span class="token comment">// String</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testString</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// StringBuilder</span>        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testStringBuilder</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// StringBuffer</span>        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testStringBuffer</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            str <span class="token operator">+=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStringBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 结果</span><span class="token class-name">String</span><span class="token operator">:</span> <span class="token number">7963</span>ms<span class="token class-name">StringBuilder</span><span class="token operator">:</span> <span class="token number">1</span>ms<span class="token class-name">StringBuffer</span><span class="token operator">:</span> <span class="token number">4</span>ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本实验进行 5 万次循环，String 拼接方式的时间是 StringBuilder.append 方式的约 8000 倍，StringBuffer.append()方式的时间是 StringBuilder.append()方式的约 4 倍</p><p>可以看到，通过 StringBuilder 的 append 方式的速度，要比直接对 String 使用“+”拼接的方式快的不是一点半点</p><p>那么，在实际开发中，对于需要多次或大量拼接的操作，在不考虑线程安全问题时，我们就应该尽可能使用 StringBuilder 进行 append 操作</p><p>除此之外，还有那些操作能够帮助我们提高字符串方面的运行效率呢？</p><p>StringBuilder 空参构造器的初始化大小为 16。那么，如果提前知道需要拼接 String 的个数，就应该直接使用带参构造器指定 capacity，以减少扩容的次数（扩容的逻辑可以自行查看源代码）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Constructs a string builder with no characters in it and an * initial capacity of 16 characters. */</span><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Constructs a string builder with no characters in it and an * initial capacity specified by the &#123;@code capacity&#125; argument. * * @param      capacity  the initial capacity. * @throws     NegativeArraySizeException  if the &#123;@code capacity&#125; *               argument is less than &#123;@code 0&#125;. */</span><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-intern-的使用"><a href="#5-intern-的使用" class="headerlink" title="5. intern()的使用"></a>5. intern()的使用</h2><p>官方 API 文档中的解释</p><blockquote><p>public String intern()</p><p>Returns a canonical representation for the string object.</p><p>A pool of strings, initially empty, is maintained privately by the class <code>String</code>.</p><p>When the intern method is invoked, if the pool already contains a string equal to this <code>String</code> object as determined by the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-"><code>equals(Object)</code></a> method, then the string from the pool is returned. Otherwise, this <code>String</code> object is added to the pool and a reference to this <code>String</code> object is returned.</p><p>It follows that for any two strings <code>s</code> and <code>t</code>, <code>s.intern() == t.intern()</code> is <code>true</code> if and only if <code>s.equals(t)</code> is <code>true</code>.</p><p>All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java™ Language Specification.</p><ul><li><p><strong>Returns:</strong></p><p>a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.</p></li></ul></blockquote><p>当调用 intern 方法时，如果池子里已经包含了一个与这个 String 对象相等的字符串，正如 equals(Object)方法所确定的，那么池子里的字符串会被返回。否则，这个 String 对象被添加到池中，并返回这个 String 对象的引用。</p><p>由此可见，对于任何两个字符串 s 和 t，当且仅当 s.equals(t)为真时，s.intern() &#x3D;&#x3D; t.intern()为真。</p><p>所有字面字符串和以字符串为值的常量表达式都是 interned。</p><p>返回一个与此字符串内容相同的字符串，但保证是来自一个唯一的字符串池。</p><hr><p>intern 是一个 native 方法，调用的是底层 C 的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token class-name">String</span> <span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法，它会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> myInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"I love atguigu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说，如果在任意字符串上调用 String.intern 方法，那么其返回结果所指向的那个类实例，必须和直接以常量形式出现的字符串实例完全相同。因此，下列表达式的值必定是 true</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">+</span><span class="token string">"b"</span><span class="token operator">+</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通俗点讲，Interned string 就是确保字符串在内存里只有一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度。注意，这个值会被存放在字符串内部池（String Intern Pool）</p><p><img src="http://img-md-js.linjsblog.top/img/202305152216979.png" alt="image-20210511145542579"></p><h3 id="5-1-intern-的使用：JDK6-vs-JDK7-8"><a href="#5-1-intern-的使用：JDK6-vs-JDK7-8" class="headerlink" title="5.1. intern 的使用：JDK6 vs JDK7&#x2F;8"></a>5.1. intern 的使用：JDK6 vs JDK7&#x2F;8</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * ① String s = new String("1") * 创建了两个对象 *      堆空间中一个new对象 *      字符串常量池中一个字符串常量"1"（注意：此时字符串常量池中已有"1"） * ② s.intern()由于字符串常量池中已存在"1" *  * s  指向的是堆空间中的对象地址 * s2 指向的是堆空间中常量池中"1"的地址 * 所以不相等 */</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jdk1.6 false jdk7/8 false</span><span class="token comment">/* * ① String s3 = new String("1") + new String("1") * 等价于new String（"11"），但是，常量池中并不生成字符串"11"； * * ② s3.intern() * 由于此时常量池中并无"11"，所以把s3中记录的对象的地址存入常量池 * 所以s3 和 s4 指向的都是一个地址*/</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token operator">==</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//jdk1.6 false jdk7/8 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202305152247346.png" alt="image-20210511152240683"></p><p><img src="http://img-md-js.linjsblog.top/img/202305152247177.png" alt="image-20200711145925091"></p><p>总结 String 的 intern()的使用：</p><p>JDK1.6 中，将这个字符串对象尝试放入串池。</p><ul><li>如果串池中有，则并不会放入。返回已有的串池中的对象的地址</li><li>如果没有，会把此对象复制一份，放入串池，并返回串池中的对象地址</li></ul><p>JDK1.7 起，将这个字符串对象尝试放入串池。</p><ul><li>如果串池中有，则并不会放入。返回已有的串池中的对象的地址</li><li>如果没有，则会把对象的引用地址复制一份，放入串池，并返回串池中的引用地址</li></ul><p><strong>练习 1</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305152343363.png" alt="image-20200711150859709"></p><p><img src="http://img-md-js.linjsblog.top/img/202305152343690.png" alt="image-20200711151326909"></p><p><strong>练习 2</strong> <img src="http://img-md-js.linjsblog.top/img/202305152343312.png" alt="image-20200711151433277"></p><h3 id="5-2-intern-的效率测试：空间角度"><a href="#5-2-intern-的效率测试：空间角度" class="headerlink" title="5.2. intern 的效率测试：空间角度"></a>5.2. intern 的效率测试：空间角度</h3><p>我们通过测试一下，使用了 intern 和不使用的时候，其实相差还挺多的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringIntern2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_COUNT</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token constant">MAX_COUNT</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// arr[i] = new String(String.valueOf(data[i%data.length]));</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token operator">%</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行结果</span>不使用intern：<span class="token number">7256</span>ms使用intern：<span class="token number">1395</span>ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论</strong>：对于程序中大量使用存在的字符串时，尤其存在很多已经重复的字符串时，使用 intern()方法能够节省内存空间。</p><p>大的网站平台，需要内存中存储大量的字符串。比如社交网站，很多人都存储：北京市、海淀区等信息。这时候如果字符串都调用 intern()方法，就会很明显降低内存的大小。</p><h2 id="6-StringTable-的垃圾回收"><a href="#6-StringTable-的垃圾回收" class="headerlink" title="6. StringTable 的垃圾回收"></a>6. StringTable 的垃圾回收</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringGCTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * -Xms15m -Xmx15m -XX:+PrintGCDetails     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">4096</span>K<span class="token operator">-></span><span class="token function">504K</span><span class="token punctuation">(</span><span class="token number">4608</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">4096</span>K<span class="token operator">-></span><span class="token function">1689K</span><span class="token punctuation">(</span><span class="token number">15872</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0581583</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.06</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">4600</span>K<span class="token operator">-></span><span class="token function">504K</span><span class="token punctuation">(</span><span class="token number">4608</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">5785</span>K<span class="token operator">-></span><span class="token function">2310K</span><span class="token punctuation">(</span><span class="token number">15872</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0015621</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">Allocation</span> <span class="token class-name">Failure</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token class-name">PSYoungGen</span><span class="token operator">:</span> <span class="token number">4600</span>K<span class="token operator">-></span><span class="token function">504K</span><span class="token punctuation">(</span><span class="token number">4608</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">6406</span>K<span class="token operator">-></span><span class="token function">2350K</span><span class="token punctuation">(</span><span class="token number">15872</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0034849</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token class-name">Times</span><span class="token operator">:</span> user<span class="token operator">=</span><span class="token number">0.00</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> real<span class="token operator">=</span><span class="token number">0.00</span> secs<span class="token punctuation">]</span> <span class="token class-name">Heap</span> <span class="token class-name">PSYoungGen</span>      total <span class="token number">4608</span>K<span class="token punctuation">,</span> used <span class="token number">1919</span>K <span class="token punctuation">[</span><span class="token number">0x00000000ffb00000</span><span class="token punctuation">,</span> <span class="token number">0x0000000100000000</span><span class="token punctuation">,</span> <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>  eden space <span class="token number">4096</span>K<span class="token punctuation">,</span> <span class="token number">34</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ffb00000</span><span class="token punctuation">,</span><span class="token number">0x00000000ffc61d30</span><span class="token punctuation">,</span><span class="token number">0x00000000fff00000</span><span class="token punctuation">)</span>  from space <span class="token number">512</span>K<span class="token punctuation">,</span> <span class="token number">98</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fff00000</span><span class="token punctuation">,</span><span class="token number">0x00000000fff7e010</span><span class="token punctuation">,</span><span class="token number">0x00000000fff80000</span><span class="token punctuation">)</span>  <span class="token keyword">to</span>   <span class="token namespace">space</span> <span class="token number">512</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fff80000</span><span class="token punctuation">,</span><span class="token number">0x00000000fff80000</span><span class="token punctuation">,</span><span class="token number">0x0000000100000000</span><span class="token punctuation">)</span> <span class="token class-name">ParOldGen</span>       total <span class="token number">11264</span>K<span class="token punctuation">,</span> used <span class="token number">1846</span>K <span class="token punctuation">[</span><span class="token number">0x00000000ff000000</span><span class="token punctuation">,</span> <span class="token number">0x00000000ffb00000</span><span class="token punctuation">,</span> <span class="token number">0x00000000ffb00000</span><span class="token punctuation">)</span>  object space <span class="token number">11264</span>K<span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000ff000000</span><span class="token punctuation">,</span><span class="token number">0x00000000ff1cd9b0</span><span class="token punctuation">,</span><span class="token number">0x00000000ffb00000</span><span class="token punctuation">)</span> <span class="token class-name">Metaspace</span>       used <span class="token number">3378</span>K<span class="token punctuation">,</span> capacity <span class="token number">4496</span>K<span class="token punctuation">,</span> committed <span class="token number">4864</span>K<span class="token punctuation">,</span> reserved <span class="token number">1056768</span>K  <span class="token keyword">class</span> space    used <span class="token number">361</span>K<span class="token punctuation">,</span> capacity <span class="token number">388</span>K<span class="token punctuation">,</span> committed <span class="token number">512</span>K<span class="token punctuation">,</span> reserved <span class="token number">1048576</span>K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-G1-中的-String-去重操作"><a href="#7-G1-中的-String-去重操作" class="headerlink" title="7. G1 中的 String 去重操作"></a>7. G1 中的 String 去重操作</h2><p>官网地址：<a href="http://openjdk.java.net/jeps/192">JEP 192: String Deduplication in G1 (java.net)</a></p><blockquote><h2 id="Motivation-1"><a href="#Motivation-1" class="headerlink" title="Motivation"></a>Motivation</h2><p>Many large-scale Java applications are currently bottlenecked on memory. Measurements have shown that roughly 25% of the Java heap live data set in these types of applications is consumed by <code>String</code> objects. Further, roughly half of those <code>String</code> objects are duplicates, where duplicates means <code>string1.equals(string2)</code> is true. Having duplicate <code>String</code> objects on the heap is, essentially, just a waste of memory. This project will implement automatic and continuous <code>String</code> deduplication in the G1 garbage collector to avoid wasting memory and reduce the memory footprint.</p></blockquote><p>目前，许多大规模的 Java 应用程序在内存上遇到了瓶颈。测量表明，在这些类型的应用程序中，大约 25%的 Java 堆实时数据集被<code>String&#39;对象所消耗。此外，这些 &quot;String &quot;对象中大约有一半是重复的，其中重复意味着 &quot;string1.equals(string2) &quot;是真的。在堆上有重复的</code>String’对象，从本质上讲，只是一种内存的浪费。这个项目将在 G1 垃圾收集器中实现自动和持续的`String’重复数据删除，以避免浪费内存，减少内存占用。</p><hr><p>注意这里说的重复，指的是在堆中的数据，而不是常量池中的，因为常量池中的本身就不会重复</p><p>背景：对许多 Java 应用（有大的也有小的）做的测试得出以下结果：</p><ul><li>堆存活数据集合里面 string 对象占了 25%</li><li>堆存活数据集合里面重复的 string 对象有 13.5%</li><li>string 对象的平均长度是 45</li></ul><p>许多大规模的 Java 应用的瓶颈在于内存，测试表明，在这些类型的应用里面，Java 堆中存活的数据集合差不多 25%是 String 对象。更进一步，这里面差不多一半 string 对象是重复的，重复的意思是说： <code>stringl.equals(string2)= true</code>。堆上存在重复的 String 对象必然是一种内存的浪费。这个项目将在 G1 垃圾收集器中实现自动持续对重复的 string 对象进行去重，这样就能避免浪费内存。</p><p><strong>实现</strong></p><ol><li>当垃圾收集器工作的时候，会访问堆上存活的对象。对每一个访问的对象都会检查是否是候选的要去重的 String 对象</li><li>如果是，把这个对象的一个引用插入到队列中等待后续的处理。一个去重的线程在后台运行，处理这个队列。处理队列的一个元素意味着从队列删除这个元素，然后尝试去重它引用的 string 对象。</li><li>使用一个 hashtable 来记录所有的被 String 对象使用的不重复的 char 数组。当去重的时候，会查这个 hashtable，来看堆上是否已经存在一个一模一样的 char 数组。</li><li>如果存在，String 对象会被调整引用那个数组，释放对原来的数组的引用，最终会被垃圾收集器回收掉。</li><li>如果查找失败，char 数组会被插入到 hashtable，这样以后的时候就可以共享这个数组了。</li></ol><p><strong>命令行选项</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启String去重，默认是不开启的，需要手动开启。 UseStringDeduplication(bool)  # 打印详细的去重统计信息 PrintStringDeduplicationStatistics(bool)  # 达到这个年龄的String对象被认为是去重的候选对象StringpeDuplicationAgeThreshold(uintx)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>（八） 执行引擎</title>
      <link href="/2023/05/15/%EF%BC%88%E5%85%AB%EF%BC%89-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
      <url>/2023/05/15/%EF%BC%88%E5%85%AB%EF%BC%89-%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="（八）-执行引擎"><a href="#（八）-执行引擎" class="headerlink" title="（八） 执行引擎"></a>（八） 执行引擎</h1><h2 id="1-执行引擎概述"><a href="#1-执行引擎概述" class="headerlink" title="1. 执行引擎概述"></a>1. 执行引擎概述</h2><p>执行引擎属于 JVM 的下层，里面包括解释器、及时编译器、垃圾回收器</p><p><img src="http://img-md-js.linjsblog.top/img/202305151708335.png" alt="image-20200710080707873"></p><p>执行引擎是 Java 虚拟机核心的组成部分之一。</p><p>“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。</p><p>JVM 的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被 JVM 所识别的字节码指令、符号表，以及其他辅助信息。</p><p><img src="http://img-md-js.linjsblog.top/img/202305151708544.png" alt="image-20200710081118053"></p><p>那么，如果想要让一个 Java 程序运行起来，执行引擎（Execution Engine）的任务就是将字节码指令解释&#x2F;编译为对应平台上的本地机器指令.才可以。简单来说，JVM 中的执行引擎充当了将高级语言翻译为机器语言的译者。</p><p><img src="http://img-md-js.linjsblog.top/img/202305151710603.png"></p><h3 id="1-1-执行引擎的工作流程"><a href="#1-1-执行引擎的工作流程" class="headerlink" title="1.1. 执行引擎的工作流程"></a>1.1. 执行引擎的工作流程</h3><ol><li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于 PC 寄存器。</li><li>每当执行完一项指令操作后，PC 寄存器就会更新下一条需要被执行的指令地址。</li><li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在 Java 堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。</li></ol><p><img src="http://img-md-js.linjsblog.top/img/202305151711641.png" alt="image-20200710081627217"></p><p>从外观上来看，所有的 Java 虚拟机的执行引擎输入，输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行过程。</p><h2 id="2-Java-代码编译和执行过程"><a href="#2-Java-代码编译和执行过程" class="headerlink" title="2. Java 代码编译和执行过程"></a>2. Java 代码编译和执行过程</h2><p><img src="http://img-md-js.linjsblog.top/img/202305151712722.png" alt="image-20200710082141643"></p><p>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过上图中的各个步骤</p><p>Java 代码编译是由 Java 源码编译器（前端编译器）来完成，流程图如下所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202305151713813.png" alt="image-20200710082433146"></p><p>Java 字节码的执行是由 JVM 执行引擎（后端编译器）来完成，流程图 如下所示</p><p><img src="http://img-md-js.linjsblog.top/img/202305151713090.png" alt="image-20200710083036258"></p><h3 id="2-1-什么是解释器（Interpreter）？什么是-JIT-编译器？"><a href="#2-1-什么是解释器（Interpreter）？什么是-JIT-编译器？" class="headerlink" title="2.1. 什么是解释器（Interpreter）？什么是 JIT 编译器？"></a>2.1. 什么是解释器（Interpreter）？什么是 JIT 编译器？</h3><p>解释器：当 Java 虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><p>JIT（Just In Time Compiler）编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。</p><h3 id="2-2-为什么-Java-是半编译半解释型语言？"><a href="#2-2-为什么-Java-是半编译半解释型语言？" class="headerlink" title="2.2. 为什么 Java 是半编译半解释型语言？"></a>2.2. 为什么 Java 是半编译半解释型语言？</h3><p>JDK1.0 时代，将 Java 语言定位为“解释执行”还是比较准确的。再后来，Java 也发展出可以直接生成本地代码的编译器。现在 JVM 在执行 Java 代码的时候，通常都会将解释执行与编译执行二者结合起来进行。</p><p><strong>图示</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305151714527.png" alt="image-20200710083656277"></p><h2 id="3-机器码、指令、汇编语言"><a href="#3-机器码、指令、汇编语言" class="headerlink" title="3. 机器码、指令、汇编语言"></a>3. 机器码、指令、汇编语言</h2><h3 id="3-1-机器码"><a href="#3-1-机器码" class="headerlink" title="3.1. 机器码"></a>3.1. 机器码</h3><p>各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它采编写程序，这就是机器语言。</p><p>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</p><p>用它编写的程序一经输入计算机，CPU 直接读取运行，因此和其他语言编的程序相比，执行速度最快。</p><p>机器指令与 CPU 紧密相关，所以不同种类的 CPU 所对应的机器指令也就不同。</p><h3 id="3-2-指令"><a href="#3-2-指令" class="headerlink" title="3.2. 指令"></a>3.2. 指令</h3><p>由于机器码是有 0 和 1 组成的二进制序列，可读性实在太差，于是人们发明了指令。</p><p>指令就是把机器码中特定的 0 和 1 序列，简化成对应的指令（一般为英文简写，如 mov，inc 等），可读性稍好</p><p>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如 mov），对应的机器码也可能不同。</p><h3 id="3-3-指令集"><a href="#3-3-指令集" class="headerlink" title="3.3. 指令集"></a>3.3. 指令集</h3><p>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。 如常见的</p><ul><li>x86 指令集，对应的是 x86 架构的平台</li><li>ARM 指令集，对应的是 ARM 架构的平台</li></ul><h3 id="3-4-汇编语言"><a href="#3-4-汇编语言" class="headerlink" title="3.4. 汇编语言"></a>3.4. 汇编语言</h3><p>由于指令的可读性还是太差，于是人们又发明了汇编语言。</p><p>在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用&lt;mark 地址符号（Symbol）或标号（Label）代替指令或操作数的地址。在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。</p><p>由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。</p><h3 id="3-5-高级语言"><a href="#3-5-高级语言" class="headerlink" title="3.5. 高级语言"></a>3.5. 高级语言</h3><p>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言更接近人的语言</p><p>当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序。</p><p><img src="http://img-md-js.linjsblog.top/img/202305151715534.png" alt="image-20200710085323733"></p><p>高级语言也不是直接翻译成机器指令，而是翻译成汇编语言码，如下面说的 C 和 C++</p><h4 id="C、C-源程序执行过程"><a href="#C、C-源程序执行过程" class="headerlink" title="C、C++源程序执行过程"></a>C、C++源程序执行过程</h4><p>编译过程又可以分成两个阶段：编译和汇编。</p><p>编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码</p><p>汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。</p><p><img src="http://img-md-js.linjsblog.top/img/202305151717003.png" alt="image-20200710085553258"></p><h3 id="3-6-字节码"><a href="#3-6-字节码" class="headerlink" title="3.6. 字节码"></a>3.6. 字节码</h3><p>字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码</p><p>字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。</p><p>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。字节码典型的应用为：Java bytecode</p><p><img src="http://img-md-js.linjsblog.top/img/202305151717438.png" alt="image-20210511092336091"></p><h2 id="4-解释器"><a href="#4-解释器" class="headerlink" title="4. 解释器"></a>4. 解释器</h2><p>JVM 设计者们的初衷仅仅只是单纯地为了满足 Java 程序实现跨平台特性，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法。</p><p><img src="http://img-md-js.linjsblog.top/img/202305151719582.png" alt="image-20200710090203674"></p><p>为什么 Java 源文件不直接翻译成 JMV，而是翻译成字节码文件？可能是因为直接翻译的代价是比较大的</p><h3 id="4-1-解释器工作机制"><a href="#4-1-解释器工作机制" class="headerlink" title="4.1. 解释器工作机制"></a>4.1. 解释器工作机制</h3><p>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p><p>当一条字节码指令被解释执行完成后，接着再根据 PC 寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</p><h3 id="4-2-解释器分类"><a href="#4-2-解释器分类" class="headerlink" title="4.2. 解释器分类"></a>4.2. 解释器分类</h3><p>在 Java 的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器。</p><ul><li>字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。</li><li>而模板解释器将每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。</li></ul><p>在 HotSpot VM 中，解释器主要由 Interpreter 模块和 Code 模块构成。</p><ul><li>Interpreter 模块：实现了解释器的核心功能</li><li>Code 模块：用于管理 HotSpot VM 在运行时生成的本地机器指令</li></ul><h3 id="4-3-现状"><a href="#4-3-现状" class="headerlink" title="4.3. 现状"></a>4.3. 现状</h3><p>由于解释器在设计和实现上非常简单，因此除了 Java 语言之外，还有许多高级语言同样也是基于解释器执行的，比如 Python、Perl、Ruby 等。但是在今天，基于解释器执行已经沦落为低效的代名词，并且时常被一些 C&#x2F;C++程序员所调侃。</p><p>为了解决这个问题，JVM 平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。</p><p>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</p><h2 id="5-JIT-编译器"><a href="#5-JIT-编译器" class="headerlink" title="5. JIT 编译器"></a>5. JIT 编译器</h2><h3 id="5-1-Java-代码的执行分类"><a href="#5-1-Java-代码的执行分类" class="headerlink" title="5.1. Java 代码的执行分类"></a>5.1. Java 代码的执行分类</h3><ul><li><p>第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行</p></li><li><p>第二种是编译执行（直接编译成机器码，但是要知道不同机器上编译的机器码是不一样，而字节码是可以跨平台的）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行</p></li></ul><p>HotSpot VM 是目前市面上高性能虚拟机的代表作之一。它采用解释器与即时编译器并存的架构。在 Java 虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。</p><p>在今天，Java 程序的运行性能早已脱胎换骨，已经达到了可以和 C&#x2F;C++ 程序一较高下的地步。</p><p><strong>问题来了</strong></p><p>有些开发人员会感觉到诧异，既然 HotSpot VM 中已经内置 JIT 编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢？比如 JRockit VM 内部就不包含解释器，字节码全部都依靠即时编译器编译后执行。</p><p>首先明确： 当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。 编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后，执行效率高。</p><p>所以： 尽管 JRockit VM 中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。在此模式下，当 Java 虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。</p><p>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。</p><h3 id="5-2-HotSpot-JVM-执行方式"><a href="#5-2-HotSpot-JVM-执行方式" class="headerlink" title="5.2. HotSpot JVM 执行方式"></a>5.2. HotSpot JVM 执行方式</h3><p>当虚拟机启动的时候，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成再执行，这样可以省去许多不必要的编译时间。并且随着程序运行时间的推移，即时编译器逐渐发挥作用，根据热点探测功能，将有价值的字节码编译为本地机器指令，以换取更高的程序执行效率。</p><p><strong>案例来了</strong></p><p>注意解释执行与编译执行在线上环境微妙的辩证关系。机器在热机状态可以承受的负载要大于冷机状态。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死。</p><p>在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的 1&#x2F;8。曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的 JVM 均是解释执行，还没有进行热点代码统计和 JIT 动态编译，导致机器启动之后，当前 1&#x2F;2 发布成功的服务器马上全部宕机，此故障说明了 JIT 的存在。—阿里团队</p><p><img src="http://img-md-js.linjsblog.top/img/202305151750565.png" alt="image-20200710095417462"></p><h3 id="5-3-概念解释"><a href="#5-3-概念解释" class="headerlink" title="5.3. 概念解释"></a>5.3. 概念解释</h3><p>Java 语言的“编译期”其实是一段“不确定”的操作过程，因为它可能是指一个前端编译器（其实叫“编译器的前端”更准确一些）把.java 文件转变成.class 文件的过程；</p><p>也可能是指虚拟机的后端运行期编译器（JIT 编译器，Just In Time Compiler）把字节码转变成机器码的过程。</p><p>还可能是指使用静态提前编译器（AOT 编译器，Ahead of Time Compiler）直接把.java 文件编译成本地机器代码的过程。</p><ul><li><p>前端编译器：Sun 的 Javac、Eclipse JDT 中的增量式编译器（ECJ）。</p></li><li><p>JIT 编译器：HotSpot VM 的 C1、C2 编译器。</p></li><li><p>AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET。</p></li></ul><h3 id="5-4-热点代码及探测技术"><a href="#5-4-热点代码及探测技术" class="headerlink" title="5.4. 热点代码及探测技术"></a>5.4. 热点代码及探测技术</h3><p>当然是否需要启动 JIT 编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用执行的频率而定。关于那些需要被编译为本地代码的字节码，也被称之为“<strong>热点代码</strong>”，JIT 编译器在运行时会针对那些频繁被调用的“热点代码”做出深度优化，将其直接编译为对应平台的本地机器指令，以此提升 Java 程序的执行性能。</p><p>一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”，因此都可以通过 JIT 编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此被称之为栈上替换，或简称为OSR（On Stack Replacement）编译。</p><p>一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT 编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠热点探测功能。</p><p>目前 HotSpot VM 所采用的热点探测方式是基于计数器的热点探测。</p><p>采用基于计数器的热点探测，HotSpot VM 将会为每一个方法都建立 2 个不同类型的计数器，分别为方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter）。</p><ul><li>方法调用计数器用于统计方法的调用次数</li><li>回边计数器则用于统计循环体执行的循环次数</li></ul><h4 id="方法调用计数器"><a href="#方法调用计数器" class="headerlink" title="方法调用计数器"></a>方法调用计数器</h4><p>这个计数器就用于统计方法被调用的次数，它的默认阀值在 Client 模式下是 1500 次，在 Server 模式下是 10000 次。超过这个阈值，就会触发 JIT 编译。</p><p>这个阀值可以通过虚拟机参数 <code>-XX:CompileThreshold</code>来人为设定。</p><p>当一个方法被调用时，会先检查该方法是否存在被 JIT 编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加 1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阀值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。</p><p><img src="http://img-md-js.linjsblog.top/img/202305151804634.png" alt="image-20200710101829934"></p><h4 id="热点衰减"><a href="#热点衰减" class="headerlink" title="热点衰减"></a>热点衰减</h4><p>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被减少一半，这个过程称为方法调用计数器热度的衰减（Counter Decay），而这段时间就称为此方法统计的半衰周期（Counter Half Life Time）</p><p>进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 <code>-XX:-UseCounterDecay</code> 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。</p><p>另外，可以使用<code>-XX:CounterHalfLifeTime</code>参数设置半衰周期的时间，单位是秒。</p><h4 id="回边计数器"><a href="#回边计数器" class="headerlink" title="回边计数器"></a>回边计数器</h4><p>它的作用是统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge）。显然，建立回边计数器统计的目的就是为了触发 OSR 编译。</p><p><img src="http://img-md-js.linjsblog.top/img/202305151804276.png" alt="image-20200710103103869"></p><h3 id="5-5-HotSpotVM-可以设置程序执行方法"><a href="#5-5-HotSpotVM-可以设置程序执行方法" class="headerlink" title="5.5. HotSpotVM 可以设置程序执行方法"></a>5.5. HotSpotVM 可以设置程序执行方法</h3><p>缺省情况下 HotSpot VM 是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为 Java 虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：</p><ul><li><code>-Xint</code>：完全采用解释器模式执行程序；</li><li><code>-Xcomp</code>：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行</li><li><code>-Xmixed</code>：采用解释器+即时编译器的混合模式共同执行程序。</li></ul><h3 id="5-6-HotSpotVM-中-JIT-分类"><a href="#5-6-HotSpotVM-中-JIT-分类" class="headerlink" title="5.6. HotSpotVM 中 JIT 分类"></a>5.6. HotSpotVM 中 JIT 分类</h3><p>JIT 的编译器还分为了两种，分别是 C1 和 C2，在 HotSpot VM 中内嵌有两个 JIT 编译器，分别为 Client Compiler 和 Server Compiler，但大多数情况下我们简称为 C1 编译器 和 C2 编译器。开发人员可以通过如下命令显式指定 Java 虚拟机在运行时到底使用哪一种即时编译器，如下所示：</p><ul><li><code>-client</code>：指定 Java 虚拟机运行在 Client 模式下，并使用 C1 编译器；C1 编译器会对字节码进行简单和可靠的优化，耗时短，以达到更快的编译速度。</li><li><code>-server</code>：指定 Java 虚拟机运行在 server 模式下，并使用 C2 编译器。C2进行耗时较长的优化，以及激进优化，但优化的代码执行效率更高。</li></ul><p>分层编译（Tiered Compilation）策略：程序解释执行（不开启性能监控）可以触发 C1 编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2 编译会根据性能监控信息进行激进优化。</p><p>不过在 Java7 版本之后，一旦开发人员在程序中显式指定命令“-server”时，默认将会开启分层编译策略，由 C1 编译器和 C2 编译器相互协作共同来执行编译任务。</p><h4 id="C1-和-C2-编译器不同的优化策略"><a href="#C1-和-C2-编译器不同的优化策略" class="headerlink" title="C1 和 C2 编译器不同的优化策略"></a>C1 和 C2 编译器不同的优化策略</h4><p>在不同的编译器上有不同的优化策略，C1 编译器上主要有方法内联、去虚拟化、冗余消除。</p><ul><li>方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程</li><li>去虚拟化：对唯一的实现类进行内联</li><li>冗余消除：在运行期间把一些不会执行的代码折叠掉</li></ul><p>C2 的优化主要是在全局层面，逃逸分析（前面讲过，并不成熟）是优化的基础。基于逃逸分析在 C2 上有如下几种优化：</p><ul><li>标量替换：用标量值代替聚合对象的属性值</li><li>栈上分配：对于未逃逸的对象分配对象在栈而不是堆</li><li>同步消除：清除同步操作，通常指 synchronized</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般来讲，JIT 编译出来的机器码性能比解释器高。C2 编译器启动时长比 C1 慢，系统稳定执行以后，C2 编译器执行速度远快于 C1 编译器</p><h3 id="写到最后-1"><a href="#写到最后-1" class="headerlink" title="写到最后 1"></a>写到最后 1</h3><ul><li>自 JDK10 起，HotSpot 又加入了一个全新的及时编译器：Graal 编译器</li><li>编译效果短短几年时间就追评了 C2 编译器，未来可期</li><li>目前，带着实验状态标签，需要使用开关参数<code>-XX:+UnlockExperimentalvMOptions -XX:+UseJVMCICompiler</code>去激活才能使用</li></ul><h3 id="写到最后-2：AOT-编译器"><a href="#写到最后-2：AOT-编译器" class="headerlink" title="写到最后 2：AOT 编译器"></a>写到最后 2：AOT 编译器</h3><p>jdk9 引入了 AOT 编译器（静态提前编译器，Ahead of Time Compiler）</p><p>Java 9 引入了实验性 AOT 编译工具 jaotc。它借助了 Graal 编译器，将所输入的 Java 类文件转换为机器码，并存放至生成的动态共享库之中。</p><p>所谓 AOT 编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</p><p>最大的好处：Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验</p><p>缺点：</p><ul><li>破坏了 java “ 一次编译，到处运行”的理念，必须为每个不同的硬件，OS 编译对应的发行包</li><li>降低了 Java 链接过程的动态性，加载的代码在编译器就必须全部已知。</li><li>还需要继续优化中，最初只支持 Linux X64 java base</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(七) 对象实例化和直接内存</title>
      <link href="/2023/05/14/%E4%B8%83-%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%92%8C%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/"/>
      <url>/2023/05/14/%E4%B8%83-%E5%AF%B9%E8%B1%A1%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%92%8C%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="七-对象实例化和直接内存"><a href="#七-对象实例化和直接内存" class="headerlink" title="(七) 对象实例化和直接内存"></a>(七) 对象实例化和直接内存</h1><h2 id="1-对象实例化"><a href="#1-对象实例化" class="headerlink" title="1. 对象实例化"></a>1. 对象实例化</h2><p><strong>面试题</strong></p><blockquote><p>美团：</p><p>对象在 JVM 中是怎么存储的？</p><p>对象头信息里面有哪些东西？</p><p>蚂蚁金服：</p><p>Java 对象头有什么？</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202305142223376.png" alt="image-20200709095356247"></p><h3 id="1-1-创建对象的方式"><a href="#1-1-创建对象的方式" class="headerlink" title="1.1. 创建对象的方式"></a>1.1. 创建对象的方式</h3><ul><li>new：最常见的方式、Xxx 的静态方法，XxxBuilder&#x2F;XxxFactory 的静态方法</li><li>Class 的 newInstance 方法：反射的方式，只能调用空参的构造器，权限必须是 public</li><li>Constructor 的 newInstance(XXX)：反射的方式，可以调用空参、带参的构造器，权限没有要求</li><li>使用 clone()：不调用任何的构造器，要求当前的类需要实现 Cloneable 接口，实现 clone()</li><li>使用序列化：从文件中、从网络中获取一个对象的二进制流</li><li>第三方库 Objenesis</li></ul><h3 id="1-2-创建对象的步骤"><a href="#1-2-创建对象的步骤" class="headerlink" title="1.2. 创建对象的步骤"></a>1.2. 创建对象的步骤</h3><p>前面所述是从字节码角度看待对象的创建过程，现在从执行步骤的角度来分析：</p><p><img src="http://img-md-js.linjsblog.top/img/202305142226005.png" alt="image-20210510220743192"></p><h4 id="1-判断对象对应的类是否加载、链接、初始化"><a href="#1-判断对象对应的类是否加载、链接、初始化" class="headerlink" title="1. 判断对象对应的类是否加载、链接、初始化"></a>1. 判断对象对应的类是否加载、链接、初始化</h4><p>虚拟机遇到一条 new 指令，首先去检查这个指令的参数能否在 Metaspace 的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化（即判断类元信息是否存在）。</p><p>如果没有，那么在双亲委派模式下，使用当前类加载器以 ClassLoader + 包名 + 类名为 key 进行查找对应的 .class 文件；</p><ul><li>如果没有找到文件，则抛出 ClassNotFoundException 异常</li><li>如果找到，则进行类加载，并生成对应的 Class 对象</li></ul><h4 id="2-为对象分配内存"><a href="#2-为对象分配内存" class="headerlink" title="2. 为对象分配内存"></a>2. 为对象分配内存</h4><p>首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即 4 个字节大小</p><p><strong>如果内存规整</strong>：虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。</p><ul><li>意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是 Serial ，ParNew 这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带 Compact（整理）过程的收集器时，使用指针碰撞。</li></ul><p><strong>如果内存不规整</strong>：虚拟机需要维护一个空闲列表（Free List）来为对象分配内存。</p><ul><li>已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。</li></ul><p>选择哪种分配方式由 Java 堆是否规整所决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p><h4 id="3-处理并发问题"><a href="#3-处理并发问题" class="headerlink" title="3. 处理并发问题"></a>3. 处理并发问题</h4><ul><li>采用 CAS 失败重试、区域加锁保证更新的原子性</li><li>每个线程预先分配一块 TLAB：通过设置 <code>-XX:+UseTLAB</code>参数来设定</li></ul><h4 id="4-初始化分配到的内存"><a href="#4-初始化分配到的内存" class="headerlink" title="4. 初始化分配到的内存"></a>4. 初始化分配到的内存</h4><p>所有属性设置默认值，保证对象实例字段在不赋值时可以直接使用</p><h4 id="5-设置对象的对象头"><a href="#5-设置对象的对象头" class="headerlink" title="5. 设置对象的对象头"></a>5. 设置对象的对象头</h4><p>将对象的所属类（即类的元数据信息）、对象的 HashCode 和对象的 GC 信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于 JVM 实现。</p><h4 id="6-执行-init-方法进行初始化"><a href="#6-执行-init-方法进行初始化" class="headerlink" title="6. 执行 init 方法进行初始化"></a>6. 执行 init 方法进行初始化</h4><p>在 Java 程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。</p><p>因此一般来说（由字节码中跟随 invokespecial 指令所决定），new 指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。</p><p><strong>给对象属性赋值的操作</strong></p><ul><li>属性的默认初始化</li><li>显式初始化</li><li>代码块中初始化</li><li>构造器中初始化</li></ul><p><strong>对象实例化的过程</strong></p><ol><li>加载类元信息</li><li>为对象分配内存</li><li>处理并发问题</li><li>属性的默认初始化（零值初始化）</li><li>设置对象头信息</li><li>属性的显示初始化、代码块中初始化、构造器中初始化</li></ol><h2 id="2-对象内存布局"><a href="#2-对象内存布局" class="headerlink" title="2. 对象内存布局"></a>2. 对象内存布局</h2><p><img src="http://img-md-js.linjsblog.top/img/202305142226669.png" alt="image-20200709151033237"></p><h3 id="2-1-对象头（Header）"><a href="#2-1-对象头（Header）" class="headerlink" title="2.1. 对象头（Header）"></a>2.1. 对象头（Header）</h3><p>对象头包含了两部分，分别是运行时元数据（Mark Word）和类型指针。如果是数组，还需要记录数组的长度</p><h4 id="运行时元数据"><a href="#运行时元数据" class="headerlink" title="运行时元数据"></a>运行时元数据</h4><ul><li>哈希值（HashCode）</li><li>GC 分代年龄</li><li>锁状态标志</li><li>线程持有的锁</li><li>偏向线程 ID</li><li>偏向时间戳</li></ul><h4 id="类型指针"><a href="#类型指针" class="headerlink" title="类型指针"></a>类型指针</h4><p>指向类元数据 InstanceKlass，确定该对象所属的类型。</p><h3 id="2-2-实例数据（Instance-Data）"><a href="#2-2-实例数据（Instance-Data）" class="headerlink" title="2.2. 实例数据（Instance Data）"></a>2.2. 实例数据（Instance Data）</h3><p>它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段）</p><ul><li>相同宽度的字段总是被分配在一起</li><li>父类中定义的变量会出现在子类之前</li><li>如果 CompactFields 参数为 true（默认为 true）：子类的窄变量可能插入到父类变量的空隙</li></ul><h3 id="2-3-对齐填充（Padding）"><a href="#2-3-对齐填充（Padding）" class="headerlink" title="2.3. 对齐填充（Padding）"></a>2.3. 对齐填充（Padding）</h3><p>不是必须的，也没有特别的含义，仅仅起到占位符的作用</p><p><strong>举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Account</span> acct<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> <span class="token string">"匿名客户"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        acct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Customer</span> cust<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>图示</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305142238538.png" alt="image-20200709152801713"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="http://img-md-js.linjsblog.top/img/202305142238181.png" alt="image-20210510225407119"></p><h2 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3. 对象的访问定位"></a>3. 对象的访问定位</h2><p><img src="http://img-md-js.linjsblog.top/img/202305142238225.png" alt="image-20210510230045654"></p><p>JVM 是如何通过栈帧中的对象引用访问到其内部的对象实例呢？</p><p><img src="http://img-md-js.linjsblog.top/img/202305142238078.png" alt="image-20200709164149920"></p><h3 id="3-1-句柄访问"><a href="#3-1-句柄访问" class="headerlink" title="3.1. 句柄访问"></a>3.1. 句柄访问</h3><p><img src="http://img-md-js.linjsblog.top/img/202305142238707.png" alt="image-20210510230241991"></p><p>reference 中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference 本身不需要被修改</p><h3 id="8-3-2-直接指针（HotSpot-采用）"><a href="#8-3-2-直接指针（HotSpot-采用）" class="headerlink" title="8.3.2. 直接指针（HotSpot 采用）"></a>8.3.2. 直接指针（HotSpot 采用）</h3><p><img src="http://img-md-js.linjsblog.top/img/202305142238696.png" alt="image-20210510230337956"></p><p>直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据</p><h2 id="4-直接内存（Direct-Memory）"><a href="#4-直接内存（Direct-Memory）" class="headerlink" title="4. 直接内存（Direct Memory）"></a>4. 直接内存（Direct Memory）</h2><h3 id="4-1-直接内存概述"><a href="#4-1-直接内存概述" class="headerlink" title="4.1. 直接内存概述"></a>4.1. 直接内存概述</h3><p>不是虚拟机运行时数据区的一部分，也不是《Java 虚拟机规范》中定义的内存区域。直接内存是在 Java 堆外的、直接向系统申请的内存区间。来源于 NIO，通过存在堆中的 DirectByteBuffer 操作 Native 内存。通常，访问直接内存的速度会优于 Java 堆，即读写性能高。</p><ul><li>因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存。</li><li>Java 的 NIO 库允许 Java 程序使用直接内存，用于数据缓冲区</li></ul><h3 id="4-2-非直接缓存区"><a href="#4-2-非直接缓存区" class="headerlink" title="4.2. 非直接缓存区"></a>4.2. 非直接缓存区</h3><p>使用 IO 读写文件，需要与磁盘交互，需要由用户态切换到内核态。在内核态时，需要两份内存存储重复数据，效率低。</p><p><img src="http://img-md-js.linjsblog.top/img/202305142238100.png" alt="image-20210510231408607"></p><h3 id="4-3-直接缓存区"><a href="#4-3-直接缓存区" class="headerlink" title="4.3. 直接缓存区"></a>4.3. 直接缓存区</h3><p>使用 NIO 时，操作系统划出的直接缓存区可以被 java 代码直接访问，只有一份。NIO 适合对大文件的读写操作。</p><p><img src="http://img-md-js.linjsblog.top/img/202305142238198.png" alt="image-20210510231456550"></p><p>也可能导致 OutOfMemoryError 异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutOfMemoryError</span><span class="token operator">:</span> <span class="token class-name">Direct</span> buffer memory    at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>Bits</span><span class="token punctuation">.</span><span class="token function">reserveMemory</span><span class="token punctuation">(</span><span class="token class-name">Bits</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">693</span><span class="token punctuation">)</span>    at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>DirectByteBuffer</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">DirectByteBuffer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">)</span>    at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">311</span><span class="token punctuation">)</span>    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span>BufferTest2</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">BufferTest2</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于直接内存在 Java 堆外，因此它的大小不会直接受限于-Xmx 指定的最大堆大小，但是系统内存是有限的，Java 堆和直接内存的总和依然受限于操作系统能给出的最大内存。</p><ul><li>分配回收成本较高</li><li>不受 JVM 内存回收管理</li></ul><p>直接内存大小可以通过<code>MaxDirectMemorySize</code>设置。如果不指定，默认与堆的最大值-Xmx 参数值一致</p><p><img src="http://img-md-js.linjsblog.top/img/202305142240458.png" alt="image-20200709230647277"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(六)  方法区</title>
      <link href="/2023/05/14/%E5%85%AD-%E6%96%B9%E6%B3%95%E5%8C%BA/"/>
      <url>/2023/05/14/%E5%85%AD-%E6%96%B9%E6%B3%95%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="六-方法区"><a href="#六-方法区" class="headerlink" title="(六) 方法区"></a>(六) 方法区</h1><p><img src="http://img-md-js.linjsblog.top/img/202305142101722.png" alt="image-20210510141044840"></p><p>从线程共享与否的角度来看</p><p><img src="http://img-md-js.linjsblog.top/img/202305142101049.png" alt="image-20210510141131860"></p><h2 id="1-栈、堆、方法区的交互关系"><a href="#1-栈、堆、方法区的交互关系" class="headerlink" title="1. 栈、堆、方法区的交互关系"></a>1. 栈、堆、方法区的交互关系</h2><p><img src="http://img-md-js.linjsblog.top/img/202305142101839.png" alt="image-20200708094747667"></p><h2 id="2-方法区的理解"><a href="#2-方法区的理解" class="headerlink" title="2. 方法区的理解"></a>2. 方法区的理解</h2><p>官方文档：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4">Chapter 2. The Structure of the Java Virtual Machine (oracle.com)</a></p><p><img src="http://img-md-js.linjsblog.top/img/202305142101985.png" alt="image-20210510195446194"></p><h3 id="2-1-方法区在哪里？"><a href="#2-1-方法区在哪里？" class="headerlink" title="2.1. 方法区在哪里？"></a>2.1. 方法区在哪里？</h3><p>《Java 虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于 HotSpotJVM 而言，方法区还有一个别名叫做 Non-Heap（非堆），目的就是要和堆分开。</p><p>所以，方法区看作是一块独立于 Java 堆的内存空间。</p><p><img src="http://img-md-js.linjsblog.top/img/202305142101276.png" alt="image-20200708095853544"></p><h3 id="2-2-方法区的基本理解"><a href="#2-2-方法区的基本理解" class="headerlink" title="2.2. 方法区的基本理解"></a>2.2. 方法区的基本理解</h3><ul><li>方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域。</li><li>方法区在 JVM 启动的时候被创建，并且它的实际的物理内存空间中和 Java 堆区一样都可以是不连续的。</li><li>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</li><li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：<code>java.lang.OutOfMemoryError: PermGen space</code> 或者<code>java.lang.OutOfMemoryError: Metaspace</code><ul><li>加载大量的第三方的 jar 包；Tomcat 部署的工程过多（30~50 个）；大量动态的生成反射类</li></ul></li><li>关闭 JVM 就会释放这个区域的内存。</li></ul><h3 id="2-3-HotSpot-中方法区的演进"><a href="#2-3-HotSpot-中方法区的演进" class="headerlink" title="2.3. HotSpot 中方法区的演进"></a>2.3. HotSpot 中方法区的演进</h3><p>在 jdk7 及以前，习惯上把方法区，称为永久代。jdk8 开始，使用元空间取代了永久代。</p><p><img src="http://img-md-js.linjsblog.top/img/202305142102740.png" alt="image-20210510142516373"></p><p>本质上，方法区和永久代并不等价。仅是对 hotspot 而言的。《Java 虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JRockit &#x2F; IBM J9 中不存在永久代的概念。</p><p>现在来看，当年使用永久代，不是好的 idea。导致 Java 程序更容易 OOM（超过<code>-XX:MaxPermsize</code>上限）</p><p><img src="http://img-md-js.linjsblog.top/img/202305142102030.png" alt="image-20210510142656677"></p><p>而到了 JDK8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Metaspace）来代替</p><p><img src="http://img-md-js.linjsblog.top/img/202305142102469.png" alt="image-20200708103055914"></p><p>元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存</p><p>永久代、元空间二者并不只是名字变了，内部结构也调整了</p><p>根据《Java 虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出 OOM 异常</p><h2 id="3-设置方法区大小与-OOM"><a href="#3-设置方法区大小与-OOM" class="headerlink" title="3. 设置方法区大小与 OOM"></a>3. 设置方法区大小与 OOM</h2><h3 id="3-1-设置方法区内存的大小"><a href="#3-1-设置方法区内存的大小" class="headerlink" title="3.1. 设置方法区内存的大小"></a>3.1. 设置方法区内存的大小</h3><p>方法区的大小不必是固定的，JVM 可以根据应用的需要动态调整。</p><p><strong>jdk7 及以前</strong></p><ul><li>通过<code>-XX:Permsize</code>来设置永久代初始分配空间。默认值是 20.75M</li><li>通过<code>-XX:MaxPermsize</code>来设定永久代最大可分配空间。32 位机器默认是 64M，64 位机器模式是 82M</li><li>当 JVM 加载的类信息容量超过了这个值，会报异常<code>OutOfMemoryError:PermGen space</code>。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305142104101.png" alt="image-20200708111756800"></p><p><strong>JDK8 以后</strong></p><ul><li>元数据区大小可以使用参数 <code>-XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code>指定</li><li>默认值依赖于平台。windows 下，<code>-XX:MetaspaceSize=21M -XX:MaxMetaspaceSize=-1//即没有限制</code>。</li><li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常<code>OutOfMemoryError:Metaspace</code></li><li><code>-XX:MetaspaceSize</code>：设置初始的元空间大小。对于一个 64 位的服务器端 JVM 来说，其默认的<code>-XX:MetaspaceSize</code>值为 21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC 将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于 GC 后释放了多少元空间。如果释放的空间不足，那么在不超过<code>MaxMetaspaceSize</code>时，适当提高该值。如果释放空间过多，则适当降低该值。</li><li>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到 Full GC 多次调用。为了避免频繁地 GC，建议将<code>-XX:MetaspaceSize</code>设置为一个相对较高的值。</li></ul><p><strong>举例 1：《深入理解 Java 虚拟机》的例子</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305142105414.png" alt="image-20210510143959924"></p><p><strong>举例 2</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * jdk8中： * -XX:MetaspaceSize=10m-XX:MaxMetaspaceSize=10m * jdk6中： * -XX:PermSize=10m-XX:MaxPermSize=10m */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">OOMTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OOMTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//创建Classwriter对象，用于生成类的二进制字节码</span>                <span class="token class-name">ClassWriter</span> classWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//指明版本号，public，类名，包名，父类，接口</span>                classWriter<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">V1_6</span><span class="token punctuation">,</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> nu1l<span class="token punctuation">,</span> <span class="token string">"java/lang/Object"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//返回byte[]</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//类的加载</span>                test<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//CLass对象</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-如何解决这些-OOM"><a href="#3-2-如何解决这些-OOM" class="headerlink" title="3.2. 如何解决这些 OOM"></a>3.2. 如何解决这些 OOM</h3><ol><li><p>要解决 OOM 异常或 heap space 的异常，一般的手段是首先通过内存映像分析工具（如 Eclipse Memory Analyzer）对 dump 出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢出（Memory Overflow）</p></li><li><p>如果是内存泄漏，可进一步通过工具查看泄漏对象到 GC Roots 的引用链。于是就能找到泄漏对象是通过怎样的路径与 GCRoots 相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及 GCRoots 引用链的信息，就可以比较准确地定位出泄漏代码的位置。</p></li><li><p>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（<code>-Xmx</code>与<code>-Xms</code>），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</p></li></ol><h2 id="4-方法区的内部结构"><a href="#4-方法区的内部结构" class="headerlink" title="4. 方法区的内部结构"></a>4. 方法区的内部结构</h2><p><img src="http://img-md-js.linjsblog.top/img/202305142118206.png" alt="image-20200708161728320"></p><h3 id="4-1-方法区（Method-Area）存储什么？"><a href="#4-1-方法区（Method-Area）存储什么？" class="headerlink" title="4.1. 方法区（Method Area）存储什么？"></a>4.1. 方法区（Method Area）存储什么？</h3><p>《深入理解 Java 虚拟机》书中对方法区（Method Area）存储内容描述如下：</p><blockquote><p>它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202305142120369.png" alt="image-20200708161856504"></p><h3 id="4-2-方法区的内部结构"><a href="#4-2-方法区的内部结构" class="headerlink" title="4.2. 方法区的内部结构"></a>4.2. 方法区的内部结构</h3><h4 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h4><p>对每个加载的类型（类 class、接口 interface、枚举 enum、注解 annotation），JVM 必须在方法区中存储以下类型信息：</p><ol><li>这个类型的完整有效名称（全名&#x3D;包名.类名）</li><li>这个类型直接父类的完整有效名（对于 interface 或是 java.lang.object，都没有父类）</li><li>这个类型的修饰符（public，abstract，final 的某个子集）</li><li>这个类型直接接口的一个有序列表</li></ol><h4 id="域（Field）信息"><a href="#域（Field）信息" class="headerlink" title="域（Field）信息"></a>域（Field）信息</h4><p>JVM 必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</p><p>域的相关信息包括：域名称、域类型、域修饰符（public，private，protected，static，final，volatile，transient 的某个子集）</p><h4 id="方法（Method）信息"><a href="#方法（Method）信息" class="headerlink" title="方法（Method）信息"></a>方法（Method）信息</h4><p>JVM 必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p><ol><li>方法名称</li><li>方法的返回类型（或 void）</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract 的一个子集）</li><li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract 和 native 方法除外）</li><li>异常表（abstract 和 native 方法除外）<ul><li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ul></li></ol><h4 id="non-final-的类变量"><a href="#non-final-的类变量" class="headerlink" title="non-final 的类变量"></a>non-final 的类变量</h4><ul><li>静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分</li><li>类变量被类的所有实例共享，即使没有类实例时，你也可以访问它</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="补充说明：全局常量（static-final）"><a href="#补充说明：全局常量（static-final）" class="headerlink" title="补充说明：全局常量（static final）"></a>补充说明：全局常量（static final）</h4><p>被声明为 final 的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。</p><h3 id="4-3-运行时常量池-VS-常量池"><a href="#4-3-运行时常量池-VS-常量池" class="headerlink" title="4.3. 运行时常量池 VS 常量池"></a>4.3. 运行时常量池 VS 常量池</h3><p><img src="http://img-md-js.linjsblog.top/img/202305142121768.png" alt="image-20200708171151384"></p><ul><li>方法区，内部包含了运行时常量池</li><li>字节码文件，内部包含了常量池</li><li>要弄清楚方法区，需要理解清楚 ClassFile，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清楚 ClassFile 中的常量池。</li></ul><p>官方文档：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html</a></p><p><img src="http://img-md-js.linjsblog.top/img/202305142121738.png" alt="image-20200708172357052"></p><p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外，还包含一项信息就是常量池表（Constant Pool Table），包括各种字面量和对类型、域和方法的符号引用</p><h4 id="为什么需要常量池？"><a href="#为什么需要常量池？" class="headerlink" title="为什么需要常量池？"></a>为什么需要常量池？</h4><p>一个 java 源文件中的类、接口，编译后产生一个字节码文件。而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍。</p><p>比如：如下的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然只有 194 字节，但是里面却使用了 String、System、PrintStream 及 Object 等结构。这里的代码量其实很少了，如果代码多的话，引用的结构将会更多，这里就需要用到常量池了。</p><p><img src="http://img-md-js.linjsblog.top/img/202305142123580.png" alt="image-20210510145947122"></p><h4 id="常量池中有什么"><a href="#常量池中有什么" class="headerlink" title="常量池中有什么?"></a>常量池中有什么?</h4><p>击中常量池内存储的数据类型包括：</p><ul><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ul><p>例如下面这段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Object obj = new Object();</code>将会被翻译成如下字节码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span> #<span class="token number">2</span>  <span class="token comment">// Class java/lang/Object</span><span class="token number">1</span><span class="token operator">:</span> dup<span class="token number">2</span><span class="token operator">:</span> invokespecial <span class="token comment">// Method java/lang/Object "&lt;init>"() V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>常量池、可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型</p><h3 id="4-4-运行时常量池"><a href="#4-4-运行时常量池" class="headerlink" title="4.4. 运行时常量池"></a>4.4. 运行时常量池</h3><ul><li>运行时常量池（Runtime Constant Pool）是方法区的一部分。</li><li>常量池表（Constant Pool Table）是 Class 文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li><li>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</li><li>JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</li><li>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。</li><li>运行时常量池，相对于 Class 文件常量池的另一重要特征是：具备动态性。</li><li>运行时常量池类似于传统编程语言中的符号表（symboltable），但是它所包含的数据却比符号表要更加丰富一些。</li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛 OutOfMemoryError 异常。</li></ul><h2 id="5-方法区使用举例"><a href="#5-方法区使用举例" class="headerlink" title="5. 方法区使用举例"></a>5. 方法区使用举例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202305142125066.png" alt="image-20210510151436251"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142126842.png" alt="image-20210510151504259"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2214af3dfe294eec73899c935589f569.png" alt="image-20210510151520952"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142126553.png" alt="image-20210510151609566"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142127448.png" alt="image-20210510151648231"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142127500.png" alt="image-20210510151712355"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142127377.png" alt="image-20210510151753579"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142128029.png" alt="image-20210510151829404"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142128042.png" alt="image-20210510151918342"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142128806.png" alt="image-20210510151951327"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142128004.png" alt="image-20200708205708057"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142129036.png" alt="image-20210510152102989"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142130385.png" alt="image-20210510152138492"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142130153.png" alt="image-20210510195824437"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142131279.png" alt="image-20210510195911639"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142131812.png" alt="image-20210510152243933"></p><h2 id="6-方法区的演进细节"><a href="#6-方法区的演进细节" class="headerlink" title="6. 方法区的演进细节"></a>6. 方法区的演进细节</h2><ol><li>首先明确：只有 Hotspot 才有永久代。BEA JRockit、IBMJ9 等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java 虚拟机规范》管束，并不要求统一</li><li>Hotspot 中方法区的变化：</li></ol><p>JDK1.6 及之前</p><p>有永久代（permanet），静态变量存储在永久代上</p><p><strong>JDK1.7</strong></p><p><strong>有永久代，但已经逐步 “去永久代”，字符串常量池，静态变量移除，保存在堆中</strong></p><p><strong>JDK1.8</strong></p><p><strong>无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中。</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305142132189.png" alt="image-20200708211541300"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142133358.png" alt="image-20200708211609911"></p><p><img src="http://img-md-js.linjsblog.top/img/202305142133682.png" alt="image-20200708211637952"></p><h3 id="6-1-为什么永久代要被元空间替代？"><a href="#6-1-为什么永久代要被元空间替代？" class="headerlink" title="6.1. 为什么永久代要被元空间替代？"></a>6.1. 为什么永久代要被元空间替代？</h3><p>官网地址：<a href="http://openjdk.java.net/jeps/122">JEP 122: Remove the Permanent Generation (java.net)</a></p><p><img src="http://img-md-js.linjsblog.top/img/202305142135443.png" alt="image-20210510163843564"></p><p>JRockit 是和 HotSpot 融合后的结果，因为 JRockit 没有永久代，所以他们不需要配置永久代</p><p>随着 Java8 的到来，HotSpot VM 中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域叫做元空间（Metaspace）。</p><p>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。</p><p>这项改动是很有必要的，原因有：</p><ul><li><p>为永久代设置空间大小是很难确定的。在某些场景下，如果动态加载类过多，容易产生 Perm 区的 oom。比如某个实际 Web 工 程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token string">"Exception in thread 'dubbo client x.x connector' java.lang.OutOfMemoryError:PermGen space"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。 因此，默认情况下，元空间的大小仅受本地内存限制。</p></li><li><p>对永久代进行调优是很困难的。</p></li></ul><p>有些人认为方法区（如 HotSpot 虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK 11 时期的 ZGC 收集器就不支持类卸载）。 一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前 Sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏</p><p>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。</p><h3 id="6-2-StringTable-为什么要调整位置？"><a href="#6-2-StringTable-为什么要调整位置？" class="headerlink" title="6.2. StringTable 为什么要调整位置？"></a>6.2. StringTable 为什么要调整位置？</h3><p>jdk7 中将 StringTable 放到了堆空间中。因为永久代的回收效率很低，在 full gc 的时候才会触发。而 full gc 是老年代的空间不足、永久代不足时才会触发。</p><p>这就导致 StringTable 回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。</p><h3 id="6-3-静态变量存放在那里？"><a href="#6-3-静态变量存放在那里？" class="headerlink" title="6.3. 静态变量存放在那里？"></a>6.3. 静态变量存放在那里？</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 静态引用对应的对象实体始终都存在堆空间 * jdk7: * -Xms200m -Xmx200m -XX:PermSize=300m -XX:MaxPermSize=300m -XX:+PrintGCDetails * jdk8: * -Xms200m -Xmx200m-XX:MetaspaceSize=300m -XX:MaxMetaspaceSize=300m -XX:+PrintGCDetails */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFieldTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StaticFieldTest</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * staticobj、instanceobj、Localobj存放在哪里？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticobjTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token class-name">ObjectHolder</span> staticobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectHolder</span> instanceobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ObjectHolder</span> localobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticobjTest<span class="token punctuation">.</span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 JHSDB 工具进行分析，这里细节略掉</p><p><img src="http://img-md-js.linjsblog.top/img/202305142139204.png" alt="image-20200708215218078"></p><p>staticobj 随着 Test 的类型信息存放在方法区，instanceobj 随着 Test 的对象实例存放在 Java 堆，localobject 则是存放在 foo()方法栈帧的局部变量表中。</p><p><img src="http://img-md-js.linjsblog.top/img/202305142139497.png" alt="image-20200708215025527"></p><p>测试发现：三个对象的数据在内存中的地址都落在 Eden 区范围内，所以结论：只要是对象实例必然会在 Java 堆中分配。</p><p>接着，找到了一个引用该 staticobj 对象的地方，是在一个 java.lang.Class 的实例里，并且给出了这个实例的地址，通过 Inspector 查看该对象实例，可以清楚看到这确实是一个 java.lang.Class 类型的对象实例，里面有一个名为 staticobj 的实例字段：</p><p>从《Java 虚拟机规范》所定义的概念模型来看，所有 Class 相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java 虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。JDK7 及其以后版本的 HotSpot 虚拟机选择把静态变量与类型在 Java 语言一端的映射 class 对象存放在一起，存储于 Java 堆之中，从我们的实验中也明确验证了这一点</p><h2 id="7-方法区的垃圾回收"><a href="#7-方法区的垃圾回收" class="headerlink" title="7. 方法区的垃圾回收"></a>7. 方法区的垃圾回收</h2><p>有些人认为方法区（如 Hotspot 虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如 JDK11 时期的 zGC 收集器就不支持类卸载）。</p><p>一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前 sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。</p><p>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。</p><p>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为 final 的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul><p>HotSpot 虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。</p><p>回收废弃常量与回收 Java 堆中的对象非常类似。</p><p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p><ul><li><p>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例。</p></li><li><p>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常是很难达成的。</p></li><li><p>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p></li></ul><p>Java 虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot 虚拟机提供了<code>-Xnoclassgc</code>参数进行控制，还可以使用<code>-verbose:class</code> 以及 <code>-XX:+TraceClassLoading</code>、<code>-XX:+TraceClassUnLoading</code>查看类加载和卸载信息</p><p>在大量使用反射、动态代理、CGLib 等字节码框架，动态生成 JSP 以及 OSGi 这类频繁自定义类加载器的场景中，通常都需要 Java 虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="http://img-md-js.linjsblog.top/img/202305142146318.png" alt="image-20200708220303243"></p><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><blockquote><p>百度：</p><p>说一下 JVM 内存模型吧，有哪些区？分别干什么的？</p><p>蚂蚁金服：</p><p>Java8 的内存分代改进 JVM 内存分哪几个区，每个区的作用是什么？</p><p>一面：JVM 内存分布&#x2F;内存结构？栈和堆的区别？堆的结构？为什么两个 survivor 区？</p><p>二面：Eden 和 survior 的比例分配</p><p>小米：</p><p>jvm 内存分区，为什么要有新生代和老年代</p><p>字节跳动：</p><p>二面：Java 的内存分区</p><p>二面：讲讲 vm 运行时数据库区 什么时候对象会进入老年代？</p><p>京东：</p><p>JVM 的内存结构，Eden 和 Survivor 比例。</p><p>JVM 内存为什么要分成新生代，老年代，持久代。</p><p>新生代中为什么要分为 Eden 和 survivor。</p><p>天猫：</p><p>一面：Jvm 内存模型以及分区，需要详细到每个区放什么。</p><p>一面：JVM 的内存模型，Java8 做了什么改</p><p>拼多多：</p><p>JVM 内存分哪几个区，每个区的作用是什么？</p><p>美团：</p><p>java 内存分配 jvm 的永久代中会发生垃圾回收吗？</p><p>一面：jvm 内存分区，为什么要有新生代和老年代？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(五) 堆</title>
      <link href="/2023/05/14/%E4%BA%94-%E5%A0%86/"/>
      <url>/2023/05/14/%E4%BA%94-%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h1 id="五-堆"><a href="#五-堆" class="headerlink" title="(五) 堆"></a>(五) 堆</h1><h2 id="1-堆（Heap）的核心概述"><a href="#1-堆（Heap）的核心概述" class="headerlink" title="1. 堆（Heap）的核心概述"></a>1. 堆（Heap）的核心概述</h2><p>堆针对一个 JVM 进程来说是唯一的，也就是一个进程只有一个 JVM，但是进程包含多个线程，他们是共享同一堆空间的。</p><p><img src="http://img-md-js.linjsblog.top/img/202209221405832.png" alt="image-20200706195127740"></p><p>一个 JVM 实例只存在一个堆内存，堆也是 Java 内存管理的核心区域。</p><p>Java 堆区在 JVM 启动的时候即被创建，其空间大小也就确定了。是 JVM 管理的最大一块内存空间。</p><ul><li>堆内存的大小是可以调节的。</li></ul><p>《Java 虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p><p>所有的线程共享 Java 堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</p><p>《Java 虚拟机规范》中对 Java 堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（<code>The heap is the run-time data area from which memory for all class instances and arrays is allocated</code>）</p><p>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p><p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p><p>堆，是 GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</p><p><img src="http://img-md-js.linjsblog.top/img/202209221405938.png" alt="image-20200706201904057"></p><h3 id="1-1-堆内存细分"><a href="#1-1-堆内存细分" class="headerlink" title="1.1. 堆内存细分"></a>1.1. 堆内存细分</h3><p>Java 7 及之前堆内存逻辑上分为三部分：新生区+养老区+永久区</p><ul><li>Young Generation Space 新生区 Young&#x2F;New 又被划分为 Eden 区和 Survivor 区</li><li>Tenure generation space 养老区 Old&#x2F;Tenure</li><li>Permanent Space 永久区 Perm</li></ul><p>Java 8 及之后堆内存逻辑上分为三部分：新生区+养老区+元空间</p><ul><li>Young Generation Space 新生区 Young&#x2F;New 又被划分为 Eden 区和 Survivor 区</li><li>Tenure generation space 养老区 Old&#x2F;Tenure</li><li>Meta Space 元空间 Meta</li></ul><p><strong>约定：新生区（代）&lt;&#x3D;&gt;年轻代 、 养老区&lt;&#x3D;&gt;老年区（代）、 永久区&lt;&#x3D;&gt;永久代</strong></p><h3 id="1-2-堆空间内部结构（JDK7）"><a href="#1-2-堆空间内部结构（JDK7）" class="headerlink" title="1.2. 堆空间内部结构（JDK7）"></a>1.2. 堆空间内部结构（JDK7）</h3><p><img src="http://img-md-js.linjsblog.top/img/202209221427253.png" alt="image-20200706203419496"></p><h3 id="1-3-堆空间内部结构（JDK8）"><a href="#1-3-堆空间内部结构（JDK8）" class="headerlink" title="1.3. 堆空间内部结构（JDK8）"></a>1.3. 堆空间内部结构（JDK8）</h3><p><img src="http://img-md-js.linjsblog.top/img/202209221427809.png" alt="image-20200706203835403"></p><h2 id="2-设置堆内存大小与-OOM"><a href="#2-设置堆内存大小与-OOM" class="headerlink" title="2. 设置堆内存大小与 OOM"></a>2. 设置堆内存大小与 OOM</h2><h3 id="2-1-堆空间大小的设置"><a href="#2-1-堆空间大小的设置" class="headerlink" title="2.1. 堆空间大小的设置"></a>2.1. 堆空间大小的设置</h3><p>Java 堆区用于存储 Java 对象实例，那么堆的大小在 JVM 启动时就已经设定好了，大家可以通过选项”-Xmx”和”-Xms”来进行设置。</p><ul><li>“-Xms”用于表示堆区的起始内存，等价于<code>-XX:InitialHeapSize</code></li><li>“-Xmx”则用于表示堆区的最大内存，等价于<code>-XX:MaxHeapSize</code></li></ul><p>一旦堆区中的内存大小超过“-Xmx”所指定的最大内存时，将会抛出 OutOfMemoryError 异常。</p><p>通常会将-Xms 和-Xmx 两个参数配置相同的值，其目的是为了能够在 ava 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。</p><p>默认情况下</p><ul><li>初始内存大小：物理电脑内存大小 &#x2F; 64</li><li>最大内存大小：物理电脑内存大小 &#x2F; 4</li></ul><h3 id="2-2-OutOfMemory-举例"><a href="#2-2-OutOfMemory-举例" class="headerlink" title="2.2. OutOfMemory 举例"></a>2.2. OutOfMemory 举例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Picture</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutofMemoryError</span><span class="token operator">:</span> <span class="token class-name">Java</span> heap space    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span> java<span class="token punctuation">.</span></span>Picture</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">OOMTest</span><span class="token punctuation">.</span> java<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span>    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span>O0MTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OOMTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-年轻代与老年代"><a href="#3-年轻代与老年代" class="headerlink" title="3. 年轻代与老年代"></a>3. 年轻代与老年代</h2><p>存储在 JVM 中的 Java 对象可以被划分为两类：</p><ul><li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速</li><li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与 JVM 的生命周期保持一致</li></ul><p>Java 堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（OldGen）</p><p>其中年轻代又可以划分为 Eden 空间、Survivor0 空间和 Survivor1 空间（有时也叫做 from 区、to 区）</p><p><img src="http://img-md-js.linjsblog.top/img/202305141927625.png" alt="image-20200707075847954"></p><p>下面这参数开发中一般不会调：</p><p><img src="http://img-md-js.linjsblog.top/img/202305141927662.png" alt="image-20200707080154039"></p><p>配置新生代与老年代在堆结构的占比。</p><ul><li>默认<code>-XX:NewRatio=2</code>，表示新生代占 1，老年代占 2，新生代占整个堆的 1&#x2F;3</li><li>可以修改<code>-XX:NewRatio=4</code>，表示新生代占 1，老年代占 4，新生代占整个堆的 1&#x2F;5</li></ul><p>在 HotSpot 中，Eden 空间和另外两个 survivor 空间缺省所占的比例是 8：1：1</p><p>当然开发人员可以通过选项“<code>-xx:SurvivorRatio</code>”调整这个空间比例。比如<code>-xx:SurvivorRatio=8</code></p><p>几乎所有的 Java 对象都是在 Eden 区被 new 出来的。绝大部分的 Java 对象的销毁都在新生代进行了。</p><ul><li>IBM 公司的专门研究表明，新生代中 80%的对象都是“朝生夕死”的。</li></ul><p>可以使用选项”<code>-Xmn</code>“设置新生代最大内存大小，这个参数一般使用默认值就可以了。</p><p><img src="http://img-md-js.linjsblog.top/img/202305141926381.png" alt="image-20210510105849497"></p><h2 id="4-图解对象分配过程"><a href="#4-图解对象分配过程" class="headerlink" title="4. 图解对象分配过程"></a>4. 图解对象分配过程</h2><p>为新对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。</p><ol><li><p>new 的对象先放伊甸园区。此区有大小限制。</p></li><li><p>当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区</p></li><li><p>然后将伊甸园中的剩余对象移动到幸存者 0 区。</p></li><li><p>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者 0 区的，如果没有回收，就会放到幸存者 1 区。</p></li><li><p>如果再次经历垃圾回收，此时会重新放回幸存者 0 区，接着再去幸存者 1 区。</p></li><li><p>啥时候能去养老区呢？可以设置次数。默认是 15 次。</p><ul><li>可以设置参数：<code>-Xx:MaxTenuringThreshold= N</code>进行设置</li></ul></li><li><p>在养老区，相对悠闲。当养老区内存不足时，再次触发 GC：Major GC，进行养老区的内存清理</p></li><li><p>若养老区执行了 Major GC 之后，发现依然无法进行对象的保存，就会产生 OOM 异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>OutofMemoryError</span><span class="token operator">:</span> <span class="token class-name">Java</span> heap space<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="http://img-md-js.linjsblog.top/img/202305141929038.jpeg" alt="第08章_新生代对象分配与回收过程"></p><p><strong>流程图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202305141929135.png" alt="image-20200707091058346"></p><p><strong>总结</strong></p><ul><li>针对幸存者 s0，s1 区的总结：复制之后有交换，谁空谁是 to</li><li>关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集</li></ul><p><strong>常用调优工具（在 JVM 下篇：性能监控与调优篇会详细介绍）</strong></p><ul><li>JDK 命令行</li><li>Eclipse:Memory Analyzer Tool</li><li>Jconsole</li><li>VisualVM</li><li>Jprofiler</li><li>Java Flight Recorder</li><li>GCViewer</li><li>GC Easy</li></ul><h2 id="5-Minor-GC，MajorGC、Full-GC"><a href="#5-Minor-GC，MajorGC、Full-GC" class="headerlink" title="5. Minor GC，MajorGC、Full GC"></a>5. Minor GC，MajorGC、Full GC</h2><p>JVM 在进行 GC 时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。</p><p>针对 Hotspot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）</p><ul><li>部分收集：不是完整收集整个 Java 堆的垃圾收集。其中又分为：<ul><li>新生代收集（Minor GC &#x2F; Young GC）：只是新生代的垃圾收集</li><li>老年代收集（Major GC &#x2F; Old GC）：只是老年代的圾收集。</li><li>目前，只有 CMSGC 会有单独收集老年代的行为。</li><li>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。</li><li>混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。</li><li>目前，只有 G1 GC 会有这种行为</li></ul></li><li>整堆收集（Full GC）：收集整个 java 堆和方法区的垃圾收集。</li></ul><h3 id="5-1-最简单的分代式-GC-策略的触发条件"><a href="#5-1-最简单的分代式-GC-策略的触发条件" class="headerlink" title="5.1. 最简单的分代式 GC 策略的触发条件"></a>5.1. 最简单的分代式 GC 策略的触发条件</h3><h3 id="年轻代-GC（Minor-GC）触发机制"><a href="#年轻代-GC（Minor-GC）触发机制" class="headerlink" title="年轻代 GC（Minor GC）触发机制"></a>年轻代 GC（Minor GC）触发机制</h3><ul><li><p>当年轻代空间不足时，就会触发 MinorGC，这里的年轻代满指的是 Eden 代满，Survivor 满不会引发 GC。（每次 Minor GC 会清理年轻代的内存。）</p></li><li><p>因为Java 对象大多都具备朝生夕灭的特性.，所以 Minor GC 非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p></li><li><p>Minor GC 会引发 STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305141933580.png" alt="image-20200707095606813"></p><h3 id="老年代-GC（Major-GC-Full-GC）触发机制"><a href="#老年代-GC（Major-GC-Full-GC）触发机制" class="headerlink" title="老年代 GC（Major GC &#x2F; Full GC）触发机制"></a>老年代 GC（Major GC &#x2F; Full GC）触发机制</h3><ul><li><p>指发生在老年代的 GC，对象从老年代消失时，我们说 “Major GC” 或 “Full GC” 发生了</p></li><li><p>出现了 Major GC，经常会伴随至少一次的 Minor GC（但非绝对的，在 Paralle1 Scavenge 收集器的收集策略里就有直接进行 MajorGC 的策略选择过程）</p><ul><li><strong>也就是在老年代空间不足时，会先尝试触发 Minor GC。如果之后空间还不足，则触发 Major GC</strong></li></ul></li><li><p>Major GC 的速度一般会比 Minor GC 慢 10 倍以上，STW 的时间更长</p></li><li><p>如果 Major GC 后，内存还不足，就报 OOM 了</p></li></ul><h3 id="Full-GC-触发机制（后面细讲）："><a href="#Full-GC-触发机制（后面细讲）：" class="headerlink" title="Full GC 触发机制（后面细讲）："></a>Full GC 触发机制（后面细讲）：</h3><p>触发 Full GC 执行的情况有如下五种：</p><ol><li>调用 System.gc()时，系统建议执行 Full GC，但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过 Minor GC 后进入老年代的平均大小大于老年代的可用内存</li><li>由 Eden 区、survivor space0（From Space）区向 survivor space1（To Space）区复制时，对象大小大于 To Space 可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li></ol><p>说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些</p><h2 id="6-堆空间分代思想"><a href="#6-堆空间分代思想" class="headerlink" title="6. 堆空间分代思想"></a>6. 堆空间分代思想</h2><p>为什么要把 Java 堆分代？不分代就不能正常工作了吗？</p><p>经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。</p><ul><li>新生代：有 Eden、两块大小相同的 survivor（又称为 from&#x2F;to，s0&#x2F;s1）构成，to 总为空。</li><li>老年代：存放新生代中经历多次 GC 仍然存活的对象。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305141935382.png" alt="image-20200707101511025"></p><p>其实不分代完全可以，分代的唯一理由就是优化 GC 性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC 的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当 GC 的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。</p><p><img src="http://img-md-js.linjsblog.top/img/202305141935740.png" alt="image-20200707101543871"></p><h2 id="7-内存分配策略"><a href="#7-内存分配策略" class="headerlink" title="7. 内存分配策略"></a>7. 内存分配策略</h2><p>如果对象在 Eden 出生并经过第一次 Minor GC 后仍然存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为 1。对象在 Survivor 区中每熬过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁，其实每个 JVM、每个 GC 都有所不同）时，就会被晋升到老年代</p><p>对象晋升老年代的年龄阀值，可以通过选项<code>-XX:MaxTenuringThreshold</code>来设置</p><p>针对不同年龄段的对象分配原则如下所示：</p><ul><li>优先分配到 Eden</li><li>大对象直接分配到老年代（尽量避免程序中出现过多的大对象）</li><li>长期存活的对象分配到老年代</li><li>动态对象年龄判断：如果 survivor 区中相同年龄的所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到<code>MaxTenuringThreshold</code>中要求的年龄。</li><li>空间分配担保： <code>-XX:HandlePromotionFailure</code></li></ul><h2 id="8-为对象分配内存：TLAB"><a href="#8-为对象分配内存：TLAB" class="headerlink" title="8. 为对象分配内存：TLAB"></a>8. 为对象分配内存：TLAB</h2><h3 id="8-1-为什么有-TLAB（Thread-Local-Allocation-Buffer）？"><a href="#8-1-为什么有-TLAB（Thread-Local-Allocation-Buffer）？" class="headerlink" title="8.1. 为什么有 TLAB（Thread Local Allocation Buffer）？"></a>8.1. 为什么有 TLAB（Thread Local Allocation Buffer）？</h3><ul><li><p>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</p></li><li><p>由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</p></li><li><p>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</p></li></ul><h3 id="8-2-什么是-TLAB？"><a href="#8-2-什么是-TLAB？" class="headerlink" title="8.2. 什么是 TLAB？"></a>8.2. 什么是 TLAB？</h3><ul><li><p>从内存模型而不是垃圾收集的角度，对 Eden 区域继续进行划分，JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 空间内。</p></li><li><p>多线程同时分配内存时，使用 TLAB 可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。</p></li><li><p>据我所知所有 OpenJDK 衍生出来的 JVM 都提供了 TLAB 的设计。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305141945673.png" alt="image-20210510114110526"></p><h3 id="8-3-TLAB-的再说明"><a href="#8-3-TLAB-的再说明" class="headerlink" title="8.3. TLAB 的再说明"></a>8.3. TLAB 的再说明</h3><ul><li><p>尽管不是所有的对象实例都能够在 TLAB 中成功分配内存，但JVM 确实是将 TLAB 作为内存分配的首选。</p></li><li><p>在程序中，开发人员可以通过选项“<code>-XX:UseTLAB</code>”设置是否开启 TLAB 空间。</p></li><li><p>默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的 1%，当然我们可以通过选项 “<code>-XX:TLABWasteTargetPercent</code>” 设置 TLAB 空间所占用 Eden 空间的百分比大小。</p></li><li><p>一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在 Eden 空间中分配内存。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202305141945024.png" alt="image-20200707104253530"></p><h2 id="9-小结：堆空间的参数设置"><a href="#9-小结：堆空间的参数设置" class="headerlink" title="9. 小结：堆空间的参数设置"></a>9. 小结：堆空间的参数设置</h2><p>官网地址：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html">https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 详细的参数内容会在JVM下篇：性能监控与调优篇中进行详细介绍，这里先熟悉下</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintFlagsInitial</span>  <span class="token comment">//查看所有的参数的默认初始值</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintFlagsFinal</span>  <span class="token comment">//查看所有的参数的最终值（可能会存在修改，不再是初始值）</span><span class="token operator">-</span><span class="token class-name">Xms</span>  <span class="token comment">//初始堆空间内存（默认为物理内存的1/64）</span><span class="token operator">-</span><span class="token class-name">Xmx</span>  <span class="token comment">//最大堆空间内存（默认为物理内存的1/4）</span><span class="token operator">-</span><span class="token class-name">Xmn</span>  <span class="token comment">//设置新生代的大小。（初始值及最大值）</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">NewRatio</span>  <span class="token comment">//配置新生代与老年代在堆结构的占比</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">SurvivorRatio</span>  <span class="token comment">//设置新生代中Eden和S0/S1空间的比例</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxTenuringThreshold</span>  <span class="token comment">//设置新生代垃圾的最大年龄</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintGCDetails</span> <span class="token comment">//输出详细的GC处理日志</span><span class="token comment">//打印gc简要信息：①-Xx：+PrintGC ② - verbose:gc</span><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">HandlePromotionFalilure</span>：<span class="token comment">//是否设置空间分配担保</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在发生 Minor GC 之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</p><ul><li>如果大于，则此次 Minor GC 是安全的</li><li>如果小于，则虚拟机会查看<code>-XX:HandlePromotionFailure</code>设置值是否允担保失败。<ul><li>如果<code>HandlePromotionFailure=true</code>，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。</li><li>如果大于，则尝试进行一次 Minor GC，但这次 Minor GC 依然是有风险的；</li><li>如果小于，则改为进行一次 Full GC。</li><li>如果<code>HandlePromotionFailure=false</code>，则改为进行一次 Full GC。</li></ul></li></ul><p>在 JDK6 Update24 之后，HandlePromotionFailure 参数不会再影响到虚拟机的空间分配担保策略，观察 openJDK 中的源码变化，虽然源码中还定义了 HandlePromotionFailure 参数，但是在代码中已经不会再使用它。JDK6 Update 24 之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行 Minor GC，否则将进行 FullGC。</p><h2 id="X-堆是分配对象的唯一选择么？"><a href="#X-堆是分配对象的唯一选择么？" class="headerlink" title="X. 堆是分配对象的唯一选择么？"></a>X. 堆是分配对象的唯一选择么？</h2><p>在《深入理解 Java 虚拟机》中关于 Java 堆内存有这样一段描述：</p><blockquote><p>随着 JIT 编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。</p></blockquote><p>在 Java 虚拟机中，对象是在 Java 堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配.。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p><p>此外，前面提到的基于 OpenJDK 深度定制的 TaoBaoVM，其中创新的 GCIH（GC invisible heap）技术实现 off-heap，将生命周期较长的 Java 对象从 heap 中移至 heap 外，并且 GC 不能管理 GCIH 内部的 Java 对象，以此达到降低 GC 的回收频率和提升 GC 的回收效率的目的。</p><h3 id="X-1-逃逸分析概述"><a href="#X-1-逃逸分析概述" class="headerlink" title="X.1. 逃逸分析概述"></a>X.1. 逃逸分析概述</h3><p>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</p><p>这是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</p><p>通过逃逸分析，Java Hotspot 编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</p><p>逃逸分析的基本行为就是分析对象动态作用域：</p><ul><li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li><li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li></ul><p><strong>举例 1</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">my_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">V</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// use v</span>    <span class="token comment">// ....</span>    v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuffer</span> <span class="token function">createStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述方法如果想要<code>StringBuffer sb</code>不发生逃逸，可以这样写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例 2</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EscapeAnalysis</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">EscapeAnalysis</span> obj<span class="token punctuation">;</span>    <span class="token comment">/**     * 方法返回EscapeAnalysis对象，发生逃逸     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">EscapeAnalysis</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 为成员属性赋值，发生逃逸     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对象的作用于仅在当前方法中有效，没有发生逃逸     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useEscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EscapeAnalysis</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 引用成员变量的值，发生逃逸     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useEscapeAnalysis2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EscapeAnalysis</span> e <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数设置</strong></p><p>在 JDK 6u23 版本之后，HotSpot 中默认就已经开启了逃逸分析</p><p>如果使用的是较早的版本，开发人员则可以通过：</p><ul><li>选项“<code>-XX:+DoEscapeAnalysis</code>“显式开启逃逸分析</li><li>通过选项“<code>-XX:+PrintEscapeAnalysis</code>“查看逃逸分析的筛选结果</li></ul><p><strong>结论</strong>：开发中能使用局部变量的，就不要使用在方法外定义。</p><h3 id="X-2-逃逸分析：代码优化"><a href="#X-2-逃逸分析：代码优化" class="headerlink" title="X.2. 逃逸分析：代码优化"></a>X.2. 逃逸分析：代码优化</h3><p>使用逃逸分析，编译器可以对代码做如下优化：</p><p>一、栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配</p><p>二、同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p><p>三、分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在 CPU 寄存器中。</p><h4 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h4><p>JIT 编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p><p><strong>常见的栈上分配的场景</strong></p><p>在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。</p><h4 id="同步省略"><a href="#同步省略" class="headerlink" title="同步省略"></a>同步省略</h4><p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p><p>在动态编译同步块的时候，JIT 编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。如果没有，那么 JIT 编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</p><p><strong>举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> hellis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>hellis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hellis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中对 hellis 这个对象加锁，但是 hellis 对象的生命周期只在 f()方法中，并不会被其他线程所访问到，所以在 JIT 编译阶段就会被优化掉，优化成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> hellis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hellis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h4><p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java 中的原始数据类型就是标量。</p><p>相对的，那些还可以分解的数据叫做聚合量（Aggregate），Java 中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p><p>在 JIT 阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过 JIT 优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p><p><strong>举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"point.x"</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">";point.y"</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码，经过标量替换后，就会变成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"point.x = "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"; point.y="</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Point 这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。 标量替换为栈上分配提供了很好的基础。</p><p><strong>标量替换参数设置</strong></p><p>参数<code>-XX:EliminateAllocations</code>：开启了标量替换（默认打开），允许将对象打散分配到栈上。</p><p>上述代码在主函数中进行了 1 亿次 alloc。调用进行对象创建，由于 User 对象实例需要占据约 16 字节的空间，因此累计分配空间达到将近 1.5GB。如果堆空间小于这个值，就必然会发生 GC。使用如下参数运行上述代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-server</span> <span class="token parameter variable">-Xmx100m</span> <span class="token parameter variable">-Xms100m</span> <span class="token parameter variable">-XX:+DoEscapeAnalysis</span> <span class="token parameter variable">-XX:+PrintGC</span> <span class="token parameter variable">-XX:+EliminateAllocations</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里设置参数如下：</p><ul><li>参数<code>-server</code>：启动 Server 模式，因为在 server 模式下，才可以启用逃逸分析。</li><li>参数<code>-XX:+DoEscapeAnalysis</code>：启用逃逸分析</li><li>参数<code>-Xmx10m</code>：指定了堆空间最大为 10MB</li><li>参数<code>-XX:+PrintGC</code>：将打印 Gc 日志</li><li>参数<code>-XX:+EliminateAllocations</code>：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有 id 和 name 两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配</li></ul><h3 id="X-3-逃逸分析小结：逃逸分析并不成熟"><a href="#X-3-逃逸分析小结：逃逸分析并不成熟" class="headerlink" title="X.3. 逃逸分析小结：逃逸分析并不成熟"></a>X.3. 逃逸分析小结：逃逸分析并不成熟</h3><p>关于逃逸分析的论文在 1999 年就已经发表了，但直到 JDK1.6 才有实现，而且这项技术到如今也并不是十分成熟。</p><p>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。</p><p>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p><p>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。</p><p>注意到有一些观点，认为通过逃逸分析，JVM 会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于 JVM 设计者的选择。据我所知，Oracle Hotspot JVM 中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p><p>目前很多书籍还是基于 JDK7 以前的版本，JDK 已经发生了很大变化，intern 字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern 字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</p><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</p><p>老年代放置长生命周期的对象，通常都是从 survivor 区域筛选拷贝过来的 Java 对象。当然，也有特殊情况，我们知道普通的对象会被分配在 TLAB 上；如果对象较大，JVM 会试图直接分配在 Eden 其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM 就会直接分配到老年代。当 GC 只发生在年轻代中，回收年轻代对象的行为被称为 MinorGc。</p><p>当 GC 发生在老年代时则被称为 MajorGC 或者 FullGC。一般的，MinorGc 的发生频率要比 MajorGC 高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>（四）本地方法接口和本地方法栈</title>
      <link href="/2023/05/14/%EF%BC%88%E5%9B%9B%EF%BC%89%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/"/>
      <url>/2023/05/14/%EF%BC%88%E5%9B%9B%EF%BC%89%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="（四）本地方法接口和本地方法栈"><a href="#（四）本地方法接口和本地方法栈" class="headerlink" title="（四）本地方法接口和本地方法栈"></a>（四）本地方法接口和本地方法栈</h1><h2 id="1-什么是本地方法？"><a href="#1-什么是本地方法？" class="headerlink" title="1. 什么是本地方法？"></a>1. 什么是本地方法？</h2><p>简单地讲，一个 Native Method 是一个 Java 调用非 Java 代码的接囗。一个 Native Method 是这样一个 Java 方法：该方法的实现由非 Java 语言实现，比如 C。这个特征并非 Java 所特有，很多其它的编程语言都有这一机制，比如在 C++中，你可以用 extern “c” 告知 c++编译器去调用一个 c 的函数。</p><blockquote><p>A native method is a Java method whose implementation is provided by non-java code.</p></blockquote><p>在定义一个 native method 时，并不提供实现体（有些像定义一个 Java interface），因为其实现体是由非 java 语言在外面实现的。</p><p>本地接口的作用是融合不同的编程语言为 Java 所用，它的初衷是融合 C&#x2F;C++程序。 <img src="http://img-md-js.linjsblog.top/img/202209221110689.png" alt="image-20200706164139252"></p><p>举例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IHaveNatives</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">methodNative1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">methodNative2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">synchronized</span> <span class="token keyword">float</span> <span class="token function">methodNative3</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">methodNative4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ary<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标识符 native 可以与其它 java 标识符连用，但是 abstract 除外</p><h2 id="2-为什么使用-Native-Method？"><a href="#2-为什么使用-Native-Method？" class="headerlink" title="2. 为什么使用 Native Method？"></a>2. 为什么使用 Native Method？</h2><p>Java 使用起来非常方便，然而有些层次的任务用 Java 实现起来不容易，或者我们对程序的效率很在意时，问题就来了。</p><p><strong>与 Java 环境的交互</strong></p><p>有时 Java 应用需要与 Java 外面的环境交互，这是本地方法存在的主要原因。你可以想想 Java 需要与一些底层系统，如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解 Java 应用之外的繁琐的细节。</p><p><strong>与操作系统的交互</strong></p><p>JVM 支持着 Java 语言本身和运行时库，它是 Java 程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一底层系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用 Java 实现了 jre 的与底层系统的交互，甚至 JVM 的一些部分就是用 c 写的。还有，如果我们要使用一些 Java 语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</p><p><strong>Sun’s Java</strong></p><p>Sun 的解释器是用 C 实现的，这使得它能像一些普通的 C 一样与外部交互。jre 大部分是用 Java 实现的，它也通过一些本地方法与外界交互。例如：类 java.lang.Thread 的 setPriority()方法是用 Java 实现的，但是它实现调用的是该类里的本地方法 setPriority()。这个本地方法是用 C 实现的，并被植入 JVM 内部，在 Windows 95 的平台上，这个本地方法最终将调用 Win32 setPriority() ApI。这是一个本地方法的具体实现由 JVM 直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被 JVM 调用。</p><p><strong>现状</strong></p><p>目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过 Java 程序驱动打印机或者 Java 系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用 Socket 通信，也可以使用 Web Service 等等，不多做介绍。</p><h2 id="2-本地方法栈"><a href="#2-本地方法栈" class="headerlink" title="2. 本地方法栈"></a>2. 本地方法栈</h2><p>Java 虚拟机栈于管理 Java 方法的调用，而本地方法栈用于管理本地方法的调用。</p><p>本地方法栈，也是线程私有的。</p><p>允许被实现成固定或者是可动态扩展的内存大小。（在内存溢出方面是相同的）</p><ul><li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java 虚拟机将会抛出一个 StackOverflowError 异常。</li><li>如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么 Java 虚拟机将会抛出一个 OutOfMemoryError 异常。</li></ul><p>本地方法是使用 C 语言实现的。</p><p>它的具体做法是 Native Method Stack 中登记 native 方法，在 Execution Engine 执行时加载本地方法库。</p><p><img src="http://img-md-js.linjsblog.top/img/202305141916393.png" alt="image-20200706174708418"></p><p>当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限。</p><ul><li>本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区。</li><li>它甚至可以直接使用本地处理器中的寄存器</li><li>直接从本地内存的堆中分配任意数量的内存。</li></ul><p>并不是所有的 JVM 都支持本地方法。因为 Java 虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等。如果 JVM 产品不打算支持 native 方法，也可以无需实现本地方法栈。</p><p>在 Hotspot JVM 中，直接将本地方法栈和虚拟机栈合二为一。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TallerX</title>
      <link href="/2023/03/31/tallerx/"/>
      <url>/2023/03/31/tallerx/</url>
      
        <content type="html"><![CDATA[<h2 id="TallerX"><a href="#TallerX" class="headerlink" title="TallerX"></a>TallerX</h2><p><img src="http://img-md-js.linjsblog.top/img/202303302203988.png" alt="image-20230330220319860"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302223256.png" alt="image-20230330222355428"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302227136.png" alt="image-20230330222701304"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302228656.png" alt="image-20230330222817475"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302236596.png" alt="image-20230330223627767"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302236220.png" alt="image-20230330223652355"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302237298.png" alt="image-20230330223741492"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302243100.png" alt="image-20230330224357085"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302247583.png" alt="image-20230330224753764"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302302883.png" alt="image-20230330230224114"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302308419.png" alt="image-20230330230812806"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302307124.png" alt="image-20230330230744097"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302309375.png" alt="image-20230330230923489"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302310159.png" alt="image-20230330231023217"></p>]]></content>
      
      
      <categories>
          
          <category> dcits </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Glaxy 3.0</title>
      <link href="/2023/03/31/glaxy-3-0/"/>
      <url>/2023/03/31/glaxy-3-0/</url>
      
        <content type="html"><![CDATA[<h2 id="Glaxy-3-0"><a href="#Glaxy-3-0" class="headerlink" title="Glaxy 3.0"></a>Glaxy 3.0</h2><p><img src="http://img-md-js.linjsblog.top/img/202303302134030.png" alt="image-20230330213432649"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302135709.png" alt="image-20230330213544827"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302137708.png" alt="image-20230330213721805"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302138458.png" alt="image-20230330213833504"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302139617.png" alt="image-20230330213900711"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302140506.png" alt="image-20230330214035685"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302145955.png" alt="image-20230330214519211"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302148938.png" alt="image-20230330214822147"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302149952.png" alt="image-20230330214949887"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302150219.png" alt="image-20230330215017371"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302150843.png" alt="image-20230330215048997"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302151991.png" alt="image-20230330215130040"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302151051.png" alt="image-20230330215155230"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302152025.png" alt="image-20230330215248046"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302153459.png" alt="image-20230330215306590"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302153407.png" alt="image-20230330215356444"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302154482.png" alt="image-20230330215428531"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302154432.png" alt="image-20230330215457539"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302155155.png" alt="image-20230330215550369"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302156812.png" alt="image-20230330215626055"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302159314.png" alt="image-20230330215931449"></p>]]></content>
      
      
      <categories>
          
          <category> dcits </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式技术架构的演进</title>
      <link href="/2023/03/31/422/"/>
      <url>/2023/03/31/422/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式技术架构的演进"><a href="#分布式技术架构的演进" class="headerlink" title="分布式技术架构的演进"></a>分布式技术架构的演进</h2><p><img src="http://img-md-js.linjsblog.top/img/202303301820868.png" alt="image-20230330181948474"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301820889.png" alt="image-20230330182024524"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301822292.png" alt="image-20230330182218331"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301908673.png" alt="image-20230330190822711"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301928655.png" alt="image-20230330192807798"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301928795.png" alt="image-20230330192739611"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301946006.png" alt="image-20230330194559580"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301951204.png" alt="image-20230330195116343"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302003332.png" alt="image-20230330200300346"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302003427.png" alt="image-20230330200338557"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302016324.png" alt="image-20230330201649480"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302018293.png" alt="image-20230330201825022"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302024668.png" alt="image-20230330202403875"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302023863.png" alt="image-20230330202339996"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302035145.png" alt="image-20230330203504135"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302035447.png" alt="image-20230330203546511"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302041278.png" alt="image-20230330204132991"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302048427.png" alt="image-20230330204823182"></p><p><img src="http://img-md-js.linjsblog.top/img/202303302050026.png" alt="image-20230330205039077"></p>]]></content>
      
      
      <categories>
          
          <category> dcits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle 中 SQL的执行流程</title>
      <link href="/2023/03/31/oracle-%E4%B8%AD-sql%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/03/31/oracle-%E4%B8%AD-sql%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Oracle-中-SQL的执行流程"><a href="#Oracle-中-SQL的执行流程" class="headerlink" title="Oracle 中 SQL的执行流程"></a>Oracle 中 SQL的执行流程</h2><p><img src="http://img-md-js.linjsblog.top/img/202303301648277.png" alt="SQL执行流程"></p><p>当用户提交待执行的目标SQL给Oracle后，Oracle首先会执行对目标SQL的校验过程。在这个校验过程中，Oracle会执行对目标SQL的语法、语义和权限检查，然后对SQL进行等价改写。</p><p>接下来，就正式进入了查询优化（Query Optimization)这个步骤，在这个步骤里，根据不同的优化器类型，Oracle会根据不同的判断原则来从执行完查询转换这一步后得到的目标SQL的诸多可能的执行路径（Access Path）中选择一条执行路径来作为其执行计划，即查询优化的偷入就是执行完查询转换这一步后得到的等价改写SQL，其输出就是该SQL的执行计划。</p><p>在得到了目标SQL的执行计划后，接下来Oracle就会根据得到的执行计划去实际执行该SQL并将执行结果返问给用户。</p><p>以上就是Oracle数据库里SQL语句的大致执行过程，我们有时又将上述执行步骤中的“校验”、“查询转换”、“查询优化”这三个步骤统称为执行目标SQL过程中的解析(parse).确定执行计划是比较昂贵的步骤!</p><p><img src="http://img-md-js.linjsblog.top/img/202303301651415.png" alt="image-20230330165125072"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301653909.png" alt="image-20230330165333489"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301654639.png" alt="image-20230330165404715"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301657845.png" alt="image-20230330165659903"></p><p>执行计划怎么看？</p><p><img src="http://img-md-js.linjsblog.top/img/202303301713791.png" alt="image-20230330171309517"></p><p>单表访问路径</p><p><img src="http://img-md-js.linjsblog.top/img/202303301714136.png" alt="image-20230330171411014"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301716408.png" alt="image-20230330171640579"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301719763.png" alt="image-20230330171859690"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301719069.png" alt="image-20230330171915783"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301720508.png" alt="image-20230330172024548"></p><p><strong>分析工具</strong></p><p>1.EM</p><p>2.AWR报告</p><p><img src="http://img-md-js.linjsblog.top/img/202303301728964.png" alt="image-20230330172800092"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301729247.png" alt="image-20230330172917360"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301730607.png" alt="image-20230330173047683"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301732504.png" alt="image-20230330173215634"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301732476.png" alt="image-20230330173248555"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301734704.png" alt="image-20230330173450853"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301735933.png" alt="image-20230330173527929"></p><p>ASH 报告工具</p><p><img src="http://img-md-js.linjsblog.top/img/202303301736464.png" alt="image-20230330173625659"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301738423.png" alt="image-20230330173802629"></p><p><strong>获取SQL执行计划</strong>：</p><p>方式一：awrsqlrpt</p><p><img src="http://img-md-js.linjsblog.top/img/202303301741763.png" alt="image-20230330174148815"></p><p>方式二：sqlplus</p><p><img src="http://img-md-js.linjsblog.top/img/202303301743380.png" alt="image-20230330174344169"></p><p><strong>最常用的方式三：explain plan</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202303301740415.png" alt="image-20230330174008460"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301740469.png" alt="image-20230330174024665"></p><p>方式四：获取缓存中的sql执行计划</p><p><img src="http://img-md-js.linjsblog.top/img/202303301745506.png" alt="image-20230330174552611"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301746268.png" alt="image-20230330174628055"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301747470.png" alt="image-20230330174729540"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301748514.png" alt="image-20230330174855259"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301749038.png" alt="image-20230330174913123"></p><p>索引创建：</p><p><img src="http://img-md-js.linjsblog.top/img/202303301750115.png" alt="image-20230330175035374"></p><p>适合建索引的列</p><p><img src="http://img-md-js.linjsblog.top/img/202303301754525.png" alt="image-20230330175403147"></p><p>不适合建索引的列</p><p><img src="http://img-md-js.linjsblog.top/img/202303301754720.png" alt="image-20230330175425540"></p><p>不走索引的情况</p><p><img src="http://img-md-js.linjsblog.top/img/202303301757565.png" alt="image-20230330175727542"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301758973.png" alt="image-20230330175815160"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301802514.png" alt="image-20230330180224396"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301802166.png" alt="image-20230330180240312"></p><p><img src="http://img-md-js.linjsblog.top/img/202303301804293.png" alt="image-20230330180447216"></p>]]></content>
      
      
      <categories>
          
          <category> dcits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依框架改造之动态数据源切换和引入mybatis-plus</title>
      <link href="/2023/03/21/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E6%94%B9%E9%80%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2%E5%92%8C%E5%BC%95%E5%85%A5mybatis-plus/"/>
      <url>/2023/03/21/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E6%94%B9%E9%80%A0%E4%B9%8B%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2%E5%92%8C%E5%BC%95%E5%85%A5mybatis-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="若依框架改造之动态数据源切换和引入mybatis-plus"><a href="#若依框架改造之动态数据源切换和引入mybatis-plus" class="headerlink" title="若依框架改造之动态数据源切换和引入mybatis-plus"></a>若依框架改造之动态数据源切换和引入mybatis-plus</h1><h2 id="多数据源配置"><a href="#多数据源配置" class="headerlink" title="多数据源配置"></a>多数据源配置</h2><p>之前为了给我的校内资源共享与交流平台开发一个后台管理系统，我们在RuoYi-Vue基础上进行开发，由于若依和前台项目用的不是一个数据库我们需要配置多数据源，要实现Spring boot的动态数据源切换，在若依中已经在DruidConfig和DynamicDataSource继承了AbstractRoutingDataSource配置了多数据源，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * druid 配置多数据源 *  * @author ruoyi */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.druid.master"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token class-name">DruidProperties</span> druidProperties<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> druidProperties<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.druid.slave"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.slave"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">slaveDataSource</span><span class="token punctuation">(</span><span class="token class-name">DruidProperties</span> druidProperties<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> druidProperties<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"dynamicDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> <span class="token class-name">DynamicDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> masterDataSource<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> targetDataSources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSources<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DataSourceType</span><span class="token punctuation">.</span><span class="token constant">MASTER</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> masterDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDataSource</span><span class="token punctuation">(</span>targetDataSources<span class="token punctuation">,</span> <span class="token class-name">DataSourceType</span><span class="token punctuation">.</span><span class="token constant">SLAVE</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DynamicDataSource</span><span class="token punctuation">(</span>masterDataSource<span class="token punctuation">,</span> targetDataSources<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置数据源     *      * @param targetDataSources 备选数据源集合     * @param sourceName 数据源名称     * @param beanName bean名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> targetDataSources<span class="token punctuation">,</span> <span class="token class-name">String</span> sourceName<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">SpringUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            targetDataSources<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 动态数据源 *  * @author ruoyi */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">DynamicDataSource</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> defaultTargetDataSource<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> targetDataSources<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span>defaultTargetDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>targetDataSources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">getDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只需要在application.yml配置从库的数据源即可</p><p><img src="http://img-md-js.linjsblog.top/img/202303211923494.png" alt="image-20230321192350379"></p><h2 id="引入mybatis-plus"><a href="#引入mybatis-plus" class="headerlink" title="引入mybatis-plus"></a>引入mybatis-plus</h2><p>mybatis-plus有一个好处是一些简单的CRUD可以不用写xml，因为以前项目常用，基于若依框架改造时发现没有，不太习惯，故引入。</p><p>依赖版本:父pom的依赖申明dependencyManagement中引入，再在common模块中引入，使用是在业务模块，业务模块再依赖common模块。</p><p>引入后调用任意默认的CRUD方法，诸如list()、getById()等方法，会报invalid bind statement(not found)。甚不解，不是说好不用写xml吗，怎么和说的不一样呢？ 怀疑MybatisPlus没有自动启动，检查依赖确实使用的mybatis-plus-boot-starter没有问题。</p><p>源码跟踪MybatisPlusAutoConfiguration类，断点到sqlSessionFactory(DataSource dataSource) 方法发现此方法未执行。对比以前正常的mybatis-plus项目，启动时是会走这个方法的。 这个方法很重要，因为MybatisPlus是通过这个方法入口实现的自动加载默认CRUD方法，而实现的不用手写xml。</p><p>关键方法注入断点：AbstractMethod.inject 可以断点此方法跟踪。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 注入自定义方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token class-name">MapperBuilderAssistant</span> builderAssistant<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> mapperClass<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> modelClass<span class="token punctuation">,</span> <span class="token class-name">TableInfo</span> tableInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> builderAssistant<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builderAssistant <span class="token operator">=</span> builderAssistant<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>languageDriver <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getDefaultScriptingLanguageInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 注入自定义方法 */</span>        <span class="token function">injectMappedStatement</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">,</span> modelClass<span class="token punctuation">,</span> tableInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续寻找MybatisPlusAutoConfiguration.sqlSessionFactory未执行的原因。其带注解ConditionalOnMissingBean，即有此Bean则不执行此方法，此方法的Bean为SqlSessionFactory。 经查原系统配置中存在MyBatisConfig配置，产生过SqlSessionFactory。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Environment</span> env<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_RESOURCE_PATTERN</span> <span class="token operator">=</span> <span class="token string">"**/*.class"</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> typeAliasesPackage <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mybatis.typeAliasesPackage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> mapperLocations <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mybatis.mapperLocations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> configLocation <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mybatis.configLocation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typeAliasesPackage <span class="token operator">=</span> <span class="token function">setTypeAliasesPackage</span><span class="token punctuation">(</span>typeAliasesPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">VFS</span><span class="token punctuation">.</span><span class="token function">addImplClass</span><span class="token punctuation">(</span><span class="token class-name">SpringBootVFS</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">SqlSessionFactoryBean</span> sessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setTypeAliasesPackage</span><span class="token punctuation">(</span>typeAliasesPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token function">resolveMapperLocations</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>mapperLocations<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionFactory<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sessionFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【解决方式】注释掉@Configuration 再次启动发现，可以正常加载MybatisPlusAutoConfiguration.sqlSessionFactory.</p><p>另引入mybatis-plus后，原mybatis配置就可以不要了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># MyBatis配置</span><span class="token comment">#mybatis:</span><span class="token comment">#    # 搜索指定包别名</span><span class="token comment">#    typeAliasesPackage: com.ruoyi.**.domain</span><span class="token comment">#    # 配置mapper的扫描，找到所有的mapper.xml映射文件</span><span class="token comment">#    mapperLocations: classpath*:mapper/**/*Mapper.xml</span><span class="token comment">#    # 加载全局的配置文件</span><span class="token comment">#    configLocation: classpath:mybatis/mybatis-config.xml</span><span class="token comment"># MyBatis-Plus配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token important">*:mapper/**/*Mapper.xml</span>  <span class="token comment"># 搜索指定包别名</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.ruoyi.<span class="token important">**.domain</span><span class="token comment">#  config-location: classpath:mybatis/mybatis-config.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：要去掉 # config-location: classpath:mybatis&#x2F;mybatis-config.xml 此配置，因为yml中的Configuration和mybatis-config文件的configruation配置是不能共存的。否则会报以下错误 Property ‘configuration’ and ‘configLocation’ can not specified with together</p><h2 id="Mapper扫描"><a href="#Mapper扫描" class="headerlink" title="Mapper扫描"></a>Mapper扫描</h2><p>在ApplicationConfig下配置@MapperScan 指定要扫描的Mapper类的包的路径</p><p>注意不同数据源的dao最好放在不同的包下，不然可能会报错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 表示通过aop框架暴露该代理对象,AopContext能够访问</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>exposeProxy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 指定要扫描的Mapper类的包的路径</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.ruoyi.system.mapper"</span><span class="token punctuation">,</span><span class="token string">"com.ruoyi.quartz.mapper"</span><span class="token punctuation">,</span><span class="token string">"com.ruoyi.eshare.mapper"</span><span class="token punctuation">,</span><span class="token string">"com.ruoyi.generator.mapper"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 时区配置     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Jackson2ObjectMapperBuilderCustomizer</span> <span class="token function">jacksonObjectMapperCustomization</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> jacksonObjectMapperBuilder <span class="token operator">-></span> jacksonObjectMapperBuilder<span class="token punctuation">.</span><span class="token function">timeZone</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现 生产者/消费者模式</title>
      <link href="/2023/03/14/java%E5%AE%9E%E7%8E%B0-%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/03/14/java%E5%AE%9E%E7%8E%B0-%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java实现-生产者-消费者模式"><a href="#Java实现-生产者-消费者模式" class="headerlink" title="Java实现 生产者&#x2F;消费者模式"></a>Java实现 生产者&#x2F;消费者模式</h1><p>消费者&#x2F;生产者模式是一种常见的并发设计模式，用于解决多个线程之间的协作问题。该模式包含两个角色：生产者和消费者。生产者负责生成数据，并将其存放在缓冲区中；消费者从缓冲区中取出数据并进行消费。</p><p><strong>当生产者生成数据时，如果缓冲区已满，生产者将被阻塞，直到有足够的空间来存放数据。当消费者消费数据时，如果缓冲区为空，消费者将被阻塞，直到有足够的数据可用。</strong></p><p>消费者&#x2F;生产者模式通常使用一个先进先出的队列来实现缓冲区。生产者将数据放入队列的末尾，而消费者从队列的头部取出数据。这种方法可以确保数据的顺序正确。</p><p>消费者&#x2F;生产者模式的优点在于可以提高系统的并发性能，减少线程间的竞争。生产者和消费者之间的缓冲区充当了一个解耦器，使得它们可以在不同的速度下运行，从而实现了高效的协作。</p><p>接下来我们用阻塞队列的方式实现生产者消费者模式</p><h2 id="BlockingQueue-实现"><a href="#BlockingQueue-实现" class="headerlink" title="BlockingQueue 实现"></a>BlockingQueue 实现</h2><p>数据 Data</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment">//生产量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">=</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 生产者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">//共享阻塞队列</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>    <span class="token comment">//是否还在运行</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//id生成器原子操作</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生成随机数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">></span></span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token operator">=</span>queue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//模拟生产耗时</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Data</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前》》生产者："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"生产量"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消费者java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 消费者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span>  <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//双端队列，加入或者取出元素都是线程安全的</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random<span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">></span></span> queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token operator">=</span>queue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 检索并删除，如果需要等待、直到元素可用。</span>                <span class="token class-name">Data</span> data<span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//模拟消费耗时</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前&lt;&lt;消费者："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",消费量"</span><span class="token operator">+</span>data<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>java    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生产者和消费者共用一个阻塞队列，</p><p>接下来我们编写测试代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Test &#123;    public static void main(String[] args) throws InterruptedException &#123;        BlockingDeque&lt;Data&gt; queue &#x3D; new LinkedBlockingDeque&lt;&gt;(10);        Consumer consumer1 &#x3D; new Consumer(queue);        Consumer consumer2 &#x3D; new Consumer(queue);        Consumer consumer3 &#x3D; new Consumer(queue);        Producer producer1 &#x3D; new Producer(queue);        Producer producer2 &#x3D; new Producer(queue);        Producer producer3 &#x3D; new Producer(queue);        ExecutorService executorService &#x3D; Executors.newCachedThreadPool();        executorService.execute(producer1);        executorService.execute(producer2);        executorService.execute(producer3);        executorService.execute(consumer1);        executorService.execute(consumer2);        executorService.execute(consumer3);        Thread.sleep(3000);        producer1.stop();        producer2.stop();        producer3.stop();        Thread.sleep(1000);        executorService.shutdown();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202303142322837.png" alt="image-20230314232201743"></p><p>我们可以看到消费者顺序消费，最后一次生产20此时所有的生产者都停止生产了，但是此时产品池还没空，于是消费者继续消费，直到把产品池中的数据消耗完</p><p>生产者消费者可以做到解耦，实际应用如短信发送</p><p>我们的代码是自上而下同步执行的。发送短信是耗时的操作。如果短信被阻塞住，用户响应将会延迟。用户点击发送短信验证码按钮后，向后端发送报文后端接收到报文件，生成短信验证码，需要第三方服务器容联云发送短信阿里云将短信发送成功或失败结果反馈后，后端再根据结果，返回前端响应报文响应延迟会造成用户界面的倒计时延迟。前端收到后端发送短信成功的报文响应后，开始倒计时显示</p><p>解决思路：1. 异步发送短信</p><p>2.使用生产者消费者模式</p><ul><li>为了将发送短信从主业务中解耦出来,我们引入生产者消费者设计模式。</li><li>它是最常用的解耦方式之一，寻找中间人(broker)搭桥，保证两个业务没有直接关联。 <img src="http://img-md-js.linjsblog.top/img/202303142323276.png" alt="在这里插入图片描述"></li></ul><p>生产者只负责生产任务，生产者生产的数据发送到消息队列中。 消费者只负责处理处理数据，消费者处理的数据来源是从消息队列中取的。 生产者与消费者并不直接对接，所有数据和消息都通过中间人（消息队列broker）转交。 生产者消费者设计模式需要明确以下内容 任务：生产者生产的任务是什么 生产者、消费者、中间人是谁 结合本项目： 生产者： 商城后端，根据前端发送过来的请求，生成短信验证码(需要将短信验证码通过容联云发送到客户的手机上) 任务：发送短信 消费者：celery 中间人：redis 或 MQ 生产者（商城）生成短信验证码，通过些设计模式发送短信，将短信验证码发送到 中间人（redis）中，就直接将响应结果返回前端，不再等待短信发送状态 消费者：一直开启监听服务，当中间人(redis)有发送短信的需求时，取出短信验证码和相关信息，通过容联云发送短信 此方法避免了，生产者等待消费者把短信发完成后再将响应结果返回前端,实现了后端与发送短信操作的解耦。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 自定义线程池</title>
      <link href="/2023/03/11/spring-boot-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2023/03/11/spring-boot-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-自定义线程池"><a href="#Spring-Boot-自定义线程池" class="headerlink" title="Spring Boot 自定义线程池"></a>Spring Boot 自定义线程池</h1><h2 id="一、自定义线程池"><a href="#一、自定义线程池" class="headerlink" title="一、自定义线程池"></a>一、自定义线程池</h2><h3 id="1-yml配置"><a href="#1-yml配置" class="headerlink" title="1. yml配置"></a>1. yml配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 线程池配置参数</span><span class="token key atrule">task</span><span class="token punctuation">:</span>  <span class="token key atrule">pool</span><span class="token punctuation">:</span>    <span class="token key atrule">corePoolSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 设置核心线程数</span>    <span class="token key atrule">maxPoolSize</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token comment"># 设置最大线程数</span>    <span class="token key atrule">keepAliveTime</span><span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment"># 设置空闲线程存活时间（秒）</span>    <span class="token key atrule">queueCapacity</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token comment"># 设置队列容量</span>    <span class="token key atrule">threadNamePrefix</span><span class="token punctuation">:</span> <span class="token string">"-signpolicy-asynnotify-"</span> <span class="token comment"># 设置线程名称前缀</span>    <span class="token key atrule">awaitTerminationSeconds</span><span class="token punctuation">:</span> <span class="token number">60</span> <span class="token comment">#  设置线程池等待终止时间(秒)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-线程配置属性类"><a href="#2-线程配置属性类" class="headerlink" title="2. 线程配置属性类"></a>2. 线程配置属性类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token comment">/** * 线程配置属性类 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"task.pool"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskThreadPoolConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxPoolSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> keepAliveSeconds<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> awaitTerminationSeconds<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> threadNamePrefix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-开启异步线程支持-开启属性配置支持"><a href="#3-开启异步线程支持-开启属性配置支持" class="headerlink" title="3. 开启异步线程支持+开启属性配置支持"></a>3. 开启异步线程支持+开启属性配置支持</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>shu<span class="token punctuation">.</span>eshare<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">TaskThreadPoolConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.shu.eshare.mapper"</span><span class="token punctuation">)</span> <span class="token comment">//扫描mapper</span><span class="token annotation punctuation">@EnableAsync</span> <span class="token comment">//开启异步线程支持</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">TaskThreadPoolConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//开启配置属性支持</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EshareApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EshareApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建自定义线程池配置类"><a href="#4-创建自定义线程池配置类" class="headerlink" title="4. 创建自定义线程池配置类"></a>4. 创建自定义线程池配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token comment">/** * 自定义线程池配置类 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncScheduledTaskConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TaskThreadPoolConfig</span> config<span class="token punctuation">;</span>    <span class="token comment">/**     1.这种形式的线程池配置是需要在使用的方法上面添加@Async("customAsyncThreadPool")注解的     * 2。如果在使用的方法上不添加该注解，那么spring就会使用默认的线程池     * 3.所以如果添加@Async注解但是不指定使用的线程池，又想自己自定义线程池，那么就可以重写spring默认的线程池     * 4.所以第二个方法就是重写spring默认的线程池     * @return ThreadPoolTaskExecutor     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customAsyncThreadPool"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">customAsyncThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//核心线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最大线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMaxPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//任务队列的大小</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getQueueCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线程池名前缀</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getThreadNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//允许线程池的空闲时间</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span>        executor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span>        executor<span class="token punctuation">.</span><span class="token function">setAwaitTerminationSeconds</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAwaitTerminationSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 拒绝处理策略         * CallerRunsPolicy()：交由调用方线程运行，比如 main 线程。         * AbortPolicy()：直接抛出异常。         * DiscardPolicy()：直接丢弃。         * DiscardOldestPolicy()：丢弃队列中最老的任务。         *         * 特殊说明：         * 1.这里演示环境，拒绝策略咱们采用抛出异常         * 2.真实业务场景会把缓存队列的大小会设置大一些，         * 如果，提交的任务数量超过最大线程数量或将任务环缓存到本地、redis、mysql中,保证消息不丢失         * 3.如果项目比较大的话，异步通知种类很多的话，建议采用MQ做异步通知方案         */</span>        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线程初始化</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-service"><a href="#5-service" class="headerlink" title="5. service"></a>5. service</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/** * 自定义线程池测试1 * * @Author  * @Date 2022-04-05 17:55 **/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"customAsyncThreadPool"</span><span class="token punctuation">)</span><span class="token comment">//指定使用哪个线程池配置，不然会使用spring默认的线程池</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"executeAsync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前运行线程名称:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/** * 自定义线程池测试2 * * @Author  * @Date 2022-04-05 17:55 **/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolService2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolService2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"customAsyncThreadPool"</span><span class="token punctuation">)</span><span class="token comment">//指定使用哪个线程池配置，不然会使用spring默认的线程池</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"executeAsync2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前运行线程名称:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-控制层"><a href="#6-控制层" class="headerlink" title="6.控制层"></a>6.控制层</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>ThreadPoolService<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>ThreadPoolService2<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token comment">/** * 自定义线程池侧是 * * @Author  * @Date 2022-04-05 17:54 **/</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolService</span> threadPoolService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolService2</span> threadPoolService2<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/threadPoolTest"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">threadPoolTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threadPoolService<span class="token punctuation">.</span><span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadPoolService2<span class="token punctuation">.</span><span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置默认线程池"><a href="#二、配置默认线程池" class="headerlink" title="二、配置默认线程池"></a>二、配置默认线程池</h2><blockquote><p>第一种线程池配置是需要在使用的方法上面添加@Async(“customAsyncThreadPool”)注解的。 而这种方式是重写spring默认的线程池，使用的方法上面添加@Async注解，不用去声明线程池类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">AsyncUncaughtExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AsyncConfigurer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolTaskExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token comment">/** * 原生(Spring)异步线程池装配类 * 实现AsyncConfigurer接口，重写getAsyncExecutor和getAsyncUncaughtExceptionHandler方法， * 这样使用默认线程池时就会使用自己重写之后的线程池 * * @Author  * @Date 2022-04-05 17:26 **/</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NativeAsyncScheduledTaskConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">NativeAsyncScheduledTaskConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TaskThreadPoolConfig</span> config<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPoolTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最大线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMaxPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//核心线程数</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//任务队列的大小</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getQueueCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线程池名的前缀</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getThreadNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//允许线程的空闲时间30秒</span>        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池关闭的时候等待所有任务都完成再继续销毁其他的Bean</span>        executor<span class="token punctuation">.</span><span class="token function">setWaitForTasksToCompleteOnShutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住</span>        executor<span class="token punctuation">.</span><span class="token function">setAwaitTerminationSeconds</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAwaitTerminationSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 拒绝处理策略         * CallerRunsPolicy()：交由调用方线程运行，比如 main 线程。         * AbortPolicy()：直接抛出异常。         * DiscardPolicy()：直接丢弃。         * DiscardOldestPolicy()：丢弃队列中最老的任务。         */</span>        <span class="token comment">/**         * 特殊说明：         * 1. 这里演示环境，拒绝策略咱们采用抛出异常         * 2.真实业务场景会把缓存队列的大小会设置大一些，         * 如果，提交的任务数量超过最大线程数量或将任务环缓存到本地、redis、mysql中,保证消息不丢失         * 3.如果项目比较大的话，异步通知种类很多的话，建议采用MQ做异步通知方案         */</span>        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线程初始化</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 异步任务重异常处理     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ex<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"excetion method:&#123;&#125;"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @Override</span>    <span class="token comment">// public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() &#123;</span>    <span class="token comment">//     return new AsyncUncaughtExceptionHandler() &#123;</span>    <span class="token comment">//         @Override</span>    <span class="token comment">//         public void handleUncaughtException(Throwable ex, Method method, Object... params) &#123;</span>    <span class="token comment">//             LOGGER.error(ex.getMessage(),ex);</span>    <span class="token comment">//             LOGGER.error("excetion method:&#123;&#125;",method.getName());</span>    <span class="token comment">//         &#125;</span>    <span class="token comment">//     &#125;;</span>    <span class="token comment">// &#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/** * 重写Spring默认线程池测试1 * * @Author  * @Date 2022-04-05 17:55 **/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolService3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolService3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"executeAsync3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前运行线程名称:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/** * 重写Spring默认线程池测试2 * * @Author  * @Date 2022-04-05 17:55 **/</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolService4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolService4</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>java        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"executeAsync4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前运行线程名称:&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（十四）：项目完结</title>
      <link href="/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%AE%8C%E7%BB%93/"/>
      <url>/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%A1%B9%E7%9B%AE%E5%AE%8C%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="项目代码地址"><a href="#项目代码地址" class="headerlink" title="项目代码地址"></a>项目代码地址</h3><p>前端：<a href="https://github.com/js6288/shupao-frontend">https://github.com/js6288/shupao-frontend</a></p><p>后端：<a href="https://github.com/js6288/shupao-backend">https://github.com/js6288/shupao-backend</a></p><h3 id="优化、上线"><a href="#优化、上线" class="headerlink" title="优化、上线"></a>优化、上线</h3><p>1、强制登录，自动跳转到登录页 解决：axios 全局配置响应拦截、并且添加重定向 2、区分公开和加密房间；加入有密码的房间，要指定密码 3、展示已加入队伍人数 4、重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题 <strong>分布式锁</strong></p><h3 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h3><p>先区分多环境：前端区分开发和线上接口，后端 prod 改为用线上公网可访问的数据库 前端：Vercel（免费） <a href="https://vercel.com/">https://vercel.com/</a> 后端：微信云托管（部署容器的平台，付费） <a href="https://cloud.weixin.qq.com/cloudrun/service">https://cloud.weixin.qq.com/cloudrun/service</a> <strong>（免备案！！！）</strong></p><h2 id="一、todo"><a href="#一、todo" class="headerlink" title="一、todo"></a>一、todo</h2><p><img src="http://img-md-js.linjsblog.top/img/202301091615674.png" alt="image.png"></p><h3 id="1、强制登录，自动跳转到登录页"><a href="#1、强制登录，自动跳转到登录页" class="headerlink" title="1、强制登录，自动跳转到登录页"></a>1、强制登录，自动跳转到登录页</h3><p>解决：axios 全局配置响应拦截、并且添加重定向 1.在myAxios里配置响应拦截 <img src="http://img-md-js.linjsblog.top/img/202301091615842.png" alt="image.png"> 这里我们要改变history 模式的实现，在main.ts里修改 <img src="http://img-md-js.linjsblog.top/img/202301091615838.png" alt="image.png"> 当登录成功后，重定向到个人用户页面 PS：别忘了引入route <img src="http://img-md-js.linjsblog.top/img/202301091615803.png" alt="image.png"></p><h3 id="2-修改队伍页面的加入队伍按钮为创建队伍"><a href="#2-修改队伍页面的加入队伍按钮为创建队伍" class="headerlink" title="2.修改队伍页面的加入队伍按钮为创建队伍"></a>2.修改队伍页面的加入队伍按钮为创建队伍</h3><p>在TeamPage页面，修改加入队伍为创建队伍（按钮部分） 把doJoinTeam全局修改为toAddTeam 这个按钮太丑了，我们更换它的样式，变成圆形放在右下角 <img src="http://img-md-js.linjsblog.top/img/202301092352288.png" alt="image.png"> 写一个全局样式 <img src="http://img-md-js.linjsblog.top/img/202301091615810.png" alt="image.png"> 在main.ts中引入 <img src="http://img-md-js.linjsblog.top/img/202301091651730.png" alt="image.png"></p><h3 id="3-区分公开和加密房间；加入有密码的房间，要指定密码"><a href="#3-区分公开和加密房间；加入有密码的房间，要指定密码" class="headerlink" title="3.区分公开和加密房间；加入有密码的房间，要指定密码"></a>3.区分公开和加密房间；加入有密码的房间，要指定密码</h3><p>在TeamPage页面加入tabs标签，来区分公开还是加密 <img src="http://img-md-js.linjsblog.top/img/202301091651126.png" alt="image.png"> 后端我们以前根据状态查询只查询公开，现在修改为当不是管理员和私人才会报权限错误 <img src="http://img-md-js.linjsblog.top/img/202301091651136.png" alt="image.png"> 回到前端，我们在TeamPage页面实现onTabChange方法 <img src="http://img-md-js.linjsblog.top/img/202301091659269.png" alt="image.png"> 上面定义的active是为了页面默认显示公开队伍 修改搜索队伍，传入状态 <img src="http://img-md-js.linjsblog.top/img/202301091659209.png" alt="image.png"> 现在点击公开和加密可以切换查看不同类型的队伍 加密队伍需要输入密码才可以加入，我们这使用Dialog 弹出框组件，把它放入team-card-list里（最下面的位置)</p><p><strong>踩坑：组件调用时要添加这个否则会报错</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;  const VanDialog &#x3D; Dialog.Component;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;van-dialog v-model:show&#x3D;&quot;showPasswordDialog&quot; title&#x3D;&quot;请输入密码&quot; show-cancel-button @confirm&#x3D;&quot;doJoinTeam&quot; @cancel&#x3D;&quot;doJoinCancel&quot;&gt;  &lt;van-field v-model&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot;&#x2F;&gt;&lt;&#x2F;van-dialog&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在里面修改加入doJoinTeam方法，实现doJoinCancel方法和判断是不是加密房间preJoinTeam方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 加入队伍 */</span><span class="token keyword">const</span> <span class="token function-variable function">doJoinTeam</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>joinTeamId<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/team/join'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">teamId</span><span class="token operator">:</span> joinTeamId<span class="token punctuation">.</span>value<span class="token punctuation">,</span>    <span class="token literal-property property">password</span><span class="token operator">:</span> password<span class="token punctuation">.</span>value  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">?.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'加入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doJoinCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'加入失败'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>description <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>res<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> showPasswordDialog <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> joinTeamId <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 判断是不是加密房间，是的话显示密码框 * @param team */</span><span class="token keyword">const</span> <span class="token function-variable function">preJoinTeam</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">team</span><span class="token operator">:</span> TeamType</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  joinTeamId<span class="token punctuation">.</span>value <span class="token operator">=</span> team<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>team<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">doJoinTeam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    showPasswordDialog<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">doJoinCancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  joinTeamId<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  password<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试 发现右下角的加入队伍样式已经生效，公开和加密切换正常 <img src="http://img-md-js.linjsblog.top/img/202301091906589.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301091906367.png" alt="image.png"> 测试加入队伍（加密）功能是否正常 前提：更新测试队伍是id为55007创建的，现在登录的id是4 点击加入队伍，输入密码 <img src="http://img-md-js.linjsblog.top/img/202301091906205.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301091906604.png" alt="image.png"> 刷新一下，显示退出队伍，功能正常 <img src="http://img-md-js.linjsblog.top/img/202301091906905.png" alt="image.png"></p><h3 id="4-展示已加入队伍人数"><a href="#4-展示已加入队伍人数" class="headerlink" title="4.展示已加入队伍人数"></a>4.展示已加入队伍人数</h3><p>这个我们后端还未实现，所以在获取队伍列表接口，获取这个参数 首先在封装类里添加字段（TeamUserVO） <img src="http://img-md-js.linjsblog.top/img/202301091936558.png" alt="image.png"> 修改listTeams接口，修改整理为如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listTeams</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span> isAdmin <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">isAdmin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1、查询队伍列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span></span> teamList <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">listTeams</span><span class="token punctuation">(</span>teamQuery<span class="token punctuation">,</span> isAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> teamIdList <span class="token operator">=</span> teamList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">TeamUserVO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、判断当前用户是否已加入队伍</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamIdList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamList <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 已加入的队伍 id 集合</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> hasJoinTeamIdSet <span class="token operator">=</span> userTeamList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">UserTeam</span><span class="token operator">::</span><span class="token function">getTeamId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            teamList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>team <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">boolean</span> hasJoin <span class="token operator">=</span> hasJoinTeamIdSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                team<span class="token punctuation">.</span><span class="token function">setHasJoin</span><span class="token punctuation">(</span>hasJoin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// 3、查询已加入队伍的人数</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamJoinQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userTeamJoinQueryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamIdList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamList <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>userTeamJoinQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 队伍 id => 加入这个队伍的用户列表</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span><span class="token punctuation">></span></span> teamIdUserTeamList <span class="token operator">=</span> userTeamList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">UserTeam</span><span class="token operator">::</span><span class="token function">getTeamId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teamList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>team <span class="token operator">-></span> team<span class="token punctuation">.</span><span class="token function">setHasJoinNum</span><span class="token punctuation">(</span>teamIdUserTeamList<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>teamList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在前端的TeamCardList里修改原来的最大人数为已加入人数 <img src="http://img-md-js.linjsblog.top/img/202301091936094.png" alt="image.png"> 如果爆红的在队伍规范类型里添加字段 <img src="http://img-md-js.linjsblog.top/img/202301091937293.png" alt="image.png"> 刷新页面，成功显示还当前队伍人数和最大人数 <img src="http://img-md-js.linjsblog.top/img/202301091937242.png" alt="image.png"></p><h3 id="5-重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题"><a href="#5-重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题" class="headerlink" title="5.重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题"></a>5.重复加入队伍的问题（加锁、分布式锁）并发请求时可能出现问题</h3><p>只要我们点的足够快，就可以在同一时间内往数据库插入多条同样的数据，所以这里我们使用分布式锁（推荐） 使用两把锁，一把锁锁队伍，一把锁锁用户（实现较难，不推荐） 修改jointeam的实现方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">joinTeam</span><span class="token punctuation">(</span><span class="token class-name">TeamJoinRequest</span> teamJoinRequest<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamJoinRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Long</span> teamId <span class="token operator">=</span> teamJoinRequest<span class="token punctuation">.</span><span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token function">getTeamById</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> expireTime <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>expireTime <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> expireTime<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Integer</span> status <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TeamStatusEnum</span> teamStatusEnum <span class="token operator">=</span> <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>teamStatusEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"禁止加入私有队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> teamJoinRequest<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token constant">SECRET</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>teamStatusEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>  <span class="token operator">!</span>password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 该用户已加入的队伍数量</span>    <span class="token keyword">long</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 只有一个线程能获取到锁</span>    <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"shupao:join_team"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 抢到锁并执行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getLock: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> hasJoinNum <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasJoinNum <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"最多创建和加入 5 个队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 不能重复加入已加入的队伍</span>                userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> hasUserJoinTeam <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasUserJoinTeam <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"用户已加入该队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 已加入队伍的人数</span>                <span class="token keyword">long</span> teamHasJoinNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countTeamUserByTeamId</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>teamHasJoinNum <span class="token operator">>=</span> team<span class="token punctuation">.</span><span class="token function">getMaxNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 修改队伍信息</span>                <span class="token class-name">UserTeam</span> userTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserTeam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userTeam<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                userTeam<span class="token punctuation">.</span><span class="token function">setTeamId</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>                userTeam<span class="token punctuation">.</span><span class="token function">setJoinTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> userTeamService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"doCacheRecommendUser error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 只能释放自己的锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unLock: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别忘了引入 RedissonClient <img src="http://img-md-js.linjsblog.top/img/202301092140043.png" alt="image.png"> <strong>项目基本完成</strong></p><h2 id="二、部署上线"><a href="#二、部署上线" class="headerlink" title="二、部署上线"></a>二、部署上线</h2><p>先区分多环境：前端区分开发和线上接口，后端 prod 改为用线上公网可访问的数据库 前端：Vercel（免费） <a href="https://vercel.com/">https://vercel.com/</a> 后端：微信云托管（部署容器的平台，付费） <a href="https://cloud.weixin.qq.com/cloudrun/service">https://cloud.weixin.qq.com/cloudrun/service</a> <strong>（免备案！！！）</strong></p><p>注意如果后端使用微信云托管，一定要写一个dokerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> maven:3.5-jdk-8-alpine <span class="token keyword">as</span> builder</span><span class="token comment"># Copy local code to the container image.</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span><span class="token instruction"><span class="token keyword">COPY</span> pom.xml .</span><span class="token instruction"><span class="token keyword">COPY</span> src ./src</span><span class="token comment"># Build a release artifact.</span><span class="token instruction"><span class="token keyword">RUN</span> mvn package -DskipTests</span><span class="token comment"># Run the web service on container startup.</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app/target/yupao-backend-0.0.1-SNAPSHOT.jar"</span>,<span class="token string">"--spring.profiles.active=prod"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端部署需要区分线上和本地环境 首先打包如果报错（大概率是因为ts语法的检查），在packjson里修改build <img src="http://img-md-js.linjsblog.top/img/202301092218532.png" alt="image.png"> 区分环境 在myAxios里配置（实现自动根据环境来更换地址） <img src="http://img-md-js.linjsblog.top/img/202301092218913.png" alt="image.png"></p><h2 id="鱼泡-伙伴匹配系统笔记完结！！！！！！！！！"><a href="#鱼泡-伙伴匹配系统笔记完结！！！！！！！！！" class="headerlink" title="鱼泡 - 伙伴匹配系统笔记完结！！！！！！！！！"></a>鱼泡 - 伙伴匹配系统笔记完结！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> vue </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（十三）</title>
      <link href="/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
      <url>/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="一、主页切换功能"><a href="#一、主页切换功能" class="headerlink" title="一、主页切换功能"></a>一、主页切换功能</h2><p>在vant组件库里寻找switch开关，复制到主页index里面 <img src="http://img-md-js.linjsblog.top/img/202301081719399.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301081719536.png" alt="image.png"> 定义一个开关切换常量，默认为关闭 <img src="http://img-md-js.linjsblog.top/img/202301081719460.png" alt="image.png"> 我们现在不需要一次性挂载，写一个加载的方法，并且写一个监听器（当开关切换时，“更换页面”)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** 加载数据  */</span>  <span class="token keyword">const</span> <span class="token function-variable function">loadData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> userListData<span class="token punctuation">;</span>    <span class="token comment">// 心动模式，根据标签匹配用户</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMatchMode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      userListData <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/match'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          num<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/user/match succeed'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> response<span class="token operator">?.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'/user/match error'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>          Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 普通模式，直接分页查询用户</span>      userListData <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/recommend'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">pageSize</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          <span class="token literal-property property">pageNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/user/recommend succeed'</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> response<span class="token operator">?.</span>data<span class="token operator">?.</span>records<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'/user/recommend error'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>          Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userListData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      userListData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">user</span><span class="token operator">:</span> UserType</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>tags<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          user<span class="token punctuation">.</span>tags <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      userList<span class="token punctuation">.</span>value <span class="token operator">=</span> userListData<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：别忘了<img src="http://img-md-js.linjsblog.top/img/202301081719364.png" alt="image.png">，否则运行报错 但是添加之后user.tage会爆红,可以将UserType里的tags类型从数组改为字符串形式（这里爆红也能运行，所以就不更改了） <img src="http://img-md-js.linjsblog.top/img/202301081719405.png" alt="image.png"> 运行，页面显示如下 点击开关 <img src="http://img-md-js.linjsblog.top/img/202301081719368.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301081722310.png" alt="image.png"> 中间加载的时间较长，这是正常现象</p><h2 id="二、todo"><a href="#二、todo" class="headerlink" title="二、todo"></a>二、todo</h2><p><img src="http://img-md-js.linjsblog.top/img/202301081722955.png" alt="image.png"></p><h3 id="1-加载loading特效"><a href="#1-加载loading特效" class="headerlink" title="1.加载loading特效"></a>1.加载loading特效</h3><p>我们使用骨架屏特效 <img src="http://img-md-js.linjsblog.top/img/202301081723624.png" alt="image.png"> 把它放在UserListCard里面（包裹内容） <img src="http://img-md-js.linjsblog.top/img/202301082306748.png" alt="image.png"> 别忘了在js里添加这两个参数 <img src="http://img-md-js.linjsblog.top/img/202301082338898.png" alt="image.png"> 到index的user-card-list里引用 <img src="http://img-md-js.linjsblog.top/img/202301082338503.png" alt="image.png"> 同时别忘了引入loading常量，并在loadData方法里，在开始和结尾处分别使loading设置为true和false</p><h3 id="2-仅加入队伍和创建队伍的人能看到队伍操作按钮"><a href="#2-仅加入队伍和创建队伍的人能看到队伍操作按钮" class="headerlink" title="2.仅加入队伍和创建队伍的人能看到队伍操作按钮"></a>2.仅加入队伍和创建队伍的人能看到队伍操作按钮</h3><p><strong>队伍操作权限控制</strong> 加入队伍： 仅非队伍创建人、且未加入队伍的人可见 更新队伍：仅创建人可见 解散队伍：仅创建人可见 退出队伍：创建人不可见，仅已加入队伍的人可见</p><p>仅加入队伍和创建队伍的人能看到队伍操作按钮（listTeam 接口要能获取我加入的队伍状态） 方案 1：前端查询我加入了哪些队伍列表，然后判断每个队伍 id 是否在列表中（前端要多发一次请求） 方案 2：在后端去做上述事情（推荐） 这里我们选择方案2</p><h4 id="1-首先为TeamUserVO太那几是否已加入队伍的字段"><a href="#1-首先为TeamUserVO太那几是否已加入队伍的字段" class="headerlink" title="1.首先为TeamUserVO太那几是否已加入队伍的字段"></a>1.首先为TeamUserVO太那几是否已加入队伍的字段</h4><p><img src="http://img-md-js.linjsblog.top/img/202301082307543.png" alt="image.png"></p><h4 id="2-修改listTeam的接口，加入是否已经加入队伍的判断"><a href="#2-修改listTeam的接口，加入是否已经加入队伍的判断" class="headerlink" title="2.修改listTeam的接口，加入是否已经加入队伍的判断"></a>2.修改listTeam的接口，加入是否已经加入队伍的判断</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listTeams</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> isAdmin <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">isAdmin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1、查询队伍列表</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span></span> teamList <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">listTeams</span><span class="token punctuation">(</span>teamQuery<span class="token punctuation">,</span> isAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> teamIdList <span class="token operator">=</span> teamList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">TeamUserVO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、判断当前用户是否已加入队伍</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamIdList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamList <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 已加入的队伍 id 集合</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> hasJoinTeamIdSet <span class="token operator">=</span> userTeamList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">UserTeam</span><span class="token operator">::</span><span class="token function">getTeamId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teamList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>team <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> hasJoin <span class="token operator">=</span> hasJoinTeamIdSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            team<span class="token punctuation">.</span><span class="token function">setHasJoin</span><span class="token punctuation">(</span>hasJoin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>teamList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-修改前端页面的user-card-list里4个按钮出现的判断条件"><a href="#3-修改前端页面的user-card-list里4个按钮出现的判断条件" class="headerlink" title="3.修改前端页面的user-card-list里4个按钮出现的判断条件"></a>3.修改前端页面的user-card-list里4个按钮出现的判断条件</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;van-button size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot; v-if&#x3D;&quot;team.userId !&#x3D;&#x3D; currentUser?.id &amp;&amp; !team.hasJoin&quot; plain            @click&#x3D;&quot;preJoinTeam(team)&quot;&gt;  加入队伍&lt;&#x2F;van-button&gt;&lt;van-button v-if&#x3D;&quot;team.userId &#x3D;&#x3D;&#x3D; currentUser?.id&quot; size&#x3D;&quot;small&quot; plain            @click&#x3D;&quot;doUpdateTeam(team.id)&quot;&gt;更新队伍&lt;&#x2F;van-button&gt;&lt;!-- 仅加入队伍可见 --&gt;&lt;van-button v-if&#x3D;&quot;team.userId !&#x3D;&#x3D; currentUser?.id &amp;&amp; team.hasJoin&quot; size&#x3D;&quot;small&quot; plain            @click&#x3D;&quot;doQuitTeam(team.id)&quot;&gt;退出队伍&lt;&#x2F;van-button&gt;&lt;van-button v-if&#x3D;&quot;team.userId &#x3D;&#x3D;&#x3D; currentUser?.id&quot; size&#x3D;&quot;small&quot; type&#x3D;&quot;danger&quot; plain            @click&#x3D;&quot;doDeleteTeam(team.id)&quot;&gt;解散队伍&lt;&#x2F;van-button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><p>我的数据库里有14队伍和24队伍，其中4是24的创建者，550007是14的创建者，同时4也是14的队员 ps：（写完后端千万别忘了重启） <img src="http://img-md-js.linjsblog.top/img/202301082307175.png" alt="image.png"> 对照要求，看看是否符合 （√） <img src="http://img-md-js.linjsblog.top/img/202301082349751.png" alt="image.png"></p><h3 id="3-前端导航栏死【标题】问题"><a href="#3-前端导航栏死【标题】问题" class="headerlink" title="3.前端导航栏死【标题】问题"></a>3.前端导航栏死【标题】问题</h3><p>解决：使用 router.beforeEach，根据要跳转页面的 url 路径 匹配 config&#x2F;routes 配置的 title 字段 1.配置路由里的title字段 <img src="http://img-md-js.linjsblog.top/img/202301082349813.png" alt="image.png"> 在BasicLayout里增加根据路由切换标题 <img src="http://img-md-js.linjsblog.top/img/202301082349669.png" alt="image.png"> 同时把原来用于测试的Toast响应（请求成功）删除，全局搜索删除 别忘了，把这句也删除 <img src="http://img-md-js.linjsblog.top/img/202301082349336.png" alt="image.png"> 刷新，切换到不同页面，测试标签栏是否更换，以及请求成功是否不再出现</p><h2 id="over-！！！！！！！！！！"><a href="#over-！！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！！"></a>over ！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（十二）</title>
      <link href="/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a>前端开发</h3><ol><li>开发前端的功能<ol><li>搜索队伍 √</li><li>更新队伍（仅队伍的创始人可见） √</li><li>查看个人已加入队伍 √</li><li>查看个人创建的队伍 √</li><li>解散队伍 √</li><li>退出队伍 √</li></ol></li><li>随机匹配 30 - 40 min</li><li>完成之前的遗留问题 todo</li></ol><h3 id="前端不同页面怎么传递数据？"><a href="#前端不同页面怎么传递数据？" class="headerlink" title="前端不同页面怎么传递数据？"></a>前端不同页面怎么传递数据？</h3><ol><li><strong>url querystring（xxx?id&#x3D;1）</strong> 比较适用于页面跳转</li><li><strong>url（&#x2F;team&#x2F;:id，xxx&#x2F;1）</strong></li><li>hash (&#x2F;team#1)</li><li>localStorage</li><li><strong>context（全局变量，同页面或整个项目要访问公共变量）</strong></li></ol><h3 id="随机匹配"><a href="#随机匹配" class="headerlink" title="随机匹配"></a>随机匹配</h3><p>为了帮大家更快地发现和自己兴趣相同的朋友 匹配 1 个还是匹配多个？ 答：匹配多个，并且按照匹配的相似度从高到低排序 怎么匹配？（根据什么匹配） 答：标签 tags 还可以根据 user_team 匹配加入相同队伍的用户 本质：找到有相似标签的用户 举例： 用户 A：[Java, 大一, 男] 用户 B：[Java, 大二, 男] 用户 C：[Python, 大二, 女] 用户 D：[Java, 大一, 女]</p><h4 id="1-怎么匹配"><a href="#1-怎么匹配" class="headerlink" title="1. 怎么匹配"></a>1. 怎么匹配</h4><ol><li>找到有共同标签最多的用户（TopN）</li><li>共同标签越多，分数越高，越排在前面</li><li>如果没有匹配的用户，随机推荐几个（降级方案）</li></ol><p>编辑距离算法：<a href="https://blog.csdn.net/DBC_121/article/details/104198838">https://blog.csdn.net/DBC_121&#x2F;article&#x2F;details&#x2F;104198838</a> 最小编辑距离：字符串 1 通过最少多少次增删改字符的操作可以变成字符串 2 余弦相似度算法：<a href="https://blog.csdn.net/m0_55613022/article/details/125683937">https://blog.csdn.net/m0_55613022&#x2F;article&#x2F;details&#x2F;125683937</a>（如果需要带权重计算，比如学什么方向最重要，性别相对次要）</p><h4 id="2-怎么对所有用户匹配，取-TOP"><a href="#2-怎么对所有用户匹配，取-TOP" class="headerlink" title="2. 怎么对所有用户匹配，取 TOP"></a>2. 怎么对所有用户匹配，取 TOP</h4><p>直接取出所有用户，依次和当前用户计算分数，取 TOP N（54 秒） 优化方法：</p><ol><li>切忌不要在数据量大的时候循环输出日志（取消掉日志后 20 秒）</li><li>Map 存了所有的分数信息，占用内存解决：维护一个固定长度的有序集合（sortedSet），只保留分数最高的几个用户（时间换空间）e.g.【3, 4, 5, 6, 7】取 TOP 5，id 为 1 的用户就不用放进去了</li><li>细节：剔除自己 √</li><li>尽量只查需要的数据：<ol><li>过滤掉标签为空的用户 √</li><li>根据部分标签取用户（前提是能区分出来哪个标签比较重要）</li><li>只查需要的数据（比如 id 和 tags） √（7.0s）</li></ol></li><li>提前查？（定时任务）<ol><li>提前把所有用户给缓存（不适用于经常更新的数据）</li><li>提前运算出来结果，缓存（针对一些重点用户，提前缓存）</li></ol></li></ol><p>大数据推荐，比如说有几亿个商品，难道要查出来所有的商品？ 难道要对所有的数据计算一遍相似度？ 检索 &#x3D;&gt; 召回 &#x3D;&gt; 粗排 &#x3D;&gt; 精排 &#x3D;&gt; 重排序等等 检索：尽可能多地查符合要求的数据（比如按记录查） 召回：查询可能要用到的数据（不做运算） 粗排：粗略排序，简单地运算（运算相对轻量） 精排：精细排序，确定固定排位</p><h3 id="分表学习建议"><a href="#分表学习建议" class="headerlink" title="分表学习建议"></a>分表学习建议</h3><p>mycat、sharding sphere 框架 一致性 hash</p><h3 id="队伍操作权限控制"><a href="#队伍操作权限控制" class="headerlink" title="队伍操作权限控制"></a>队伍操作权限控制</h3><p>加入队伍： 仅非队伍创建人、且未加入队伍的人可见 更新队伍：仅创建人可见 解散队伍：仅创建人可见 退出队伍：创建人不可见，仅已加入队伍的人可见 加载骨架屏特效 ✔ 解决：van-skeleton 组件 仅加入队伍和创建队伍的人能看到队伍操作按钮（listTeam 接口要能获取我加入的队伍状态） ✔ 方案 1：前端查询我加入了哪些队伍列表，然后判断每个队伍 id 是否在列表中（前端要多发一次请求） 方案 2：在后端去做上述事情（推荐） 前端导航栏死【标题】问题 ✔ 解决：使用 router.beforeEach，根据要跳转页面的 url 路径 匹配 config&#x2F;routes 配置的 title 字段。</p><h2 id="一、前端页面开发"><a href="#一、前端页面开发" class="headerlink" title="一、前端页面开发"></a>一、前端页面开发</h2><h3 id="1-搜索框"><a href="#1-搜索框" class="headerlink" title="1.搜索框"></a>1.搜索框</h3><pre class="line-numbers language-none"><code class="language-none">我们选择vant组件库里的基础搜索框，复制到TeamPage页面，同时还有查询为空时，显示的无结果页面（用户页面以写过）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202301071730028.png" alt="image.png"> 因为，我们一次性挂载本质性也是搜索队伍，所以我们把代码提取出来</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 搜索队伍 * @param val * @returns &#123;Promise&lt;void>&#125; */</span><span class="token keyword">const</span> listTeam <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>val <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/team/list"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">searchText</span><span class="token operator">:</span> val<span class="token punctuation">,</span>      <span class="token literal-property property">pageNum</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">?.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    teamList<span class="token punctuation">.</span>value <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'加载队伍失败，请刷新重试'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>挂载和搜索框修改为下图所示：（PS：搜索直接回车就可行） <img src="http://img-md-js.linjsblog.top/img/202301071730241.png" alt="image.png"> 测试 搜索一个队伍，和查询一个不存在的队伍 <img src="http://img-md-js.linjsblog.top/img/202301071730197.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301071731772.png" alt="image.png"></p><h3 id="2-更新页面"><a href="#2-更新页面" class="headerlink" title="2.更新页面"></a>2.更新页面</h3><p>分析：我们的更新页面和新建队伍页面类似，所以我们直接复制TeamAddPage,创建TeamUpdateTeam页面</p><h4 id="1-完善TeamCardList"><a href="#1-完善TeamCardList" class="headerlink" title="(1).完善TeamCardList"></a>(1).完善TeamCardList</h4><p>我们首先在队伍页面，创建一个按钮来跳转到更新页面，但是只有当前用户是队伍创建者才可以看到次按钮，我们可以直接写在TeamCardList组件里 按钮添加 <img src="http://img-md-js.linjsblog.top/img/202301071731870.png" alt="image.png"> 由于需要判断当前用户是否为队伍创建者，我们要获取当前用户（调用以前写的方法） <img src="http://img-md-js.linjsblog.top/img/202301071731214.png" alt="image.png"> 写跳转按钮的逻辑 <img src="http://img-md-js.linjsblog.top/img/202301071731248.png" alt="image.png"> PS：别忘了引入useRouter 完整代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div      id&#x3D;&quot;teamCardList&quot;  &gt;    &lt;van-card        v-for&#x3D;&quot;team in props.teamList&quot;        :thumb&#x3D;&quot;mouse&quot;        :desc&#x3D;&quot;team.description&quot;        :title&#x3D;&quot;&#96;$&#123;team.name&#125;&#96;&quot;    &gt;      &lt;template #tags&gt;        &lt;van-tag plain type&#x3D;&quot;danger&quot; style&#x3D;&quot;margin-right: 8px; margin-top: 8px&quot;&gt;          &#123;&#123;            teamStatusEnum[team.status]          &#125;&#125;        &lt;&#x2F;van-tag&gt;      &lt;&#x2F;template&gt;      &lt;template #bottom&gt;        &lt;div&gt;          &#123;&#123; &#39;最大人数: &#39; + team.maxNum &#125;&#125;        &lt;&#x2F;div&gt;        &lt;div v-if&#x3D;&quot;team.expireTime&quot;&gt;          &#123;&#123; &#39;过期时间: &#39; + team.expireTime &#125;&#125;        &lt;&#x2F;div&gt;        &lt;div&gt;          &#123;&#123; &#39;创建时间: &#39; + team.createTime &#125;&#125;        &lt;&#x2F;div&gt;      &lt;&#x2F;template&gt;      &lt;template #footer&gt;        &lt;van-button size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot;  plain @click&#x3D;&quot;doJoinTeam(team.id)&quot;&gt;加入队伍&lt;&#x2F;van-button&gt;        &lt;van-button v-if&#x3D;&quot;team.userId &#x3D;&#x3D;&#x3D; currentUser?.id&quot; size&#x3D;&quot;small&quot; plain                    @click&#x3D;&quot;doUpdateTeam(team.id)&quot;&gt;更新队伍        &lt;&#x2F;van-button&gt;      &lt;&#x2F;template&gt;    &lt;&#x2F;van-card&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;TeamType&#125; from &quot;..&#x2F;models&#x2F;team&quot;;import &#123;teamStatusEnum&#125; from &quot;..&#x2F;constants&#x2F;team&quot;;import mouse from &#39;..&#x2F;assets&#x2F;mouse.jpg&#39;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios&quot;;import &#123;Toast&#125; from &quot;vant&quot;;import &#123;useRouter&#125; from &quot;vue-router&quot;;import &#123;onMounted, ref&#125; from &quot;vue&quot;;import &#123;getCurrentUser&#125; from &quot;..&#x2F;services&#x2F;user&quot;;interface TeamCardListProps &#123;  teamList: TeamType[];&#125;const props &#x3D; withDefaults(defineProps&lt;TeamCardListProps&gt;(), &#123;  &#x2F;&#x2F; @ts-ignore  teamList: [] as TeamType[],&#125;);const router &#x3D; useRouter();&#x2F;** * 加入队伍 *&#x2F;const doJoinTeam &#x3D; async (id:number) &#x3D;&gt; &#123;  const res &#x3D; await myAxios.post(&#39;&#x2F;team&#x2F;join&#39;, &#123;    teamId: id,  &#125;);  if (res?.code &#x3D;&#x3D;&#x3D; 0) &#123;    Toast.success(&#39;加入成功&#39;);  &#125; else &#123;    Toast.fail(&#39;加入失败&#39; + (res.description ? &#96;，$&#123;res.description&#125;&#96; : &#39;&#39;));  &#125;&#125;&#x2F;** * 跳转至更新队伍页 * @param id *&#x2F;const doUpdateTeam &#x3D; (id: number) &#x3D;&gt; &#123;  router.push(&#123;    path: &#39;&#x2F;team&#x2F;update&#39;,    query: &#123;      id,    &#125;  &#125;)&#125;const currentUser &#x3D; ref();onMounted(async () &#x3D;&gt;&#123;  currentUser.value &#x3D; await getCurrentUser();&#125;)&lt;&#x2F;script&gt;&lt;style scoped&gt;#teamCardList :deep(.van-image__img) &#123;  height: 128px;  object-fit: unset;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-修改TeamUpdateTeam"><a href="#2-修改TeamUpdateTeam" class="headerlink" title="(2).修改TeamUpdateTeam"></a>(2).修改TeamUpdateTeam</h4><p>删除不能修改的组件（最大人数）和固定显示的参数（initFormData），修改提交逻辑（由于是复制得来的，千万别忘了，不然就是增加队伍了） 关键是获取之前队伍的信息。引入Route，来获取上个页面传来的参数 定义变量id <img src="http://img-md-js.linjsblog.top/img/202301071944802.png" alt="image.png"> 挂载获取之前队伍的信息 <img src="http://img-md-js.linjsblog.top/img/202301071945589.png" alt="image.png"> 完整代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;teamAddPage&quot;&gt;    &lt;van-form @submit&#x3D;&quot;onSubmit&quot;&gt;      &lt;van-cell-group inset&gt;        &lt;van-field            v-model&#x3D;&quot;addTeamData.name&quot;            name&#x3D;&quot;name&quot;            label&#x3D;&quot;队伍名&quot;            placeholder&#x3D;&quot;请输入队伍名&quot;            :rules&#x3D;&quot;[&#123; required: true, message: &#39;请输入队伍名&#39; &#125;]&quot;        &#x2F;&gt;        &lt;van-field            v-model&#x3D;&quot;addTeamData.description&quot;            rows&#x3D;&quot;4&quot;            autosize            label&#x3D;&quot;队伍描述&quot;            type&#x3D;&quot;textarea&quot;            placeholder&#x3D;&quot;请输入队伍描述&quot;        &#x2F;&gt;        &lt;van-field            is-link            readonly            name&#x3D;&quot;datetimePicker&quot;            label&#x3D;&quot;过期时间&quot;            :placeholder&#x3D;&quot;addTeamData.expireTime ?? &#39;点击选择过期时间&#39;&quot;            @click&#x3D;&quot;showPicker &#x3D; true&quot;        &#x2F;&gt;        &lt;van-popup v-model:show&#x3D;&quot;showPicker&quot; position&#x3D;&quot;bottom&quot;&gt;          &lt;van-datetime-picker              v-model&#x3D;&quot;addTeamData.expireTime&quot;              @confirm&#x3D;&quot;showPicker &#x3D; false&quot;              type&#x3D;&quot;datetime&quot;              title&#x3D;&quot;请选择过期时间&quot;              :min-date&#x3D;&quot;minDate&quot;          &#x2F;&gt;        &lt;&#x2F;van-popup&gt;        &lt;van-field name&#x3D;&quot;radio&quot; label&#x3D;&quot;队伍状态&quot;&gt;          &lt;template #input&gt;            &lt;van-radio-group v-model&#x3D;&quot;addTeamData.status&quot; direction&#x3D;&quot;horizontal&quot;&gt;              &lt;van-radio name&#x3D;&quot;0&quot;&gt;公开&lt;&#x2F;van-radio&gt;              &lt;van-radio name&#x3D;&quot;1&quot;&gt;私有&lt;&#x2F;van-radio&gt;              &lt;van-radio name&#x3D;&quot;2&quot;&gt;加密&lt;&#x2F;van-radio&gt;            &lt;&#x2F;van-radio-group&gt;          &lt;&#x2F;template&gt;        &lt;&#x2F;van-field&gt;        &lt;van-field            v-if&#x3D;&quot;Number(addTeamData.status) &#x3D;&#x3D;&#x3D; 2&quot;            v-model&#x3D;&quot;addTeamData.password&quot;            type&#x3D;&quot;password&quot;            name&#x3D;&quot;password&quot;            label&#x3D;&quot;密码&quot;            placeholder&#x3D;&quot;请输入队伍密码&quot;            :rules&#x3D;&quot;[&#123; required: true, message: &#39;请填写密码&#39; &#125;]&quot;        &#x2F;&gt;      &lt;&#x2F;van-cell-group&gt;      &lt;div style&#x3D;&quot;margin: 16px;&quot;&gt;        &lt;van-button round block type&#x3D;&quot;primary&quot; native-type&#x3D;&quot;submit&quot;&gt;          提交        &lt;&#x2F;van-button&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;van-form&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;useRoute, useRouter&#125; from &quot;vue-router&quot;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios&quot;;import &#123;Toast&#125; from &quot;vant&quot;;import &#123;onMounted, ref&#125; from &quot;vue&quot;;import &#123;TeamType&#125; from &quot;..&#x2F;models&#x2F;team&quot;;const router &#x3D; useRouter();const route &#x3D; useRoute();&#x2F;&#x2F; 展示日期选择器const showPicker &#x3D; ref(false);const minDate &#x3D; new Date();&#x2F;&#x2F; 需要用户填写的表单数据const addTeamData &#x3D; ref(&#123;&#125;)const id &#x3D; route.query.id;&#x2F;&#x2F;获取之前队伍的信息onMounted(async () &#x3D;&gt; &#123;  if (id &lt;&#x3D; 0) &#123;    Toast.fail(&quot;队伍加载失败&quot;);    return;  &#125;  const res &#x3D; await myAxios.get(&quot;&#x2F;team&#x2F;get&quot;, &#123;    params: &#123;      id: id,    &#125;  &#125;);  if (res?.code &#x3D;&#x3D;&#x3D; 0) &#123;    addTeamData.value &#x3D; res.data;  &#125; else &#123;    Toast.fail(&quot;队伍加载失败，请刷新重试&quot;);  &#125;&#125;)&#x2F;&#x2F; 提交const onSubmit &#x3D; async () &#x3D;&gt; &#123;  const postData &#x3D; &#123;    ...addTeamData.value,    status: Number(addTeamData.value.status)  &#125;  &#x2F;&#x2F; todo 前端参数校验  const res &#x3D; await myAxios.post(&quot;&#x2F;team&#x2F;update&quot;, postData);  if (res?.code &#x3D;&#x3D;&#x3D; 0 &amp;&amp; res.data) &#123;    Toast.success(&#39;更新成功&#39;);    router.push(&#123;      path: &#39;&#x2F;team&#39;,      replace: true,    &#125;);  &#125; else &#123;    Toast.success(&#39;更新失败&#39;);  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;#teamPage &#123;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>踩坑处：后端update接口要将@RequestBody删去</strong> <strong>否则会报Required request body is missing的错误（我这边是这样的）</strong></p><h4 id="3-测试：点击更新队伍修改参数"><a href="#3-测试：点击更新队伍修改参数" class="headerlink" title="(3).测试：点击更新队伍修改参数"></a>(3).测试：点击更新队伍修改参数</h4><p><img src="http://img-md-js.linjsblog.top/img/202301072007033.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301072008239.png" alt="image.png"></p><h3 id="3-查看个人已加入队伍"><a href="#3-查看个人已加入队伍" class="headerlink" title="3.查看个人已加入队伍"></a>3.查看个人已加入队伍</h3><h4 id="1-编写后端接口"><a href="#1-编写后端接口" class="headerlink" title="(1).编写后端接口"></a>(1).编写后端接口</h4><p>复用 listTeam 方法，只新增查询条件，不做修改（开闭原则） 获取当前用户已加入的队伍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取我创建的队伍 * * @param teamQuery * @param request * @return */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list/my/create"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listMyCreateTeams</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    teamQuery<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span></span> teamList <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">listTeams</span><span class="token punctuation">(</span>teamQuery<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>teamList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们查询加入的队伍需要用到id的列表，所以在Teamquery里增加idList字段 <img src="http://img-md-js.linjsblog.top/img/202301072021564.png" alt="image.png"> 获取我加入的队伍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取我加入的队伍 * * @param teamQuery * @param request * @return */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list/my/join"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listMyJoinTeams</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamList <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取出不重复的队伍 id</span>    <span class="token comment">// teamId userId</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span><span class="token punctuation">></span></span> listMap <span class="token operator">=</span> userTeamList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">UserTeam</span><span class="token operator">::</span><span class="token function">getTeamId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> idList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>listMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    teamQuery<span class="token punctuation">.</span><span class="token function">setIdList</span><span class="token punctuation">(</span>idList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span></span> teamList <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">listTeams</span><span class="token punctuation">(</span>teamQuery<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>teamList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改下listTeam方法，加一层校验 <img src="http://img-md-js.linjsblog.top/img/202301072021466.png" alt="image.png"></p><h4 id="2-后端测试"><a href="#2-后端测试" class="headerlink" title="(2).后端测试"></a>(2).后端测试</h4><p>自行准备下适合测试测数据（原来的数据都是被逻辑删除） 我这里在数据库里面设置14,24号队伍，其中24的创建者为4,14队伍创建者是550007，4加入了14队伍 <img src="http://img-md-js.linjsblog.top/img/202301072022078.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301072022592.png" alt="image.png"></p><h4 id="3-创建前端页面"><a href="#3-创建前端页面" class="headerlink" title="(3).创建前端页面"></a>(3).创建前端页面</h4><p>我们复制一份UserPage，命名为UserUpdatePage，修改UserPage（我们只需要当前用户，修改信息，我创建的队伍，我加入的队伍） 修改UserPage如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;template v-if&#x3D;&quot;user&quot;&gt;    &lt;van-cell title&#x3D;&quot;当前用户&quot; :value&#x3D;&quot;user?.username&quot; &#x2F;&gt;    &lt;van-cell title&#x3D;&quot;修改信息&quot; is-link to&#x3D;&quot;&#x2F;user&#x2F;update&quot; &#x2F;&gt;    &lt;van-cell title&#x3D;&quot;我创建的队伍&quot; is-link to&#x3D;&quot;&#x2F;user&#x2F;team&#x2F;create&quot; &#x2F;&gt;    &lt;van-cell title&#x3D;&quot;我加入的队伍&quot; is-link to&#x3D;&quot;&#x2F;user&#x2F;team&#x2F;join&quot; &#x2F;&gt;  &lt;&#x2F;template&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;useRouter&#125; from &quot;vue-router&quot;;import &#123;onMounted, ref&#125; from &quot;vue&quot;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios.js&quot;;import &#123;Toast&#125; from &quot;vant&quot;;import &#123;getCurrentUser&#125; from &quot;..&#x2F;services&#x2F;user&quot;;&#x2F;&#x2F; const user &#x3D; &#123;&#x2F;&#x2F;   id: 1,&#x2F;&#x2F;   username: &#39;鱼皮&#39;,&#x2F;&#x2F;   userAccount: &#39;dogYupi&#39;,&#x2F;&#x2F;   avatarUrl: &#39;https:&#x2F;&#x2F;img1.baidu.com&#x2F;it&#x2F;u&#x3D;1645832847,2375824523&amp;fm&#x3D;253&amp;fmt&#x3D;auto&amp;app&#x3D;138&amp;f&#x3D;JPEG?w&#x3D;480&amp;h&#x3D;480&#39;,&#x2F;&#x2F;   gender: &#39;男&#39;,&#x2F;&#x2F;   phone: &#39;121311313&#39;,&#x2F;&#x2F;   email: &#39;23432@qq.com&#39;,&#x2F;&#x2F;   planetCode: &#39;123&#39;,&#x2F;&#x2F;   createTime: new Date(),&#x2F;&#x2F; &#125;;const user &#x3D; ref();onMounted(async ()&#x3D;&gt;&#123;  &#x2F;&#x2F; const res &#x3D; await myAxios.get(&#39;&#x2F;user&#x2F;current&#39;);  &#x2F;&#x2F; if (res.code &#x3D;&#x3D;&#x3D; 0)&#123;  &#x2F;&#x2F;   user.value &#x3D;res.data;  &#x2F;&#x2F;   Toast.success(&#39;获取用户信息成功&#39;);  &#x2F;&#x2F; &#125;else &#123;  &#x2F;&#x2F;   Toast.fail(&#39;获取用户信息成功&#39;);  &#x2F;&#x2F; &#125;  user.value&#x3D;await getCurrentUser();&#125;)const router &#x3D; useRouter();const toEdit &#x3D; (editKey: string, editName: string, currentValue: string) &#x3D;&gt; &#123;  router.push(&#123;    path: &#39;&#x2F;user&#x2F;edit&#39;,    query: &#123;      editKey,      editName,      currentValue,    &#125;  &#125;)&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建页面：查询加入队伍页面和查询创建队伍页面（复制TeamPage页面，形式相同） PS:别忘了在路由里面添加这两个页面 因为我们把原来的用户页面改为用户更新页面，路由里也要修改 <img src="http://img-md-js.linjsblog.top/img/202301072220323.png" alt="image.png"> 查询加入队伍页面</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;teamPage&quot;&gt;    &lt;van-search v-model&#x3D;&quot;searchText&quot; placeholder&#x3D;&quot;搜索队伍&quot; @search&#x3D;&quot;onSearch&quot; &#x2F;&gt;    &lt;team-card-list :teamList&#x3D;&quot;teamList&quot; &#x2F;&gt;    &lt;van-empty v-if&#x3D;&quot;teamList?.length &lt; 1&quot; description&#x3D;&quot;数据为空&quot;&#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;useRouter&#125; from &quot;vue-router&quot;;import TeamCardList from &quot;..&#x2F;components&#x2F;TeamCardList.vue&quot;;import &#123;onMounted, ref&#125; from &quot;vue&quot;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios&quot;;import &#123;Toast&#125; from &quot;vant&quot;;const router &#x3D; useRouter();const searchText &#x3D; ref(&#39;&#39;);const teamList &#x3D; ref([]);&#x2F;** * 搜索队伍 * @param val * @returns &#123;Promise&lt;void&gt;&#125; *&#x2F;const listTeam &#x3D; async (val &#x3D; &#39;&#39;) &#x3D;&gt; &#123;  const res &#x3D; await myAxios.get(&quot;&#x2F;team&#x2F;list&#x2F;my&#x2F;join&quot;, &#123;    params: &#123;      searchText: val,      pageNum: 1,    &#125;,  &#125;);  if (res?.code &#x3D;&#x3D;&#x3D; 0) &#123;    teamList.value &#x3D; res.data;  &#125; else &#123;    Toast.fail(&#39;加载队伍失败，请刷新重试&#39;);  &#125;&#125;&#x2F;&#x2F; 页面加载时只触发一次onMounted( () &#x3D;&gt; &#123;  listTeam();&#125;)const onSearch &#x3D; (val) &#x3D;&gt; &#123;  listTeam(val);&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;#teamPage &#123;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询创建队伍页面</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;teamPage&quot;&gt;    &lt;van-search v-model&#x3D;&quot;searchText&quot; placeholder&#x3D;&quot;搜索队伍&quot; @search&#x3D;&quot;onSearch&quot; &#x2F;&gt;    &lt;van-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;doJoinTeam&quot;&gt;创建队伍&lt;&#x2F;van-button&gt;    &lt;team-card-list :teamList&#x3D;&quot;teamList&quot; &#x2F;&gt;    &lt;van-empty v-if&#x3D;&quot;teamList?.length &lt; 1&quot; description&#x3D;&quot;数据为空&quot;&#x2F;&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;useRouter&#125; from &quot;vue-router&quot;;import TeamCardList from &quot;..&#x2F;components&#x2F;TeamCardList.vue&quot;;import &#123;onMounted, ref&#125; from &quot;vue&quot;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios&quot;;import &#123;Toast&#125; from &quot;vant&quot;;const router &#x3D; useRouter();const searchText &#x3D; ref(&#39;&#39;);&#x2F;&#x2F; 跳转到加入队伍页const doJoinTeam &#x3D; () &#x3D;&gt; &#123;  router.push(&#123;    path: &quot;&#x2F;team&#x2F;add&quot;  &#125;)&#125;const teamList &#x3D; ref([]);&#x2F;** * 搜索队伍 * @param val * @returns &#123;Promise&lt;void&gt;&#125; *&#x2F;const listTeam &#x3D; async (val &#x3D; &#39;&#39;) &#x3D;&gt; &#123;  const res &#x3D; await myAxios.get(&quot;&#x2F;team&#x2F;list&#x2F;my&#x2F;create&quot;, &#123;    params: &#123;      searchText: val,      pageNum: 1,    &#125;,  &#125;);  if (res?.code &#x3D;&#x3D;&#x3D; 0) &#123;    teamList.value &#x3D; res.data;  &#125; else &#123;    Toast.fail(&#39;加载队伍失败，请刷新重试&#39;);  &#125;&#125;&#x2F;&#x2F; 页面加载时只触发一次onMounted( () &#x3D;&gt; &#123;  listTeam();&#125;)const onSearch &#x3D; (val) &#x3D;&gt; &#123;  listTeam(val);&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;#teamPage &#123;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="(4).测试"></a>(4).测试</h4><p><img src="http://img-md-js.linjsblog.top/img/202301072220015.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301072221281.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301072221003.png" alt="image.png"> <strong>PS：这里我觉得是有bug的，发送的请求是不带参数的,即status的默认状态是为null,会被定义成公共的，这样的话，如果我们创建的队伍是私人或者默认的就不会展现（我觉得应该是复用teamList的缘故，在teamLIst的逻辑里，我们不带参数请求就直接查询所有公开的），解决办法是带个status的参数再发送请求。但是我在knife4j里测试了一下，只能传一个状态参数，类型为整型，这代表了我们不能同查询多个状态的队伍，回到前端由于知识浅薄无法解决传参问题，只能显示公开状态的队伍。拉了鱼皮完整的代码（好像也没解决)，不知道有无大佬能够解决这个问题！</strong></p><h3 id="4-退出和解散队伍"><a href="#4-退出和解散队伍" class="headerlink" title="4.退出和解散队伍"></a>4.退出和解散队伍</h3><h4 id="1-在TeamCardList添加两个按钮来实现这两个功能"><a href="#1-在TeamCardList添加两个按钮来实现这两个功能" class="headerlink" title="1.在TeamCardList添加两个按钮来实现这两个功能"></a>1.在TeamCardList添加两个按钮来实现这两个功能</h4><p><img src="http://img-md-js.linjsblog.top/img/202301072221661.png" alt="image.png"></p><h4 id="2-在js里写入按钮的方法"><a href="#2-在js里写入按钮的方法" class="headerlink" title="2.在js里写入按钮的方法"></a>2.在js里写入按钮的方法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 退出队伍 * @param id */</span><span class="token keyword">const</span> <span class="token function-variable function">doQuitTeam</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/team/quit'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">teamId</span><span class="token operator">:</span> id  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">?.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'操作成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'操作失败'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>description <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>res<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 解散队伍 * @param id */</span><span class="token keyword">const</span> <span class="token function-variable function">doDeleteTeam</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/team/delete'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    id<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">?.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'操作成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'操作失败'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>description <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>res<span class="token punctuation">.</span>description<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4).运行测试 1.退出队伍（这里我退出了名为测试的队伍） <img src="http://img-md-js.linjsblog.top/img/202301072230878.png" alt="image.png"> 查看数据库，也成功删除了 2.解散队伍 <img src="http://img-md-js.linjsblog.top/img/202301072231468.png" alt="image.png"> 报错，这是因为我们后端接口没有封装对象（偷懒)，所以我们封装一个删除请求DeleteRequest</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通用删除请求 * * @author yupi */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1787902631969457554L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且修改删除接口</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">@PostMapping(&quot;&#x2F;delete&quot;)public BaseResponse&lt;Boolean&gt; deleteTeam(@RequestBody DeleteRequest deleteRequest, HttpServletRequest request) &#123;    if (deleteRequest &#x3D;&#x3D; null  deleteRequest.getId() &lt;&#x3D; 0) &#123;        throw new BusinessException(ErrorCode.PARAMS_ERROR);    &#125;    long id &#x3D; deleteRequest.getId();    User loginUser &#x3D; userService.getLoginUser(request);    boolean result &#x3D; teamService.deleteTeam(id, loginUser);    if (!result) &#123;        throw new BusinessException(ErrorCode.SYSTEM_ERROR, &quot;删除失败&quot;);    &#125;    return ResultUtils.success(true);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次测试（这里我们解散名为鼠窝更新的队伍） <img src="http://img-md-js.linjsblog.top/img/202301072231119.png" alt="image.png"> 刷新一下（队伍不在被找到） <img src="http://img-md-js.linjsblog.top/img/202301072231694.png" alt="image.png"> <strong>功能我们在后端去写，更加方便</strong></p><h2 id="二、随机匹配"><a href="#二、随机匹配" class="headerlink" title="二、随机匹配"></a>二、随机匹配</h2><p>编辑距离算法：<a href="https://blog.csdn.net/DBC_121/article/details/104198838">https://blog.csdn.net/DBC_121&#x2F;article&#x2F;details&#x2F;104198838</a></p><blockquote><p>最小编辑距离：字符串 1 通过最少多少次增删改字符的操作可以变成字符串 2</p></blockquote><p>余弦相似度算法：<a href="https://blog.csdn.net/m0_55613022/article/details/125683937%EF%BC%88%E5%A6%82%E6%9E%9C%E9%9C%80%E8%A6%81%E5%B8%A6%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97%EF%BC%8C%E6%AF%94%E5%A6%82%E5%AD%A6%E4%BB%80%E4%B9%88%E6%96%B9%E5%90%91%E6%9C%80%E9%87%8D%E8%A6%81%EF%BC%8C%E6%80%A7%E5%88%AB%E7%9B%B8%E5%AF%B9%E6%AC%A1%E8%A6%81">https://blog.csdn.net/m0_55613022&#x2F;article&#x2F;details&#x2F;125683937（如果需要带权重计算，比如学什么方向最重要，性别相对次要</a>）</p><h3 id="1-匹配用户后端编写"><a href="#1-匹配用户后端编写" class="headerlink" title="1.匹配用户后端编写"></a>1.匹配用户后端编写</h3><p>这里我们使用了编辑距离算法 把这个方法放在工具类（新建一个utils包）里面，并写一个测试类测试 我们推荐是通过标签类（所以我们传的参数应该是字符型的列表），修改整理为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 算法工具类** @author yupi*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlgorithmUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*** 编辑距离算法（用于计算最相似的两组标签）* 原理：https://blog.csdn.net/DBC_121/article/details/104198838** @param tagList1* @param tagList2* @return*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagList1<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagList2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> tagList1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> tagList2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> left <span class="token operator">=</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> down <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> left_down <span class="token operator">=</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tagList1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tagList2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    left_down <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> left_down<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*** 编辑距离算法（用于计算最相似的两个字符串）* 原理：https://blog.csdn.net/DBC_121/article/details/104198838** @param word1* @param word2* @return*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> n <span class="token operator">+</span> m<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> left <span class="token operator">=</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> down <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> left_down <span class="token operator">=</span> d<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    left_down <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>down<span class="token punctuation">,</span> left_down<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 算法工具类测试*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlgorithmUtilsTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"鱼皮是狗"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"鱼皮不是狗"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"鱼皮是鱼不是狗"</span><span class="token punctuation">;</span>        <span class="token comment">//        String str4 = "鱼皮是猫";</span>        <span class="token comment">// 1</span>        <span class="token keyword">int</span> score1 <span class="token operator">=</span> <span class="token class-name">AlgorithmUtils</span><span class="token punctuation">.</span><span class="token function">minDistance</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3</span>        <span class="token keyword">int</span> score2 <span class="token operator">=</span> <span class="token class-name">AlgorithmUtils</span><span class="token punctuation">.</span><span class="token function">minDistance</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testCompareTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagList1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"大一"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagList2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"大一"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagList3 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"大二"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1</span>        <span class="token keyword">int</span> score1 <span class="token operator">=</span> <span class="token class-name">AlgorithmUtils</span><span class="token punctuation">.</span><span class="token function">minDistance</span><span class="token punctuation">(</span>tagList1<span class="token punctuation">,</span> tagList2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3</span>        <span class="token keyword">int</span> score2 <span class="token operator">=</span> <span class="token class-name">AlgorithmUtils</span><span class="token punctuation">.</span><span class="token function">minDistance</span><span class="token punctuation">(</span>tagList1<span class="token punctuation">,</span> tagList3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在UserCOntroller里写入获取最匹配的用户的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 获取最匹配的用户 * * @param num * @param request * @return */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/match"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">matchUsers</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">0</span>  num <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">matchUsers</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在USerService里写入matchUsers方法并实现 <img src="http://img-md-js.linjsblog.top/img/202301092343035.png" alt="image.png"> 具体的实现方法本期直播并未完美的完成（遗留bug），所以结合13期的内容，修复了排序的问题 下面就是具体的代码: (这里由于鱼皮踩坑过多，同时自己也没有完全理解，过程就省略)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">matchUsers</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"tags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       queryWrapper<span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> tags <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagList <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 用户列表的下标 => 相似度</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 依次计算所有用户和当前用户的相似度</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">User</span> user <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">String</span> userTags <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 无标签或者为当前用户自己</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>userTags<span class="token punctuation">)</span>  user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userTagList <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>userTags<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 计算分数</span>           <span class="token keyword">long</span> distance <span class="token operator">=</span> <span class="token class-name">AlgorithmUtils</span><span class="token punctuation">.</span><span class="token function">minDistance</span><span class="token punctuation">(</span>tagList<span class="token punctuation">,</span> userTagList<span class="token punctuation">)</span><span class="token punctuation">;</span>           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">// 按编辑距离由小到大排序</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span><span class="token punctuation">></span></span> topUserPairList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 原本顺序的 userId 列表</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> userIdList <span class="token operator">=</span> topUserPairList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>pair <span class="token operator">-></span> pair<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userQueryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> userIdList<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 1, 3, 2</span>       <span class="token comment">// User1、User2、User3</span>       <span class="token comment">// 1 => User1, 2 => User2, 3 => User3</span>       <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> userIdUserListMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>userQueryWrapper<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-></span> <span class="token function">getSafetyUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> finalUserList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> userId <span class="token operator">:</span> userIdList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           finalUserList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userIdUserListMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> finalUserList<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h3><p>在数据库里插入标签假数据 <img src="http://img-md-js.linjsblog.top/img/202301072244091.png" alt="image.png"> 根据最小编辑距离算法，结果排序（排除自己）应该是32456 启动后端，在knife4j接口文档里测试matchUsers，正确用户排序也是32456 <img src="http://img-md-js.linjsblog.top/img/202301072244505.png" alt="image.png"><strong>踩坑处：</strong> <strong>1.一定要把redis的缓存清楚，重新登录，再matchUsers，否则推荐的用户不是通过最小编辑距离算法获得的</strong> <strong>2.我这里好像又有bug如下处</strong> <img src="http://img-md-js.linjsblog.top/img/202301072244341.png" alt="image.png"> <strong>这里鱼皮使用&#x3D;&#x3D;，我使用&#x3D;&#x3D;会依旧查到自己，debug发现值也是相同的，考虑到上次的踩坑处，应该是对象类型的问题，换成equals可行（球友们可自行根据情况编写代码)</strong></p>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（十一）</title>
      <link href="/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
      <url>/2023/01/09/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="接上期的接口设计"><a href="#接上期的接口设计" class="headerlink" title="接上期的接口设计"></a>接上期的接口设计</h3><h5 id="5-用户可以退出队伍"><a href="#5-用户可以退出队伍" class="headerlink" title="5. 用户可以退出队伍"></a>5. 用户可以退出队伍</h5><p>请求参数：队伍 id</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验我是否已加入队伍</li><li>如果队伍<ol><li>只剩一人，队伍解散</li><li>还有其他人<ol><li>如果是队长退出队伍，权限转移给第二早加入的用户 —— 先来后到只用取 id 最小的 2 条数据</li><li>非队长，自己退出队伍</li></ol></li></ol></li></ol><h5 id="6-队长可以解散队伍"><a href="#6-队长可以解散队伍" class="headerlink" title="6. 队长可以解散队伍"></a>6. 队长可以解散队伍</h5><p>请求参数：队伍 id 业务流程：</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验你是不是队伍的队长</li><li>移除所有加入队伍的关联信息</li><li>删除队伍</li></ol><h5 id="7-获取当前用户已加入的队伍"><a href="#7-获取当前用户已加入的队伍" class="headerlink" title="7. 获取当前用户已加入的队伍"></a>7. 获取当前用户已加入的队伍</h5><h5 id="8-获取当前用户创建的队伍"><a href="#8-获取当前用户创建的队伍" class="headerlink" title="8. 获取当前用户创建的队伍"></a>8. 获取当前用户创建的队伍</h5><p>复用 listTeam 方法，只新增查询条件，不做修改（开闭原则）</p><hr><h3 id="事务注解"><a href="#事务注解" class="headerlink" title="事务注解"></a>事务注解</h3><p>@Transactional(rollbackFor &#x3D; Exception.class) 要么数据操作都成功，要么都失败</p><h2 id="一、接口设计"><a href="#一、接口设计" class="headerlink" title="一、接口设计"></a>一、接口设计</h2><h3 id="1-用户可以退出队伍"><a href="#1-用户可以退出队伍" class="headerlink" title="1.用户可以退出队伍"></a>1.用户可以退出队伍</h3><h4 id="1-新建退出请求体"><a href="#1-新建退出请求体" class="headerlink" title="(1). 新建退出请求体"></a>(1). 新建退出请求体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamQuitRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2038884913144640407L</span><span class="token punctuation">;</span>        <span class="token comment">/*** id*/</span>        <span class="token keyword">private</span> <span class="token class-name">Long</span> teamId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-新建quit请求接口"><a href="#2-新建quit请求接口" class="headerlink" title="(2).新建quit请求接口"></a>(2).新建quit请求接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/quit"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">quitTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">TeamQuitRequest</span> teamQuitRequest<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuitRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">quitTeam</span><span class="token punctuation">(</span>teamQuitRequest<span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-在TeamService是写入quitTeam方法"><a href="#3-在TeamService是写入quitTeam方法" class="headerlink" title="(3).在TeamService是写入quitTeam方法"></a>(3).在TeamService是写入quitTeam方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 退出队伍* @param teamQuitRequest* @param loginUser* @return*/</span><span class="token keyword">boolean</span> <span class="token function">quitTeam</span><span class="token punctuation">(</span><span class="token class-name">TeamQuitRequest</span> teamQuitRequest<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-在TeamServiceImpl里实现quitTeam方法"><a href="#4-在TeamServiceImpl里实现quitTeam方法" class="headerlink" title="(4).在TeamServiceImpl里实现quitTeam方法"></a>(4).在TeamServiceImpl里实现quitTeam方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">quitTeam</span><span class="token punctuation">(</span><span class="token class-name">TeamQuitRequest</span> teamQuitRequest<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuitRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Long</span> teamId <span class="token operator">=</span> teamQuitRequest<span class="token punctuation">.</span><span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamId <span class="token operator">==</span> <span class="token keyword">null</span>  teamId <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NULL_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserTeam</span> queryUserTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserTeam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryUserTeam<span class="token punctuation">.</span><span class="token function">setTeamId</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>    queryUserTeam<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>queryUserTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"未加入队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> teamHasJoinNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countTeamUserByTeamId</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//队伍只剩下一个人，解散</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamHasJoinNum <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//删除队伍</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//队伍至少还剩下两人</span>        <span class="token comment">//是队长</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//把队伍转移给最早加入的用户</span>            <span class="token comment">//1.查询已加入队伍的所有用户和加入时间</span>            <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>            userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"order by id asc limit 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamList <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userTeamList<span class="token punctuation">)</span>  userTeamList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">UserTeam</span> nextUserTeam <span class="token operator">=</span> userTeamList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Long</span> nextTeamLeaderId <span class="token operator">=</span> nextUserTeam<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//更新当前队伍的队长</span>            <span class="token class-name">Team</span> updateTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            updateTeam<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>            updateTeam<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>nextTeamLeaderId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>updateTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span> <span class="token string">"更新队伍队长失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//移除关系</span>    <span class="token keyword">return</span> userTeamService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们由于多次需要获得队伍当前人数，所以封装了countTeamUserByTeamId方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 获取某队伍当前人数** @param teamId* @return*/</span><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">countTeamUserByTeamId</span><span class="token punctuation">(</span><span class="token keyword">long</span> teamId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> userTeamService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在joinTeam方法里修改代码 <img src="http://img-md-js.linjsblog.top/img/202301060028444.png" alt="image.png"></p><h4 id="5-测试-详细"><a href="#5-测试-详细" class="headerlink" title="(5).测试(详细)"></a>(5).测试(详细)</h4><p>我这里是队伍18有了两个用户，其中4是创建者，55007是队员（为了方便可复制得到） <img src="http://img-md-js.linjsblog.top/img/202301060028614.png" alt="image.png"> 现在4退出队伍 <img src="http://img-md-js.linjsblog.top/img/202301060028613.png" alt="image.png"> 的确，4已经不存在队伍18之中了 <img src="http://img-md-js.linjsblog.top/img/202301060028994.png" alt="image.png"> 房主的确顺位给了55007 <img src="http://img-md-js.linjsblog.top/img/202301060028856.png" alt="image.png"> 现在为了方便测试，我们直接在数据库里修改用户队伍关系表，把55007改为退出，4依旧为房主，队伍表里把房主设置为4，然后再次用4退出队伍 <img src="http://img-md-js.linjsblog.top/img/202301060028606.png" alt="image.png"> 队伍18被成功删除 <img src="http://img-md-js.linjsblog.top/img/202301060028057.png" alt="image.png"> 到此为止退出功能基本实现</p><h3 id="2-在TeamService里编写删除队伍方法并在TeamServiceImpl里实现"><a href="#2-在TeamService里编写删除队伍方法并在TeamServiceImpl里实现" class="headerlink" title="2.在TeamService里编写删除队伍方法并在TeamServiceImpl里实现"></a>2.在TeamService里编写删除队伍方法并在TeamServiceImpl里实现</h3><h4 id="1-修改delete接口"><a href="#1-修改delete接口" class="headerlink" title="(1).修改delete接口"></a>(1).修改delete接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">deleteTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">deleteTeam</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span> <span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在TeamService里面写入deleteTeam方法"><a href="#2-在TeamService里面写入deleteTeam方法" class="headerlink" title="(2).在TeamService里面写入deleteTeam方法"></a>(2).在TeamService里面写入deleteTeam方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 删除队伍* @param id* @param loginUser* @return*/</span><span class="token keyword">boolean</span> <span class="token function">deleteTeam</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-在TeamServiceImpl里实现deleteTeam方法"><a href="#3-在TeamServiceImpl里实现deleteTeam方法" class="headerlink" title="(3).在TeamServiceImpl里实现deleteTeam方法"></a>(3).在TeamServiceImpl里实现deleteTeam方法</h4><p>跟上面一样，我们需要根据id获取队伍信息，这个代码我们重复的写，所以提取出来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据 id 获取队伍信息** @param teamId* @return*/</span><span class="token keyword">private</span> <span class="token class-name">Team</span> <span class="token function">getTeamById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> teamId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamId <span class="token operator">==</span> <span class="token keyword">null</span>  teamId <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NULL_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> team<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Error_Code里添加一个禁止操作 <img src="http://img-md-js.linjsblog.top/img/202301090022846.png" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteTeam</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 校验队伍是否存在</span>    <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token function">getTeamById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> teamId <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 校验你是不是队伍的队长</span>    <span class="token comment">//        //test</span>    <span class="token comment">//        System.out.println("team.getUserId():"+team.getUserId().getClass().getName());</span>    <span class="token comment">//        System.out.println("loginUser.getId():"+loginUser.getId().getClass().getName());</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>team<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NO_AUTH</span><span class="token punctuation">,</span><span class="token string">"无访问权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 移除所有加入队伍的关联信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span><span class="token string">"删除队伍关联信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除队伍</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意在操作多个数据库时，在方法上要加上@Transactional(rollbackFor &#x3D; Exception.class)注解，表示要么数据操作都成功，要么都失败。 <strong>踩坑处：这里踩了大坑在校验是不是队长时，按照鱼皮的写了，运行发现报错无权限，debug发现两者的id也是一样的，最后在球友的帮助下，发现是类型的问题，打印出两者的类型是Long封装类，判断两者需要使用equals，而不是&#x3D;&#x3D;（好像是不支持&#x3D;&#x3D;），我这里修改为equals成功实现，建议大家先按鱼皮的写，如果报错，就可以替换下！</strong></p><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="(4).测试"></a>(4).测试</h4><p>我这里重新创建了20队伍用来测试删除队伍，然后在knife4j里直接删除队伍20 <img src="http://img-md-js.linjsblog.top/img/202301061516455.png" alt="image.png"> 查看数据库 <img src="http://img-md-js.linjsblog.top/img/202301061516772.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301090022787.png" alt="image.png"> 成功删除，删除队伍功能基本完成</p><h2 id="二、前端设计"><a href="#二、前端设计" class="headerlink" title="二、前端设计"></a>二、前端设计</h2><h3 id="1-新建一个TeamAddPage，并在路由里添加这个页面"><a href="#1-新建一个TeamAddPage，并在路由里添加这个页面" class="headerlink" title="1.新建一个TeamAddPage，并在路由里添加这个页面"></a>1.新建一个TeamAddPage，并在路由里添加这个页面</h3><p><img src="http://img-md-js.linjsblog.top/img/202301061617264.png" alt="image.png"> 在TeamPage里写一个按钮跳转到TeamAddPage <img src="http://img-md-js.linjsblog.top/img/202301061617107.png" alt="image.png"></p><h3 id="2-现在正式设计TeamAddPage页面，主要是在vant组件库里选择合适的组件粘贴"><a href="#2-现在正式设计TeamAddPage页面，主要是在vant组件库里选择合适的组件粘贴" class="headerlink" title="2.现在正式设计TeamAddPage页面，主要是在vant组件库里选择合适的组件粘贴"></a>2.现在正式设计TeamAddPage页面，主要是在vant组件库里选择合适的组件粘贴</h3><h4 id="1-队伍名和描述名"><a href="#1-队伍名和描述名" class="headerlink" title="(1).队伍名和描述名"></a>(1).队伍名和描述名</h4><p>我们可以发现队伍名和描述名类似于用户登录页面的表单组件，所以拿来即用（修改下参数） 这个主要是运用了表单，单元格，输入框这三个组件，其中描述使用了高度自适应 <img src="http://img-md-js.linjsblog.top/img/202301061615531.png" alt="image.png"> <strong>参数我们可以从后台获得（knife4j接口文档）</strong> <img src="http://img-md-js.linjsblog.top/img/202301061614200.png" alt="image.png"></p><h4 id="2-过期时间"><a href="#2-过期时间" class="headerlink" title="(2).过期时间"></a>(2).过期时间</h4><p>我们选择vant里的DatetimePicker选择完整时间 <img src="http://img-md-js.linjsblog.top/img/202301090022835.png" alt="image.png"> 这里的min-date 我们不能直接new Date(),因为这会导致页面一直渲染，从而页面加载不出来，我能得在建一个常量min-date，同时这个日期默认不显示，我们要在JS里展示日期选择器 <img src="http://img-md-js.linjsblog.top/img/202301090022941.png" alt="image.png"></p><h4 id="3-最大人数"><a href="#3-最大人数" class="headerlink" title="(3).最大人数"></a>(3).最大人数</h4><p>这里我们选择Stepper不进器里的限制输入范围 <img src="http://img-md-js.linjsblog.top/img/202301061722437.png" alt="image.png"></p><h4 id="4-队伍状态（当只有选择加密队伍时，才会跳出密码框）"><a href="#4-队伍状态（当只有选择加密队伍时，才会跳出密码框）" class="headerlink" title="(4).队伍状态（当只有选择加密队伍时，才会跳出密码框）"></a>(4).队伍状态（当只有选择加密队伍时，才会跳出密码框）</h4><p>这里我们选择表单类型里的单选框，和field输入框。 <strong>注意一定要在判断状态时，把类型转为Number，因为通过打印可得，状态是字符串类型的。</strong> <img src="http://img-md-js.linjsblog.top/img/202301061722195.png" alt="image.png"></p><h4 id="5-提交按钮"><a href="#5-提交按钮" class="headerlink" title="(5).提交按钮"></a>(5).提交按钮</h4><p><img src="http://img-md-js.linjsblog.top/img/202301061722826.png" alt="image.png"> native-type&#x3D;”submit”属性， 点击自动获取van-field name中的值组成的对象。 关键是提交所传的的状态也要转换成Number，同时创建成功后跳转到队伍页面 <img src="http://img-md-js.linjsblog.top/img/202301090022727.png" alt="image.png"> AddTeamPage页面完整代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div id&#x3D;&quot;teamAddPage&quot;&gt;    &lt;van-form @submit&#x3D;&quot;onSubmit&quot;&gt;      &lt;van-cell-group inset&gt;        &lt;van-field            v-model&#x3D;&quot;addTeamData.name&quot;            name&#x3D;&quot;name&quot;            label&#x3D;&quot;队伍名&quot;            placeholder&#x3D;&quot;请输入队伍名&quot;            :rules&#x3D;&quot;[&#123; required: true, message: &#39;请输入队伍名&#39; &#125;]&quot;        &#x2F;&gt;        &lt;van-field            v-model&#x3D;&quot;addTeamData.description&quot;            rows&#x3D;&quot;4&quot;            autosize            label&#x3D;&quot;队伍描述&quot;            type&#x3D;&quot;textarea&quot;            placeholder&#x3D;&quot;请输入队伍描述&quot;        &#x2F;&gt;        &lt;van-field            is-link            readonly            name&#x3D;&quot;datetimePicker&quot;            label&#x3D;&quot;过期时间&quot;            :placeholder&#x3D;&quot;addTeamData.expireTime ?? &#39;点击选择过期时间&#39;&quot;            @click&#x3D;&quot;showPicker &#x3D; true&quot;        &#x2F;&gt;        &lt;van-popup v-model:show&#x3D;&quot;showPicker&quot; position&#x3D;&quot;bottom&quot;&gt;          &lt;van-datetime-picker              v-model&#x3D;&quot;addTeamData.expireTime&quot;              @confirm&#x3D;&quot;showPicker &#x3D; false&quot;              type&#x3D;&quot;datetime&quot;              title&#x3D;&quot;请选择过期时间&quot;              :min-date&#x3D;&quot;minDate&quot;          &#x2F;&gt;        &lt;&#x2F;van-popup&gt;        &lt;van-field name&#x3D;&quot;stepper&quot; label&#x3D;&quot;最大人数&quot;&gt;          &lt;template #input&gt;            &lt;van-stepper v-model&#x3D;&quot;addTeamData.maxNum&quot; max&#x3D;&quot;10&quot; min&#x3D;&quot;3&quot;&#x2F;&gt;          &lt;&#x2F;template&gt;        &lt;&#x2F;van-field&gt;        &lt;van-field name&#x3D;&quot;radio&quot; label&#x3D;&quot;队伍状态&quot;&gt;          &lt;template #input&gt;            &lt;van-radio-group v-model&#x3D;&quot;addTeamData.status&quot; direction&#x3D;&quot;horizontal&quot;&gt;              &lt;van-radio name&#x3D;&quot;0&quot;&gt;公开&lt;&#x2F;van-radio&gt;              &lt;van-radio name&#x3D;&quot;1&quot;&gt;私有&lt;&#x2F;van-radio&gt;              &lt;van-radio name&#x3D;&quot;2&quot;&gt;加密&lt;&#x2F;van-radio&gt;            &lt;&#x2F;van-radio-group&gt;          &lt;&#x2F;template&gt;        &lt;&#x2F;van-field&gt;        &lt;van-field            v-if&#x3D;&quot;Number(addTeamData.status) &#x3D;&#x3D;&#x3D; 2&quot;            v-model&#x3D;&quot;addTeamData.password&quot;            type&#x3D;&quot;password&quot;            name&#x3D;&quot;password&quot;            label&#x3D;&quot;密码&quot;            placeholder&#x3D;&quot;请输入队伍密码&quot;            :rules&#x3D;&quot;[&#123; required: true, message: &#39;请填写密码&#39; &#125;]&quot;        &#x2F;&gt;      &lt;&#x2F;van-cell-group&gt;      &lt;div style&#x3D;&quot;margin: 16px;&quot;&gt;        &lt;van-button round block type&#x3D;&quot;primary&quot; native-type&#x3D;&quot;submit&quot;&gt;          提交        &lt;&#x2F;van-button&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;van-form&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;useRouter&#125; from &quot;vue-router&quot;;import &#123;ref&#125; from &quot;vue&quot;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios&quot;;import &#123;Toast&#125; from &quot;vant&quot;;const router &#x3D; useRouter();&#x2F;&#x2F; 展示日期选择器const showPicker &#x3D; ref(false);const minDate &#x3D; new Date();const initFormData &#x3D; &#123;  &quot;name&quot;: &quot;&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;expireTime&quot;: null,  &quot;maxNum&quot;: 3,  &quot;password&quot;: &quot;&quot;,  &quot;status&quot;: 0,&#125;&#x2F;&#x2F; 需要用户填写的表单数据const addTeamData &#x3D; ref(&#123;...initFormData&#125;)&#x2F;&#x2F; 提交const onSubmit &#x3D; async () &#x3D;&gt; &#123;  const postData &#x3D; &#123;    ...addTeamData.value,    status: Number(addTeamData.value.status)  &#125;  &#x2F;&#x2F; todo 前端参数校验  const res &#x3D; await myAxios.post(&quot;&#x2F;team&#x2F;add&quot;, postData);  if (res?.code &#x3D;&#x3D;&#x3D; 0 &amp;&amp; res.data)&#123;    Toast.success(&#39;添加成功&#39;);    router.push(&#123;      path: &#39;&#x2F;team&#39;,      replace: true,    &#125;);  &#125; else &#123;    Toast.success(&#39;添加失败&#39;);  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;#teamPage &#123;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-启动前后端项目，测试"><a href="#6-启动前后端项目，测试" class="headerlink" title="(6).启动前后端项目，测试"></a>(6).启动前后端项目，测试</h4><p>前端页面显示如下 <img src="http://img-md-js.linjsblog.top/img/202301061741188.png" alt="image.png"> 输入数据，提交。我这边已经添加队伍了（忘记截图了），如果正确的话，成功跳转 数据库成功加入数据 <img src="http://img-md-js.linjsblog.top/img/202301061741682.png" alt="image.png"></p><h3 id="3-设计队伍列表"><a href="#3-设计队伍列表" class="headerlink" title="3.设计队伍列表"></a>3.设计队伍列表</h3><h4 id="1-我们首先要定义队伍类型（team-d-ts）"><a href="#1-我们首先要定义队伍类型（team-d-ts）" class="headerlink" title="1.我们首先要定义队伍类型（team.d.ts）"></a>1.我们首先要定义队伍类型（team.d.ts）</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>UserType<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./user"</span><span class="token punctuation">;</span><span class="token comment">/** * 队伍类别 */</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">TeamType</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    expireTime<span class="token operator">?</span><span class="token operator">:</span> Date<span class="token punctuation">;</span><span class="token comment">//表示可有可无</span>    maxNum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    password<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    <span class="token comment">// todo 定义枚举值类型，更规范</span>    status<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>    createTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    updateTime<span class="token operator">:</span> Date<span class="token punctuation">;</span>    createUser<span class="token operator">?</span><span class="token operator">:</span> UserType<span class="token punctuation">;</span>    hasJoinNum<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建一个队伍卡片列表组件（类似于用户卡片列表）"><a href="#2-创建一个队伍卡片列表组件（类似于用户卡片列表）" class="headerlink" title="2.创建一个队伍卡片列表组件（类似于用户卡片列表）"></a>2.创建一个队伍卡片列表组件（类似于用户卡片列表）</h4><h4 id="1-复制用户卡片列表，将userlist改为teamlist，UserCardList改为TeamCardList，UserType改为TeamType"><a href="#1-复制用户卡片列表，将userlist改为teamlist，UserCardList改为TeamCardList，UserType改为TeamType" class="headerlink" title="(1).复制用户卡片列表，将userlist改为teamlist，UserCardList改为TeamCardList，UserType改为TeamType"></a>(1).复制用户卡片列表，将userlist改为teamlist，UserCardList改为TeamCardList，UserType改为TeamType</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;van-card      v-for&#x3D;&quot;user in props.teamList&quot;      :desc&#x3D;&quot;user.profile&quot;      :title&#x3D;&quot;&#96;$&#123;user.username&#125; ($&#123;user.planetCode&#125;)&#96;&quot;      :thumb&#x3D;&quot;user.avatarUrl&quot;  &gt;    &lt;template #tags&gt;      &lt;van-tag plain type&#x3D;&quot;danger&quot; v-for&#x3D;&quot;tag in user.tags&quot; style&#x3D;&quot;margin-right: 8px; margin-top: 8px&quot; &gt;        &#123;&#123; tag &#125;&#125;      &lt;&#x2F;van-tag&gt;    &lt;&#x2F;template&gt;    &lt;template #footer&gt;      &lt;van-button size&#x3D;&quot;mini&quot;&gt;联系我&lt;&#x2F;van-button&gt;    &lt;&#x2F;template&gt;  &lt;&#x2F;van-card&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;TeamType&#125; from &quot;..&#x2F;models&#x2F;team&quot;;interface TeamCardListProps&#123;  teamList: TeamType[];&#125;const props&#x3D; withDefaults(defineProps&lt;TeamCardListProps&gt;(),&#123;  &#x2F;&#x2F;@ts-ignore  teamList: [] as TeamType[]&#125;);&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-然后我们将此组件挂载在TeamPage页面"><a href="#2-然后我们将此组件挂载在TeamPage页面" class="headerlink" title="(2).然后我们将此组件挂载在TeamPage页面"></a>(2).然后我们将此组件挂载在TeamPage页面</h4><p><img src="http://img-md-js.linjsblog.top/img/202301090023001.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301061803450.png" alt="image.png"> 注意：引入team-card-list时，编译器可能不会帮你把引入的类型自动带上，需自己添加 <img src="http://img-md-js.linjsblog.top/img/202301090023012.png" alt="image.png"> 将team-card-list里的原来的用户参数换成队伍的，测试一下 <img src="http://img-md-js.linjsblog.top/img/202301090023994.png" alt="image.png"> 刷新页面，成功加载出组件（就是很丑，展示不齐全） <img src="http://img-md-js.linjsblog.top/img/202301090023009.png" alt="image.png"></p><h4 id="3-现在我们要完善teamcardlist组件"><a href="#3-现在我们要完善teamcardlist组件" class="headerlink" title="(3).现在我们要完善teamcardlist组件"></a>(3).现在我们要完善teamcardlist组件</h4><p>添加队伍状态，最大人数等以及实现加入队伍功能 我们下方要涉及到队伍的状态，我们先创建队伍状态常量 team.ts <img src="http://img-md-js.linjsblog.top/img/202301061949499.png" alt="image.png"> 完整代码如下：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;van-card        v-for&#x3D;&quot;team in props.teamList&quot;        :thumb&#x3D;&quot;mouse&quot;        :desc&#x3D;&quot;team.description&quot;        :title&#x3D;&quot;&#96;$&#123;team.name&#125;&#96;&quot;    &gt;      &lt;template #tags&gt;        &lt;van-tag plain type&#x3D;&quot;danger&quot; style&#x3D;&quot;margin-right: 8px; margin-top: 8px&quot;&gt;          &#123;&#123;            teamStatusEnum[team.status]          &#125;&#125;        &lt;&#x2F;van-tag&gt;      &lt;&#x2F;template&gt;      &lt;template #bottom&gt;        &lt;div&gt;          &#123;&#123; &#39;最大人数: &#39; + team.maxNum &#125;&#125;        &lt;&#x2F;div&gt;        &lt;div v-if&#x3D;&quot;team.expireTime&quot;&gt;          &#123;&#123; &#39;过期时间: &#39; + team.expireTime &#125;&#125;        &lt;&#x2F;div&gt;        &lt;div&gt;          &#123;&#123; &#39;创建时间: &#39; + team.createTime &#125;&#125;        &lt;&#x2F;div&gt;      &lt;&#x2F;template&gt;      &lt;template #footer&gt;        &lt;van-button size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot;  plain @click&#x3D;&quot;doJoinTeam(team.id)&quot;&gt;加入队伍&lt;&#x2F;van-button&gt;      &lt;&#x2F;template&gt;    &lt;&#x2F;van-card&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;TeamType&#125; from &quot;..&#x2F;models&#x2F;team&quot;;import &#123;teamStatusEnum&#125; from &quot;..&#x2F;constants&#x2F;team&quot;;import mouse from &#39;..&#x2F;assets&#x2F;mouse.jpg&#39;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios&quot;;import &#123;Toast&#125; from &quot;vant&quot;;import &#123;useRouter&#125; from &quot;vue-router&quot;;interface TeamCardListProps &#123;  teamList: TeamType[];&#125;const props &#x3D; withDefaults(defineProps&lt;TeamCardListProps&gt;(), &#123;  &#x2F;&#x2F; @ts-ignore  teamList: [] as TeamType[],&#125;);const router &#x3D; useRouter();&#x2F;** * 加入队伍 *&#x2F;const doJoinTeam &#x3D; async (id:number) &#x3D;&gt; &#123;  const res &#x3D; await myAxios.post(&#39;&#x2F;team&#x2F;join&#39;, &#123;    teamId: id,  &#125;);  if (res?.code &#x3D;&#x3D;&#x3D; 0) &#123;    Toast.success(&#39;加入成功&#39;);  &#125; else &#123;    Toast.fail(&#39;加入失败&#39; + (res.description ? &#96;，$&#123;res.description&#125;&#96; : &#39;&#39;));  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;#teamCardList :deep(.van-image__img) &#123;  height: 128px;  object-fit: unset;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：1.这里thumb我们引入了图片（显示更美观），可以把自己心仪的图片放入assets里并引入</p><pre class="line-numbers language-none"><code class="language-none">2. 加入队伍里面失败，写的形式是模板字符串，可自行了解   式，原来的图片过于宽，要指定高度关闭自适应，这里我们使用样式穿透，不然不起作用，**如果我们给部分组件引入的样式不起作用，都可以使用样式穿透！**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="(4).测试"></a>(4).测试</h4><p>刷新页面，页面显示如下，点击加入队伍，成功显示插入失败，已加入队伍（这里我是房主，所以加入失败，也可以登入其他用户测试） <img src="http://img-md-js.linjsblog.top/img/202301061949187.png" alt="image.png"></p><h2 id="over-！！！！！！！！！！！！！！"><a href="#over-！！！！！！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！！！！！！"></a>over ！！！！！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> vue </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（十）</title>
      <link href="/2023/01/08/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>/2023/01/08/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="鱼皮笔记"><a href="#鱼皮笔记" class="headerlink" title="鱼皮笔记"></a>鱼皮笔记</h2><h5 id="1、-查询队伍列表"><a href="#1、-查询队伍列表" class="headerlink" title="1、 查询队伍列表"></a>1、 查询队伍列表</h5><p>分页展示队伍列表，根据名称、最大人数等搜索队伍 P0，信息流中不展示已过期的队伍</p><ol><li>从请求参数中取出队伍名称等查询条件，如果存在则作为查询条件</li><li>不展示已过期的队伍（根据过期时间筛选）</li><li>可以通过某个<strong>关键词</strong>同时对名称和描述查询</li><li><strong>只有管理员才能查看加密还有非公开的房间</strong></li><li>关联查询已加入队伍的用户信息</li><li><strong>关联查询已加入队伍的用户信息（可能会很耗费性能，建议大家用自己写 SQL 的方式实现）</strong></li></ol><p><strong>实现方式</strong> 1）自己写 SQL</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F; 1. 自己写 SQL&#x2F;&#x2F; 查询队伍和创建人的信息&#x2F;&#x2F; select * from team t left join user u on t.userId &#x3D; u.id&#x2F;&#x2F; 查询队伍和已加入队伍成员的信息&#x2F;&#x2F; select *&#x2F;&#x2F; from team t&#x2F;&#x2F;         left join user_team ut on t.id &#x3D; ut.teamId&#x2F;&#x2F;         left join user u on ut.userId &#x3D; u.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、-修改队伍信息"><a href="#2、-修改队伍信息" class="headerlink" title="2、 修改队伍信息"></a>2、 修改队伍信息</h5><ol><li>判断请求参数是否为空</li><li>查询队伍是否存在</li><li>只有管理员或者队伍的创建者可以修改</li><li>如果用户传入的新值和老值一致，就不用 update 了（可自行实现，降低数据库使用次数）</li><li><strong>如果队伍状态改为加密，必须要有密码</strong></li><li>更新成功</li></ol><h5 id="3、-用户可以加入队伍"><a href="#3、-用户可以加入队伍" class="headerlink" title="3、 用户可以加入队伍"></a>3、 用户可以加入队伍</h5><p>其他人、未满、未过期，允许加入多个队伍，但是要有个上限 P0</p><ol><li>用户最多加入 5 个队伍</li><li>队伍必须存在，只能加入未满、未过期的队伍</li><li>不能加入自己的队伍，不能重复加入已加入的队伍（幂等性）</li><li>禁止加入私有的队伍</li><li>如果加入的队伍是加密的，必须密码匹配才可以</li><li>新增队伍 - 用户关联信息</li></ol><p><strong>注意，一定要加上事务注解！！！！</strong></p><h2 id="完善查询，更新，加入队伍接口"><a href="#完善查询，更新，加入队伍接口" class="headerlink" title="完善查询，更新，加入队伍接口"></a>完善查询，更新，加入队伍接口</h2><h3 id="1-为了保护数据不被暴露，所以我们要新建封装类"><a href="#1-为了保护数据不被暴露，所以我们要新建封装类" class="headerlink" title="1.为了保护数据不被暴露，所以我们要新建封装类"></a>1.为了保护数据不被暴露，所以我们要新建封装类</h3><p>在model包新建vo包，并创建TeamUserVO（队伍和用户信息封装类），UserVO类（用户封装类），这两个类是返回给前端看</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 队伍和用户信息封装类（脱敏） * * @author yupi */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamUserVO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">163478861968488713L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 队伍名称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 描述     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">/**     * 最大人数     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxNum<span class="token punctuation">;</span>    <span class="token comment">/**     * 过期时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> expireTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token comment">/**     * 0 - 公开，1 - 私有，2 - 加密     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建人用户信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">UserVO</span> createUser<span class="token punctuation">;</span>    <span class="token comment">/**     * 已加入的用户数     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> hasJoinNum<span class="token punctuation">;</span>    <span class="token comment">/**     * 是否已加入队伍     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasJoin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户包装类（脱敏） */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * id     */</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户昵称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">/**     * 账号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userAccount<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户头像     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatarUrl<span class="token punctuation">;</span>    <span class="token comment">/**     * 性别     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> gender<span class="token punctuation">;</span>    <span class="token comment">/**     * 电话     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token comment">/**     * 邮箱     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token comment">/**     * 标签列表 json     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> tags<span class="token punctuation">;</span>    <span class="token comment">/**     * 状态 0 - 正常     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userStatus<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     *      */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户角色 0 - 普通用户 1 - 管理员     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userRole<span class="token punctuation">;</span>    <span class="token comment">/**     * 星球编号     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> planetCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我这边嫌麻烦就直接根据后序直播内容把所要添加的参数全部写入了（你也可以根据直播顺序一步步添加）</strong></p><h3 id="2-在TeamService里编写查询队伍方法并在TeamServiceImpl里实现"><a href="#2-在TeamService里编写查询队伍方法并在TeamServiceImpl里实现" class="headerlink" title="2.在TeamService里编写查询队伍方法并在TeamServiceImpl里实现"></a>2.在TeamService里编写查询队伍方法并在TeamServiceImpl里实现</h3><p>在编写的过程中发现TeamQuery中缺少一个字段，现在补上 <img src="http://img-md-js.linjsblog.top/img/202301051806877.png" alt="image.png"></p><h4 id="1-首先在TeamService里面实现listTeams方法并实现"><a href="#1-首先在TeamService里面实现listTeams方法并实现" class="headerlink" title="1.首先在TeamService里面实现listTeams方法并实现"></a>1.首先在TeamService里面实现listTeams方法并实现</h4><p><img src="http://img-md-js.linjsblog.top/img/202301051806820.png" alt="image.png"></p><h4 id="2-编写业务层，其中只有管理员才能查看加密还有非公开的房间，所以我们需要从请求中获得是否为管理员"><a href="#2-编写业务层，其中只有管理员才能查看加密还有非公开的房间，所以我们需要从请求中获得是否为管理员" class="headerlink" title="2.编写业务层，其中只有管理员才能查看加密还有非公开的房间，所以我们需要从请求中获得是否为管理员"></a>2.编写业务层，其中只有管理员才能查看加密还有非公开的房间，所以我们需要从请求中获得是否为管理员</h4><p>所以我们这边提前修改listTeams方法（鱼皮是在写的过程中发现要获得是否为管理员，才去修改） <img src="http://img-md-js.linjsblog.top/img/202301051830339.png" alt="image.png"> 完整的编写过程这里就不一一展现了（大家可以观看直播了解具体过程，在编写过程中会发现问题，然后添加参数和类等等），这里要改的地方有点多（中间过程也没有测试)所以不写过程了。查询队伍imlp整理如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span></span> <span class="token function">listTeams</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAdmin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//组合查询条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> id <span class="token operator">=</span> teamQuery<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> searchText <span class="token operator">=</span> teamQuery<span class="token punctuation">.</span><span class="token function">getSearchText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>searchText<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>qw <span class="token operator">-></span> qw<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> searchText<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"expireTime"</span><span class="token punctuation">,</span> searchText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> teamQuery<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> description <span class="token operator">=</span> teamQuery<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Integer</span> maxNum <span class="token operator">=</span> teamQuery<span class="token punctuation">.</span><span class="token function">getMaxNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查询最大人数相等</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxNum <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> maxNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"maxMum"</span><span class="token punctuation">,</span> maxNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Long</span> userId <span class="token operator">=</span> teamQuery<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据创建人来查询</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> userId <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//根据状态来查询</span>        <span class="token class-name">Integer</span> status <span class="token operator">=</span> teamQuery<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TeamStatusEnum</span> statusEnum <span class="token operator">=</span> <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statusEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            statusEnum <span class="token operator">=</span> <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAdmin <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>statusEnum<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NO_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> statusEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//不展示已过期的队伍</span>    <span class="token comment">//expireTime is null or expireTime > now()</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>qw <span class="token operator">-></span> qw<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"expireTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"expireTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> teamList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>teamList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span></span> teamUserVOList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//关联查询创建人的用户信息</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Team</span> team <span class="token operator">:</span> teamList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> userId <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TeamUserVO</span> teamUserVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeamUserVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> teamUserVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//脱敏用户信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">UserVO</span> userVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> userVO<span class="token punctuation">)</span><span class="token punctuation">;</span>            teamUserVO<span class="token punctuation">.</span><span class="token function">setCreateUser</span><span class="token punctuation">(</span>userVO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        teamUserVOList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>teamUserVO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> teamUserVOList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求接口修改整理为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listTeams</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> isAdmin <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">isAdmin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamUserVO</span><span class="token punctuation">></span></span> teamList <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">listTeams</span><span class="token punctuation">(</span>teamQuery<span class="token punctuation">,</span>isAdmin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>teamList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试，打开knife4j接口，直接不带参数发送（等于查询全部）"><a href="#3-测试，打开knife4j接口，直接不带参数发送（等于查询全部）" class="headerlink" title="3.测试，打开knife4j接口，直接不带参数发送（等于查询全部）"></a>3.测试，打开knife4j接口，直接不带参数发送（等于查询全部）</h4><p><img src="http://img-md-js.linjsblog.top/img/202301052003781.png" alt="image.png"> 修改用户过期时间再次测试，观察是否查询不到此队伍（我这里修改了编号为14的队伍） <img src="http://img-md-js.linjsblog.top/img/202301052003651.png" alt="image.png"> 结果正确，过期的14组队伍未被查询出！ 查询队伍功能完成</p><h3 id="3-在TeamService里编写修改队伍信息方法并在TeamServiceImpl里实现"><a href="#3-在TeamService里编写修改队伍信息方法并在TeamServiceImpl里实现" class="headerlink" title="3.在TeamService里编写修改队伍信息方法并在TeamServiceImpl里实现"></a>3.在TeamService里编写修改队伍信息方法并在TeamServiceImpl里实现</h3><h4 id="1-同样在请求包里封装一个用户登录请求体"><a href="#1-同样在请求包里封装一个用户登录请求体" class="headerlink" title="1.同样在请求包里封装一个用户登录请求体"></a>1.同样在请求包里封装一个用户登录请求体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户登录请求体 * * @author shaosao */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamUpdateRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6043915331807008592L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 队伍名称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 描述     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">/**     * 过期时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> expireTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 0 - 公开，1 - 私有，2 - 加密     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">/**     * 密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在TeamService里面实现updateTeam方法并实现"><a href="#2-在TeamService里面实现updateTeam方法并实现" class="headerlink" title="2.在TeamService里面实现updateTeam方法并实现"></a>2.在TeamService里面实现updateTeam方法并实现</h4><p><img src="http://img-md-js.linjsblog.top/img/202301052004388.png" alt="image.png"> 修改接口更改为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">updateTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">TeamUpdateRequest</span> teamUpdateRequest<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamUpdateRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">updateTeam</span><span class="token punctuation">(</span>teamUpdateRequest<span class="token punctuation">,</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span> <span class="token string">"更新失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-最后编写实现类"><a href="#3-最后编写实现类" class="headerlink" title="3.最后编写实现类"></a>3.最后编写实现类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateTeam</span><span class="token punctuation">(</span><span class="token class-name">TeamUpdateRequest</span> teamUpdateRequest<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamUpdateRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Long</span> id <span class="token operator">=</span> teamUpdateRequest<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token keyword">null</span>  id <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Team</span> oldTeam <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTeam<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NULL_ERROR</span><span class="token punctuation">,</span><span class="token string">"队伍不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//只有管理员或者队伍的创建者才可以修改</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTeam<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>userService<span class="token punctuation">.</span><span class="token function">isAdmin</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NO_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Team</span> updateTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>teamUpdateRequest<span class="token punctuation">,</span>updateTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>updateTeam<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试，我这里更新了第14组的信息，查看数据库核验是否修改成功"><a href="#4-测试，我这里更新了第14组的信息，查看数据库核验是否修改成功" class="headerlink" title="4.测试，我这里更新了第14组的信息，查看数据库核验是否修改成功"></a>4.测试，我这里更新了第14组的信息，查看数据库核验是否修改成功</h4><p><img src="http://img-md-js.linjsblog.top/img/202301052004482.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301052004388.png" alt="image.png"></p><h4 id="5-修复bug（漏了校验）"><a href="#5-修复bug（漏了校验）" class="headerlink" title="5.修复bug（漏了校验）"></a>5.修复bug（漏了校验）</h4><p>但是这段代码还有有bug，如果状态为公开，也可以修改信息（需要把密码清除），所以<strong>如果队伍状态改为加密，必须要有密码，</strong>修改实现类的代码,增加红框处校验 <img src="http://img-md-js.linjsblog.top/img/202301052004889.png" alt="image.png"></p><h3 id="4-在TeamService里编写用户加入队伍方法并在TeamServiceImpl里实现"><a href="#4-在TeamService里编写用户加入队伍方法并在TeamServiceImpl里实现" class="headerlink" title="4.在TeamService里编写用户加入队伍方法并在TeamServiceImpl里实现"></a>4.在TeamService里编写用户加入队伍方法并在TeamServiceImpl里实现</h3><h4 id="1-同样在请求包里封装一个用户加入队伍请求体"><a href="#1-同样在请求包里封装一个用户加入队伍请求体" class="headerlink" title="1.同样在请求包里封装一个用户加入队伍请求体"></a>1.同样在请求包里封装一个用户加入队伍请求体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 用户加入队伍请求体 * * @author shaosao */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamJoinRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">24663018187059425L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> teamId<span class="token punctuation">;</span>    <span class="token comment">/**     * 密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在TeamService里面实现joinTeam方法并实现"><a href="#2-在TeamService里面实现joinTeam方法并实现" class="headerlink" title="2.在TeamService里面实现joinTeam方法并实现"></a>2.在TeamService里面实现joinTeam方法并实现</h4><p><img src="http://img-md-js.linjsblog.top/img/202301080004599.png" alt="image.png"></p><h4 id="3-编写用户加入队伍接口"><a href="#3-编写用户加入队伍接口" class="headerlink" title="3.编写用户加入队伍接口"></a>3.编写用户加入队伍接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/join"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">joinTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">TeamJoinRequest</span> teamJoinRequest<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamJoinRequest<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">joinTeam</span><span class="token punctuation">(</span>teamJoinRequest<span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">joinTeam</span><span class="token punctuation">(</span><span class="token class-name">TeamJoinRequest</span> teamJoinRequest<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>teamJoinRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Long</span> teamId <span class="token operator">=</span> teamJoinRequest<span class="token punctuation">.</span><span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>teamId <span class="token operator">==</span> <span class="token keyword">null</span>  teamId <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Date</span> expireTime <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>expireTime <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> expireTime<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍已过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Integer</span> status <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TeamStatusEnum</span> teamStatusEnum <span class="token operator">=</span> <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>teamStatusEnum<span class="token punctuation">.</span><span class="token constant">PRIVATE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>teamStatusEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"禁止加入私有队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">String</span> password <span class="token operator">=</span> teamJoinRequest<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>teamStatusEnum<span class="token punctuation">.</span><span class="token constant">SECRET</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>teamStatusEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>  <span class="token operator">!</span>password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//该用户已加入的队伍数量 数据库查询所以放到下面，减少查询时间</span>       <span class="token class-name">Long</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTeam</span><span class="token punctuation">></span></span> userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> hasJoinNum <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>hasJoinNum <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"最多创建和加入5个队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//不能重复加入已加入的队伍</span>       userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>       userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> hasUserJoinTeam <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>hasUserJoinTeam <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"用户已加入该队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//已加入队伍的人数</span>       userTeamQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userTeamQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"teamId"</span><span class="token punctuation">,</span> teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> teamHasJoinNum <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>userTeamQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>teamHasJoinNum <span class="token operator">>=</span> team<span class="token punctuation">.</span><span class="token function">getMaxNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//修改队伍信息</span>       <span class="token class-name">UserTeam</span> userTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserTeam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userTeam<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>       userTeam<span class="token punctuation">.</span><span class="token function">setTeamId</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>       userTeam<span class="token punctuation">.</span><span class="token function">setJoinTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> userTeamService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：下面红框代码尽量放在下面，因为它是sql查询，会浪费大量时间，放在下面可以在通过上面的校验再查询，尽可能的减少查询次数<img src="http://img-md-js.linjsblog.top/img/202301080004777.png" alt="image.png"></p><h4 id="4-测试：开两个knife4j后台"><a href="#4-测试：开两个knife4j后台" class="headerlink" title="4.测试：开两个knife4j后台"></a>4.测试：开两个knife4j后台</h4><p><strong>踩坑处：我这里嫌麻烦直接新登录了一个原来注册的用户，结果它是管理员，后面测试更新的时候，修改成功（还以是bug，查bug好久。。。。）,所以最好新建一个用户</strong> 在完成注册和登录之后，先加一个私有队伍，成功显示报错（禁止加入私有队伍） <img src="http://img-md-js.linjsblog.top/img/202301052312166.png" alt="image.png"> 加入一个公开队伍，成功！ <img src="http://img-md-js.linjsblog.top/img/202301080005382.png" alt="image.png"> 数据库里的用户队伍关系表也更新成功 <img src="http://img-md-js.linjsblog.top/img/202301052312110.png" alt="image.png"> 测试修改队伍功能，先使用新注册的用户，结果正常显示无权限 <img src="http://img-md-js.linjsblog.top/img/202301052312469.png" alt="image.png"> 换创建用户的更新 <img src="http://img-md-js.linjsblog.top/img/202301052312342.png" alt="image.png"> 成功修改，数据库也更新 <img src="http://img-md-js.linjsblog.top/img/202301080005316.png" alt="image.png"> <strong>但是这里有个bug，如果不带参数，就会显示为空，即我们不能实现选择更新，就是说不能单独修改一处（只能跟前端统一要求）或者去修改这个bug</strong> 更换加入队伍的用户，再次加入（不带密码），正常显示密码错误 <img src="http://img-md-js.linjsblog.top/img/202301052312139.png" alt="image.png"> 带密码加入，因为我们已经加入，显示不能重复加入已加入的队伍 <img src="http://img-md-js.linjsblog.top/img/202301052312009.png" alt="image.png">、 为了测试加密队伍功能是否能够正常实现，我们使用创建账户更新另一个队伍（这里我是13），需要新账户为加入的，更改为需要密码加入 更换为新注册用户，不带密码加入，报错正常 <img src="http://img-md-js.linjsblog.top/img/202301052312922.png" alt="image.png"> 带入密码加入，成功加入 <img src="http://img-md-js.linjsblog.top/img/202301080005191.png" alt="image.png"> 数据库里的用户队伍关系表也更新成功 <img src="http://img-md-js.linjsblog.top/img/202301052312574.png" alt="image.png"></p><h2 id="over-！！！！！！！！！！！！！！！"><a href="#over-！！！！！！！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！！！！！！！"></a>over ！！！！！！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（九）</title>
      <link href="/2023/01/06/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>/2023/01/06/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="组队功能"><a href="#组队功能" class="headerlink" title="组队功能"></a>组队功能</h3><h4 id="理想的应用场景"><a href="#理想的应用场景" class="headerlink" title="理想的应用场景"></a>理想的应用场景</h4><p>我要跟别人一起参加竞赛或者做项目，可以发起队伍或者加入别人的队伍</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0 队长、剩余的人数 聊天？ 公开 或 private 或加密 <strong>用户创建队伍最多 5 个</strong> 展示队伍列表，根据名称搜索队伍 P0，信息流中不展示已过期的队伍 修改队伍信息 P0 ~ P1 用户可以加入队伍（其他人、未满、未过期），允许加入多个队伍，但是要有个上限 P0 是否需要队长同意？筛选审批？ 用户可以退出队伍（如果队长退出，权限转移给第二早加入的用户 —— 先来后到） P1 队长可以解散队伍 P0</p><hr><p>分享队伍 &#x3D;》 邀请其他用户加入队伍 P1 业务流程：</p><ol><li>生成分享链接（分享二维码）</li><li>用户访问链接，可以点击加入</li></ol><p>队伍人满后发送消息通知 P1</p><h4 id="系统（接口）设计"><a href="#系统（接口）设计" class="headerlink" title="系统（接口）设计"></a>系统（接口）设计</h4><h5 id="1、创建队伍"><a href="#1、创建队伍" class="headerlink" title="1、创建队伍"></a>1、创建队伍</h5><p>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0 队长、剩余的人数 聊天？ 公开 或 private 或加密 信息流中不展示已过期的队伍</p><ol><li>请求参数是否为空？</li><li>是否登录，未登录不允许创建</li><li>校验信息<ol><li>队伍人数 &gt; 1 且 &lt;&#x3D; 20</li><li>队伍标题 &lt;&#x3D; 20</li><li>描述 &lt;&#x3D; 512</li><li>status 是否公开（int）不传默认为 0（公开）</li><li>如果 status 是加密状态，一定要有密码，且密码 &lt;&#x3D; 32</li><li>超时时间 &gt; 当前时间</li><li>校验用户最多创建 5 个队伍</li></ol></li><li>插入队伍信息到队伍表</li><li>插入用户 &#x3D;&gt; 队伍关系到关系表</li></ol><h5 id="2、查询队伍列表"><a href="#2、查询队伍列表" class="headerlink" title="2、查询队伍列表"></a>2、查询队伍列表</h5><p>分页展示队伍列表，根据名称、最大人数等搜索队伍 P0，信息流中不展示已过期的队伍</p><ol><li>从请求参数中取出队伍名称等查询条件，如果存在则作为查询条件</li><li>不展示已过期的队伍（根据过期时间筛选）</li><li>可以通过某个<strong>关键词</strong>同时对名称和描述查询</li><li><strong>只有管理员才能查看加密还有非公开的房间</strong></li><li>关联查询已加入队伍的用户信息</li><li><strong>关联查询已加入队伍的用户信息（可能会很耗费性能，建议大家用自己写 SQL 的方式实现）</strong></li></ol><p><strong>实现方式</strong> 1）自己写 SQL</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F; 1. 自己写 SQL&#x2F;&#x2F; 查询队伍和创建人的信息&#x2F;&#x2F; select * from team t left join user u on t.userId &#x3D; u.id&#x2F;&#x2F; 查询队伍和已加入队伍成员的信息&#x2F;&#x2F; select *&#x2F;&#x2F; from team t&#x2F;&#x2F;         left join user_team ut on t.id &#x3D; ut.teamId&#x2F;&#x2F;         left join user u on ut.userId &#x3D; u.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-修改队伍信息"><a href="#3-修改队伍信息" class="headerlink" title="3. 修改队伍信息"></a>3. 修改队伍信息</h5><ol><li>判断请求参数是否为空</li><li>查询队伍是否存在</li><li>只有管理员或者队伍的创建者可以修改</li><li>如果用户传入的新值和老值一致，就不用 update 了（可自行实现，降低数据库使用次数）</li><li><strong>如果队伍状态改为加密，必须要有密码</strong></li><li>更新成功</li></ol><h5 id="4-用户可以加入队伍"><a href="#4-用户可以加入队伍" class="headerlink" title="4. 用户可以加入队伍"></a>4. 用户可以加入队伍</h5><p>其他人、未满、未过期，允许加入多个队伍，但是要有个上限 P0</p><ol><li>用户最多加入 5 个队伍</li><li>队伍必须存在，只能加入未满、未过期的队伍</li><li>不能加入自己的队伍，不能重复加入已加入的队伍（幂等性）</li><li>禁止加入私有的队伍</li><li>如果加入的队伍是加密的，必须密码匹配才可以</li><li>新增队伍 - 用户关联信息</li></ol><p><strong>注意，一定要加上事务注解！！！！</strong></p><h5 id="5-用户可以退出队伍"><a href="#5-用户可以退出队伍" class="headerlink" title="5. 用户可以退出队伍"></a>5. 用户可以退出队伍</h5><p>请求参数：队伍 id</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验我是否已加入队伍</li><li>如果队伍<ol><li>只剩一人，队伍解散</li><li>还有其他人<ol><li>如果是队长退出队伍，权限转移给第二早加入的用户 —— 先来后到只用取 id 最小的 2 条数据</li><li>非队长，自己退出队伍</li></ol></li></ol></li></ol><h5 id="6-队长可以解散队伍"><a href="#6-队长可以解散队伍" class="headerlink" title="6. 队长可以解散队伍"></a>6. 队长可以解散队伍</h5><p>请求参数：队伍 id 业务流程：</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验你是不是队伍的队长</li><li>移除所有加入队伍的关联信息</li><li>删除队伍</li></ol><h5 id="7-获取当前用户已加入的队伍"><a href="#7-获取当前用户已加入的队伍" class="headerlink" title="7. 获取当前用户已加入的队伍"></a>7. 获取当前用户已加入的队伍</h5><h5 id="8-获取当前用户创建的队伍"><a href="#8-获取当前用户创建的队伍" class="headerlink" title="8. 获取当前用户创建的队伍"></a>8. 获取当前用户创建的队伍</h5><p>复用 listTeam 方法，只新增查询条件，不做修改（开闭原则）</p><hr><h4 id="事务注解"><a href="#事务注解" class="headerlink" title="事务注解"></a>事务注解</h4><p>@Transactional(rollbackFor &#x3D; Exception.class) 要么数据操作都成功，要么都失败</p><h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>队伍表 team 字段：</p><ul><li>id 主键 bigint（最简单、连续，放 url 上比较简短，但缺点是爬虫）</li><li>name 队伍名称</li><li>description 描述</li><li>maxNum 最大人数</li><li>expireTime 过期时间</li><li>userId 创建人 id</li><li>status 0 - 公开，1 - 私有，2 - 加密</li><li>password 密码</li><li>createTime 创建时间</li><li>updateTime 更新时间</li><li>isDelete 是否删除</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table team(    id bigint auto_increment comment &#39;id&#39; primary key,    name  varchar(256)          not null comment &#39;队伍名称&#39;,    description varchar(1024)           null comment &#39;描述&#39;,    maxNum  int   default 1         not null comment &#39;最大人数&#39;,    expireTime  datetime null comment &#39;过期时间&#39;,    userId      bigint comment &#39;用户id&#39;,    status  int   default 0         not null comment &#39;0 - 公开，1 - 私有，2 - 加密&#39;,    password varchar(512)            null comment &#39;密码&#39;,    createTime  datetime default CURRENT_TIMESTAMP null comment &#39;创建时间&#39;,    updateTime  datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,    isDelete   tinyint default 0         not null comment &#39;是否删除&#39;)    comment &#39;队伍&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户 - 队伍表 user_team 字段：</p><ul><li>id 主键</li><li>userId 用户 id</li><li>teamId 队伍 id</li><li>joinTime 加入时间</li><li>createTime 创建时间</li><li>updateTime 更新时间</li><li>isDelete 是否删除</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table user_team(    id bigint auto_increment comment &#39;id&#39;  primary key,    userId      bigint comment &#39;用户id&#39;,    teamId      bigint comment &#39;队伍id&#39;,    joinTime datetime null comment &#39;加入时间&#39;,    createTime  datetime default CURRENT_TIMESTAMP null comment &#39;创建时间&#39;,    updateTime  datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,    isDelete   tinyint default 0         not null comment &#39;是否删除&#39;)    comment &#39;用户队伍关系&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个关系：</p><ol><li>用户加了哪些队伍？</li><li>队伍有哪些用户？</li></ol><p>方式：</p><ol><li>建立用户 - 队伍关系表 teamId userId（便于修改，查询性能高一点，可以选择这个，不用全表遍历）</li><li>用户表补充已加入的队伍字段，队伍表补充已加入的用户字段（便于查询，不用写多对多的代码，可以直接根据队伍查用户、根据用户查队伍）</li></ol><h4 id="为什么需要请求参数包装类？"><a href="#为什么需要请求参数包装类？" class="headerlink" title="为什么需要请求参数包装类？"></a>为什么需要请求参数包装类？</h4><ol><li>请求参数名称 &#x2F; 类型和实体类不一样</li><li>有一些参数用不到，如果要自动生成接口文档，会增加理解成本</li><li>对个实体类映射到同一个对象</li></ol><h4 id="为什么需要包装类？"><a href="#为什么需要包装类？" class="headerlink" title="为什么需要包装类？"></a>为什么需要包装类？</h4><p>可能有些字段需要隐藏，不能返回给前端 或者有些字段某些方法是不关心的</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>库表设计 5 - 10min 增删改查 5 - 10 min 业务逻辑开发（P0）30 min</p><h2 id="一、数据库建表"><a href="#一、数据库建表" class="headerlink" title="一、数据库建表"></a>一、数据库建表</h2><p>复制下列ddl建表语句，到idea里面建表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table team(    id           bigint auto_increment comment &#39;id&#39;        primary key,    name   varchar(256)                   not null comment &#39;队伍名称&#39;,    description varchar(1024)                      null comment &#39;描述&#39;,    maxNum    int      default 1                 not null comment &#39;最大人数&#39;,    expireTime    datetime  null comment &#39;过期时间&#39;,    userId            bigint comment &#39;用户id&#39;,    status    int      default 0                 not null comment &#39;0 - 公开，1 - 私有，2 - 加密&#39;,    password varchar(512)                       null comment &#39;密码&#39;,    createTime   datetime default CURRENT_TIMESTAMP null comment &#39;创建时间&#39;,    updateTime   datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,    isDelete     tinyint  default 0                 not null comment &#39;是否删除&#39;)    comment &#39;队伍&#39;;create table user_team(    id           bigint auto_increment comment &#39;id&#39;        primary key,    userId            bigint comment &#39;用户id&#39;,    teamId            bigint comment &#39;队伍id&#39;,    joinTime datetime  null comment &#39;加入时间&#39;,    createTime   datetime default CURRENT_TIMESTAMP null comment &#39;创建时间&#39;,    updateTime   datetime default CURRENT_TIMESTAMP null on update CURRENT_TIMESTAMP,    isDelete     tinyint  default 0                 not null comment &#39;是否删除&#39;)    comment &#39;用户队伍关系&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示的表格如下（tag表以前建过，这期好像鱼皮忘记了，暂时不要删）: <img src="http://img-md-js.linjsblog.top/img/202301041954934.png" alt="image.png"> 使用MybatisX-Generator生成domain，service和mapper文件，然后把生成的文件都移到对应的目录里面，别忘了把mapper.xml里的路径改成自己对应的。 PS：别忘了在team和user_team类中的is_delete字段添加@TableLogic注解，实现逻辑删除 <img src="http://img-md-js.linjsblog.top/img/202301041811287.png" alt="image.png"></p><h2 id="二、编写接口（TeamController）"><a href="#二、编写接口（TeamController）" class="headerlink" title="二、编写接口（TeamController）"></a>二、编写接口（TeamController）</h2><h3 id="1-复制UserController并重命名为TeamController修改整理为："><a href="#1-复制UserController并重命名为TeamController修改整理为：" class="headerlink" title="1.复制UserController并重命名为TeamController修改整理为："></a>1.复制UserController并重命名为TeamController修改整理为：</h3><p><img src="http://img-md-js.linjsblog.top/img/202301041811395.png" alt="image.png"></p><h3 id="2-编写具体的接口"><a href="#2-编写具体的接口" class="headerlink" title="2.编写具体的接口"></a>2.编写具体的接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token function">addTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Team</span> team<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> save <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>save<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span> <span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">deleteTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span> <span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">updateTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Team</span> team<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">,</span> <span class="token string">"更新失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> <span class="token function">getTeamById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Team</span> team <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NULL_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="这边我们需要新建请求参数包装类和包装类，原因如下："><a href="#这边我们需要新建请求参数包装类和包装类，原因如下：" class="headerlink" title="这边我们需要新建请求参数包装类和包装类，原因如下："></a>这边我们需要新建请求参数包装类和包装类，原因如下：</h4><h5 id="为什么需要请求参数包装类？-1"><a href="#为什么需要请求参数包装类？-1" class="headerlink" title="为什么需要请求参数包装类？"></a>为什么需要请求参数包装类？</h5><ol><li>请求参数名称 &#x2F; 类型和实体类不一样</li><li>有一些参数用不到，如果要自动生成接口文档，会增加理解成本</li><li>对个实体类映射到同一个对象</li></ol><h5 id="为什么需要包装类？-1"><a href="#为什么需要包装类？-1" class="headerlink" title="为什么需要包装类？"></a>为什么需要包装类？</h5><p>可能有些字段需要隐藏，不能返回给前端 或者有些字段某些方法是不关心的</p><p>在model包里新建一个dto包，写一个包装类TeamQuery</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamQuery</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 队伍名称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 描述     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">/**     * 最大人数     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxNum<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token comment">/**     * 0 - 公开，1 - 私有，2 - 加密     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在common包下新建分页请求参数包装类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4162304142710323660L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 页面大小     */</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">;</span>    <span class="token comment">/**     * 当前是第几页     */</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在TeamQuery上继承这个分页请求，后面接口会用上 <img src="http://img-md-js.linjsblog.top/img/202301041836538.png" alt="image.png"></p><h4 id="继续编写接口"><a href="#继续编写接口" class="headerlink" title="继续编写接口"></a>继续编写接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listTeams</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span>teamQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> teamList <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>teamList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listTeamsByPage</span><span class="token punctuation">(</span><span class="token class-name">TeamQuery</span> teamQuery<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>teamQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span>teamQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>teamQuery<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>teamQuery<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> resultPage <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>resultPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>踩坑处：注意Page导入的是mybatisplus，而不是springboot自带的那个</strong></p><h4 id="利用knife4j测试接口"><a href="#利用knife4j测试接口" class="headerlink" title="利用knife4j测试接口"></a>利用knife4j测试接口</h4><p>首先插入10条数据 <img src="http://img-md-js.linjsblog.top/img/202301042316865.png" alt="image.png"> list展现队伍信息，确实是有10条 <img src="http://img-md-js.linjsblog.top/img/202301042316273.png" alt="image.png"> 分页查询：设置每页只显示两条 <img src="http://img-md-js.linjsblog.top/img/202301042316655.png" alt="image.png"> 分页查询：设置每页只显示两条（第二页） <img src="http://img-md-js.linjsblog.top/img/202301042316988.png" alt="image.png"> 删除队伍信息 <img src="http://img-md-js.linjsblog.top/img/202301042316901.png" alt="image.png"></p><h3 id="3-细化接口（根据具体的需求）"><a href="#3-细化接口（根据具体的需求）" class="headerlink" title="3.细化接口（根据具体的需求）"></a>3.细化接口（根据具体的需求）</h3><h4 id="1-这边我们会运用到队伍的状态-即公开，私有等，所以我们提前写一个队伍状态枚举类"><a href="#1-这边我们会运用到队伍的状态-即公开，私有等，所以我们提前写一个队伍状态枚举类" class="headerlink" title="1.这边我们会运用到队伍的状态,即公开，私有等，所以我们提前写一个队伍状态枚举类"></a>1.这边我们会运用到队伍的状态,即公开，私有等，所以我们提前写一个队伍状态枚举类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 队伍状态枚举 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TeamStatusEnum</span> <span class="token punctuation">&#123;</span>    <span class="token function">PUBLIC</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"公开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PRIVATE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"私有"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SECRET</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"加密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TeamStatusEnum</span> <span class="token function">getEnumByValue</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TeamStatusEnum</span> teamStatusEnum<span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>teamStatusEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> teamStatusEnum<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-正式开始细化接口"><a href="#2-正式开始细化接口" class="headerlink" title="2.正式开始细化接口"></a>2.正式开始细化接口</h4><p>在TeamService里写入 long addTeam(Team team, User loginUser); 并在TeamServiceImpl实现这个方法 TeamServiceImpl里代码整理如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeamMapper</span><span class="token punctuation">,</span> <span class="token class-name">Team</span><span class="token punctuation">></span></span>        <span class="token keyword">implements</span> <span class="token class-name">TeamService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserTeamService</span> userTeamService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">addTeam</span><span class="token punctuation">(</span><span class="token class-name">Team</span> team<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.请求参数是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.是否登录，未登录不允许创建</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NO_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.检验信息</span>        <span class="token comment">//(1).队伍人数>1且&lt;=20</span>        <span class="token keyword">int</span> maxNum <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getMaxNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果为空，直接赋值为0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxNum <span class="token generics"><span class="token punctuation">&lt;</span> 1  maxNum <span class="token punctuation">></span></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍人数不满足要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//(2).队伍标题 &lt;=20</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍标题不满足要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3. 描述&lt;= 512</span>        <span class="token class-name">String</span> description <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> description<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍描述过长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//4.status 是否公开，不传默认为0</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TeamStatusEnum</span> statusEnum <span class="token operator">=</span> <span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statusEnum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"队伍状态不满足要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//5.如果status是加密状态，一定要密码 且密码&lt;=32</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TeamStatusEnum</span><span class="token punctuation">.</span><span class="token constant">SECRET</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>statusEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>  password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"密码设置不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//6.超出时间 > 当前时间</span>        <span class="token class-name">Date</span> expireTime <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>expireTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"超出时间 > 当前时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//7.校验用户最多创建5个队伍</span>        <span class="token comment">//todo 有bug。可能同时创建100个队伍</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> hasTeamNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasTeamNum <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"用户最多创建5个队伍"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//8.插入队伍消息到队伍表</span>        team<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        team<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> teamId <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result  team <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"创建队伍失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//9. 插入用户 ==> 队伍关系 到关系表</span>        <span class="token class-name">UserTeam</span> userTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserTeam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userTeam<span class="token punctuation">.</span><span class="token function">setTeamId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        userTeam<span class="token punctuation">.</span><span class="token function">setTeamId</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span>        userTeam<span class="token punctuation">.</span><span class="token function">setJoinTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> userTeamService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userTeam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">,</span> <span class="token string">"创建队伍失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> teamId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-优化完成控制层"><a href="#3-优化完成控制层" class="headerlink" title="3.优化完成控制层"></a>3.优化完成控制层</h4><p>这里我们因为完善了业务层，所以在controller层可以简便下代码，我们需要新建一个队伍添加请求封装类（便于前端知道该输入哪些参数） 新的请求封装类位于model包里的request包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamAddRequest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4162304142710323660L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 队伍名称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 描述     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">/**     * 最大人数     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxNum<span class="token punctuation">;</span>    <span class="token comment">/**     * 过期时间     */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> expireTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户id     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token comment">/**     * 0 - 公开，1 - 私有，2 - 加密     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>    <span class="token comment">/**     * 密码     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改的addTeam接口如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token function">addTeam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">TeamAddRequest</span> teamAddRequest<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>teamAddRequest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>teamAddRequest<span class="token punctuation">,</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> teamId <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">addTeam</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>teamId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 ：BeanUtils.copyProperties(teamAddRequest,team); 两个参数的位置原来写错了，现在需要调换</strong> <img src="http://img-md-js.linjsblog.top/img/202301042316497.png" alt="image.png"></p><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><p>启动项目，好像刚刚的请求参数封装类没起作用（这里跟鱼皮的一样），只能自己删除再输入 <img src="http://img-md-js.linjsblog.top/img/202301042315900.png" alt="image.png"> 成功的插入 ps：这里过期时间的获取可从控制台输入一下代码来实现，单单的输入年月日会导致数据库里的时间增加8小时（应该是时区的问题） <img src="http://img-md-js.linjsblog.top/img/202301042315956.png" alt="image.png"> 多次发送添加请求，当插入5次之后，再插入会报错 <img src="http://img-md-js.linjsblog.top/img/202301042316453.png" alt="image.png"> 测试事务是否起作用 注意要在方法上添加如下注解 <img src="http://img-md-js.linjsblog.top/img/202301042316616.png" alt="image.png"> 首先数据库的数据删至4条，别忘了把对应的用户表关系也删除，保持一致 修改TeamServiceImpl，目的是骗过编译器，直接创建队伍失败 <img src="http://img-md-js.linjsblog.top/img/202301042317090.png" alt="image.png"> 稍微修改下参数，发送，确实报用户关系失败 <img src="http://img-md-js.linjsblog.top/img/202301042317802.png" alt="image.png"> 数据库里也没用增加数据，证实了事务起作用，最后别忘了把刚刚增加的代码所删除（骗过编译器)</p><h2 id="over-！！！！！！！！！！！！！！"><a href="#over-！！！！！！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！！！！！！"></a>over ！！！！！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> mybatis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（八）：定时任务和分布式锁</title>
      <link href="/2023/01/06/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/01/06/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="鱼皮笔记"><a href="#鱼皮笔记" class="headerlink" title="鱼皮笔记"></a>鱼皮笔记</h2><h3 id="1-控制定时任务的执行"><a href="#1-控制定时任务的执行" class="headerlink" title="1.控制定时任务的执行"></a>1.控制定时任务的执行</h3><p>为啥？</p><ol><li>浪费资源，想象 10000 台服务器同时 “打鸣”</li><li>脏数据，比如重复插入</li></ol><p><strong>要控制定时任务在同一时间只有 1 个服务器能执行。</strong> 怎么做？</p><ol><li>分离定时任务程序和主程序，只在 1 个服务器运行定时任务。成本太大</li><li>写死配置，每个服务器都执行定时任务，但是只有 ip 符合配置的服务器才真实执行业务逻辑，其他的直接返回。成本最低；但是我们的 IP 可能是不固定的，把 IP 写的太死了</li><li>动态配置，配置是可以轻松的、很方便地更新的（<strong>代码无需重启</strong>），但是只有 ip 符合配置的服务器才真实执行业务逻辑。问题：服务器多了、IP 不可控还是很麻烦，还是要人工修改<ul><li>数据库</li><li>Redis</li><li>配置中心（Nacos、Apollo、Spring Cloud Config）</li></ul></li><li>分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都一样。</li></ol><p><strong>单机就会存在单点故障。</strong></p><h3 id="2-锁"><a href="#2-锁" class="headerlink" title="2.锁"></a>2.锁</h3><p>有限资源的情况下，控制同一时间（段）只有某些线程（用户 &#x2F; 服务器）能访问到资源。 Java 实现锁：synchronized 关键字、并发包的类 问题：只对单个 JVM 有效</p><h3 id="3-分布式锁"><a href="#3-分布式锁" class="headerlink" title="3.分布式锁"></a>3.分布式锁</h3><p>为啥需要分布式锁？</p><ol><li>有限资源的情况下，控制同一时间（段）只有某些线程（用户 &#x2F; 服务器）能访问到资源。</li><li>单个锁只对单个 JVM 有效</li></ol><h3 id="4-分布式锁实现的关键"><a href="#4-分布式锁实现的关键" class="headerlink" title="4.分布式锁实现的关键"></a>4.分布式锁实现的关键</h3><h4 id="抢锁机制"><a href="#抢锁机制" class="headerlink" title="抢锁机制"></a>抢锁机制</h4><p>怎么保证同一时间只有 1 个服务器能抢到锁？ <strong>核心思想</strong> 就是：先来的人先把数据改成自己的标识（服务器 ip），后来的人发现标识已存在，就抢锁失败，继续等待。 等先来的人执行方法结束，把标识清空，其他的人继续抢锁。 MySQL 数据库：select for update 行级锁（最简单） （乐观锁） ✔ Redis 实现：内存数据库，<strong>读写速度快</strong> 。支持 <strong>setnx</strong>、lua 脚本，比较方便我们实现分布式锁。 setnx：set if not exists 如果不存在，则设置；只有设置成功才会返回 true，否则返回 false</p><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><ol><li><p>用完锁要释放（腾地方）√</p></li><li><p><strong>锁一定要加过期时间 √</strong></p></li><li><p>如果方法执行时间过长，锁提前过期了？问题：</p><ol><li>连锁效应：释放掉别人的锁</li><li>这样还是会存在多个方法同时执行的情况</li></ol><p>解决方案：续期</p></li></ol><pre class="line-numbers language-none"><code class="language-none">boolean end &#x3D; false;new Thread(() -&gt; &#123;    if (!end)&#125;&#123;    续期&#125;)end &#x3D; true;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>释放锁的时候，有可能先判断出是自己的锁，但这时锁过期了，最后还是释放了别人的锁</li><li>Redis 如果是集群（而不是只有一个 Redis），如果分布式锁的数据不同步怎么办？</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 原子操作if(get lock &#x3D;&#x3D; A) &#123;    &#x2F;&#x2F; set lock B    del lock&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Redis + lua 脚本实现 <a href="https://blog.csdn.net/feiying0canglang/article/details/113258494">https://blog.csdn.net/feiying0canglang/article/details/113258494</a></p><h4 id="拒绝自己写！！！"><a href="#拒绝自己写！！！" class="headerlink" title="拒绝自己写！！！"></a>拒绝自己写！！！</h4><h3 id="6-Redisson-实现分布式锁"><a href="#6-Redisson-实现分布式锁" class="headerlink" title="6.Redisson 实现分布式锁"></a>6.Redisson 实现分布式锁</h3><p>Java 客户端，数据网格 实现了很多 Java 里支持的接口和数据结构 Redisson 是一个 java 操作 Redis 的客户端，<strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。</strong></p><h4 id="2-种引入方式"><a href="#2-种引入方式" class="headerlink" title="2 种引入方式"></a>2 种引入方式</h4><ol><li>spring boot starter 引入（不推荐，版本迭代太快，容易冲突）<a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></li><li>直接引入：<a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></li></ol><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// list，数据存在本地 JVM 内存中</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list:"</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数据存在 redis 的内存中</span><span class="token class-name">RList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> rList <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"test-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>javarList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rlist:"</span> <span class="token operator">+</span> rList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-定时任务-锁"><a href="#7-定时任务-锁" class="headerlink" title="7.定时任务 + 锁"></a>7.定时任务 + 锁</h3><ol><li>waitTime 设置为 0，只抢一次，抢不到就放弃</li><li>注意释放锁要写在 finally 中</li></ol><p><strong>实现代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testWatchDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"yupao:precachejob:docache:lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 只有一个线程能获取到锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// todo 实际要执行的方法</span>            <span class="token function">doSomeThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getLock: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 只能释放自己的锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unLock: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>java    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-看门狗机制"><a href="#8-看门狗机制" class="headerlink" title="8.看门狗机制"></a>8.看门狗机制</h3><p>redisson 中提供的续期机制 开一个监听线程，如果方法还没执行完，就帮你重置 redis 锁的过期时间。 原理：</p><ol><li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（补到 30 秒）</li><li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li></ol><p><a href="https://blog.csdn.net/qq_26222859/article/details/79645203">https://blog.csdn.net/qq_26222859&#x2F;article&#x2F;details&#x2F;79645203</a></p><hr><p>Zookeeper 实现（不推荐）</p><h2 id="一、redission实现分布式锁"><a href="#一、redission实现分布式锁" class="headerlink" title="一、redission实现分布式锁"></a>一、redission实现分布式锁</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><p><a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.18.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意踩坑处：我这边开了梯子，下载依赖，会有io.netty:netty-codec-dns:jar:4.1.74.Final依赖安装失败， 解决办法：删除maven仓库里redission和netty-codec-dns。然后关闭梯子重新安装依赖</p><h3 id="2-写redisson配置"><a href="#2-写redisson配置" class="headerlink" title="2.写redisson配置"></a>2.写redisson配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Redisson 配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.redis"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1、创建配置</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> redisAddress <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"redis://%s:%s"</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>redisAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建实例</span>        <span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisson<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写测试类来使用edisson 实现分布式锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//List。数据存在本地JVM内存中</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list: "</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        list.remove(0);</span>        <span class="token comment">//数据存在redis的内存中</span>        <span class="token class-name">RList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> rList <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"test-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rList: "</span><span class="token operator">+</span>rList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        rList.remove(0);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行发现redis3库里面已经存入数据 <img src="http://img-md-js.linjsblog.top/img/202301031439434.png" alt="image.png"></p><h2 id="二、定时任务-锁"><a href="#二、定时任务-锁" class="headerlink" title="二、定时任务 + 锁"></a>二、定时任务 + 锁</h2><p>1.修改定时任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreCacheJob</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">//重点用户</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> mainUserList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//每天执行，预热推荐用户</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 24 18 * * *"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCacheRecommendUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"yupao:precachejob:docache:lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">//只有一个线程能获取到锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30000L</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getLock: "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token operator">:</span> mainUserList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userPage <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"yupao:user:recommend:%s"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//写缓存</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span>userPage<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis set key error"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"doCacheRecommendUser error "</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//只能释放自己的锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unlock: "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包项目，在终端打开两个，主程序启动（由于定时任务太过于麻烦，所以我们提取出来写一个测试）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testWatchDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"yupao:precachejob:docache:lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>        <span class="token comment">//只有一个线程能获取到锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getLock: "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//只能释放自己的锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unlock: "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意锁的存在时间要设置为-1（开启开门狗），默认锁的过期时间是30秒，通过sleep实现 运行，通过quickredis观察，可以发现 每 10 秒续期一次（补到 30 秒） <strong>踩坑处：不要用debug启动，会被认为是宕机</strong></p><h2 id="over！！！！！！！！！！！！！！"><a href="#over！！！！！！！！！！！！！！" class="headerlink" title="over！！！！！！！！！！！！！！"></a>over！！！！！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（七）：redis缓存预热提高查询速度</title>
      <link href="/2023/01/06/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9Aredis%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6/"/>
      <url>/2023/01/06/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9Aredis%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h2><h3 id="1-数据查询慢怎么办？"><a href="#1-数据查询慢怎么办？" class="headerlink" title="1.数据查询慢怎么办？"></a>1.数据查询慢怎么办？</h3><p>用缓存：提前把数据取出来保存好（通常保存到读写更快的介质，比如内存），就可以更快地读写。</p><h3 id="2-缓存的实现"><a href="#2-缓存的实现" class="headerlink" title="2.缓存的实现"></a>2.缓存的实现</h3><ul><li>Redis（分布式缓存）</li><li>memcached（分布式）</li><li>Etcd（云原生架构的一个分布式存储，<strong>存储配置</strong>，扩容能力）</li></ul><hr><ul><li>ehcache（单机）</li><li>本地缓存（Java 内存 Map）</li><li>Caffeine（Java 内存缓存，高性能）</li><li>Google Guava</li></ul><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>NoSQL 数据库 key - value 存储系统（区别于 MySQL，他存储的是键值对）</p><h4 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h4><p>String 字符串类型： name: “yupi” List 列表：names: [“yupi”, “dogyupi”, “yupi”] Set 集合：names: [“yupi”, “dogyupi”]（值不能重复） Hash 哈希：nameAge: { “yupi”: 1, “dogyupi”: 2 } Zset 集合：names: { yupi - 9, dogyupi - 12 }（适合做排行榜）</p><hr><p>bloomfilter（布隆过滤器，主要从大量的数据中快速过滤值，比如邮件黑名单拦截） geo（计算地理位置） hyperloglog（pv &#x2F; uv） pub &#x2F; sub（发布订阅，类似消息队列） BitMap （1001010101010101010101010101）</p><h3 id="3-自定义序列化"><a href="#3-自定义序列化" class="headerlink" title="3.自定义序列化"></a>3.自定义序列化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ljs<span class="token punctuation">.</span>yupao<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTemplateConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入一个库时，先写测试类</p><h3 id="4-Java-里的实现方式"><a href="#4-Java-里的实现方式" class="headerlink" title="4.Java 里的实现方式"></a>4.Java 里的实现方式</h3><h4 id="Spring-Data-Redis（推荐）"><a href="#Spring-Data-Redis（推荐）" class="headerlink" title="Spring Data Redis（推荐）"></a>Spring Data Redis（推荐）</h4><p>Spring Data：通用的数据访问框架，定义了一组 <strong>增删改查</strong> 的接口 mysql、redis、jpa <a href="https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis">spring-data-redis</a> 1）引入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）配置 Redis 地址</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment"># redis 配置</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    port<span class="token punctuation">:</span> <span class="token number">6379</span>    host<span class="token punctuation">:</span> localhost    database<span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>独立于 Spring 操作 Redis 的 Java 客户端 要配合 Jedis Pool 使用</p><h4 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h4><p><strong>高阶</strong> 的操作 Redis 的 Java 客户端 异步、连接池</p><h4 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h4><p>分布式操作 Redis 的 Java 客户端，让你像在使用本地的集合一样操作 Redis（分布式 Redis 数据网格）</p><h4 id="JetCache"><a href="#JetCache" class="headerlink" title="JetCache"></a>JetCache</h4><p>对比</p><ol><li>如果你用的是 Spring，并且没有过多的定制化要求，可以用 Spring Data Redis，最方便</li><li>如果你用的不是 SPring，并且追求简单，并且没有过高的性能要求，可以用 Jedis + Jedis Pool</li><li>如果你的项目不是 Spring，并且追求高性能、高定制化，可以用 Lettuce，支持异步、连接池</li></ol><hr><ul><li>如果你的项目是分布式的，需要用到一些分布式的特性（比如分布式锁、分布式集合），推荐用 redisson</li></ul><h3 id="5-设计缓存-key"><a href="#5-设计缓存-key" class="headerlink" title="5.设计缓存 key"></a>5.设计缓存 key</h3><p>不同用户看到的数据不同 systemId:moduleId:func:options（不要和别人冲突） yupao:user:recommed:userId <strong>redis 内存不能无限增加，一定要设置过期时间！！！</strong></p><h3 id="6-缓存预热"><a href="#6-缓存预热" class="headerlink" title="6.缓存预热"></a>6.缓存预热</h3><p>问题：第一个用户访问还是很慢（加入第一个老板），也能一定程度上保护数据库 缓存预热的优点：</p><ol><li>解决上面的问题，可以让用户始终访问很快</li></ol><p>缺点：</p><ol><li>增加开发成本（你要额外的开发、设计）</li><li>预热的时机和时间如果错了，有可能你缓存的数据不对或者太老</li><li>需要占用额外空间</li></ol><h4 id="怎么缓存预热？"><a href="#怎么缓存预热？" class="headerlink" title="怎么缓存预热？"></a>怎么缓存预热？</h4><ol><li>定时</li><li>模拟触发（手动触发）</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>用定时任务，每天刷新所有用户的推荐列表 注意点：</p><ol><li>缓存预热的意义（新增少、总用户多）</li><li>缓存的空间不能太大，要预留给其他缓存空间</li><li>缓存数据的周期（此处每天一次）</li></ol><p>分析优缺点的时候，要打开思路，从整个项目从 0 到 1 的链路上去分析</p><h3 id="7-定时任务实现"><a href="#7-定时任务实现" class="headerlink" title="7.定时任务实现"></a>7.定时任务实现</h3><ol><li><strong>Spring Scheduler（spring boot 默认整合了）</strong></li><li>Quartz（独立于 Spring 存在的定时任务框架）</li><li>XXL-Job 之类的分布式任务调度平台（界面 + sdk）</li></ol><p>第一种方式：</p><ol><li>主类开启 @EnableScheduling</li><li>给要定时执行的方法添加 @Scheduling 注解，指定 cron 表达式或者执行频率</li></ol><p>不要去背 cron 表达式！！！！！</p><ul><li><a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></li><li><a href="https://www.matools.com/crontab/">https://www.matools.com/crontab/</a></li></ul><h2 id="一、测试redis"><a href="#一、测试redis" class="headerlink" title="一、测试redis"></a>一、测试redis</h2><p>因为java自带的redistemplate只能查询字符串类型，不够全面，所以我们需要自定义序列化，在config包里创建如下配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTemplateConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在测试包里创建测试类RedisTest，测试代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ValueOperations</span> valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//增</span>        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"yupiString"</span><span class="token punctuation">,</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"yupiInt"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"yupiDouble"</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"yupiUser"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查</span>        <span class="token class-name">Object</span> yupi <span class="token operator">=</span> valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"yupiString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>yupi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        yupi <span class="token operator">=</span> valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"yupiInt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>yupi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        yupi <span class="token operator">=</span> valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"yupiDouble"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span>yupi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"yupiUser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        valueOperations.set("yupiString","dog");</span><span class="token comment">//        redisTemplate.delete("yupiString");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis中可查询到缓存的数据 <img src="http://img-md-js.linjsblog.top/img/202301062118019.png" alt="image.png"></p><h2 id="二、根据用户开发个性推荐页"><a href="#二、根据用户开发个性推荐页" class="headerlink" title="二、根据用户开发个性推荐页"></a>二、根据用户开发个性推荐页</h2><h3 id="1-修改推荐页面的接口，整理如下："><a href="#1-修改推荐页面的接口，整理如下：" class="headerlink" title="1.修改推荐页面的接口，整理如下："></a>1.修改推荐页面的接口，整理如下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 推荐页面    * @param request    * @return    */</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/recommend"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">recommendUsers</span><span class="token punctuation">(</span><span class="token keyword">long</span> pageSize<span class="token punctuation">,</span><span class="token keyword">long</span> pageNum<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"yupao:user:recommend:%s"</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//如果有缓存，直接读缓存</span>       <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userPage<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>valueOperations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>userPage<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>userPage<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//无缓存，查数据库</span>       <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       userPage <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//写缓存</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span>userPage<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis set key error"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>userPage<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新页面，有了缓存之后查询速度变快，只有20多毫秒</p><p>使用缓存前：</p><p><img src="http://img-md-js.linjsblog.top/img/202301031123322.png" alt="image-20230103112332265"></p><p>使用缓存后</p><p><img src="http://img-md-js.linjsblog.top/img/202301031122370.png" alt="image-20230103112245317"></p><h3 id="2-定时任务"><a href="#2-定时任务" class="headerlink" title="2.定时任务"></a>2.定时任务</h3><p>但是还存在一个问题：第一个用户访问还是很慢，要实现缓存预热这里我们使用了定时的方法 新建一个job包，写入下面代码实现定时预热缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreCacheJob</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">//重点用户</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> mainUserList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//每天执行，预热推荐用户</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 24 18 * * *"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doCacheRecommendUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token operator">:</span> mainUserList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userPage <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"yupao:user:recommend:%s"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//写缓存</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                valueOperations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span>userPage<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis set key error"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:要在UserCenterApplication添加@EnableScheduling注解，允许定时任务 <img src="http://img-md-js.linjsblog.top/img/202301062118082.png" alt="image.png"> 删去redis里的缓存，设定一个时间，启动项目（前后端），等待时间到来，发现redis里面已经有了缓存 <img src="http://img-md-js.linjsblog.top/img/202301062118345.png" alt="image.png"> 刷新页面依旧很快！只有20毫秒</p><h2 id="over-！！！！！！！！！！！！！！！！！"><a href="#over-！！！！！！！！！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！！！！！！！！！"></a>over ！！！！！！！！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（六）</title>
      <link href="/2023/01/05/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2023/01/05/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="1-开发主页（默认推荐和自己兴趣相当的用户）"><a href="#1-开发主页（默认推荐和自己兴趣相当的用户）" class="headerlink" title="1.开发主页（默认推荐和自己兴趣相当的用户）"></a>1.开发主页（默认推荐和自己兴趣相当的用户）</h3><h3 id="2-优化主页的性能（缓存-定时任务-分布式锁）"><a href="#2-优化主页的性能（缓存-定时任务-分布式锁）" class="headerlink" title="2.优化主页的性能（缓存 + 定时任务 + 分布式锁）"></a>2.优化主页的性能（缓存 + 定时任务 + 分布式锁）</h3><h3 id="开发主页"><a href="#开发主页" class="headerlink" title="开发主页"></a>开发主页</h3><p>最简单：直接 list 列表 模拟 1000 万个用户，再去查询</p><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><ol><li>用可视化界面：适合一次性导入、数据量可控</li><li>写程序：for 循环，建议分批，不要一把梭哈（可以用接口来控制）<strong>要保证可控、幂等，注意线上环境和测试环境是有区别的</strong>导入 1000 万条，for i 1000w</li><li>执行 SQL 语句：适用于小数据量</li></ol><h4 id="编写一次性任务"><a href="#编写一次性任务" class="headerlink" title="编写一次性任务"></a>编写一次性任务</h4><p>for 循环插入数据的问题：</p><ol><li>建立和释放数据库链接（批量查询解决）</li><li>for 循环是绝对线性的（并发）</li></ol><p>并发要注意执行的先后顺序无所谓，不要用到非并发类的集合    private ExecutorService executorService &#x3D; new ThreadPoolExecutor(16, 1000, 10000, TimeUnit.MINUTES, new ArrayBlockingQueue&lt;&gt;(10000));</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; CPU 密集型：分配的核心线程数 &#x3D; CPU - 1&#x2F;&#x2F; IO 密集型：分配的核心线程数可以大于 CPU 核数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数据库慢？预先把数据查出来，放到一个更快读取的地方，不用再查数据库了。（缓存） 预加载缓存，定时更新缓存。（定时任务） 多个机器都要执行任务么？（分布式锁：控制同一时间只有一台机器去执行定时任务，其他机器不用重复执行了）</p><h2 id="一、开发页面"><a href="#一、开发页面" class="headerlink" title="一、开发页面"></a>一、开发页面</h2><h3 id="1-启动前后端项目"><a href="#1-启动前后端项目" class="headerlink" title="1.启动前后端项目"></a>1.启动前后端项目</h3><p>进入搜索页面选择数据库里存在的标签搜索，发现搜索为空，这是因为我们取了两次响应的data，自然搜不到，修改如下代码： <img src="http://img-md-js.linjsblog.top/img/202301051617392.png" alt="image.png"> 刷新页面，成功展现数据库里被筛选的数据</p><h3 id="2-编写主页（直接list列表）"><a href="#2-编写主页（直接list列表）" class="headerlink" title="2.编写主页（直接list列表）"></a>2.编写主页（直接list列表）</h3><p>在后端controller层编写接口去实现显示推荐页面的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 推荐页面 * @param request * @return */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/recommend"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">recommendUsers</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-></span> userService<span class="token punctuation">.</span><span class="token function">getSafetyUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新页面显示 <img src="http://img-md-js.linjsblog.top/img/202301051617375.png" alt="image.png"> 但是页面显示还有一定问题，下面有一块不显示，在前端修改样式 basicLayout.vue里面添加以下样式 <img src="http://img-md-js.linjsblog.top/img/202301051617223.png" alt="image.png"> 我们发现有几个页面都用到了列表组件，所以我们提取出公共组件，来减少代码的编写 在公共组件包里添加UserCardList，并复制主页里面的模板修改为如下</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;van-card      v-for&#x3D;&quot;user in userList&quot;      :desc&#x3D;&quot;user.profile&quot;      :title&#x3D;&quot;&#96;$&#123;user.username&#125; ($&#123;user.planetCode&#125;)&#96;&quot;      :thumb&#x3D;&quot;user.avatarUrl&quot;  &gt;    &lt;template #tags&gt;      &lt;van-tag plain type&#x3D;&quot;danger&quot; v-for&#x3D;&quot;tag in user.tags&quot; style&#x3D;&quot;margin-right: 8px; margin-top: 8px&quot; &gt;        &#123;&#123; tag &#125;&#125;      &lt;&#x2F;van-tag&gt;    &lt;&#x2F;template&gt;    &lt;template #footer&gt;      &lt;van-button size&#x3D;&quot;mini&quot;&gt;联系我&lt;&#x2F;van-button&gt;    &lt;&#x2F;template&gt;  &lt;&#x2F;van-card&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;UserType&#125; from &quot;..&#x2F;models&#x2F;user&quot;;interface UserCardListProps&#123;  userList: UserType[];&#125;const props&#x3D; withDefaults(defineProps&lt;UserCardListProps&gt;(),&#123;  &#x2F;&#x2F;@ts-ignore  userList: [] as UserType[]&#125;);&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下，主页和用户结果页面应该显示正常</p><h3 id="3-模拟1000万用户，再次进行查询"><a href="#3-模拟1000万用户，再次进行查询" class="headerlink" title="3.模拟1000万用户，再次进行查询"></a>3.模拟1000万用户，再次进行查询</h3><p>我们需要插入数据： 1.用可视化界面：适合一次性导入、数据量可控 由于编码，主键以及某些字段的问题（id，createtime等），演示插入失败，这里不推荐 2.写程序：for 循环，建议分批，不要一把梭哈,这里演示了两种插入数据的方法 首先创建测试方法文件InsertUsersTest，编写批量查询解决</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>model<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StopWatch</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertUsersTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token comment">//private ExecutorService executorService = new ThreadPoolExecutor(40,1000,10000, TimeUnit.MINUTES,new ArrayBlockingQueue&lt;>(10000));</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doInsertUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INSERT_NUM</span><span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">INSERT_NUM</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"假数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUserAccount</span><span class="token punctuation">(</span><span class="token string">"fakeaccount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setAvatarUrl</span><span class="token punctuation">(</span><span class="token string">"https://img1.baidu.com/it/u=1645832847,2375824523&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=480&amp;h=480"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUserPassword</span><span class="token punctuation">(</span><span class="token string">"231313123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"1231312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"12331234@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUserStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setUserRole</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setPlanetCode</span><span class="token punctuation">(</span><span class="token string">"213123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并发执行，这里的线程可自定义或者用idea默认的，两种方法的区别是，自定义可以跑满线程，而默认的只能跑CPU核数-1，代码区别：就是在异步执行处加上自定义的线程名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doConcurrencyInsertUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StopWatch</span> stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//分10组</span>        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futureList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"假数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserAccount</span><span class="token punctuation">(</span><span class="token string">"fakeaccount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setAvatarUrl</span><span class="token punctuation">(</span><span class="token string">"https://img1.baidu.com/it/u=1645832847,2375824523&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=480&amp;h=480"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserPassword</span><span class="token punctuation">(</span><span class="token string">"231313123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"1231312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"12331234@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setUserRole</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setPlanetCode</span><span class="token punctuation">(</span><span class="token string">"213123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span><span class="token string">"[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> batchSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//异步执行</span>            <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadName:"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>userList<span class="token punctuation">,</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>            futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>futureList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopWatch<span class="token punctuation">.</span><span class="token function">getTotalTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若使用默认线程池，删去 <img src="http://img-md-js.linjsblog.top/img/202301051617097.png" alt="image.png"> 现在启动前后端，查看主页，发现搜查不出，这是因为数据太多需要分页，修改后端接口方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 推荐页面 * @param request * @return */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/recommend"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">recommendUsers</span><span class="token punctuation">(</span><span class="token keyword">long</span> pageSize<span class="token punctuation">,</span><span class="token keyword">long</span> pageNum<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时还要引入mybatis的分页插件配置，直接复制文档到config目录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.yupi.usercenter.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">H2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要不要忘了把扫包的路径改为自己的 现在去修改前端主页 <img src="http://img-md-js.linjsblog.top/img/202301051620156.png" alt="image.png"> 刷新页面，成功展现8条数据 <img src="http://img-md-js.linjsblog.top/img/202301051620752.png" alt="image.png"></p><h2 id="over-！！！！！！！！！！！！！"><a href="#over-！！！！！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！！！！！"></a>over ！！！！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（五）</title>
      <link href="/2023/01/05/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2023/01/05/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ol><li>用户修改页面前端、后端开发和联调</li></ol><h2 id="一、后端修改用户信息接口"><a href="#一、后端修改用户信息接口" class="headerlink" title="一、后端修改用户信息接口"></a>一、后端修改用户信息接口</h2><p>首先运行前后端，看看是否正常</p><h3 id="1-在UserController里面添加更新用户信息接口"><a href="#1-在UserController里面添加更新用户信息接口" class="headerlink" title="1.在UserController里面添加更新用户信息接口"></a>1.在UserController里面添加更新用户信息接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 更新用户信息 * @param user * @param request * @return */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 校验参数是否为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">User</span> loginUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getCurrentUser</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于项目中多次用户鉴权，所以我们在service层编写isAdmin方法（包括复写） UserService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 是否为管理员 * @param request * @return */</span><span class="token keyword">boolean</span> <span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 是否为管理员 * @param loginUser * @return */</span><span class="token keyword">boolean</span> <span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token class-name">User</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 获取当前用户 * @param request * @return */</span><span class="token class-name">User</span> <span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 更新用户信息 * @param user * @param loginUser * @return */</span><span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在UserServiceImpl里面实现上述方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 更新用户信息     * @param user     * @param loginUser     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2. 校验权限</span>        <span class="token comment">// 2.1 管理员可以更新任意信息</span>        <span class="token comment">// 2.2 用户只能更新自己的信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAdmin</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> userId <span class="token operator">!=</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NO_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">User</span> oldUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NULL_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3. 触发更新</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**     * 是否为管理员     * @param request     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">UserConstant</span><span class="token punctuation">.</span><span class="token constant">USER_LOGIN_STATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span>  user<span class="token punctuation">.</span><span class="token function">getUserRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">UserConstant</span><span class="token punctuation">.</span><span class="token constant">ADMIN_ROLE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 是否为管理员     * @param loginUser     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAdmin</span><span class="token punctuation">(</span><span class="token class-name">User</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> loginUser<span class="token punctuation">.</span><span class="token function">getUserRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">ADMIN_ROLE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取当前用户     * @param request     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token constant">USER_LOGIN_STATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">NOT_LOGIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、前端页面开发"><a href="#二、前端页面开发" class="headerlink" title="二、前端页面开发"></a>二、前端页面开发</h2><h3 id="1-现在pages包里新建一个登录页面UserLoginPage-vue"><a href="#1-现在pages包里新建一个登录页面UserLoginPage-vue" class="headerlink" title="1.现在pages包里新建一个登录页面UserLoginPage.vue"></a>1.现在pages包里新建一个登录页面UserLoginPage.vue</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;van-form @submit&#x3D;&quot;onSubmit&quot;&gt;    &lt;van-cell-group inset&gt;      &lt;van-field          v-model&#x3D;&quot;userAccount&quot;          name&#x3D;&quot;userAccount&quot;          label&#x3D;&quot;账号&quot;          placeholder&#x3D;&quot;请输入账号&quot;          :rules&#x3D;&quot;[&#123; required: true, message: &#39;请填写用户名&#39; &#125;]&quot;      &#x2F;&gt;      &lt;van-field          v-model&#x3D;&quot;userPassword&quot;          type&#x3D;&quot;password&quot;          name&#x3D;&quot;userPassword&quot;          label&#x3D;&quot;密码&quot;          placeholder&#x3D;&quot;请输入密码&quot;          :rules&#x3D;&quot;[&#123; required: true, message: &#39;请填写密码&#39; &#125;]&quot;      &#x2F;&gt;    &lt;&#x2F;van-cell-group&gt;    &lt;div style&#x3D;&quot;margin: 16px;&quot;&gt;      &lt;van-button round block type&#x3D;&quot;primary&quot; native-type&#x3D;&quot;submit&quot;&gt;        提交      &lt;&#x2F;van-button&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;van-form&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios.ts&quot;;import &#123;Toast&#125; from &quot;vant&quot;;import &#123;ref&#125; from &quot;vue&quot;;import &#123;useRouter&#125; from &quot;vue-router&quot;;const router &#x3D; useRouter();const userAccount &#x3D; ref();const userPassword &#x3D; ref();const onSubmit &#x3D; async () &#x3D;&gt; &#123;  &#x2F;&#x2F; console.log(&quot;用户登录&quot;);  const res &#x3D; await myAxios.post(&quot;&#x2F;user&#x2F;login&quot;, &#123;    userAccount: userAccount.value,    userPassword: userPassword.value  &#125;);  if (res.code &#x3D;&#x3D; 0 &amp;&amp; res.data !&#x3D; null) &#123;    Toast.success(&quot;登录成功&quot;);    router.replace(&quot;&#x2F;&quot;)  &#125; else &#123;    Toast.fail(&quot;登录失败&quot;);  &#125;&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别忘了在路由里面引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> UserLoginPage <span class="token keyword">from</span> <span class="token string">"../pages/UserLoginPage.vue"</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/login'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserLoginPage <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里需要我们在axios.ts里把响应改成data，如下图： <img src="http://img-md-js.linjsblog.top/img/202301051605857.png" alt="image.png"> 运行 ，输入数据，成功登录并跳转的主页，显示如下： <img src="http://img-md-js.linjsblog.top/img/202301051605877.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301051605177.png" alt="image.png"></p><h3 id="2-登录成功，现在就要去编写用户信息了（动态显示数据库里面的信息），原来是写死的"><a href="#2-登录成功，现在就要去编写用户信息了（动态显示数据库里面的信息），原来是写死的" class="headerlink" title="2.登录成功，现在就要去编写用户信息了（动态显示数据库里面的信息），原来是写死的"></a>2.登录成功，现在就要去编写用户信息了（动态显示数据库里面的信息），原来是写死的</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/current'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    user<span class="token punctuation">.</span>value <span class="token operator">=</span>res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    Toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'获取用户信息成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'获取用户信息成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是登录不会种下cookie，意味着后端不能获取登录用户信息，就不能动态展示用户信息页 <img src="http://img-md-js.linjsblog.top/img/202301051606065.png" alt="image.png"> 在myAxios.ts中添加以下代码：（注意要在定义的变量，即myAxios之后粘贴)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">myAxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 允许携带 cookie</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在后端接口添加允许携带 cookie 的配置 <img src="http://img-md-js.linjsblog.top/img/202301051606029.png" alt="image.png"> 同时后端设置 cookie 的作用域 <img src="http://img-md-js.linjsblog.top/img/202301051606386.png" alt="image.png"> 登录，再次点击个人，发现cookie已经带有了，只是页面还没有显示 <img src="http://img-md-js.linjsblog.top/img/202301051606293.png" alt="image.png"> 查看操作台报错，发现是createTime的字符转变导致的，直接删去，后面再处理 <img src="http://img-md-js.linjsblog.top/img/202301051607757.png" alt="image.png"> 再次刷新，页面成功的显示 <img src="http://img-md-js.linjsblog.top/img/202301051607628.png" alt="image.png"></p><h3 id="3-完善修改用户信息"><a href="#3-完善修改用户信息" class="headerlink" title="3.完善修改用户信息"></a>3.完善修改用户信息</h3><p>发现每个页面都要获取当前的用户信息，所以我们把这个方法提取出来 在src目录下建立services包，并创建user.ts编写代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> myAxios <span class="token keyword">from</span> <span class="token string">"../plugins/myAxios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getCurrentUserState<span class="token punctuation">,</span> setCurrentUserState<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../states/user"</span><span class="token punctuation">;</span><span class="token comment">/** * 获取用户信息 * @returns &#123;Promise&lt;nullany>&#125; */</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getCurrentUser</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">getCurrentUserState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从远程处获取用户信息</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> myAxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/current"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// setCurrentUserState(res.data);</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在src目录下建立states包，并创建user.ts编写代码（定义两个方法）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>UserType<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../models/user"</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token literal-property property">currentUser</span><span class="token operator">:</span> UserType<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">setCurrentUserState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">user</span><span class="token operator">:</span>UserType</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    currentUser <span class="token operator">=</span>user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> getCurrentUserState <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">UserType</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> currentUser<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>    setCurrentUserState<span class="token punctuation">,</span>    getCurrentUserState<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于提取了获取用户信息的代码，所以用户页原来编写的代码需要修改为下图 <img src="http://img-md-js.linjsblog.top/img/202301051607614.png" alt="image.png"> 最后就是要编写用户修改页面了，发送修改用户信息请求。 完整代码如下</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;van-form @submit&#x3D;&quot;onSubmit&quot;&gt;      &lt;van-field          v-model&#x3D;&quot;editUser.currentValue&quot;          :name&#x3D;&quot;editUser.editKey&quot;          :label&#x3D;&quot;editUser.editName&quot;          :placeholder&#x3D;&quot;&#39;请输入$&#123;editUser.editName&#125;&#39;&quot;      &#x2F;&gt;    &lt;div style&#x3D;&quot;margin: 16px;&quot;&gt;      &lt;van-button round block type&#x3D;&quot;primary&quot; native-type&#x3D;&quot;submit&quot;&gt;        提交      &lt;&#x2F;van-button&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;van-form&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;useRoute, useRouter&#125; from &quot;vue-router&quot;;import &#123;ref&#125; from &quot;vue&quot;;import myAxios from &quot;..&#x2F;plugins&#x2F;myAxios&quot;;import &#123;Toast&#125; from &quot;vant&quot;;import &#123;getCurrentUser&#125; from &quot;..&#x2F;services&#x2F;user&quot;;const route &#x3D; useRoute();const router &#x3D;useRouter();const editUser &#x3D; ref(&#123;  editKey: route.query.editKey,  currentValue: route.query.currentValue,  editName: route.query.editName,&#125;)&#x2F;&#x2F; 不可以写在外面，否则页面不显示内容，还没有报错信息，原因未知&#x2F;&#x2F; const currentUser &#x3D; await getCurrentUser();const onSubmit &#x3D; async () &#x3D;&gt; &#123;  &#x2F;&#x2F; 异步方法必须添加 await 才可以拿到数据, 否则拿到的是 promise 对象  const currentUser &#x3D; await getCurrentUser();  console.log(&quot;-------UserEditPage&quot;, currentUser);  const res &#x3D; await myAxios.post(&quot;&#x2F;user&#x2F;update&quot;, &#123;    &quot;id&quot;: currentUser.id,    [editUser.value.editKey]: editUser.value.currentValue &#x2F;&#x2F; 动态取值  &#125;)  console.log(&quot;修改用户信息&quot;, res);  if (res.code &#x3D;&#x3D; 0 &amp;&amp; res.data &gt; 0) &#123;    Toast.success(&quot;修改成功&quot;);    router.replace(&quot;&#x2F;user&quot;);  &#125; else &#123;    Toast.fail(&quot;修改失败&quot;);  &#125;&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试如下：其中会有报错，好像大多是由于ts造成的，但是都不会影响代码的运行实现"><a href="#4-测试如下：其中会有报错，好像大多是由于ts造成的，但是都不会影响代码的运行实现" class="headerlink" title="4.测试如下：其中会有报错，好像大多是由于ts造成的，但是都不会影响代码的运行实现"></a>4.测试如下：其中会有报错，好像大多是由于ts造成的，但是都不会影响代码的运行实现</h3><p><img src="http://img-md-js.linjsblog.top/img/202301051608289.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301051610020.png" alt="image.png"> <strong>注意踩坑处：</strong> 1.语法糖是支持写在外面的，但是这里面运用就不显示页面 <img src="http://img-md-js.linjsblog.top/img/202301051608028.png" alt="image.png"></p><h3 id="5-关于调用缓存去获取当前用户信息的问题"><a href="#5-关于调用缓存去获取当前用户信息的问题" class="headerlink" title="5.关于调用缓存去获取当前用户信息的问题"></a>5.关于调用缓存去获取当前用户信息的问题</h3><p><img src="http://img-md-js.linjsblog.top/img/202301051609255.png" alt="image.png"> 这边就很玄学，鱼皮使用了缓存，结果获取不到最新的用户信息，而我这边可以。。。 <strong>建议：在小系统（用户少）中尽量不要使用缓存，可以使用路由守卫，从远程获取</strong> <strong>踩坑处</strong>：如果前端在用户页的信息中并未设定editKey的话，就无法修改信息（更新内容为空），这需要我们在后端去控制、筛选前端所传入的参数 后端会有类似以下报错 <img src="http://img-md-js.linjsblog.top/img/202301051609668.png" alt="image.png"></p><h2 id="over-！！！！！！！！！"><a href="#over-！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！"></a>over ！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伙伴匹配系统（四）</title>
      <link href="/2023/01/03/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/01/03/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h2><h3 id="1-本期目标计划"><a href="#1-本期目标计划" class="headerlink" title="1.本期目标计划"></a>1.本期目标计划</h3><ol><li>页面和功能开发<ol><li>搜索页面</li><li>用户信息</li><li>用户修改页面</li></ol></li><li>改造用户中心，把单机登录改为分布式 session 登录</li><li>标签的整理、细节的优化</li></ol><h3 id="2-前端页面跳转传值"><a href="#2-前端页面跳转传值" class="headerlink" title="2.前端页面跳转传值"></a>2.前端页面跳转传值</h3><ol><li>query &#x3D;&gt; url searchParams，url 后附加参数，传递的值长度有限</li><li>vuex（全局状态管理），搜索页将关键词塞到状态中，搜索结果页从状态取值</li></ol><h3 id="3-Session-共享"><a href="#3-Session-共享" class="headerlink" title="3.Session 共享"></a>3.Session 共享</h3><p>种 session 的时候注意范围，cookie.domain 比如两个域名： aaa.yupi.com bbb.yupi.com 如果要共享 cookie，可以种一个更高层的公共域名，比如 yupi.com</p><h3 id="4-为什么服务器-A-登录后，请求发到服务器-B，不认识该用户？"><a href="#4-为什么服务器-A-登录后，请求发到服务器-B，不认识该用户？" class="headerlink" title="4.为什么服务器 A 登录后，请求发到服务器 B，不认识该用户？"></a>4.为什么服务器 A 登录后，请求发到服务器 B，不认识该用户？</h3><p>用户在 A 登录，所以 session（用户登录信息）存在了 A 上 结果请求 B 时，B 没有用户信息，所以不认识。 <img src="http://img-md-js.linjsblog.top/img/202301032141818.png" alt="image.png"> 解决方案：<strong>共享存储</strong> ，而不是把数据放到单台服务器的内存中 <img src="http://img-md-js.linjsblog.top/img/202301032141373.png" alt="image.png"> 如何共享存储？</p><ol><li>Redis（基于内存的 K &#x2F; V 数据库）此处选择 Redis，因为用户信息读取 &#x2F; 是否登录的判断极其<strong>频繁</strong> ，Redis 基于内存，读写性能很高，简单的数据单机 qps 5w - 10w</li><li>MySQL</li><li>文件服务器 ceph</li></ol><p>Session 共享实现</p><h3 id="5-安装-Redis"><a href="#5-安装-Redis" class="headerlink" title="5. 安装 Redis"></a>5. 安装 Redis</h3><p>官网：<a href="https://redis.io/">https://redis.io/</a> windows 下载： Redis 5.0.14 下载： 链接：<a href="https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg">https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg</a> 提取码：vkoi redis 管理工具 quick redis：<a href="https://quick123.net/">https://quick123.net/</a></p><ol><li>引入 redis，能够操作 redis：</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>引入 spring-session 和 redis 的整合，使得自动将 session 存储到 redis 中：</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>修改 spring-session 存储配置 spring.session.store-type默认是 none，表示存储在单台服务器store-type: redis，表示从 redis 读写 session</li></ol><p>JWT 的优缺点：<a href="https://zhuanlan.zhihu.com/p/108999941">https://zhuanlan.zhihu.com/p/108999941</a></p><h3 id="6-todo-待优化"><a href="#6-todo-待优化" class="headerlink" title="6.todo 待优化"></a>6.todo 待优化</h3><p>前端：动态展示页面标题、微调格式</p><h2 id="一、页面和功能开发"><a href="#一、页面和功能开发" class="headerlink" title="一、页面和功能开发"></a>一、页面和功能开发</h2><h3 id="1-搜索页面"><a href="#1-搜索页面" class="headerlink" title="1.搜索页面"></a>1.搜索页面</h3><h4 id="（1）-新建UserResultPage-vue，创建页面，同时别忘了在路由里引入这个页面"><a href="#（1）-新建UserResultPage-vue，创建页面，同时别忘了在路由里引入这个页面" class="headerlink" title="（1）.新建UserResultPage.vue，创建页面，同时别忘了在路由里引入这个页面"></a>（1）.新建UserResultPage.vue，创建页面，同时别忘了在路由里引入这个页面</h4><h4 id="（2）-优化SearchPage页面，添加一个搜索按钮，来实现点击提交选中的标签到UserResultPage页面"><a href="#（2）-优化SearchPage页面，添加一个搜索按钮，来实现点击提交选中的标签到UserResultPage页面" class="headerlink" title="（2）.优化SearchPage页面，添加一个搜索按钮，来实现点击提交选中的标签到UserResultPage页面"></a>（2）.优化SearchPage页面，添加一个搜索按钮，来实现点击提交选中的标签到UserResultPage页面</h4><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">  &lt;div style&#x3D;&quot;padding: 16px&quot;&gt;    &lt;van-button block type&#x3D;&quot;primary&quot; @click&#x3D;&quot;doSearchResult&quot;&gt;搜索&lt;&#x2F;van-button&gt;  &lt;&#x2F;div&gt;import &#123;useRouter&#125; from &#39;vue-router&#39;;const router &#x3D; useRouter();const doSearchResult &#x3D; () &#x3D;&gt; &#123;  router.push(&#123;    path: &#39;&#x2F;user&#x2F;list&#39;,    query: &#123;      tags: activeIds.value    &#125;  &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：千万别忘了引入useRouter和定义router常量，我这边没引入但是不报错（比较迷惑人） 显示如下： <img src="http://img-md-js.linjsblog.top/img/202301032141965.png" alt="image.png"> 点击搜索按钮，可观察到路径跳转会带有参数 <img src="http://img-md-js.linjsblog.top/img/202301032141333.png" alt="image.png"></p><h4 id="（3）-完善UserResultPage页面，来显示用户的信息，依旧从vant的组件库寻找合适的组件"><a href="#（3）-完善UserResultPage页面，来显示用户的信息，依旧从vant的组件库寻找合适的组件" class="headerlink" title="（3）.完善UserResultPage页面，来显示用户的信息，依旧从vant的组件库寻找合适的组件"></a>（3）.完善UserResultPage页面，来显示用户的信息，依旧从vant的组件库寻找合适的组件</h4><p>因为用户信息中要包括个人简介，而我们用户中心的数据中并未包含这一字段，现在去添加 具体操作就不演示了，修改表之后DDL语句改变如下 <img src="http://img-md-js.linjsblog.top/img/202301032141059.png" alt="image.png"> 修改数据库之后还并未对后端对应数据库的内容做相应的增加。偷个懒，等下次修改后端时再修改 进入前端的用户对象的规范，也添加这一字段 <img src="http://img-md-js.linjsblog.top/img/202301032141142.png" alt="image.png"> 现在正式进入修改页面环节，在vant文档中复制商品卡片组件 <img src="http://img-md-js.linjsblog.top/img/202301032141450.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301032141101.png" alt="image.png"> 复制到UserResultPage页面并修改如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-card</span>      <span class="token attr-name">:desc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mockUser.profile<span class="token punctuation">"</span></span>      <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`$&#123;mockUser.userName&#125; ($&#123;mockUser.planetCode&#125;)`<span class="token punctuation">"</span></span>      <span class="token attr-name">:thumb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mockUser.avatar<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#tags</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tag</span> <span class="token attr-name">plain</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag in user.tags<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-right</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span> 8px</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">></span></span>        &#123;&#123;tag&#125;&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-tag</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#footer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-card</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useRoute<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>tags<span class="token punctuation">&#125;</span> <span class="token operator">=</span> route<span class="token punctuation">.</span>query<span class="token punctuation">;</span><span class="token keyword">const</span> mockUser <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">'tianber'</span><span class="token punctuation">,</span>  <span class="token literal-property property">userAccount</span><span class="token operator">:</span> <span class="token string">'tianber'</span><span class="token punctuation">,</span>  <span class="token literal-property property">profile</span><span class="token operator">:</span> <span class="token string">'tianber的个人简介，全栈工程师，加油加油加油！！！！！'</span><span class="token punctuation">,</span>  <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>  <span class="token literal-property property">phone</span><span class="token operator">:</span> <span class="token string">'234234'</span><span class="token punctuation">,</span>  <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'324242342@qq.com'</span><span class="token punctuation">,</span>  <span class="token literal-property property">planetCode</span><span class="token operator">:</span> <span class="token string">'981'</span><span class="token punctuation">,</span>  <span class="token literal-property property">avatar</span><span class="token operator">:</span> <span class="token string">'https://img1.baidu.com/it/u=1645832847,2375824523&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=480&amp;h=480'</span><span class="token punctuation">,</span>  <span class="token literal-property property">createTime</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动，在search路径下选择标签点击搜索，成功跳转到UserResultPage页面，显示如下： <img src="http://img-md-js.linjsblog.top/img/202301032140510.png" alt="image.png"></p><h4 id="4-前端页面已开发完成，现在开发后端，和前端进行对接"><a href="#4-前端页面已开发完成，现在开发后端，和前端进行对接" class="headerlink" title="(4).前端页面已开发完成，现在开发后端，和前端进行对接"></a>(4).前端页面已开发完成，现在开发后端，和前端进行对接</h4><p>对接后端接口，在controller层编写代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//根据标签查询用户</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/search/tags"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">searchUsersByTags</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagNameList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">searchUsersByTags</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>debug启动项目，去knife4j接口操作，确保已经登录，传两个参数，回后端看看是否获取参数 <img src="http://img-md-js.linjsblog.top/img/202301032140378.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301032140925.png" alt="image.png"> 带空参数请求 <img src="http://img-md-js.linjsblog.top/img/202301032140723.png" alt="image.png"> 是我们自己写的报错（请求参数错误)成功！现在回前端对接后端</p><h4 id="5-开发前端接口"><a href="#5-开发前端接口" class="headerlink" title="(5).开发前端接口"></a>(5).开发前端接口</h4><p>首先要在前端引入axios 终端输入</p><pre class="line-numbers language-none"><code class="language-none">yarn add axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在src目录下新建plugins包和myAxios.ts，复制axios文档中如下代码，并修改整理如下： <img src="http://img-md-js.linjsblog.top/img/202301032140069.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301032140035.png" alt="image.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment">// Set config defaults when creating the instance</span><span class="token keyword">const</span> myAxios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'http://localhost:8080/api'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加请求拦截器</span>myAxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我要发送请求了,"</span><span class="token punctuation">,</span>config<span class="token punctuation">)</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对请求错误做些什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加响应拦截器</span>myAxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对响应数据做点什么</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我收到你的响应了,"</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对响应错误做点什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> myAxios<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在userSearchPage页面新增如下代码用来页面挂载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Make a request for a user with a given ID</span>    myAxios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/search/tags'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">tagNameList</span><span class="token operator">:</span> tags        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/user/search/tags succeed'</span><span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        Toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'/user/search/tags error'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        Toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202301032139009.png" alt="image.png"> 跨域了，我们在后端解决这个问题 <img src="http://img-md-js.linjsblog.top/img/202301032139891.png" alt="image.png"> <strong>踩坑处：这边一开始不要带有参数请求，不然会一直显示跨域（也不知道是什么原因造成的，希望有大佬解答）</strong> 再次运行（刷新） 发现路径后面带有的参数不合规范，带有[]。我们这边可以引入qs去用于参数序列化,处理发送请求的参数 <img src="http://img-md-js.linjsblog.top/img/202301032139793.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301032139664.png" alt="image.png"> **踩坑处：这边又踩了大坑，可能由于axios的版本问题，会报错：Uncaught (in promise) ** <strong>{message: ‘options must be an object’, name: ‘AxiosError’, code: ‘ERR_BAD_OPTION_VALUE’, stack: ‘AxiosError: options must be an object\n at Objec…ji.com&#x2F;static&#x2F;js&#x2F;chunk-libs.c096185b.js:42:41367)’}………….</strong> axios版本如果是比较新的，要按照上图所示写，再次刷新成功获取 <img src="http://img-md-js.linjsblog.top/img/202301032139331.png" alt="image.png"> debug启动，打个断点，再次刷新，可以在后端观察到成功获取前端的参数 <img src="http://img-md-js.linjsblog.top/img/202301032139835.png" alt="image.png"> 现在要将数据库对接上，不再使用假数据，首先往数据库里添加假数据（尽量详细) 修改onMounted，修改如下</p><pre class="line-numbers language-none"><code class="language-none">const userList &#x3D; ref([]);&#x2F;&#x2F;存放用户列表onMounted ( async ()&#x3D;&gt;&#123;     &#x2F;&#x2F;异步调用  const userListData &#x3D; await myAxios.get(&#39;&#x2F;user&#x2F;search&#x2F;tags&#39;,&#123;    params: &#123;      tagNameList: tags    &#125;,    paramsSerializer: &#123;      serialize: function(params)&#123;        &#x2F;&#x2F; return qs.stringify(params,&#123;arrayFormat:&#39;repeat&#39;&#125;)        return qs.stringify(params,&#123;indices: false&#125;)      &#125;    &#125;  &#125;)      .then(function (response)&#123;        console.log(&#39;&#x2F;user&#x2F;search&#x2F;tags succeed&#39;,response);        Toast.success(&#39;请求成功!&#39;);        return response.data?.data;  &#x2F;&#x2F;返回数据  ?.可选链操作符，避免数据为null或undefined时报错      &#125;)      .catch(function (error)&#123;        console.error(&#39;&#x2F;user&#x2F;search&#x2F;tags error&#39;,error);        Toast.fail(&#39;请求失败!&#39;);      &#125;)  &#x2F;&#x2F; console.log(userListData)  if(userListData)&#123;    userListData.forEach(user &#x3D;&gt; &#123;      if(user.tags)&#123;        user.tags &#x3D; JSON.parse(user.tags)      &#125;    &#125;)    userList.value &#x3D; userListData;  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202301032139754.png" alt="image.png"> forEach函数会显示没有这个函数，写成userListData?.data.forEach编译不会报错但运行会报错，所以不要管编译报错，照着鱼皮的写。 踩坑处：注意数据库里的逻辑删除是不是1（所以数据尽量多写点），我这边由于没仔细看，“男”标签就两个，一个是被逻辑删除了，结果只显示一个，还以为循环出错，查了好久。。。 显示如下： <img src="http://img-md-js.linjsblog.top/img/202301032139981.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301032139017.png" alt="image.png"></p><h2 id="二、改造用户中心，把单机登录改为分布式-session-登录"><a href="#二、改造用户中心，把单机登录改为分布式-session-登录" class="headerlink" title="二、改造用户中心，把单机登录改为分布式 session 登录"></a>二、改造用户中心，把单机登录改为分布式 session 登录</h2><h4 id="1-安装redis和管理工具quickredis"><a href="#1-安装redis和管理工具quickredis" class="headerlink" title="(1).安装redis和管理工具quickredis"></a>(1).安装redis和管理工具quickredis</h4><p>Redis 5.0.14 下载： 链接：<a href="https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg">https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg</a> 提取码：vkoi redis 管理工具 quick redis：<a href="https://quick123.net/">https://quick123.net/</a></p><h4 id="2-在springboot里引入redis，能够操作redis"><a href="#2-在springboot里引入redis，能够操作redis" class="headerlink" title="(2).在springboot里引入redis，能够操作redis"></a>(2).在springboot里引入redis，能够操作redis</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-data-redis --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.6.4&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-引入-spring-session-和-redis-的整合，使得自动将-session-存储到-redis-中："><a href="#3-引入-spring-session-和-redis-的整合，使得自动将-session-存储到-redis-中：" class="headerlink" title="(3).引入 spring-session 和 redis 的整合，使得自动将 session 存储到 redis 中："></a>(3).引入 spring-session 和 redis 的整合，使得自动将 session 存储到 redis 中：</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.session&#x2F;spring-session-data-redis --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.session&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-session-data-redis&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.6.3&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 spring-session 存储配置 <code>spring.session.store-type</code> 默认是 none，表示存储在单台服务器 store-type: redis，表示从 redis 读写 session ,配置如下： <img src="http://img-md-js.linjsblog.top/img/202301032139093.png" alt="image.png"></p><h4 id="4-测试session共享"><a href="#4-测试session共享" class="headerlink" title="(4).测试session共享"></a>(4).测试session共享</h4><p>为了模拟多服务器，我们需要打包项目，在另一个端口启动，这里是8081 先打包，后在<strong>target目录</strong>下打开终端运行下面的代码</p><pre class="line-numbers language-none"><code class="language-none">java -jar .\user-center-backend-0.0.1-SNAPSHOT.jar --server.port&#x3D;8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行，成功启动8080和8081端口的knife4j接口进行操作，先在8080端口登录并获取当前登录用户信息 <img src="http://img-md-js.linjsblog.top/img/202301032139981.png" alt="image.png"> 在8081端口查看当前登录用户信息，也能查询到 <img src="http://img-md-js.linjsblog.top/img/202301032139533.png" alt="image.png"> 使用QuickRedis查看session是否存入redis中 <img src="http://img-md-js.linjsblog.top/img/202301032139507.png" alt="image.png"></p><h2 id="over-！！！！！！！！！！！"><a href="#over-！！！！！！！！！！！" class="headerlink" title="over ！！！！！！！！！！！"></a>over ！！！！！！！！！！！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目开发笔记：伙伴匹配系统（三）</title>
      <link href="/2023/01/03/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/01/03/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h2><h3 id="本期目标计划："><a href="#本期目标计划：" class="headerlink" title="本期目标计划："></a>本期目标计划：</h3><ol><li>Java 后端整合 Swagger + Knife4j 接口文档</li><li>存量用户信息导入及同步（爬虫）</li><li>前后端联调：搜索页面、用户信息页、用户信息修改页</li><li>标签内容整理</li><li>部分细节优化</li></ol><h3 id="后端整合-Swagger-Knife4j-接口文档"><a href="#后端整合-Swagger-Knife4j-接口文档" class="headerlink" title="后端整合 Swagger + Knife4j 接口文档"></a>后端整合 Swagger + Knife4j 接口文档</h3><p>什么是接口文档？写接口信息的文档，每条接口包括：</p><ul><li>请求参数</li><li>响应参数<ul><li>错误码</li></ul></li><li>接口地址</li><li>接口名称</li><li>请求类型</li><li>请求格式</li><li>备注</li></ul><p><strong>who 谁用？一般是后端或者负责人来提供，后端和前端都要使用</strong></p><p><strong>为什么需要接口文档？</strong></p><ul><li>有个书面内容（背书或者归档），便于大家参考和查阅，便于 <strong>沉淀和维护</strong> ，拒绝口口相传</li><li>接口文档便于前端和后端开发对接，前后端联调的 <strong>介质</strong> 。后端 &#x3D;&gt; 接口文档 &lt;&#x3D; 前端</li><li>好的接口文档支持在线调试、在线测试，可以作为工具提高我们的开发测试效率</li></ul><p><strong>怎么做接口文档？</strong></p><ul><li>手写（比如腾讯文档、Markdown 笔记）</li><li>自动化接口文档生成：自动根据项目代码生成完整的文档或在线调试的网页。Swagger，Postman（侧重接口管理）（国外）；apifox、apipost、eolink（国产）</li></ul><p><strong>接口文档有哪些技巧？</strong></p><p>Swagger 原理：</p><ol><li>引入依赖（Swagger 或 Knife4j：<a href="https://doc.xiaominfo.com/knife4j/documentation/get_start.html">https://doc.xiaominfo.com/knife4j/documentation/get_start.html</a>）</li><li>自定义 Swagger 配置类</li><li>定义需要生成接口文档的代码位置（Controller）</li><li>千万注意：线上环境不要把接口暴露出去！！！可以通过在 SwaggerConfig 配置文件开头加上 <code>@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</code> 限定配置仅在部分环境开启</li><li>启动即可</li><li>可以通过在 controller 方法上添加 [@Api、@ApiImplicitParam(name ](&#x2F;Api、@ApiImplicitParam(name ) &#x3D; “name”,value &#x3D; “姓名”,required &#x3D; true)    [@ApiOperation(value ](&#x2F;ApiOperation(value ) &#x3D; “向客人问好”) 等注解来自定义生成的接口描述信息</li></ol><p>如果 springboot version &gt;&#x3D; 2.6，需要添加如下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ANT_PATH_MATCHER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>todo 怎么隐藏</p><h3 id="存量用户信息导入及同步"><a href="#存量用户信息导入及同步" class="headerlink" title="存量用户信息导入及同步"></a>存量用户信息导入及同步</h3><ol><li>把所有星球用户的信息导入</li><li>把写了自我介绍的同学的标签信息导入</li></ol><p>FeHelper 前端辅助插件，推荐安装</p><p><strong>看上了网页信息，怎么抓到？</strong></p><ol><li>分析原网站是怎么获取这些数据的？哪个接口？</li></ol><p>按 F 12 打开控制台，查看网络请求，复制 curl 代码便于查看和执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">"https://api.zsxq.com/v2/hashtags/48844541281228/topics?count=20"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"authority: api.zsxq.com"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"accept: application/json, text/plain, */*"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"accept-language: zh-CN,zh;q=0.9"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"cache-control: no-cache"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"origin: https://wx.zsxq.com"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"pragma: no-cache"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"referer: https://wx.zsxq.com/"</span> ^  <span class="token parameter variable">--compressed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>用程序去调用接口</strong> （java okhttp httpclient &#x2F; python 都可以）</li><li>处理（清洗）一下数据，之后就可以写到数据库里</li></ol><p><strong>流程</strong></p><ol><li>从 excel 中导入全量用户数据，<strong>判重</strong> 。 easy excel：<a href="https://alibaba-easyexcel.github.io/index.html">https://alibaba-easyexcel.github.io/index.html</a></li><li>抓取写了自我介绍的同学信息，提取出用户昵称、用户唯一 id、自我介绍信息</li><li>从自我介绍中提取信息，然后写入到数据库中</li></ol><p><strong>EasyExcel</strong></p><p>两种读对象的方式：</p><ol><li>确定表头：建立对象，和表头形成映射关系</li><li>不确定表头：每一行数据映射为 Map&lt;String, Object&gt;</li></ol><p>两种读取模式：</p><ol><li>监听器：先创建监听器、在读取文件时绑定监听器。单独抽离处理逻辑，代码清晰易于维护；一条一条处理，适用于数据量大的场景。</li><li>同步读：无需创建监听器，一次性获取完整数据。方便简单，但是数据量大时会有等待时常，也可能内存溢出。</li></ol><h2 id="后端整合-Swagger-Knife4j"><a href="#后端整合-Swagger-Knife4j" class="headerlink" title="后端整合 Swagger + Knife4j"></a>后端整合 Swagger + Knife4j</h2><h3 id="第一步：在用户中心系统的pom-xml中引入Knife4j的依赖包，Maven坐标如下："><a href="#第一步：在用户中心系统的pom-xml中引入Knife4j的依赖包，Maven坐标如下：" class="headerlink" title="第一步：在用户中心系统的pom.xml中引入Knife4j的依赖包，Maven坐标如下："></a>第一步：在用户中心系统的pom.xml中引入<a href="https://search.maven.org/search?q=a:knife4j">Knife4j的依赖包</a>，Maven坐标如下：</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入Knife4j的官方start包,Swagger2基于Springfox2.10.5项目--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用Swagger2--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二步：在config目录（没有就新建）下创建Swagger配置依赖，代码如下："><a href="#第二步：在config目录（没有就新建）下创建Swagger配置依赖，代码如下：" class="headerlink" title="第二步：在config目录（没有就新建）下创建Swagger配置依赖，代码如下："></a>第二步：在config目录（没有就新建）下创建Swagger配置依赖，代码如下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2WebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knife4jConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"dockerBean"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">dockerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//指定使用Swagger2规范</span>        <span class="token class-name">Docket</span> docket<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//描述字段支持Markdown语法</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"# Knife4j RESTful APIs"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"https://doc.xiaominfo.com/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token string">"xiaoymin@foxmail.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//分组名称</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"用户服务"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//这里指定Controller扫描包路径</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.github.xiaoymin.knife4j.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里鱼皮一开始使用的swagger的文档，但是由于踩坑换成了knife4j的依赖，所以创建的swagger配置格式会不大一样，我这里是按照鱼皮一开始swagger文档格式写的，整理代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2WebMvc</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2WebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"defaultApi2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">defaultApi2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//这里一定要标注你控制器的位置</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.yupi.usercenter.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * api 信息     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"鱼皮用户中心"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"鱼皮用户中心文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"https://github.com/liyupi"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">,</span><span class="token string">"https://github.com/liyupi"</span><span class="token punctuation">,</span><span class="token string">"1212121@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的springboot版本是大于等于2.6以上，大概率会出现一下报错： <img src="http://img-md-js.linjsblog.top/img/202301032130543.png" alt="image.png"> 在application.yaml配置文件中添加如下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ANT_PATH_MATCHER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问这个路径：<a href="http://localhost:8080/api/doc.html">http://localhost:8080/api/doc.html</a> 显示如下 <img src="http://img-md-js.linjsblog.top/img/202301032130610.png" alt="image.png"></p><h3 id="第三步：测试knife4j"><a href="#第三步：测试knife4j" class="headerlink" title="第三步：测试knife4j"></a>第三步：测试knife4j</h3><p>首先需要登录 <img src="http://img-md-js.linjsblog.top/img/202301032130483.png" alt="image.png"> 成功获取响应内容 现在再测试下获取登录用户信息 <img src="http://img-md-js.linjsblog.top/img/202301032130201.png" alt="image.png"> 可以通过在 controller 方法上添加 @Api、@ApiImplicitParam(name &#x3D; “name”,value &#x3D; “姓名”,required &#x3D; true) @ApiOperation(value &#x3D; “向客人问好”) 等注解来自定义生成的接口描述信息 <strong>这里就不演示了看个人需求</strong></p><h2 id="存量用户信息导入及同步-1"><a href="#存量用户信息导入及同步-1" class="headerlink" title="存量用户信息导入及同步"></a>存量用户信息导入及同步</h2><h3 id="第一步：分析原网站是怎么获取这些数据的？哪个接口？"><a href="#第一步：分析原网站是怎么获取这些数据的？哪个接口？" class="headerlink" title="第一步：分析原网站是怎么获取这些数据的？哪个接口？"></a>第一步：分析原网站是怎么获取这些数据的？哪个接口？</h3><ol><li>按 F12 打开控 制台，查看网络请求，复制 curl 代码便于查看和执行：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">"https://api.zsxq.com/v2/hashtags/48844541281228/topics?count=20"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"authority: api.zsxq.com"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"accept: application/json, text/plain, */*"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"accept-language: zh-CN,zh;q=0.9"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"cache-control: no-cache"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"origin: https://wx.zsxq.com"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"pragma: no-cache"</span> ^  <span class="token parameter variable">-H</span> <span class="token string">"referer: https://wx.zsxq.com/"</span> ^  <span class="token parameter variable">--compressed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>用程序去调用接口</strong> （java okhttp httpclient &#x2F; python 都可以）</li><li>处理（清洗）一下数据，之后就可以写到数据库里</li></ol><h3 id="第二步：具体实现流程"><a href="#第二步：具体实现流程" class="headerlink" title="第二步：具体实现流程"></a>第二步：具体实现流程</h3><p>1.从 excel 中导入全量用户数据，<strong>判重</strong> 这里使用了easyexcel 官网： 在pom.xml里引入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在开始写读表格的程序 首先这是一次性的代码，我们先创建一个once目录，再创建XingQiuTableUserInfo.java文件，这个文件作用就是将表格和对象相关联起来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>once</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token comment">/** * 星球表格用户信息 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XingQiuTableUserInfo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 星球编号     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"成员编号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> planetCode<span class="token punctuation">;</span>    <span class="token comment">/**     * 用户昵称     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"成员昵称"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个监听器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>once</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ReadListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableListener</span> <span class="token keyword">implements</span> <span class="token class-name">ReadListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XingQiuTableUserInfo</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 这个每一条数据解析都会来调用     *     * @param data    one row value. Is is same as &#123;@link AnalysisContext#readRowHolder()&#125;     * @param context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">XingQiuTableUserInfo</span> data<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 所有数据解析完成了 都会来调用     *     * @param context     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已解析完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我们要使用，先创建一个ImportExcel类作为实现类，先使用官方文档的方法一。即第一种读取方式：监听器：先创建监听器、在读取文件时绑定监听器。单独抽离处理逻辑，代码清晰易于维护；一条一条处理，适用于数据量大的场景。 同时我们也需要创建一个假数据的excel表格来进行测试，我这边提供一个自己写的 假数据：<a href="https://www.yuque.com/attachments/yuque/0/2022/xlsx/26315235/1668498633173-7ede61b4-c6b8-4e35-af29-445a8fa30b04.xlsx?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2022/xlsx/26315235/1668498633173-7ede61b4-c6b8-4e35-af29-445a8fa30b04.xlsx%22,%22name%22:%22testExcel.xlsx%22,%22size%22:9153,%22type%22:%22application/vnd.openxmlformats-officedocument.spreadsheetml.sheet%22,%22ext%22:%22xlsx%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22uc1a20890-b915-43c8-8048-a3229ae9fcc%22,%22taskType%22:%22upload%22,%22__spacing%22:%22both%22,%22id%22:%22uaa83dbb3%22,%22margin%22:%7B%22top%22:true,%22bottom%22:true%7D,%22card%22:%22file%22%7D">testExcel.xlsx</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>once</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span></span><span class="token punctuation">;</span><span class="token comment">/** * 导入Excel */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportExcel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//写法1</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"F:\\code\\星球项目\\用户中心\\user-center-backend-master\\src\\main\\resources\\testExcel.xlsx"</span><span class="token punctuation">;</span>        <span class="token comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span>        <span class="token comment">// 这里每次会读取100条数据 然后返回过来 直接调用使用数据就行</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token class-name">XingQiuTableUserInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TableListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试运行 <img src="http://img-md-js.linjsblog.top/img/202301032131390.png" alt="image.png"> 试一下第二种方法：同步读：无需创建监听器，一次性获取完整数据。方便简单，但是数据量大时会有等待时常，也可能内存溢出。在ImportExcel里创建两个方法，为了以后调用方便，修改代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yupi<span class="token punctuation">.</span>usercenter<span class="token punctuation">.</span>once</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * 导入Excel */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportExcel</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"F:\\\\code\\\\星球项目\\\\用户中心\\\\user-center-backend-master\\\\src\\\\main\\\\resources\\\\testExcel.xlsx"</span><span class="token punctuation">;</span>        <span class="token comment">// listenerRead(fileName);</span>        <span class="token function">synchronousRead</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 监听器读     * @param fileName     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listenerRead</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span>        <span class="token comment">// 这里每次会读取100条数据 然后返回过来 直接调用使用数据就行</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token class-name">XingQiuTableUserInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TableListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 同步读     * @param fileName     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">synchronousRead</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 同步读取会自动finish</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XingQiuTableUserInfo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token class-name">XingQiuTableUserInfo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doReadSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XingQiuTableUserInfo</span> data <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202301032131993.png" alt="image.png"> 千万注意：线上环境不要把接口暴露出去！！！可以通过在 SwaggerConfig 配置文件开头加上 @Profile({“dev”, “test”}) 限定配置仅在部分环境开启 先配置为prod，再运行，发现访问失败 <img src="http://img-md-js.linjsblog.top/img/202301032131584.png" alt="image.png"> 去application.yml中修改默认配置，并在swaggerConfig中加上@Profile注解 <img src="http://img-md-js.linjsblog.top/img/202301032131663.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301032132817.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redisson 实现分布式锁</title>
      <link href="/2023/01/03/redisson-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/01/03/redisson-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Redisson-实现分布式锁"><a href="#Redisson-实现分布式锁" class="headerlink" title="Redisson 实现分布式锁"></a>Redisson 实现分布式锁</h1><p>Java 客户端，数据网格 实现了很多 Java 里支持的接口和数据结构 Redisson 是一个 java 操作 Redis 的客户端，<strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。</strong></p><h3 id="2-种引入方式"><a href="#2-种引入方式" class="headerlink" title="2 种引入方式"></a>2 种引入方式</h3><ol><li>spring boot starter 引入（不推荐，版本迭代太快，容易冲突）<a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></li><li>直接引入：<a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></li></ol><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// list，数据存在本地 JVM 内存中</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list:"</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数据存在 redis 的内存中</span><span class="token class-name">RList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> rList <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"test-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>javarList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rlist:"</span> <span class="token operator">+</span> rList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时任务-锁"><a href="#定时任务-锁" class="headerlink" title="定时任务 + 锁"></a>定时任务 + 锁</h3><ol><li>waitTime 设置为 0，只抢一次，抢不到就放弃</li><li>注意释放锁要写在 finally 中</li></ol><p><strong>实现代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testWatchDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"yupao:precachejob:docache:lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 只有一个线程能获取到锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// todo 实际要执行的方法</span>            <span class="token function">doSomeThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getLock: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 只能释放自己的锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unLock: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>java    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="看门狗机制"><a href="#看门狗机制" class="headerlink" title="看门狗机制"></a>看门狗机制</h3><p>redisson 中提供的续期机制 开一个监听线程，如果方法还没执行完，就帮你重置 redis 锁的过期时间。 原理：</p><ol><li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（补到 30 秒）</li><li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li></ol><p><a href="https://blog.csdn.net/qq_26222859/article/details/79645203">https://blog.csdn.net/qq_26222859&#x2F;article&#x2F;details&#x2F;79645203</a></p><hr><p>Zookeeper 实现（不推荐）</p><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><p><a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.18.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意踩坑处：我这边开了梯子，下载依赖，会有io.netty:netty-codec-dns:jar:4.1.74.Final依赖安装失败， 解决办法：删除maven仓库里redission和netty-codec-dns。然后关闭梯子重新安装依赖</p><h3 id="2-写redisson配置"><a href="#2-写redisson配置" class="headerlink" title="2.写redisson配置"></a>2.写redisson配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Redisson 配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.redis"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1、创建配置</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> redisAddress <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"redis://%s:%s"</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>redisAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.创建实例</span>        <span class="token class-name">RedissonClient</span> redisson <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisson<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写测试类来使用redisson 实现分布式锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//List。数据存在本地JVM内存中</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list: "</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        list.remove(0);</span>        <span class="token comment">//数据存在redis的内存中</span>        <span class="token class-name">RList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> rList <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"test-list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"yupi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rList: "</span><span class="token operator">+</span>rList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        rList.remove(0);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行发现redis3库里面已经存入数据 <img src="http://img-md-js.linjsblog.top/img/202301031439842.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目开发笔记：伙伴匹配系统（二）</title>
      <link href="/2023/01/02/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/01/02/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="本次计划"><a href="#本次计划" class="headerlink" title="本次计划"></a>本次计划</h3><ol><li><strong>上次的标签接口调试</strong> √</li><li>前端整合路由 √</li><li>前端开发（搜索页面、用户信息页、用户信息修改页） √</li><li>后端整合 Swagger + Knife4j 接口文档</li><li>存量用户信息导入及同步（爬虫）</li></ol><h3 id="Java-8"><a href="#Java-8" class="headerlink" title="Java 8"></a>Java 8</h3><ol><li>stream &#x2F; parallelStream 流失处理</li><li>Optional 可选类</li></ol><h3 id="前端整合路由"><a href="#前端整合路由" class="headerlink" title="前端整合路由"></a>前端整合路由</h3><p>Vue-Router：<a href="https://router.vuejs.org/zh/guide/#html%EF%BC%8C%E7%9B%B4%E6%8E%A5%E7%9C%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E5%BC%95%E5%85%A5">https://router.vuejs.org/zh/guide/#html，直接看官方文档引入</a> Vue-Router 其实就是帮助你根据不同的 url 来展示不同的页面（组件），不用自己写 if &#x2F; else 路由配置影响整个项目，所以建议单独用 config 目录、单独的配置文件去集中定义和管理。 有些组件库可能自带了和 Vue-Router 的整合，所以尽量先看组件文档、省去自己写的时间。</p><h2 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h2><h3 id="一、上次的标签接口调试"><a href="#一、上次的标签接口调试" class="headerlink" title="一、上次的标签接口调试"></a>一、上次的标签接口调试</h3><h4 id="1-更改代码"><a href="#1-更改代码" class="headerlink" title="1.更改代码"></a>1.更改代码</h4><p>上次的searchUsersByTags方法里写了两种查询方式，这次就把它们分开，写成两个方法 整理如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 根据标签搜索用户(内存过滤) * * @param tagNameList 用户拥有的标签 * @return */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">searchUsersByTags</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//1.先查询所有用户</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.在内存中判断是否包含要求的标签</span>    <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> tagsStr <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tempTagNameSet <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>tagsStr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempTagNameSet <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>tempTagNameSet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tagName <span class="token operator">:</span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tempTagNameSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getSafetyUser</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 根据标签搜索用户(SQL查询)    * @param tagNameList    * @return    */</span>   <span class="token annotation punctuation">@Deprecated</span>   <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">searchUsersByTagsBySQL</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//拼接 and 查询</span>       <span class="token comment">//like '%Java%' and like '%Python%'</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tagName <span class="token operator">:</span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           queryWrapper <span class="token operator">=</span> queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">,</span> tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getSafetyUser</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-测试接口"><a href="#2-测试接口" class="headerlink" title="2.测试接口"></a>2.测试接口</h4><p>按照上次的测试方法，打断点debug 结果如下，成功查询到 <img src="http://img-md-js.linjsblog.top/img/202301021951440.png" alt="image.png"></p><h3 id="二、前端整合路由"><a href="#二、前端整合路由" class="headerlink" title="二、前端整合路由"></a>二、前端整合路由</h3><p>vue 路由组件库地址：</p><h4 id="1-安装命令"><a href="#1-安装命令" class="headerlink" title="1.安装命令"></a>1.安装命令</h4><pre class="line-numbers language-none"><code class="language-none">yarn add vue-router@4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我这边没有权限报错，如果有，就删掉node_modules和yarn-error.log。再次输入安装命令，成功安装 package里的依赖要存在vue-router <img src="http://img-md-js.linjsblog.top/img/202301021952257.png" alt="image.png"></p><h4 id="2-路由引入"><a href="#2-路由引入" class="headerlink" title="2.路由引入"></a>2.路由引入</h4><p>看文档，按着步骤引用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 1. 定义路由组件.&#x2F;&#x2F; 也可以从其他文件导入const Home &#x3D; &#123; template: &#39;&lt;div&gt;Home&lt;&#x2F;div&gt;&#39; &#125;const About &#x3D; &#123; template: &#39;&lt;div&gt;About&lt;&#x2F;div&gt;&#39; &#125;&#x2F;&#x2F; 2. 定义一些路由&#x2F;&#x2F; 每个路由都需要映射到一个组件。&#x2F;&#x2F; 我们后面再讨论嵌套路由。const routes &#x3D; [  &#123; path: &#39;&#x2F;&#39;, component: Home &#125;,  &#123; path: &#39;&#x2F;about&#39;, component: About &#125;,]&#x2F;&#x2F; 3. 创建路由实例并传递 &#96;routes&#96; 配置&#x2F;&#x2F; 你可以在这里输入更多的配置，但我们在这里&#x2F;&#x2F; 暂时保持简单const router &#x3D; VueRouter.createRouter(&#123;  &#x2F;&#x2F; 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。  history: VueRouter.createWebHashHistory(),  routes, &#x2F;&#x2F; &#96;routes: routes&#96; 的缩写&#125;)&#x2F;&#x2F; 5. 创建并挂载根实例const app &#x3D; Vue.createApp(&#123;&#125;)&#x2F;&#x2F;确保 _use_ 路由实例使&#x2F;&#x2F;整个应用支持路由。app.use(router)app.mount(&#39;#app&#39;)&#x2F;&#x2F; 现在，应用已经启动了！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制到main.ts中并修改，整理如下</p><pre class="line-numbers language-none"><code class="language-none">import &#123; createApp &#125; from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import &#123;Button, Icon, NavBar, Tabbar, TabbarItem&#125; from &#39;vant&#39;;import Index from &quot;.&#x2F;pages&#x2F;Index.vue&quot;;import Team from &quot;.&#x2F;pages&#x2F;Team.vue&quot;;import * as VueRouter from &#39;vue-router&#39;;const app &#x3D; createApp(App);app.use(Button);app.use(NavBar);app.use(Icon);app.use(Tabbar);app.use(TabbarItem);&#x2F;&#x2F;定义一些路由const routes &#x3D; [    &#123; path: &#39;&#x2F;&#39;, component: Index &#125;,    &#123; path: &#39;&#x2F;about&#39;, component: Team &#125;,]const router &#x3D; VueRouter.createRouter(&#123;    &#x2F;&#x2F; 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。    history: VueRouter.createWebHashHistory(),    routes, &#x2F;&#x2F; &#96;routes: routes&#96; 的缩写&#125;)app.use(router)app.mount(&#39;#app&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义的路由，即跳转的规则是全局性的，尽量提取出来，不要全部写在main.ts中 在src目录下，建立config目录和route文件，把路由的定义移动到里面，注意！不是复制！ route文件代码如下</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;定义一些路由import Index from &quot;..&#x2F;pages&#x2F;Index.vue&quot;;import Team from &quot;..&#x2F;pages&#x2F;Team.vue&quot;;import User from &quot;..&#x2F;pages&#x2F;User.vue&quot;;const routes &#x3D; [    &#123; path: &#39;&#x2F;&#39;, component: Index &#125;,    &#123; path: &#39;&#x2F;Team&#39;, component: Team &#125;,    &#123; path: &#39;&#x2F;User&#39;, component: User &#125;,]export default routes;&#x2F;&#x2F;导出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到main.ts文件中，把routes引入。选中routes按alt+anter，或者手动导入 <img src="http://img-md-js.linjsblog.top/img/202301021952293.png" alt="image.png"> 找到BasicLayout.vue文件，原先是利用v-if进行改变，跳转的，现在引入router-view，根据不同的页面展示不同的内容，个人理解：原先是单页面跳转，就是利用js重新渲染页面，而利用router-view后，是在多个页面里面进行跳转。 div 里的内容修改为如下 <img src="http://img-md-js.linjsblog.top/img/202301021952810.png" alt="image.png"> 搭配route-link创建链接，进行测试 <img src="http://img-md-js.linjsblog.top/img/202301021952987.png" alt="image.png"> 启动项目，测试一下，点击链接，发现路径是跳转的 <img src="http://img-md-js.linjsblog.top/img/202301021953426.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021953195.png" alt="image.png"> 这些表明框架结构已经成功搭建，vant3标签栏已经支持路由模式（正好是vue-route） <img src="http://img-md-js.linjsblog.top/img/202301021953098.png" alt="image.png"> 上次创建页面少创建了个人页面，现在依葫芦画瓢，创建个人页面（这个比较简单就不演示了），注意：别忘了到route.ts中引入这个页面 <img src="http://img-md-js.linjsblog.top/img/202301021953935.png" alt="image.png"> 继续修改BasicLayout.vue如下 <img src="http://img-md-js.linjsblog.top/img/202301021953157.png" alt="image.png"> 删除route-link（现在没用了，可通过标签栏跳转了） 测试一下，结果如下 <img src="http://img-md-js.linjsblog.top/img/202301021954274.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021954067.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021954780.png" alt="image.png"></p><h4 id="三、前端开发"><a href="#三、前端开发" class="headerlink" title="三、前端开发"></a>三、前端开发</h4><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><p>首先把原先的页面名称修改下，有些会与自带的起冲突，添加searchpage页面 ，并修改其他页面名称修改如下 <img src="http://img-md-js.linjsblog.top/img/202301021954394.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021954642.png" alt="image.png"> 为了编写代码中的便利，把按需引入改为全部引路，在main.ts中修改代码</p><pre class="line-numbers language-none"><code class="language-none">import &#123; createApp &#125; from &#39;vue&#39;import App from &#39;.&#x2F;App.vue&#39;import * as VueRouter from &#39;vue-router&#39;;import routes from &quot;.&#x2F;config&#x2F;route&quot;;import Vant from &#39;vant&#39;;import &#39;vant&#x2F;lib&#x2F;index.css&#39;const app &#x3D; createApp(App);app.use(Vant);const router &#x3D; VueRouter.createRouter(&#123;    &#x2F;&#x2F; 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。    history: VueRouter.createWebHashHistory(),    routes, &#x2F;&#x2F; &#96;routes: routes&#96; 的缩写&#125;)app.use(router);app.mount(&#39;#app&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-添加搜索框"><a href="#2-添加搜索框" class="headerlink" title="2.添加搜索框"></a>2.添加搜索框</h4><p>在vant文档里找到合适的组件如下 <img src="http://img-md-js.linjsblog.top/img/202301021954239.png" alt="image.png"> 将其复制到searchpage页面里，并修改整理</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;form action&#x3D;&quot;&#x2F;&quot;&gt;    &lt;van-search        v-model&#x3D;&quot;searchText&quot;        show-action        placeholder&#x3D;&quot;请输入搜索关键词&quot;        @search&#x3D;&quot;onSearch&quot;        @cancel&#x3D;&quot;onCancel&quot;    &#x2F;&gt;  &lt;&#x2F;form&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#39;vue&#39;;import &#123; Toast &#125; from &#39;vant&#39;;const searchText &#x3D; ref(&#39;&#39;);const onSearch &#x3D; (val) &#x3D;&gt; Toast(val);const onCancel &#x3D; () &#x3D;&gt; Toast(&#39;取消&#39;);&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后做一个点击搜索按钮，跳转到搜索页面，在vue router 官方文档里有此内容，复制到BsaicLayout.vue中修改，顺便把左边的返回页面按钮也写了，使其跳转到主页 <img src="http://img-md-js.linjsblog.top/img/202301021954516.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301021955073.png" alt="image.png"> 测试一下，按搜索按钮 <img src="http://img-md-js.linjsblog.top/img/202301021955888.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021955026.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021955116.png" alt="image.png"> 按左边返回按钮 <img src="http://img-md-js.linjsblog.top/img/202301021955127.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021955822.png" alt="image.png"></p><h4 id="3-添加，搜索，删除标签"><a href="#3-添加，搜索，删除标签" class="headerlink" title="3.添加，搜索，删除标签"></a>3.添加，搜索，删除标签</h4><p>目标是实现标签显示，包括可选标签和已选标签，所以我们要引入分割线去区分</p><pre class="line-numbers language-none"><code class="language-none">&lt;van-divider  :style&#x3D;&quot;&#123; color: &#39;#1989fa&#39;, borderColor: &#39;#1989fa&#39;, padding: &#39;0 16px&#39; &#125;&quot;&gt;  文字&lt;&#x2F;van-divider&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时我们需要在点击搜索后，让页面显示已选标签，所以要引入tag标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;van-tag :show&#x3D;&quot;show&quot; closeable size&#x3D;&quot;medium&quot; type&#x3D;&quot;primary&quot; @close&#x3D;&quot;close&quot;&gt;  标签&lt;&#x2F;van-tag&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>标签需要我们手动选择，所以也要引入选择标签组件，这边我们使用TreeSelect</p><pre class="line-numbers language-none"><code class="language-none">import &#123; ref &#125; from &#39;vue&#39;;export default &#123;  setup() &#123;    const activeId &#x3D; ref(1);    const activeIndex &#x3D; ref(0);    const items &#x3D; [      &#123;        text: &#39;浙江&#39;,        children: [          &#123; text: &#39;杭州&#39;, id: 1 &#125;,          &#123; text: &#39;温州&#39;, id: 2 &#125;,        ],      &#125;,      &#123;        text: &#39;江苏&#39;,        children: [          &#123; text: &#39;南京&#39;, id: 5 &#125;,          &#123; text: &#39;无锡&#39;, id: 6 &#125;,        ],      &#125;,    ];    return &#123;      items,      activeId,      activeIndex,    &#125;;  &#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>已选标签之间是挤在一起，为了美观，我们来选择Layout布局来设置间距</p><pre class="line-numbers language-none"><code class="language-none">&lt;van-row gutter&#x3D;&quot;20&quot;&gt;  &lt;van-col span&#x3D;&quot;8&quot;&gt;span: 8&lt;&#x2F;van-col&gt;  &lt;van-col span&#x3D;&quot;8&quot;&gt;span: 8&lt;&#x2F;van-col&gt;  &lt;van-col span&#x3D;&quot;8&quot;&gt;span: 8&lt;&#x2F;van-col&gt;&lt;&#x2F;van-row&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面的组件复制到SearchPage.vue并整理修改</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;form action&#x3D;&quot;&#x2F;&quot;&gt;    &lt;van-search        v-model&#x3D;&quot;searchText&quot;        show-action        placeholder&#x3D;&quot;请输入搜索关键词&quot;        @search&#x3D;&quot;onSearch&quot;        @cancel&#x3D;&quot;onCancel&quot;    &#x2F;&gt;  &lt;&#x2F;form&gt;  &lt;van-divider content-position&#x3D;&quot;left&quot;&gt;已选标签&lt;&#x2F;van-divider&gt;  &lt;div v-if&#x3D;&quot;activeIds.length&#x3D;&#x3D;&#x3D;0&quot;&gt;请选择标签&lt;&#x2F;div&gt;  &lt;van-row gutter&#x3D;&quot;16&quot; style&#x3D;&quot;padding: 0 16px&quot;&gt;    &lt;van-col v-for&#x3D;&quot;tag in activeIds&quot;&gt;      &lt;van-tag closeable size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot;&gt;        &#123;&#123;tag&#125;&#125;      &lt;&#x2F;van-tag&gt;    &lt;&#x2F;van-col&gt;  &lt;&#x2F;van-row&gt;  &lt;van-tree-select      v-model:active-id&#x3D;&quot;activeIds&quot;      v-model:main-active-index&#x3D;&quot;activeIndex&quot;      :items&#x3D;&quot;tagList&quot;  &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#39;vue&#39;;import &#123; Toast &#125; from &#39;vant&#39;;const searchText &#x3D; ref(&#39;&#39;);const onSearch &#x3D; (val) &#x3D;&gt; Toast(val);const onCancel &#x3D; () &#x3D;&gt; Toast(&#39;取消&#39;);&#x2F;&#x2F;已选中的标签const activeIds &#x3D; ref([]);const activeIndex &#x3D; ref(0);const tagList &#x3D; [  &#123;    text: &#39;性别&#39;,    children: [      &#123; text: &#39;男&#39;, id: &#39;男&#39; &#125;,      &#123; text: &#39;女&#39;, id: &#39;女&#39; &#125;,    ],  &#125;,  &#123;    text: &#39;年级&#39;,    children: [      &#123; text: &#39;大一&#39;, id: &#39;大一&#39; &#125;,      &#123; text: &#39;大二&#39;, id: &#39;大二&#39; &#125;,    ],  &#125;,];&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看现在页面是什么样的 <img src="http://img-md-js.linjsblog.top/img/202301021955418.png" alt="image.png"> 但是点击×删不掉已选标签，这是因为我们没写移除标签函数，添加函数！</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;移除标签const doClose &#x3D; (tag) &#x3D;&gt;&#123;  activeIds.value&#x3D;activeIds.value.filter(item &#x3D;&gt;&#123;    return item !&#x3D;&#x3D; tag;  &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>别忘了在tag里面添加@close&#x3D;”doClose(tag)”！ <img src="http://img-md-js.linjsblog.top/img/202301021956738.png" alt="image.png"> 不出意外的话就可以删除已选标签了 最后就要进行关键字查询，来去过滤标签了（可以直接在前端里面过滤，因为标签的数据量不大，没必要向后台发送请求） <img src="http://img-md-js.linjsblog.top/img/202301021956602.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021956573.png" alt="image.png"> 现在要将数据扁平化，原来是嵌套结构，将数据扁平之后（打平）再进行过滤 <img src="http://img-md-js.linjsblog.top/img/202301021956444.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021956958.png" alt="image.png"> 踩坑注意：画红线框处我这边是必须要这样写，@炎大佬的笔记里两个都是花括号，照着写我这边就会显示Uncaught TypeError: tempChildren.filter is not a function 测试：选中性别，搜索男，点击取消，选中年级，搜索大一 显示结果如下 <img src="http://img-md-js.linjsblog.top/img/202301021956142.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021956581.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021956042.png" alt="image.png"></p><h4 id="4-创建用户信息页"><a href="#4-创建用户信息页" class="headerlink" title="4.创建用户信息页"></a>4.创建用户信息页</h4><p>在vant文档里寻找到适合的组件来编写用户信息页面，这里选择了cell单元格，将其黏贴到UserPage.vue中 <img src="http://img-md-js.linjsblog.top/img/202301021957472.png" alt="image.png"> 我们现在要定义一下后台用户数据的类别，在用户中心中我们曾经写过这个规范 在src目录下建立models目录，并创建user.d.ts文件，将规范粘贴进去并适当修改如下</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * 用户类别 *&#x2F;export type CurrentUser &#x3D; &#123;    id: number;    username: string;    userAccount: string;    avatarUrl?: string;    gender: number;    phone: string;    email: string;    userStatus: number;    userRole: number;    planetCode: string;    tags: string[];    createTime: Date;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在UserPage.vue中引入，自己写点假数据</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;van-cell title&#x3D;&quot;昵称&quot; is-link to&#x3D;&#39;&#x2F;user&#x2F;edit&#39; :value&#x3D;&quot;user.username&quot;&#x2F;&gt;  &lt;van-cell title&#x3D;&quot;账号&quot; is-link to&#x3D;&#39;&#x2F;user&#x2F;edit&#39; :value&#x3D;&quot;user.userAccount&quot; &#x2F;&gt;  &lt;van-cell title&#x3D;&quot;头像&quot; is-link to&#x3D;&#39;&#x2F;user&#x2F;edit&#39;&gt;    &lt;img style&#x3D;&quot;height: 48px&quot; :src&#x3D;&quot;user.avatarUrl&quot;&#x2F;&gt;  &lt;&#x2F;van-cell&gt;  &lt;van-cell title&#x3D;&quot;性别&quot; is-link to&#x3D;&#39;&#x2F;user&#x2F;edit&#39; :value&#x3D;&quot;user.gender&quot; &#x2F;&gt;  &lt;van-cell title&#x3D;&quot;电话&quot; is-link to&#x3D;&#39;&#x2F;user&#x2F;edit&#39; :value&#x3D;&quot;user.phone&quot; &#x2F;&gt;  &lt;van-cell title&#x3D;&quot;邮箱&quot; is-link to&#x3D;&#39;&#x2F;user&#x2F;edit&#39; :value&#x3D;&quot;user.email&quot; &#x2F;&gt;  &lt;van-cell title&#x3D;&quot;星球编号&quot; :value&#x3D;&quot;user.planetCode&quot; &#x2F;&gt;  &lt;van-cell title&#x3D;&quot;注册时间&quot; :value&#x3D;&quot;user.createTime.toISOString()&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;const user &#x3D; &#123;  id: 1,  username: &#39;鱼皮&#39;,  userAccount: &#39;dogYupi&#39;,  avatarUrl: &#39;https:&#x2F;&#x2F;img1.baidu.com&#x2F;it&#x2F;u&#x3D;1645832847,2375824523&amp;fm&#x3D;253&amp;fmt&#x3D;auto&amp;app&#x3D;138&amp;f&#x3D;JPEG?w&#x3D;480&amp;h&#x3D;480&#39;,  gender: &#39;男&#39;,  phone: &#39;121311313&#39;,  email: &#39;23432@qq.com&#39;,  planetCode: &#39;123&#39;,  createTime: new Date(),&#125;;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示如下 <img src="http://img-md-js.linjsblog.top/img/202301021957535.png" alt="image.png"></p><h4 id="5-创建用户信息修改页"><a href="#5-创建用户信息修改页" class="headerlink" title="5.创建用户信息修改页"></a>5.创建用户信息修改页</h4><p>点击&gt;可进入到修改页 <img src="http://img-md-js.linjsblog.top/img/202301021957544.png" alt="image.png"> 新建一个用户编辑页,命名为UserEditPage.vue 在route.ts添加新路由 <img src="http://img-md-js.linjsblog.top/img/202301021957092.png" alt="image.png"> 对UserPage.vue和UserEditPage.vue进行修改 UserPage.vue： <img src="http://img-md-js.linjsblog.top/img/202301021957859.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021957277.png" alt="image.png"> UserEditPage.vue： <img src="http://img-md-js.linjsblog.top/img/202301022000615.png" alt="image.png"> 测试获取参数 <img src="http://img-md-js.linjsblog.top/img/202301021957797.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021957430.png" alt="image.png"> 现在可以开始写编辑方法了，从组件库获取相应的表单 <img src="http://img-md-js.linjsblog.top/img/202301022000784.png" alt="image.png"> 代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;van-form @submit&#x3D;&quot;onSubmit&quot;&gt;  &lt;van-cell-group inset&gt;    &lt;van-field      v-model&#x3D;&quot;username&quot;      name&#x3D;&quot;用户名&quot;      label&#x3D;&quot;用户名&quot;      placeholder&#x3D;&quot;用户名&quot;      :rules&#x3D;&quot;[&#123; required: true, message: &#39;请填写用户名&#39; &#125;]&quot;    &#x2F;&gt;    &lt;van-field      v-model&#x3D;&quot;password&quot;      type&#x3D;&quot;password&quot;      name&#x3D;&quot;密码&quot;      label&#x3D;&quot;密码&quot;      placeholder&#x3D;&quot;密码&quot;      :rules&#x3D;&quot;[&#123; required: true, message: &#39;请填写密码&#39; &#125;]&quot;    &#x2F;&gt;  &lt;&#x2F;van-cell-group&gt;  &lt;div style&#x3D;&quot;margin: 16px;&quot;&gt;    &lt;van-button round block type&#x3D;&quot;primary&quot; native-type&#x3D;&quot;submit&quot;&gt;      提交    &lt;&#x2F;van-button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;van-form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制粘贴到UserEditPage.vue修改整理如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;van-form @submit&#x3D;&quot;onSubmit&quot;&gt;      &lt;van-field          v-model&#x3D;&quot;editUser.currentValue&quot;          :name&#x3D;&quot;editUser.editKey&quot;          :label&#x3D;&quot;editUser.editName&quot;          :placeholder&#x3D;&quot;&#39;请输入$&#123;editUser.editName&#125;&#39;&quot;      &#x2F;&gt;    &lt;div style&#x3D;&quot;margin: 16px;&quot;&gt;      &lt;van-button round block type&#x3D;&quot;primary&quot; native-type&#x3D;&quot;submit&quot;&gt;        提交      &lt;&#x2F;van-button&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;van-form&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123;useRoute&#125; from &quot;vue-router&quot;;import &#123;ref&#125; from &quot;vue&quot;;const route &#x3D; useRoute();const editUser &#x3D; ref(&#123;  editKey: route.query.editKey,  currentValue: route.query.currentValue,  editName: route.query.editName,&#125;)const onSubmit &#x3D; (values) &#x3D;&gt; &#123;  &#x2F;&#x2F;todo 把editKey currentValue editName提交到后台  console.log(&#39;onSubmit&#39;,values);&#125;console.log(route)console.log(route.query)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时别忘了这里多传了一个参数，在UserPage.vue里进行修改 <img src="http://img-md-js.linjsblog.top/img/202301021958105.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021958713.png" alt="image.png"> 修改以前不完善的地方，按左边返回按钮会重定向到首页，我们目标是回到上一页 ，修改这个地方 <img src="http://img-md-js.linjsblog.top/img/202301021958370.png" alt="image.png"> 测试如下，修改页获得，点击提交，数据也获得，返回也正常 <img src="http://img-md-js.linjsblog.top/img/202301021958579.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021958403.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301021958461.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小项目：伙伴匹配系统（一）</title>
      <link href="/2023/01/02/%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/01/02/%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%9A%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="开发笔记"><a href="#开发笔记" class="headerlink" title="开发笔记"></a>开发笔记</h2><p>介绍：帮助大家找到志同道合的伙伴，移动端 H5 网页（尽量兼容 PC 端）</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>用户去添加标签，标签的分类（要有哪些标签、怎么把标签进行分类）学习方向 java &#x2F; c++，工作 &#x2F; 大学</li><li>主动搜索：允许用户根据标签去搜索其他用户<ol><li>Redis 缓存</li></ol></li><li>组队<ol><li>创建队伍</li><li>加入队伍</li><li>根据标签查询队伍</li><li>邀请其他人</li></ol></li><li>允许用户去修改标签</li><li>推荐<ol><li>相似度计算算法 + 本地分布式计算</li></ol></li></ol><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><p><strong>前端</strong></p><ol><li>Vue 3 开发框架（提高页面开发的效率）</li><li>Vant UI（基于 Vue 的移动端组件库）（React 版 Zent）</li><li>Vite 2（打包工具，快！）</li><li>Nginx 来单机部署</li></ol><p><strong>后端</strong></p><ol><li>Java 编程语言 + SpringBoot 框架</li><li>SpringMVC + MyBatis + MyBatis Plus（提高开发效率）</li><li>MySQL 数据库</li><li>Redis 缓存</li><li>Swagger + Knife4j 接口文档</li></ol><h3 id="第一期计划"><a href="#第一期计划" class="headerlink" title="第一期计划"></a>第一期计划</h3><ol><li>前端项目初始化 15 min</li><li>前端主页 + 组件概览 15 min</li><li>数据库表设计 15 min<ol><li>标签表</li><li>用户表</li></ol></li><li>初始化后端项目</li><li>开发后端 - 根据标签搜索用户 30 min</li><li>开发前端 - 根据标签搜索用户 20 min</li></ol><h2 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h2><h3 id="一、前端项目初始化"><a href="#一、前端项目初始化" class="headerlink" title="一、前端项目初始化"></a>一、前端项目初始化</h3><p>用脚手架初始化项目</p><ul><li>Vue CLI <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li><li><strong>Vite 脚手架</strong> ：<a href="https://vitejs.cn/guide/#scaffolding-your-first-vite-project">https://vitejs.cn/guide/#scaffolding-your-first-vite-project</a></li></ul><p>整合组件库 Vant：</p><ul><li>安装 Vant</li><li>按需引入 npm i vite-plugin-style-import<a href="/1.4.1">@1.4.1</a> -D</li></ul><p>开发页面经验：</p><pre class="line-numbers language-none"><code class="language-none">1. 多参考2. 从整体到局部3. 先想清楚页面要做成什么样子，再写代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-在需要创建项目的目录输入cmd来初始化搭建项目"><a href="#1-在需要创建项目的目录输入cmd来初始化搭建项目" class="headerlink" title="1.在需要创建项目的目录输入cmd来初始化搭建项目"></a>1.在需要创建项目的目录输入cmd来初始化搭建项目</h4><pre class="line-numbers language-none"><code class="language-none">yarn create vite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个输入项目的名称 第二个选择脚手架类型 ——vue 第三个选择语言 ——ts 初始化总截图 <img src="http://img-md-js.linjsblog.top/img/202301012355340.png" alt="image.png"></p><h4 id="2-初始化完善"><a href="#2-初始化完善" class="headerlink" title="2.初始化完善"></a>2.初始化完善</h4><p>用webstorm或者vscode打开刚创建的项目（这里我选择了webstorm） （1）.首先在终端中输入yarn或者npm install导入依赖 （2）.在package.json中点击dev启动 我这边发现端口不是3000，为了后续方便，可以修改vite.config.ts文件 <img src="http://img-md-js.linjsblog.top/img/202301012355867.png" alt="image.png"> 又发现打开的网页界面也不一致（算了，走一步是一步） <img src="http://img-md-js.linjsblog.top/img/202301012355876.png" alt="image.png"> （3).整合组件库</p><pre class="line-numbers language-none"><code class="language-none"># 通过 npm 安装npm i vite-plugin-style-import@1.4.1 -D# 通过 yarn 安装yarn add vite-plugin-style-import@1.4.1 -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里推荐npm方式，yarn大概率会像鱼皮那样报错，安装失败 安装完成后，在 <strong>vite.config.js</strong> 文件中配置插件：</p><pre class="line-numbers language-none"><code class="language-none">import vue from &#39;@vitejs&#x2F;plugin-vue&#39;;import styleImport, &#123; VantResolve &#125; from &#39;vite-plugin-style-import&#39;;export default &#123;  plugins: [    vue(),    styleImport(&#123;      resolves: [VantResolve()],    &#125;),  ],&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整理如下：</p><pre class="line-numbers language-none"><code class="language-none">import &#123; defineConfig &#125; from &#39;vite&#39;import vue from &#39;@vitejs&#x2F;plugin-vue&#39;import styleImport, &#123; VantResolve &#125; from &#39;vite-plugin-style-import&#39;;&#x2F;&#x2F; https:&#x2F;&#x2F;vitejs.dev&#x2F;config&#x2F;export default defineConfig(&#123;  plugins: [    vue(),    styleImport(&#123;      resolves: [VantResolve()],    &#125;),  ]  server: &#123;    port: 3000,  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过npm安装vant</p><pre class="line-numbers language-none"><code class="language-none"># Vue 3 项目，安装最新版 Vantnpm i vant<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着引入组件在main.ts文件里</p><pre class="line-numbers language-none"><code class="language-none">import &#123; createApp &#125; from &#39;vue&#39;;import &#123; Button &#125; from &#39;vant&#39;;const app &#x3D; createApp();app.use(Button);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整理如下</p><pre class="line-numbers language-none"><code class="language-none">import &#123; createApp &#125; from &#39;vue&#39;import &#39;.&#x2F;style.css&#39;import App from &#39;.&#x2F;App.vue&#39;import &#123; Button &#125; from &#39;vant&#39;;const app &#x3D; createApp(App);app.use(Button);app.mount(&#39;#app&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以测试一下引入是否成功</p><pre class="line-numbers language-none"><code class="language-none">&lt;van-button type&#x3D;&quot;primary&quot;&gt;主要按钮&lt;&#x2F;van-button&gt;&lt;van-button type&#x3D;&quot;success&quot;&gt;成功按钮&lt;&#x2F;van-button&gt;&lt;van-button type&#x3D;&quot;default&quot;&gt;默认按钮&lt;&#x2F;van-button&gt;&lt;van-button type&#x3D;&quot;warning&quot;&gt;警告按钮&lt;&#x2F;van-button&gt;&lt;van-button type&#x3D;&quot;danger&quot;&gt;危险按钮&lt;&#x2F;van-button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>黏贴到App.vue里面</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;vitejs.dev&quot; target&#x3D;&quot;_blank&quot;&gt;      &lt;img src&#x3D;&quot;&#x2F;vite.svg&quot; class&#x3D;&quot;logo&quot; alt&#x3D;&quot;Vite logo&quot; &#x2F;&gt;    &lt;&#x2F;a&gt;    &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;vuejs.org&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;      &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;vue.svg&quot; class&#x3D;&quot;logo vue&quot; alt&#x3D;&quot;Vue logo&quot; &#x2F;&gt;    &lt;&#x2F;a&gt;  &lt;&#x2F;div&gt;  &lt;HelloWorld msg&#x3D;&quot;Vite + Vue&quot; &#x2F;&gt;  &lt;van-button type&#x3D;&quot;primary&quot;&gt;主要按钮&lt;&#x2F;van-button&gt;  &lt;van-button type&#x3D;&quot;success&quot;&gt;成功按钮&lt;&#x2F;van-button&gt;  &lt;van-button type&#x3D;&quot;default&quot;&gt;默认按钮&lt;&#x2F;van-button&gt;  &lt;van-button type&#x3D;&quot;warning&quot;&gt;警告按钮&lt;&#x2F;van-button&gt;  &lt;van-button type&#x3D;&quot;danger&quot;&gt;危险按钮&lt;&#x2F;van-button&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行，启动项目访问，我这里出现了报错 <img src="http://img-md-js.linjsblog.top/img/202301012356165.png" alt="image.png"> 发现是依赖引入路径的问题，百度！ 修改vite.config.ts代码，增加如下代码</p><pre class="line-numbers language-none"><code class="language-none">export default defineConfig(&#123;  plugins: [    vue(),    styleImport(&#123;      resolves: [VantResolve()],      &#x2F;&#x2F;增加的代码      libs: [        &#123;          libraryName: &#39;vant&#39;,          esModule: true,          resolveStyle: name &#x3D;&gt; &#96;..&#x2F;es&#x2F;$&#123;name&#125;&#x2F;style&#96;        &#125;     ]    &#125;),  ],  server: &#123;    port: 3000,  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次启动项目，不报错，在底部成功出现了按键 <img src="http://img-md-js.linjsblog.top/img/202301012357930.png" alt="image.png"></p><h3 id="二、前端主页-组件概览"><a href="#二、前端主页-组件概览" class="headerlink" title="二、前端主页 + 组件概览"></a>二、前端主页 + 组件概览</h3><p><strong>设计</strong>： 导航条：展示当前页面名称 主页搜索框 &#x3D;&gt; 搜索页 &#x3D;&gt; 搜索结果页（标签筛选页） 内容 tab 栏：</p><ul><li>主页（推荐页 + <strong>广告</strong> ）<ul><li>搜索框</li><li>banner</li><li>推荐信息流</li></ul></li><li>队伍页</li><li>用户页（消息 - 暂时考虑发邮件）</li></ul><p><strong>开发</strong>： 很多页面要复用组件 &#x2F; 样式，重复写很麻烦、不利于维护，所以抽象一个通用的布局（Layout） 组件化</p><h4 id="1-删除App-vue中无用的代码，只剩下框架；删除components中的hello文件，建立layouts文件夹（复用，通用布局）"><a href="#1-删除App-vue中无用的代码，只剩下框架；删除components中的hello文件，建立layouts文件夹（复用，通用布局）" class="headerlink" title="1. 删除App.vue中无用的代码，只剩下框架；删除components中的hello文件，建立layouts文件夹（复用，通用布局）"></a>1. 删除App.vue中无用的代码，只剩下框架；删除components中的hello文件，建立layouts文件夹（复用，通用布局）</h4><h4 id="2-搭建基本框架"><a href="#2-搭建基本框架" class="headerlink" title="2.搭建基本框架"></a>2.搭建基本框架</h4><p>复制navbar模块的代码如下，插入到layouts目录下的BasicLayouts.vue文件中</p><pre class="line-numbers language-none"><code class="language-none">&lt;van-nav-bar  title&#x3D;&quot;标题&quot;  left-text&#x3D;&quot;返回&quot;  right-text&#x3D;&quot;按钮&quot;  left-arrow  @click-left&#x3D;&quot;onClickLeft&quot;  @click-right&#x3D;&quot;onClickRight&quot;&#x2F;&gt;import &#123; Toast &#125; from &#39;vant&#39;;export default &#123;  setup() &#123;    const onClickLeft &#x3D; () &#x3D;&gt; history.back();    const onClickRight &#x3D; () &#x3D;&gt; Toast(&#39;按钮&#39;);    return &#123;      onClickLeft,      onClickRight,    &#125;;  &#125;,&#125;;&lt;van-nav-bar title&#x3D;&quot;标题&quot; left-text&#x3D;&quot;返回&quot; left-arrow&gt;  &lt;template #right&gt;    &lt;van-icon name&#x3D;&quot;search&quot; size&#x3D;&quot;18&quot; &#x2F;&gt;  &lt;&#x2F;template&gt;&lt;&#x2F;van-nav-bar&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整理可得</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;van-nav-bar      title&#x3D;&quot;标题&quot;      left-arrow      @click-left&#x3D;&quot;onClickLeft&quot;      @click-right&#x3D;&quot;onClickRight&quot;  &gt;  &lt;template #right&gt;    &lt;van-icon name&#x3D;&quot;search&quot; size&#x3D;&quot;18&quot; &#x2F;&gt;  &lt;&#x2F;template&gt;  &lt;&#x2F;van-nav-bar&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;  const onClickLeft &#x3D; () &#x3D;&gt; alert(&#39;左&#39;);  const onClickRight &#x3D; () &#x3D;&gt; alert(&#39;右&#39;);&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在其中<code>&lt;script setup&gt;</code>中的setup是把下面的常量暴露出去 同时不要忘了在main.ts中按需引入组件</p><pre class="line-numbers language-none"><code class="language-none">import &#123;Button, Icon, NavBar&#125; from &#39;vant&#39;;app.use(NavBar);app.use(Icon);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后再App.vue中引入组件</p><pre class="line-numbers language-none"><code class="language-none">&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import BasicLayout from &quot;.&#x2F;components&#x2F;layouts&#x2F;BasicLayout.vue&quot;;&lt;&#x2F;script&gt;&lt;template&gt;  &lt;BasicLayout &#x2F;&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示如下 <img src="http://img-md-js.linjsblog.top/img/202301012357226.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301012357493.png" alt="image.png"> 根据需求进行魔改（如法炮制): 引入底部的tabbar 复制如下的代码到BasicLayouts.vue中</p><pre class="line-numbers language-none"><code class="language-none">&lt;van-tabbar v-model&#x3D;&quot;active&quot; @change&#x3D;&quot;onChange&quot;&gt;  &lt;van-tabbar-item icon&#x3D;&quot;home-o&quot;&gt;标签 1&lt;&#x2F;van-tabbar-item&gt;  &lt;van-tabbar-item icon&#x3D;&quot;search&quot;&gt;标签 2&lt;&#x2F;van-tabbar-item&gt;  &lt;van-tabbar-item icon&#x3D;&quot;friends-o&quot;&gt;标签 3&lt;&#x2F;van-tabbar-item&gt;  &lt;van-tabbar-item icon&#x3D;&quot;setting-o&quot;&gt;标签 4&lt;&#x2F;van-tabbar-item&gt;&lt;&#x2F;van-tabbar&gt;import &#123; ref &#125; from &#39;vue&#39;;import &#123; Toast &#125; from &#39;vant&#39;;export default &#123;  setup() &#123;    const active &#x3D; ref(0);    const onChange &#x3D; (index) &#x3D;&gt; Toast(&#96;标签 $&#123;index&#125;&#96;);    return &#123;      icon,      onChange,    &#125;;  &#125;,&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整理如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;van-tabbar v-model&#x3D;&quot;active&quot; @change&#x3D;&quot;onChange&quot;&gt;    &lt;van-tabbar-item icon&#x3D;&quot;home-o&quot; name&#x3D;&quot;index&quot;&gt;主页&lt;&#x2F;van-tabbar-item&gt;    &lt;van-tabbar-item icon&#x3D;&quot;search&quot; name&#x3D;&quot;team&quot;&gt;队伍&lt;&#x2F;van-tabbar-item&gt;    &lt;van-tabbar-item icon&#x3D;&quot;friends-o&quot; name&#x3D;&quot;user&quot;&gt;个人&lt;&#x2F;van-tabbar-item&gt;  &lt;&#x2F;van-tabbar&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;  import &#123; ref &#125; from &#39;vue&#39;;  import &#123; Toast &#125; from &#39;vant&#39;;  const active &#x3D; ref(&quot;index&quot;);  const onChange &#x3D; (index) &#x3D;&gt; Toast(&#96;标签 $&#123;index&#125;&#96;);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时这个也需要在main.ts中引入组件</p><pre class="line-numbers language-none"><code class="language-none">import &#123;Button, Icon, NavBar, Tabbar, TabbarItem&#125; from &#39;vant&#39;;app.use(Tabbar);app.use(TabbarItem);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>const active &#x3D; ref(“index”); 这句的作用是在进入页面时默认index页面的图标是高亮的 通过change事件来监听选中标签的变化 <img src="http://img-md-js.linjsblog.top/img/202301012357695.png" alt="image.png"> 注意：其中一定要把main.ts中的import ‘.&#x2F;style.css’删去，我这边初始化的文件里有这一行，否则会引起样式冲突。</p><h4 id="3-完善，引入两个页面，创建pages目录和index-vue和team-vue，并在BasicLayouts-vue中引入"><a href="#3-完善，引入两个页面，创建pages目录和index-vue和team-vue，并在BasicLayouts-vue中引入" class="headerlink" title="3.完善，引入两个页面，创建pages目录和index.vue和team.vue，并在BasicLayouts.vue中引入"></a>3.完善，引入两个页面，创建pages目录和index.vue和team.vue，并在BasicLayouts.vue中引入</h4><p><img src="http://img-md-js.linjsblog.top/img/202301020045914.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301012357646.png" alt="image.png"> 结果如下 <img src="http://img-md-js.linjsblog.top/img/202301012358947.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301012358695.png" alt="image.png"> 前端主页+组件到此完成</p><h3 id="三、数据库表设计"><a href="#三、数据库表设计" class="headerlink" title="三、数据库表设计"></a>三、数据库表设计</h3><p><strong>标签的分类（要有哪些标签、怎么把标签进行分类）</strong> <strong>新增标签表（分类表）</strong> 建议用标签，不要用分类，更灵活。 性别：男、女 方向：Java、C++、Go、前端 正在学：Spring 目标：考研、春招、秋招、社招、考公、竞赛（蓝桥杯）、转行、跳槽 段位：初级、中级、高级、王者 身份：小学、初中、高中、大一、大二、大三、大四、学生、待业、已就业、研一、研二、研三 状态：乐观、有点丧、一般、单身、已婚、有对象 <strong>【用户自己定义标签】？</strong> 字段： id int 主键 标签名 varchar 非空（必须唯一，唯一索引） 上传标签的用户 userId int（如果要根据 userId 查已上传标签的话，最好加上，普通索引） 父标签 id ，parentId，int（分类） 是否为父标签 isParent, tinyint（0 不是父标签、1 - 父标签） 创建时间 createTime，datetime 更新时间 updateTime，datetime 是否删除 isDelete， tinyint（0、1）</p><p>怎么查询所有标签，并且把标签分好组？按父标签 id 分组，能实现 √ 根据父标签查询子标签？根据 id 查询，能实现 √</p><p>SQL 语言分类： DDL define 建表、操作表 DML manage 更新删除数据，影响实际表里的内容 DCL control 控制，权限 DQL query 查询，select <a href="https://www.cnblogs.com/fan-yuan/p/7879353.html">https://www.cnblogs.com/fan-yuan/p/7879353.html</a></p><p><strong>修改用户表</strong> 用户有哪些标签？ <strong>根据自己的实际需求来！！！</strong> 此处选择第一种</p><ol><li>直接在用户表补充 tags 字段，<strong>[‘Java’, ‘男’] 存 json 字符串</strong> 优点：查询方便、不用新建关联表，标签是用户的固有属性（除了该系统、其他系统可能要用到，标签是用户的固有属性）节省开发成本 <strong>查询用户列表，查关系表拿到这 100 个用户有的所有标签 id，再根据标签 id 去查标签表。</strong> 哪怕性能低，可以用缓存。 缺点：用户表多一列，会有点</li><li>加一个关联表，记录用户和标签的关系 关联表的应用场景：查询灵活，可以正查反查 缺点：要多建一个表、多维护一个表 重点：企业大项目开发中尽量减少关联查询，很影响扩展性，而且会影响查询性能</li></ol><h4 id="1-新建标签表"><a href="#1-新建标签表" class="headerlink" title="1.新建标签表"></a>1.新建标签表</h4><p>ddl语句如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- auto-generated definition</span><span class="token keyword">create</span> <span class="token keyword">table</span> tag<span class="token punctuation">(</span>  id           <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">'id'</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  tagName      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>                       <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'标签名称'</span><span class="token punctuation">,</span>  userId        <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>  parentId     <span class="token keyword">bigint</span>                             <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'父标签id'</span><span class="token punctuation">,</span>  isParent     <span class="token keyword">tinyint</span>                            <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'0-不是父标签，1-是父标签'</span><span class="token punctuation">,</span>  createTime   <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  updateTime   <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  isDelete     <span class="token keyword">tinyint</span>  <span class="token keyword">default</span> <span class="token number">0</span>                 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'是否删除'</span><span class="token punctuation">)</span><span class="token keyword">comment</span> <span class="token string">'标签表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-更新用户表"><a href="#2-更新用户表" class="headerlink" title="2.更新用户表"></a>2.更新用户表</h4><p>在原先的user表的ddl中添加下面这句并运行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token keyword">add</span> <span class="token keyword">COLUMN</span> tags <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'标签列表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后为<strong>标签名</strong>和<strong>上传标签的用户</strong>添加索引，其中标签名是唯一索引，这是为了以后利用标签名搜索 <img src="http://img-md-js.linjsblog.top/img/202301012358367.png"><img src="http://img-md-js.linjsblog.top/img/202301012359648.png"> 最后把增加字段的语句和标签表的语句写入到create_table.sql中，到此数据库表设计完成</p><h3 id="四、开发后端接口"><a href="#四、开发后端接口" class="headerlink" title="四、开发后端接口"></a>四、开发后端接口</h3><h4 id="1-搜索标签"><a href="#1-搜索标签" class="headerlink" title="1.搜索标签"></a>1.搜索标签</h4><ol><li>允许用户传入多个标签，多个标签都存在才搜索出来 and。like ‘%Java%’ and like ‘%C++%’。</li><li>允许用户传入多个标签，有任何一个标签存在就能搜索出来 or。like ‘%Java%’ or like ‘%C++%’</li></ol><p><strong>两种方式：</strong></p><ol><li>SQL 查询（实现简单，可以通过拆分查询进一步优化）</li><li>内存查询（灵活，可以通过并发进一步优化）</li></ol><ul><li>如果参数可以分析，根据用户的参数去选择查询方式，比如标签数</li><li>如果参数不可分析，并且数据库连接足够、内存空间足够，可以并发同时查询，谁先返回用谁。</li><li>还可以 SQL 查询与内存计算相结合，比如先用 SQL 过滤掉部分 tag</li></ul><p>建议通过实际测试来分析哪种查询比较快，数据量大的时候验证效果更明显！</p><h4 id="2-解析-JSON-字符串"><a href="#2-解析-JSON-字符串" class="headerlink" title="2.解析 JSON 字符串"></a>2.解析 JSON 字符串</h4><p>序列化：java对象转成 json 反序列化：把 json 转为 java 对象 java  json 序列化库有很多：</p><ol><li><strong>gson</strong>（google 的）</li><li>fastjson alibaba（ali 出品，快，但是漏洞太多）</li><li>jackson</li><li>kryo</li></ol><h3 id="五、初始化后端项目"><a href="#五、初始化后端项目" class="headerlink" title="五、初始化后端项目"></a>五、初始化后端项目</h3><p><strong>查询带有标签用户的数量时，利用到user表，所以在用户中心项目编写代码</strong> <strong>用户中心来集中提供用户的检索、操作、注册、登录、鉴权</strong></p><h4 id="1-删除target目录"><a href="#1-删除target目录" class="headerlink" title="1.删除target目录"></a>1.删除target目录</h4><h4 id="2-在UserServiceImpl中创建searchUsersByTags方法，并在上面添加-Override，把此方法写入到UserService中"><a href="#2-在UserServiceImpl中创建searchUsersByTags方法，并在上面添加-Override，把此方法写入到UserService中" class="headerlink" title="2.在UserServiceImpl中创建searchUsersByTags方法，并在上面添加@Override，把此方法写入到UserService中"></a>2.在UserServiceImpl中创建searchUsersByTags方法，并在上面添加@Override，把此方法写入到UserService中</h4><p>下图为具体的searchUsersByTags</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据标签搜索用户** @param tagNameList 用户拥有的标签* @return*/</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">searchUsersByTags</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagNameList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//拼接 and 查询</span>    <span class="token comment">//like '%Java%' and like '%Python%'</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> tagName <span class="token operator">:</span> tagNameList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        queryWrapper<span class="token operator">=</span>queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">,</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getSafetyUser</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-对searchUsersByTags方法进行测试"><a href="#3-对searchUsersByTags方法进行测试" class="headerlink" title="3.对searchUsersByTags方法进行测试"></a>3.对searchUsersByTags方法进行测试</h4><p>进入到UserServiceTest中，编写方法去测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchUsersByTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagNameList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">searchUsersByTags</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时的userMapper.xml，脱敏方法以及user类中并未及时更新，缺少了tags字段，所以现在进行添加 <img src="http://img-md-js.linjsblog.top/img/202301012359153.png" alt="image.png"><img src="http://img-md-js.linjsblog.top/img/202301012359518.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301012359349.png" alt="image.png"> 在表中插入tags的数据 <img src="http://img-md-js.linjsblog.top/img/202301012359861.png" alt="image.png"> 为了便于观察在配置文件中配置sql日志 <img src="http://img-md-js.linjsblog.top/img/202301012359330.png" alt="image.png"> 最后进行debug，打上断点 <img src="http://img-md-js.linjsblog.top/img/202301012359527.png" alt="image.png"> 结果如下 <img src="http://img-md-js.linjsblog.top/img/202301020000094.png" alt="image.png"> 日志也生成了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">==</span><span class="token operator">></span>  <span class="token class-name">Preparing</span><span class="token operator">:</span> <span class="token class-name">SELECT</span> id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>userAccount<span class="token punctuation">,</span>avatarUrl<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>userPassword<span class="token punctuation">,</span>phone<span class="token punctuation">,</span>email<span class="token punctuation">,</span>userStatus<span class="token punctuation">,</span>createTime<span class="token punctuation">,</span>updateTime<span class="token punctuation">,</span>isDelete<span class="token punctuation">,</span>userRole<span class="token punctuation">,</span>planetCode<span class="token punctuation">,</span>tags <span class="token constant">FROM</span> user <span class="token class-name">WHERE</span> isDelete<span class="token operator">=</span><span class="token number">0</span> <span class="token constant">AND</span> <span class="token punctuation">(</span>tags <span class="token constant">LIKE</span> <span class="token operator">?</span> <span class="token constant">AND</span> tags <span class="token constant">LIKE</span> <span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> <span class="token class-name">Parameters</span><span class="token operator">:</span> <span class="token operator">%</span>java<span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>python<span class="token operator">%</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token operator">=</span>    <span class="token class-name">Columns</span><span class="token operator">:</span> id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> userAccount<span class="token punctuation">,</span> avatarUrl<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> userPassword<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> userStatus<span class="token punctuation">,</span> createTime<span class="token punctuation">,</span> updateTime<span class="token punctuation">,</span> isDelete<span class="token punctuation">,</span> userRole<span class="token punctuation">,</span> planetCode<span class="token punctuation">,</span> tags<span class="token operator">&lt;=</span><span class="token operator">=</span>        <span class="token class-name">Row</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> yupi<span class="token punctuation">,</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>img1<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>it<span class="token operator">/</span>u<span class="token operator">=</span><span class="token number">1645832847</span><span class="token punctuation">,</span><span class="token number">2375824523</span><span class="token operator">&amp;</span>fm<span class="token operator">=</span><span class="token number">253</span><span class="token operator">&amp;</span>fmt<span class="token operator">=</span>auto<span class="token operator">&amp;</span>app<span class="token operator">=</span><span class="token number">138</span><span class="token operator">&amp;</span>f<span class="token operator">=</span><span class="token constant">JPEG</span><span class="token operator">?</span>w<span class="token operator">=</span><span class="token number">480</span><span class="token operator">&amp;</span>h<span class="token operator">=</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">12345678</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">23</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"c++"</span><span class="token punctuation">,</span><span class="token string">"python"</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token operator">=</span>      <span class="token class-name">Total</span><span class="token operator">:</span> <span class="token number">1</span><span class="token class-name">Closing</span> non transactional <span class="token class-name">SqlSession</span> <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span></span>DefaultSqlSession</span><span class="token annotation punctuation">@351e89fc</span><span class="token punctuation">]</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">58.143</span>  <span class="token constant">INFO</span> <span class="token number">5196</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ionShutdownHook<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span>HikariDataSource</span>       <span class="token operator">:</span> <span class="token class-name">HikariPool</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token class-name">Shutdown</span> initiated<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">58.172</span>  <span class="token constant">INFO</span> <span class="token number">5196</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ionShutdownHook<span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span>HikariDataSource</span>       <span class="token operator">:</span> <span class="token class-name">HikariPool</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token class-name">Shutdown</span> <span class="token class-name"><span class="token namespace">completed<span class="token punctuation">.</span></span>Disconnected</span> from the target <span class="token constant">VM</span><span class="token punctuation">,</span> address<span class="token operator">:</span> '<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6638</span>'<span class="token punctuation">,</span> transport<span class="token operator">:</span> <span class="token char">'socket'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意踩坑点：由于是用户中心的代码，因为上线的原因，配置文件中的数据库是云服务器，现在测试的数据库是本地的，所以要根据自己的情况去修改配置，否则就会查询不出</p><h4 id="4-第一种方法完成，现在进行第二种方法，在searchUsersByTags中修改代码"><a href="#4-第一种方法完成，现在进行第二种方法，在searchUsersByTags中修改代码" class="headerlink" title="4.第一种方法完成，现在进行第二种方法，在searchUsersByTags中修改代码"></a>4.第一种方法完成，现在进行第二种方法，在searchUsersByTags中修改代码</h4><p>首先要引入gson依赖（反序列化）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>gson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.8</span><span class="token number">.9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">searchUsersByTags</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//        //拼接 and 查询</span><span class="token comment">//        //like '%Java%' and like '%Python%'</span><span class="token comment">//        QueryWrapper&lt;User> queryWrapper = new QueryWrapper&lt;>();</span><span class="token comment">//        for(String tagName : tagNameList)&#123;</span><span class="token comment">//            queryWrapper=queryWrapper.like("tags",tagName);</span><span class="token comment">//        &#125;</span><span class="token comment">//        List&lt;User> userList = userMapper.selectList(queryWrapper);</span><span class="token comment">//        return userList.stream().map(this::getSafetyUser).collect(Collectors.toList());</span>        <span class="token comment">//1.先查询所有用户</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.在内存中判断是否包含要求的标签</span>        <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> tagsStr <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>tagsStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tempTagNameSet <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>tagsStr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tagName <span class="token operator">:</span> tagNameList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tempTagNameSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getSafetyUser</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依照第一种方法进行测试，结果如下 <img src="http://img-md-js.linjsblog.top/img/202301020026393.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301020000403.png" alt="image.png"></p><h4 id="5-耗时的比较"><a href="#5-耗时的比较" class="headerlink" title="5.耗时的比较"></a>5.耗时的比较</h4><p>继续修改searchUsersByTags的代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">searchUsersByTags</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>tagNameList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//拼接 and 查询</span>        <span class="token comment">//like '%Java%' and like '%Python%'</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tagName <span class="token operator">:</span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queryWrapper <span class="token operator">=</span> queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"tags"</span><span class="token punctuation">,</span> tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        return userList.stream().map(this::getSafetyUser).collect(Collectors.toList());</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sql query time ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.先查询所有用户</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.在内存中判断是否包含要求的标签</span>        userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> tagsStr <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>tagsStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tempTagNameSet <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>tagsStr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tagName <span class="token operator">:</span> tagNameList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tempTagNameSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getSafetyUser</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"menory query time ="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行测试（这边就进行了两次）： <img src="http://img-md-js.linjsblog.top/img/202301020000449.png" alt="image.png"> <img src="http://img-md-js.linjsblog.top/img/202301020000638.png" alt="image.png"> 结论：我这边都是内存快，鱼皮是SQL的快，除去第一次链接数据库的时间，也还是内存快，可能和数据的数量有关，测试并不是很准确，尽量要在实际的应用场景中观察。</p>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(三) 虚拟机栈</title>
      <link href="/2022/09/21/%E4%B8%89-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/"/>
      <url>/2022/09/21/%E4%B8%89-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="三-虚拟机栈"><a href="#三-虚拟机栈" class="headerlink" title="(三) 虚拟机栈"></a>(三) 虚拟机栈</h1><h2 id="1-虚拟机栈概述"><a href="#1-虚拟机栈概述" class="headerlink" title="1. 虚拟机栈概述"></a>1. 虚拟机栈概述</h2><h3 id="1-1-虚拟机栈出现的背景"><a href="#1-1-虚拟机栈出现的背景" class="headerlink" title="1.1. 虚拟机栈出现的背景"></a>1.1. 虚拟机栈出现的背景</h3><p>由于跨平台性的设计，Java 的指令都是根据栈来设计的。不同平台 CPU 架构不同，所以不能设计为基于寄存器的。</p><p>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</p><h3 id="1-2-初步印象"><a href="#1-2-初步印象" class="headerlink" title="1.2. 初步印象"></a>1.2. 初步印象</h3><p>有不少 Java 开发人员一提到 Java 内存结构，就会非常粗粒度地将 JVM 中的内存区理解为仅有 Java 堆（heap）和 Java 栈（stack）？为什么？</p><h3 id="1-3-内存中的栈与堆"><a href="#1-3-内存中的栈与堆" class="headerlink" title="1.3 内存中的栈与堆"></a>1.3 内存中的栈与堆</h3><p>栈是运行时的单位，而堆是存储的单位</p><ul><li>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。<ul><li>堆解决的是数据存储的问题，即数据怎么放，放哪里</li></ul></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208262037956.png" alt="image-20200705163928652"></p><h3 id="1-4-虚拟机栈基本内容"><a href="#1-4-虚拟机栈基本内容" class="headerlink" title="1.4. 虚拟机栈基本内容"></a>1.4. 虚拟机栈基本内容</h3><h4 id="Java虚拟机栈是什么"><a href="#Java虚拟机栈是什么" class="headerlink" title="Java虚拟机栈是什么"></a>Java虚拟机栈是什么</h4><p>Java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用，是线程私有的。</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>生命周期和线程一致</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>主管 Java 程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</p><h4 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h4><p>栈是一种快速有效的分配存储方式，访问速度仅次于罹序计数器。</p><p>JVM 直接对 Java 栈的操作只有两个：</p><ul><li>每个方法执行，伴随着进栈（入栈、压栈）</li><li>执行结束后的出栈工作</li></ul><p>对于栈来说不存在垃圾回收问题（栈存在溢出的情况）</p><p><img src="http://img-md-js.linjsblog.top/img/202208262044351.png" alt="image-20200705165025382"></p><h4 id="面试题：开发中遇到哪些异常？"><a href="#面试题：开发中遇到哪些异常？" class="headerlink" title="面试题：开发中遇到哪些异常？"></a>面试题：开发中遇到哪些异常？</h4><p><strong>栈中可能出现的异常</strong></p><p>Java 虚拟机规范允许Java 栈的大小是动态的或者是固定不变的。</p><ul><li><p>如果采用固定大小的 Java 虚拟机栈，那每一个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个StackOverflowError 异常。</p></li><li><p>如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个 OutOfMemoryError 异常。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//抛出异常：Exception in thread"main"java.lang.StackoverflowError</span><span class="token comment">//程序不断的进行递归调用，而且没有退出条件，就会导致不断地进行压栈。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置栈内存大小</strong></p><p>我们可以使用参数 -Xss 选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackDeepTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"deep of calling="</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-栈的存储单位"><a href="#2-栈的存储单位" class="headerlink" title="2. 栈的存储单位"></a>2. 栈的存储单位</h2><h3 id="2-1-栈中存储什么？"><a href="#2-1-栈中存储什么？" class="headerlink" title="2.1. 栈中存储什么？"></a>2.1. 栈中存储什么？</h3><p>每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在。</p><p>在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）。</p><p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</p><h3 id="2-2-栈运行原理"><a href="#2-2-栈运行原理" class="headerlink" title="2.2. 栈运行原理"></a>2.2. 栈运行原理</h3><p>JVM 直接对 Java 栈的操作只有两个，就是对栈帧的压栈和出栈，遵循“先进后出”&#x2F;“后进先出”原则。</p><p>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧（Current Frame），与当前栈帧相对应的方法就是当前方法（Current Method），定义这个方法的类就是当前类（Current Class）。</p><p>执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</p><p>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。</p><p><img src="http://img-md-js.linjsblog.top/img/202208262121372.png" alt="image-20200705203142545"></p><p>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧。</p><p>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。</p><p>Java 方法有两种返回函数的方式，一种是正常的函数返回，使用 return 指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentFrameTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println（<span class="token string">"当前栈帧对应的方法->methodA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        system<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println（<span class="token string">"当前栈帧对应的方法->methodA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span>println（<span class="token string">"当前栈帧对应的方法->methodB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-栈帧的内部结构"><a href="#2-3-栈帧的内部结构" class="headerlink" title="2.3. 栈帧的内部结构"></a>2.3. 栈帧的内部结构</h3><p>每个栈帧中存储着：</p><ul><li>局部变量表（Local Variables）</li><li>操作数栈（operand Stack）（或表达式栈）</li><li>动态链接（Dynamic Linking）（或指向运行时常量池的方法引用）</li><li>方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）</li><li>一些附加信息</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208262121300.png" alt="image-20200705204836977"></p><p>并行每个线程下的栈都是私有的，因此每个线程都有自己各自的栈，并且每个栈里面都有很多栈帧，栈帧的大小主要由局部变量表 和 操作数栈决定的</p><p><img src="http://img-md-js.linjsblog.top/img/202208262121323.png" alt="image-20200705205443993"></p><h2 id="3-局部变量表-Local-Variables"><a href="#3-局部变量表-Local-Variables" class="headerlink" title="3. 局部变量表(Local Variables)"></a>3. 局部变量表(Local Variables)</h2><p>局部变量表也被称之为局部变量数组或本地变量表</p><ul><li><p>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型包括各类基本数据类型、对象引用（reference），以及 returnAddress 类型。</p></li><li><p>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题</p></li><li><p>局部变量表所需的容量大小是在编译期确定下来的，并保存在方法的 Code 属性的 maximum local variables 数据项中。在方法运行期间是不会改变局部变量表的大小的。</p></li><li><p>方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</p></li><li><p>局部变量表中的变量只在当前方法调用中有效。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</p></li></ul><h3 id="3-1-关于-Slot-的理解"><a href="#3-1-关于-Slot-的理解" class="headerlink" title="3.1. 关于 Slot 的理解"></a>3.1. 关于 Slot 的理解</h3><ul><li><p>局部变量表，最基本的存储单元是 Slot（变量槽）</p></li><li><p>参数值的存放总是在局部变量数组的 index0 开始，到数组长度-1 的索引结束。</p></li><li><p>局部变量表中存放编译期可知的各种基本数据类型（8 种），引用类型（reference），returnAddress 类型的变量。</p></li><li><p>在局部变量表里，32 位以内的类型只占用一个 slot（包括 returnAddress 类型），64 位的类型（long 和 double）占用两个 slot。</p></li><li><p>byte、short、char 在存储前被转换为 int，boolean 也被转换为 int，0 表示 false，非 0 表示 true。</p></li><li><p>JVM 会为局部变量表中的每一个 Slot 都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值</p></li><li><p>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个 slot 上</p></li><li><p>如果需要访问局部变量表中一个 64bit 的局部变量值时，只需要使用前一个索引即可。（比如：访问 long 或 double 类型变量）</p></li><li><p>如果当前帧是由构造方法或者实例方法创建的，那么该对象引用 this 将会存放在 index 为 0 的 slot 处，其余的参数按照参数表顺序继续排列。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208262130533.png" alt="image-20200705212454445"></p><h3 id="3-2-Slot-的重复利用"><a href="#3-2-Slot-的重复利用" class="headerlink" title="3.2. Slot 的重复利用"></a>3.2. Slot 的重复利用</h3><p>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlotTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localVarl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localVar2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//此时的就会复用a的槽位</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-静态变量与局部变量的对比"><a href="#3-3-静态变量与局部变量的对比" class="headerlink" title="3.3. 静态变量与局部变量的对比"></a>3.3. 静态变量与局部变量的对比</h3><p>参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配。</p><p>我们知道类变量表有两次初始化的机会，第一次是在“准备阶段”，执行系统初始化，对类变量设置零值，另一次则是在“初始化”阶段，赋予程序员在代码中定义的初始值。</p><p>和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样的代码是错误的，没有赋值不能够使用。</p><h3 id="3-4-补充说明"><a href="#3-4-补充说明" class="headerlink" title="3.4. 补充说明"></a>3.4. 补充说明</h3><p>在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。</p><p>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。</p><h2 id="4-操作数栈"><a href="#4-操作数栈" class="headerlink" title="4. 操作数栈"></a>4. 操作数栈</h2><p>每一个独立的栈帧除了包含局部变量表以外，还包含一个后进先出（Last-In-First-Out）的 操作数栈，也可以称之为表达式栈（Expression Stack）</p><p>操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈（push）和 出栈（pop）</p><ul><li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈</li><li>比如：执行复制、交换、求和等操作</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202209061929800.png" alt="image-20200706090618332"></p><p>代码举例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字节码指令信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">public void testAddOperation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code:    <span class="token number">0</span>: bipush <span class="token number">15</span>    <span class="token number">2</span>: istore_1    <span class="token number">3</span>: bipush <span class="token number">8</span>    <span class="token number">5</span>: istore_2    <span class="token number">6</span>:iload_1    <span class="token number">7</span>:iload_2    <span class="token number">8</span>:iadd    <span class="token number">9</span>:istore_3    <span class="token number">10</span>:return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。</p><p>操作数栈就是 JVM 执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的。</p><p>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的 Code 属性中，为 max_stack 的值。</p><p>栈中的任何一个元素都是可以任意的 Java 数据类型</p><ul><li>32bit 的类型占用一个栈单位深度</li><li>64bit 的类型占用两个栈单位深度</li></ul><p>操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问</p><p>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新 PC 寄存器中下一条需要执行的字节码指令。</p><p>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</p><p>另外，我们说 Java 虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈。</p><h2 id="5-代码追踪"><a href="#5-代码追踪" class="headerlink" title="5. 代码追踪"></a>5. 代码追踪</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 javap 命令反编译 class 文件： <code>javap -v 类名.class</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddoperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Code</span><span class="token operator">:</span>    <span class="token number">0</span><span class="token operator">:</span> bipush <span class="token number">15</span>     <span class="token number">2</span><span class="token operator">:</span> istore_1     <span class="token number">3</span><span class="token operator">:</span> bipush <span class="token number">8</span>    <span class="token number">5</span><span class="token operator">:</span> istore_2    <span class="token number">6</span><span class="token operator">:</span> iload_1    <span class="token number">7</span><span class="token operator">:</span> iload_2    <span class="token number">8</span><span class="token operator">:</span> iadd    <span class="token number">9</span><span class="token operator">:</span> istore_3    <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202209061948284.png" alt="image-20200706093131621"></p><p><img src="http://img-md-js.linjsblog.top/img/202209061948740.png" alt="image-20200706093251302"></p><p><img src="http://img-md-js.linjsblog.top/img/202209061948899.png" alt="image-20200706093646406"></p><p><img src="http://img-md-js.linjsblog.top/img/202209061951539.png" alt="image-20200706093751711"></p><p><img src="http://img-md-js.linjsblog.top/img/202209061948646.png" alt="image-20200706093859191"></p><p><img src="http://img-md-js.linjsblog.top/img/202209061948648.png" alt="image-20200706093921573"></p><p><img src="http://img-md-js.linjsblog.top/img/202209061948983.png" alt="image-20200706094046782"></p><p><img src="http://img-md-js.linjsblog.top/img/202209061948651.png" alt="image-20200706094109629"></p><p>程序员面试过程中，常见的 i++和++i 的区别，放到字节码篇章时再介绍。</p><h2 id="6-栈顶缓存技术（Top-Of-Stack-Cashing）技术"><a href="#6-栈顶缓存技术（Top-Of-Stack-Cashing）技术" class="headerlink" title="6. 栈顶缓存技术（Top Of Stack Cashing）技术"></a>6. 栈顶缓存技术（Top Of Stack Cashing）技术</h2><p>前面提过，基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读&#x2F;写次数。</p><p>由于操作数是存储在内存中的，因此频繁地执行内存读&#x2F;写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM 的设计者们提出了栈顶缓存（Tos，Top-of-Stack Cashing）技术，将栈顶元素全部缓存在物理 CPU 的寄存器中，以此降低对内存的读&#x2F;写次数，提升执行引擎的执行效率。</p><h2 id="7-动态链接（Dynamic-Linking）"><a href="#7-动态链接（Dynamic-Linking）" class="headerlink" title="7. 动态链接（Dynamic Linking）"></a>7. 动态链接（Dynamic Linking）</h2><p>动态链接、方法返回地址、附加信息 ： 有些地方被称为帧数据区</p><p>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接（Dynamic Linking）。比如：invokedynamic 指令</p><p>在 Java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在 class 文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。</p><p><img src="http://img-md-js.linjsblog.top/img/202209081611853.png" alt="image-20200706101251847"></p><p>为什么需要运行时常量池呢？</p><p>常量池的作用：就是为了提供一些符号和常量，便于指令的识别</p><h2 id="8-方法的调用：解析与分配"><a href="#8-方法的调用：解析与分配" class="headerlink" title="8. 方法的调用：解析与分配"></a>8. 方法的调用：解析与分配</h2><p>在 JVM 中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关</p><h3 id="8-1-静态链接"><a href="#8-1-静态链接" class="headerlink" title="8.1. 静态链接"></a>8.1. 静态链接</h3><p>当一个字节码文件被装载进 JVM 内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时，这种情况下降调用方法的符号引用转换为直接引用的过程称之为静态链接</p><h3 id="8-2-动态链接"><a href="#8-2-动态链接" class="headerlink" title="8.2. 动态链接"></a>8.2. 动态链接</h3><p>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期将调用的方法的符号转换为直接引用，由于这种引用转换过程具备动态性，因此也被称之为动态链接。</p><p>静态链接和动态链接不是名词，而是动词，这是理解的关键。</p><hr><p>对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。</p><h3 id="8-3-早期绑定"><a href="#8-3-早期绑定" class="headerlink" title="8.3. 早期绑定"></a>8.3. 早期绑定</h3><p>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</p><h3 id="8-4-晚期绑定"><a href="#8-4-晚期绑定" class="headerlink" title="8.4. 晚期绑定"></a>8.4. 晚期绑定</h3><p>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。</p><hr><p>随着高级语言的横空出世，类似于 Java 一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然这一类的编程语言具备多态特悄，那么自然也就具备早期绑定和晚期绑定两种绑定方式。</p><p>Java 中任何一个普通的方法其实都具备虚函数的特征，它们相当于 C++语言中的虚函数（C++中则需要使用关键字 virtual 来显式定义）。如果在 Java 程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字 final 来标记这个方法。</p><h3 id="8-5-虚方法和非虚方法"><a href="#8-5-虚方法和非虚方法" class="headerlink" title="8.5 虚方法和非虚方法"></a>8.5 虚方法和非虚方法</h3><p>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法。</p><p>静态方法、私有方法、final 方法、实例构造器、父类方法都是非虚方法。其他方法称为虚方法。</p><p>在类加载的解析阶段就可以进行解析，如下是非虚方法举例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father "</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VirtualMethodTest</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"coder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Father fa=new Father();</span>            <span class="token comment">//fa.show("atguigu.com");</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虚拟机中提供了以下几条方法调用指令：</p><h4 id="普通调用指令："><a href="#普通调用指令：" class="headerlink" title="普通调用指令："></a>普通调用指令：</h4><ul><li>invokestatic：调用静态方法，解析阶段确定唯一方法版本</li><li>invokespecial：调用方法、私有及父类方法，解析阶段确定唯一方法版本</li><li>invokevirtual：调用所有虚方法</li><li>invokeinterface：调用接口方法</li></ul><h4 id="动态调用指令："><a href="#动态调用指令：" class="headerlink" title="动态调用指令："></a>动态调用指令：</h4><ul><li>invokedynamic：动态解析出需要调用的方法，然后执行</li></ul><p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而 invokedynamic 指令则支持由用户确定方法版本。其中 invokestatic 指令和 invokespecial 指令调用的方法称为非虚方法，其余的（fina1 修饰的除外）称为虚方法。</p><p><strong>关于 invokednamic 指令</strong></p><ul><li><p>JVM 字节码指令集一直比较稳定，一直到 Java7 中才增加了一个 invokedynamic 指令，这是Java 为了实现「动态类型语言」支持而做的一种改进。</p></li><li><p>但是在 Java7 中并没有提供直接生成 invokedynamic 指令的方法，需要借助 ASM 这种底层字节码工具来产生 invokedynamic 指令。直到 Java8 的 Lambda 表达式的出现，invokedynamic 指令的生成，在 Java 中才有了直接的生成方式。</p></li><li><p>Java7 中增加的动态语言类型支持的本质是对 Java 虚拟机规范的修改，而不是对 Java 语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在 Java 平台的动态语言的编译器。</p></li></ul><h4 id="动态类型语言和静态类型语言"><a href="#动态类型语言和静态类型语言" class="headerlink" title="动态类型语言和静态类型语言"></a>动态类型语言和静态类型语言</h4><p>动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言。</p><p>说的再直白一点就是，静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征。</p><h3 id="8-6-方法重写的本质"><a href="#8-6-方法重写的本质" class="headerlink" title="8.6. 方法重写的本质"></a>8.6. 方法重写的本质</h3><p><strong>Java 语言中方法重写的本质：</strong></p><ol><li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作 C。</li><li>如果在类型 C 中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回 java.lang.IllegalAccessError 异常。</li><li>否则，按照继承关系从下往上依次对 C 的各个父类进行第 2 步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出 java.1ang.AbstractMethodsrror 异常。</li></ol><p><strong>IllegalAccessError 介绍</strong></p><p>程序试图访问或修改一个属性或调用一个方法，这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。</p><h3 id="8-7-方法的调用：虚方法表"><a href="#8-7-方法的调用：虚方法表" class="headerlink" title="8.7. 方法的调用：虚方法表"></a>8.7. 方法的调用：虚方法表</h3><p>在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，为了提高性能，JVM 采用在类的方法区建立一个虚方法表 （virtual method table）（非虚方法不会出现在表中）来实现。使用索引表来代替查找。</p><p>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</p><p>虚方法表是什么时候被创建的呢？</p><p>虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM 会把该类的方法表也初始化完毕。</p><p>举例 1：</p><p><img src="http://img-md-js.linjsblog.top/img/202209212240899.png" alt="image-20200706144954070"></p><p>举例 2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Friendly</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sayGoodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Dog"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Friendly</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayGoodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CockerSpaniel</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Friendly</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayGoodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202209212240195.png" alt="image-20210509203351535"></p><h2 id="9-方法返回地址（return-address）"><a href="#9-方法返回地址（return-address）" class="headerlink" title="9. 方法返回地址（return address）"></a>9. 方法返回地址（return address）</h2><p>存放调用该方法的 pc 寄存器的值。一个方法的结束，有两种方式：</p><ul><li>正常执行完成</li><li>出现未处理的异常，非正常退出</li></ul><p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，调用者的 pc 计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</p><p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p><ol><li>执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称正常完成出口；<ul><li>一个方法在正常调用完成之后，究竟需要使用哪一个返回指令，还需要根据方法返回值的实际数据类型而定。</li><li>在字节码指令中，返回指令包含 ireturn（当返回值是 boolean，byte，char，short 和 int 类型时使用），lreturn（Long 类型），freturn（Float 类型），dreturn（Double 类型），areturn。另外还有一个 return 指令声明为 void 的方法，实例初始化方法，类和接口的初始化方法使用。</li></ul></li><li>在方法执行过程中遇到异常（Exception），并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，简称异常完成出口。</li></ol><p>方法执行过程中，抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception table:from to target <span class="token builtin class-name">type</span><span class="token number">4</span>    <span class="token number">16</span>   <span class="token number">19</span>   any<span class="token number">19</span>   <span class="token number">21</span>   <span class="token number">19</span>   any<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置 PC 寄存器值等，让调用者方法继续执行下去。</p><p>正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。</p><h2 id="10-一些附加信息"><a href="#10-一些附加信息" class="headerlink" title="10. 一些附加信息"></a>10. 一些附加信息</h2><p>栈帧中还允许携带与 Java 虚拟机实现相关的一些附加信息。例如：对程序调试提供支持的信息。</p><h2 id="11-栈的相关面试题"><a href="#11-栈的相关面试题" class="headerlink" title="11. 栈的相关面试题"></a>11. 栈的相关面试题</h2><ul><li>举例栈溢出的情况？（StackOverflowError）<ul><li>通过 -Xss 设置栈的大小</li></ul></li><li>调整栈大小，就能保证不出现溢出么？<ul><li>不能保证不溢出</li></ul></li><li>分配的栈内存越大越好么？<ul><li>不是，一定时间内降低了 OOM 概率，但是会挤占其它的线程空间，因为整个空间是有限的。</li></ul></li><li>垃圾回收是否涉及到虚拟机栈？<ul><li>不会</li></ul></li><li>方法中定义的局部变量是否线程安全？<ul><li>具体问题具体分析。如果对象是在内部产生，并在内部消亡，没有返回到外部，那么它就是线程安全的，反之则是线程不安全的。</li></ul></li></ul><p>运行时数据区</p><p>是否存在 Error</p><p>是否存在 GC</p><p>程序计数器</p><p>否</p><p>否</p><p>虚拟机栈</p><p>是（SOE）</p><p>否</p><p>本地方法栈</p><p>是</p><p>否</p><p>方法区</p><p>是（OOM）</p><p>是</p><p>堆</p><p>是</p><p>是</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解释器模式</title>
      <link href="/2022/08/29/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/29/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h1><h2 id="1、四则运算问题"><a href="#1、四则运算问题" class="headerlink" title="1、四则运算问题"></a>1、四则运算问题</h2><p>通过解释器模式来实现四则运算，如计算<code>a + b - c</code>的值，具体要求</p><ul><li><p>1）先输入表达式的形式，比如<code>a + b + c - d + e</code>，要求表达式的字母不能重复</p></li><li><p>2）在分别输入<code>a, b, c, d, e</code>的值</p></li><li><p>3）最后求出结果：如图</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208291446848.png" alt="img"></p><p><strong>传统方案解决四则运算问题分析</strong></p><ul><li><p>1）编写一个方法，接收表达式的形式，然后根据用户输入的数值进行解析，得到结果</p></li><li><p>2）问题分析：如果加入新的运算符，比如<code>* / (</code>等等，不利于扩展，另外让一个方法来解析会造成程序结构混乱，不够清晰</p></li><li><p>3）解决方案：可以考虑使用解释器模式，即：表达式 &#x3D;&gt; 解释器（可以有多种） &#x3D;&gt; 结果</p></li></ul><h2 id="2、解释器模式的基本介绍"><a href="#2、解释器模式的基本介绍" class="headerlink" title="2、解释器模式的基本介绍"></a>2、解释器模式的基本介绍</h2><ul><li><p>1）在编译原理中，一个<strong>算术表达式</strong>通过<strong>词法分析器</strong>形成<strong>词法单元</strong>，而后这些<strong>词法单元</strong>再通过<strong>语法分析器</strong>构建<strong>语法分析树</strong>，最终形成一颗抽象的语法分析树。这里的词法分析器和语法分析器都可以看做是解释器</p></li><li><p>2）解释器模式（Interpreter Pattern）：是指给定一个语言（表达式），定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子（表达式）</p></li><li><p>3）应用场景</p></li><li><ul><li>应用可以将一个需要解释执行的语言中的句子表示为一个抽象语法树</li></ul></li><li><ul><li>一些重复出现的问题可以用一种简单的语言来表达</li></ul></li><li><ul><li>一个简单语法需要解释的场景</li></ul></li><li><p>4）这样的例子还有，比如编译器、运算表达式计算、正则表达式、机器人等</p></li></ul><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208291448187.png" alt="img"></p><p><strong>解释器模式的角色及职责</strong></p><ul><li><p><code>Context</code>环境角色：含有解释器之外的全局信息</p></li><li><p><code>AbstractExpression</code>抽象表达式：声明一个抽象的解释操作，该方法为抽象语法树中所有节点共享</p></li><li><p><code>TerminalExpression</code>终结符表达式：实现与文法中终结符相关的解释操作</p></li><li><p><code>NonTerminalExpression</code>非终结符表达式：实现与文法中非终结符相关的解释操作</p></li></ul><h2 id="3、解释器模式解决四则运算问题"><a href="#3、解释器模式解决四则运算问题" class="headerlink" title="3、解释器模式解决四则运算问题"></a>3、解释器模式解决四则运算问题</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208291449468.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202208291449762.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 抽象表达式类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Expression</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * a + b - c     * 解释公式和数值，key就是公式（表达式）参数[a, b, c]，value就是具体值     * HashMap&#123;a=10, b=20&#125;     *     * @param var     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 抽象运算符号解释器 * 这里每个运算符号，都只和自己左右两个数字有关系， * 但左右两个数字有可能也是一个解析的结果，无论何种类型，都是Expression类的实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbolExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span><span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SymbolExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 因为SymbolExpression 是让其子类来实现，因此interpreter是一个默认实现     *     * @param var     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 加法解释器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 减法解释器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubExpression</span> <span class="token keyword">extends</span> <span class="token class-name">SymbolExpression</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SubExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 处理相减     *     * @param var     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">super</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarExpression</span> <span class="token keyword">extends</span> <span class="token class-name">Expression</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">var</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expression<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token class-name">String</span> expStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//栈对象存放变量表达式及运算得到的表达式</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expression</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将表达式拆分成字符数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArr <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>        <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>        <span class="token comment">// 遍历字符数组 [a,+,b]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>charArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span>                    <span class="token comment">// 取出 a</span>                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 取出下一位变量，并创建`VarExpression`</span>                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArr<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 将left和right值作为参数，push到`Stack`中</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span>                    left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArr<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token comment">// 如果不是加减等运算符，就创建`VarExpression`，并push到`Stack`中</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VarExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入表达式："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> expStr <span class="token operator">=</span> <span class="token function">getExpStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>expStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span>expStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运算结果"</span><span class="token operator">+</span>expStr<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>calculator<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getExpStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> expVar<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> expVar<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'+'</span>  ch <span class="token operator">==</span> <span class="token char">'-'</span>  map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入"</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"的值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token function">getExpStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、解释器模式在-Spring-框架中的源码分析"><a href="#4、解释器模式在-Spring-框架中的源码分析" class="headerlink" title="4、解释器模式在 Spring 框架中的源码分析"></a>4、解释器模式在 Spring 框架中的源码分析</h2><p><code>Spring</code>框架中<code>SpelExpressionParser</code>就使用到解释器模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SpelExpressionParser</span> spelExpressionParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Expression</span> expression <span class="token operator">=</span> spelExpressionParser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">"10*(2+1)*1+66"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208291550142.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Expression</span> <span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> expressionString<span class="token punctuation">,</span> <span class="token class-name">ParserContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        context <span class="token operator">=</span> <span class="token constant">NON_TEMPLATE_PARSER_CONTEXT</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">isTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">parseTemplate</span><span class="token punctuation">(</span>expressionString<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">doParseExpression</span><span class="token punctuation">(</span>expressionString<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用<code>parseExpression</code>方法得到<code>Expression</code>对象后，调用<code>getValue</code>解释执行表达式，得到最终结果</li></ul><h2 id="5、解释器模式的注意事项和细节"><a href="#5、解释器模式的注意事项和细节" class="headerlink" title="5、解释器模式的注意事项和细节"></a>5、解释器模式的注意事项和细节</h2><ul><li><p>1）当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，让程序具有良好的扩展性</p></li><li><p>2）应用场景：编译器、运算表达式计算、正则表达式、机器人等</p></li><li><p>3）使用解释器可能带来的问题：解释器模式会引起类膨胀、解释器模式采用递归调用方法，将会导致调试非常复杂、效率可能降低</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>InnoDB数据存储结构</title>
      <link href="/2022/08/26/innodb%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
      <url>/2022/08/26/innodb%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="InnoDB数据存储结构"><a href="#InnoDB数据存储结构" class="headerlink" title="InnoDB数据存储结构"></a>InnoDB数据存储结构</h1><h2 id="1-数据库的存储结构：页"><a href="#1-数据库的存储结构：页" class="headerlink" title="1. 数据库的存储结构：页"></a>1. 数据库的存储结构：页</h2><p>索引结构给我们提供了高效的索引方式，不过索引信息以及数据记录都是保存在文件上的，确切说是存储在页结构中。另一方面，索引是在存储引擎中实现的，MySQL服务器上的存储引擎负责对表中数据的读取和写入工作。不同存储引擎中存放的格式一般是不同的，甚至有的存储引擎比如Memory都不用磁盘来存储数据。</p><p>由于InnoDB是MySQL的默认存储引擎，所以本章剖析InnoDB存储引擎的数据存储结构。</p><h3 id="1-1-磁盘和内存交互的基本单位"><a href="#1-1-磁盘和内存交互的基本单位" class="headerlink" title="1.1 磁盘和内存交互的基本单位"></a>1.1 磁盘和内存交互的基本单位</h3><p>lnnoDB将数据划分为若干个页，InnoDB中页的大小默认为<strong>16KB</strong>。</p><p>以页作为磁盘和内存之间交互的基本单位，也就是一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB内容刷新到磁盘中。也就是说，<strong>在数据库中，不论读一行，还是读多行，都是将这些行所在的页进行加载。也就是说，数据库管理存储空间的基本单位是页(Page)，数据库I&#x2F;O操作的最小单位是页</strong>。一个页中可以存储多个行记录。</p><blockquote><p>记录是按照行来存储的，但是数据库的读取并不以行为单位，否则一次读取（也就是一次IO操作）只能处理一行数据，效率会非常低。</p></blockquote><p><img src="http://img-md-js.linjsblog.top/img/202208241633007.png" alt="image-20220824163339116"></p><h3 id="1-2-页结构概述"><a href="#1-2-页结构概述" class="headerlink" title="1.2 页结构概述"></a>1.2 页结构概述</h3><p>页a、页b、页c …页n这些页可以<code>不在物理结构上</code>相连，只要通过<code>双向链表</code>相关联即可。每个数据页中的记录会按照主键值从小到大的顺序组成一个<code>单向链表</code>，每个数据页都会为存储在它里边的记录生成一个<code>页目录</code>，在通过主键查找某条记录的时候可以在页目录中使用<code>二分法</code>快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</p><h3 id="1-3-页结构的大小"><a href="#1-3-页结构的大小" class="headerlink" title="1.3 页结构的大小"></a>1.3 页结构的大小</h3><p>不同的数据库管理系统（简称DBMS ）的页大小不同。比如在MySQL的InnoDB存储引擎中，默认页的大小是<code>16KB</code>，我们可以通过下面的命令来进行查看:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &quot;%innodb_page_size%&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202208241628312.png" alt="image-20220824162844261"></p><p>SQL Server中页的大小为 8KB，而在Oracle中我们用术语“块”(Block)来代表“页”，Oralce支持的块大小为2KB，4KB，8KB，16KB，32KB和64KB。</p><h3 id="1-4-页的上层结构"><a href="#1-4-页的上层结构" class="headerlink" title="1.4 页的上层结构"></a>1.4 页的上层结构</h3><p>另外在数据库中，还存在着区(Extent)、段(Segment)和表空间(Tablespace)的概念。行、页、区、段、表空间的关系如下图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208241642406.png" alt="image-20220824164239549"></p><p>区(Extent)是比页大一级的存储结构，在InnoDB存储引擎中，一个区会分配<code>64个连续的页</code>。因为InnoDB中的页大小默认是16KB，所以一个区的大小是64*16KB&#x3D; <code>1MB</code>。</p><p>段(Segment)由一个或多个区组成，区在文件系统是一个连续分配的空间(在InnoDB中是连续的64个页)，不过在段中不要求区与区之间是相邻的。<code>段是数据库中的分配单位</code>，<code>不同类型的数据库对象以不同的段形式存在</code>。当我们创建数据表、索引的时候，就会相应创建对应的段，比如创建一张表时会创建一个表段，创建一个索引时会创建一个索引段。</p><p>表空间（Tablespace）是一个逻辑容器，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只能属于一个表空间。数据库由一个或多个表空间组成，表空间从管理上可以划分为<code>系统表空间、用户表空间、撤销表空间、临时表空间</code>等。</p><h2 id="2-页的内部结构"><a href="#2-页的内部结构" class="headerlink" title="2.页的内部结构"></a>2.页的内部结构</h2><p>页如果按类型划分的话，常见的有<code>数据页（保存B+树节点)、系统页、Undo页</code>和<code>事务数据页</code>等。<code>数据页</code>是我们最常使用的页。</p><p>数据页的<code>16KB</code>大小的存储空间被划分为七个部分，分别是**文件头(File Header)<strong>、</strong>页头(Page Header)<strong>、</strong>最大最小记录(Infimum+supremum)<strong>、</strong>用户记录(User Records)<strong>、</strong>空闲空间(Free Space)<strong>、</strong>页目录(Page Directory)<strong>和</strong>文件尾(File Tailer)**。</p><p>页结构的示意图如下所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208241658940.png" alt="image-20220824165847834"></p><p>这7个部分作用分别如下，我们简单梳理如下表所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202208241700821.png" alt="image-20220824170026313"></p><p>我们可以把这7个结构分成3个部分。</p><h3 id="第1部分：File-Header-文件头部-和-File-Trailer-文件尾部"><a href="#第1部分：File-Header-文件头部-和-File-Trailer-文件尾部" class="headerlink" title="第1部分：File Header(文件头部) 和 File Trailer (文件尾部)"></a>第1部分：File Header(文件头部) 和 File Trailer (文件尾部)</h3><p>首先是文件通用部分，也就是<code>文件头</code>和<code>文件尾</code>。</p><h4 id="File-Header-文件头部"><a href="#File-Header-文件头部" class="headerlink" title="File Header (文件头部)"></a><strong>File Header (文件头部)</strong></h4><p>描述各种页的通用信息，大小：38字节</p><p>构成：</p><p><img src="http://img-md-js.linjsblog.top/img/202208241809776.png" alt="image-20220824180952489"></p><h5 id="FIL-PAGE-OFFSET"><a href="#FIL-PAGE-OFFSET" class="headerlink" title="FIL_PAGE_OFFSET"></a>FIL_PAGE_OFFSET</h5><p>每一个页都有一个单独的页号，就跟你的身份证号码一样，InnoDB通过页号可以唯一定位一个页。</p><h5 id="FIL-PAGE-TYPE"><a href="#FIL-PAGE-TYPE" class="headerlink" title="FIL_PAGE_TYPE"></a>FIL_PAGE_TYPE</h5><p>这个代表当前页的类型：</p><p><img src="http://img-md-js.linjsblog.top/img/202208241812178.png" alt="image-20220824181227430"></p><h5 id="FIL-PAGE-PREV和FIL-PAGE-NEXT"><a href="#FIL-PAGE-PREV和FIL-PAGE-NEXT" class="headerlink" title="FIL_PAGE_PREV和FIL_PAGE_NEXT"></a>FIL_PAGE_PREV和FIL_PAGE_NEXT</h5><p>InnoDB都是以页为单位存放数据的，如果数据分散到多个不连续的页中存储的话需要把这些页关联起来，FIL_PAGE_PREV和FIL_PAGE_NEXT就分别代表本页的上一个和下一个页的页号。这样通过建立一个双向链表把许许多多的页就都串联起来了，保证这些页之间<strong>不需要是物理上的连续，而是逻辑上的连续</strong>。</p><p><img src="http://img-md-js.linjsblog.top/img/202208241814157.png" alt="image-20220824181438233"></p><p><img src="http://img-md-js.linjsblog.top/img/202208241815959.png" alt="image-20220824181508881"></p><h5 id="FIL-PAGE-SPACE-OR-CHKSUM"><a href="#FIL-PAGE-SPACE-OR-CHKSUM" class="headerlink" title="FIL_PAGE_SPACE_OR_CHKSUM"></a>FIL_PAGE_SPACE_OR_CHKSUM</h5><p>代表当前页面的校验和（checksum）</p><p>什么是校验和：</p><p>就是对于一个很长的字节串来说，我们会通过某种算法来计算一个比较短的值来代表这个很长的字节串，这个比较短的值就称为校验和。在比较两个很长的字节串之前，先比较这两个长字节串的校验和，如果校验和都不一样，则两个长字节串肯定是不同的，所以省去了直接比较两个比较长的字节串的时间损耗。</p><p><strong>文件尾部和文件头部都有属性：FIL_PAGE_SPACE_OR_CHKSUM</strong></p><p>作用：</p><p>InnoDB存储引擎以页为单位把数据加载到内存中处理，如果该页中的数据在内存中被修改了，那么在<strong>修改后的某个时间需要把数据同步到磁盘中</strong>。但是在同步了一半的时候断电了，造成了该页传输的不完整。</p><p>为了检测一个页是否完整（也就是在同步的时候有没有发生只同步一半的尴尬情况），这时可以通过文件尾的校验和(checksum 值）与文件头的校验和做比对，如果两个值不相等则证明页的传输有问题，需要重新进行传输，否则认为页的传输已经完成。</p><p>具体的：</p><p>每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为File Header在页面的前边，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。如果写了一半儿断电了，那么在File Header中的校验和就代表着已经修改过的页，而在File Trailer中的校验和代表着原先的页，二者不同则意味着同步中间出了错。这里，校验方式就是采用Hash 算法进行校验。</p><h5 id="FIL-PAGE-LSN"><a href="#FIL-PAGE-LSN" class="headerlink" title="FIL_PAGE_LSN"></a>FIL_PAGE_LSN</h5><p>页面被最后修改时对应的日志序列位置（英文名是:Log Sequence Number)</p><h4 id="File-Trailer-文件尾部"><a href="#File-Trailer-文件尾部" class="headerlink" title="File Trailer (文件尾部)"></a><strong>File Trailer (文件尾部)</strong></h4><ul><li><p>前4个字节代表页的校验和:</p><p>这个部分是和File Header中的<strong>校验和</strong>相对应的。</p></li><li><p>后4个字节代表页面被最后修改时对应的日志序列位置（LSN）:</p><p>这个部分也是为了校验页的完整性的，如果前部和尾部的LSN值校验不成功的话，就说明同步过程出现了问题。</p></li></ul><h3 id="第2部分：User-Records-用户记录-、最大最小记录、Free-Space-空闲空间"><a href="#第2部分：User-Records-用户记录-、最大最小记录、Free-Space-空闲空间" class="headerlink" title="第2部分：User Records(用户记录)、最大最小记录、Free Space(空闲空间)"></a>第2部分：User Records(用户记录)、最大最小记录、Free Space(空闲空间)</h3><p>第二个部分是记录部分，页的主要作用是存储记录，所以“最大和最小记录”和“用户记录”部分占了页结构的主要空间。</p><p><img src="http://img-md-js.linjsblog.top/img/202208241831695.png" alt="image-20220824183124564"></p><h4 id="Free-Space-空闲空间"><a href="#Free-Space-空闲空间" class="headerlink" title="Free Space (空闲空间)"></a><strong>Free Space (空闲空间)</strong></h4><p>我们自己存储的记录会按照指定的<strong>行格式</strong>存储到<strong>User Records</strong>部分。但是在一开始生成页的时候，其实并没有User Records这个部分，<strong>每当我们插入一条记录，都会从FreeSpace部分，也就是尚未使用的存储空间中申请一个记录大小的空间划分到User Records部分</strong>，当Free Space部分的空间全部被User Records部分替代掉之后，也就意味着这个页使用完了，如果还有新的记录插入的话，就需要去<strong>申请新的页</strong>了。</p><p><img src="http://img-md-js.linjsblog.top/img/202208241849952.png" alt="image-20220824184955022"></p><h4 id="User-Records-用户记录"><a href="#User-Records-用户记录" class="headerlink" title="User Records(用户记录)"></a><strong>User Records(用户记录)</strong></h4><p>User Records中的这些记录按照<strong>指定的行格式</strong>一条一条摆在User Records部分，相互之间形成单链表。</p><p><code>用户记录里的一条条数据如何记录?</code></p><p>这里需要讲讲记录行格式的<strong>记录头信息</strong>。</p><h4 id="Infimum-Supermum-最小最大记录"><a href="#Infimum-Supermum-最小最大记录" class="headerlink" title="Infimum + Supermum (最小最大记录)"></a><strong>Infimum + Supermum (最小最大记录)</strong></h4><p>记录可以比较大小吗?</p><p>是的，记录可以比大小，对于一条完整的记录来说，比较记录的大小就是比较主键的大小。比方说我们插入的4行记录的主键值分别是:1、2、3、4，这也就意味着这4条记录是从小到大依次递增。</p><p>InnoDB规定的最小记录与最大记录这两条记录的构造十分简单，都是由5字节大小的记录头信息和8字节大小的一个固定的部分组成的，如图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208241927087.png" alt="image-20220824192710068"></p><p>这两条记录不是我们自己定义的记录，所以它们并不存放在页的User Records部分，他们被单独放在一个称为Infimum + Supremum的部分，如图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208241930409.png" alt="image-20220824193036460"></p><h3 id="第3部分：Page-Directory-页目录-、Page-Header-页面头部"><a href="#第3部分：Page-Directory-页目录-、Page-Header-页面头部" class="headerlink" title="第3部分：Page Directory(页目录)、Page Header(页面头部)"></a>第3部分：Page Directory(页目录)、Page Header(页面头部)</h3><h4 id="1-页目录（Page-Directory）"><a href="#1-页目录（Page-Directory）" class="headerlink" title="1. 页目录（Page Directory）"></a>1. 页目录（Page Directory）</h4><p><strong>为什么需要页目录</strong></p><p>在页中，记录是以单向链表的形式进行存储的。单向链表的特点就是插入、删除非常方便，但是检索效率不高，最差的情况下需要遍历链表上的所有节点才能完成检索。因此在页结构中专门设计了页目录这个模块，专门给记录做一个目录，通过二分查找法的方式进行检索，提升效率。</p><p>需求:根据主键值查找页中的某条记录，如何实现快速查找呢?SELECT*FROM page_demo WHERE c1 &#x3D; 3;</p><p><strong>方式1: 顺序查找</strong> 从Infimum记录（最小记录）开始，沿着链表一直往后找，总有一天会找到（或者找不到)，在找的时候还能投机取巧，因为链表中各个记录的值是按照从小到大顺序排列的，所以当链表的某个节点代表的记录的主键值大于你想要查找的主键值时，你就可以停止查找了，因为该节点后边的节点的主键值依次递增。 如果一个页中存储了非常多的记录，这么查找性能很差。</p><p><strong>方式2: 使用页目录，二分法查找</strong></p><ol><li><p>将所有的记录<strong>分成几个组</strong>，这些记录包括<code>最小记录和最大记录</code>，但不包括标记为“已删除”的记录。</p></li><li><p>第1组，也就是最小记录所在的分组只有1个记录; 最后一组，就是最大记录所在的分组，会有1-8条记录;其余的组记录数量在4-8条之间。</p><p>这样做的好处是，除了第1组（最小记录所在组）以外，其余组的记录数会尽量平分。</p></li><li><p>在每个组中最后一条记录的头信息中会存储该组一共有多少条记录，作为 n_owned字段。</p></li><li><p><strong>页目录用来存储每组最后一条记录的地址偏移量</strong>，这些地址偏移量会按照先后顺序存储起来，每组的地址偏移量也被称之为<code>槽(slot)</code>，每个槽相当于指针指向了不同组的最后</p></li></ol><p>举例1：</p><p><img src="http://img-md-js.linjsblog.top/img/202208261552884.png" alt="image-20220826155258908"></p><p>举例2：</p><p>现在的page_demo表中正常的记录共有6条，InnoDB会把它们分成两组，第一组中只有一个最小记录，第二组中是剩余的5条记录。如下图:</p><p><img src="http://img-md-js.linjsblog.top/img/202208261554199.png" alt="image-20220826155437001"></p><p>从这个图中我们需要注意这么几点:</p><ul><li>现在页目录部分中有两个槽，也就意味着我们的记录被分成了两个组，槽1中的值是112，代表最大记录的地址偏移量（就是从页面的0字节开始数，数112个字节)﹔槽O中的值是99，代表最小记录的地址偏移量。</li><li>注意最小和最大记录的头信息中的n_owned属性<ul><li>最小记录的n_owned值为1，这就代表着以最小记录结尾的这个分组中只有1条记录，也就是最小记录本身。</li><li>最大记录的n_owned值为5，这就代表着以最大记录结尾的这个分组中只有5条记录，包括最大记录本身还有我们自己插入的4条记录。</li></ul></li></ul><p>用箭头指向的方式替代数字，这样更易于我们理解修改后如下:</p><p><img src="http://img-md-js.linjsblog.top/img/202208261556022.png" alt="image-20220826155645843"></p><p><img src="http://img-md-js.linjsblog.top/img/202208261557457.png" alt="image-20220826155711211"></p><p>为什么最小记录的n_owned值为1，而最大记录的n_owned值为5呢?</p><p>InnoDB规定:对于最小记录所在的分组只能有1条记录，最大记录所在的分组拥有的记录条数只能在1<del>8条之间，剩下的分组中记录的条数范围只能在是4</del>8条之间。</p><p>分组是按照下边的步骤进行的:</p><ul><li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。</li><li>之后每插入一条记录，都会从页目录中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的n_owned值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个。</li><li>在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一个5条记录。这个过程会在页目录中新增一个槽来记录这个新增分组中最大的那条记录的偏移量。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208261559180.png" alt="image-20220826155917666"></p><p><img src="http://img-md-js.linjsblog.top/img/202208261559798.png" alt="image-20220826155936881"></p><p>这里只保留了16条记录的记录头信息中的n_owned和next_record属性，省略了各个记录之间的箭头。</p><h4 id="2-页面头部（Page-Header）"><a href="#2-页面头部（Page-Header）" class="headerlink" title="2. 页面头部（Page Header）"></a>2. 页面头部（Page Header）</h4><p>为了能得到一个数据页中存储的记录的状态信息，比如本页中已经存储了多少条记录，第一条记录的地址是什么，页目录中存储了多少个槽等等，特意在页中定义了一个叫PageHeader的部分，这个部分占用固定的56个字节，专门存储各种状态信息。</p><p><img src="http://img-md-js.linjsblog.top/img/202208261602300.png" alt="image-20220826160222438"></p><p>PAGE_DIRCTION</p><p>假如新插入的一条记录的主键值比上一条记录的主键值大，我们说这条记录的插入方向是右边，反之则是左边。用来表示最后一条记录插入方向的状态就是PAGE_DIRECTION.</p><p>PAGE_N_DIRCTION</p><p>假设连续几次插入新记录的方向都是一致的，InnoDB会把沿着同一个方向插入记录的条数记下来，这个条数就用PAGE_N_DIRECTION这个状态表示。当然，如果最后一条记录的插入方向改变了的话，这个状态的值会被清零重新统计。</p><h3 id="2-3从数据页的角度看B-树如何查询"><a href="#2-3从数据页的角度看B-树如何查询" class="headerlink" title="2.3从数据页的角度看B+树如何查询"></a>2.3从数据页的角度看B+树如何查询</h3><p>—棵B+树按照节点类型可以分成两部分:</p><ol><li>叶子节点，B+树最底层的节点，节点的高度为o，存储行记录。</li><li>非叶子节点，节点的高度大于0，存储索引键和页面指针，并不存储行记录本身。</li></ol><p><img src="http://img-md-js.linjsblog.top/img/202208261606218.png" alt="image-20220826160607313"></p><p>当我们从页结构来理解B+树的结构的时候，可以帮我们理解一些通过索引进行检索的原理:</p><p><strong>1. B+树是如何进行记录检索的?</strong></p><p>如果通过B+树的索引查询行记录，首先是从B+树的根开始，逐层检索，直到找到叶子节点，也就是找到对应的数据页为止，将数据页加载到内存中，页目录中的槽（slot) 采用二分查找的方式先找到一个粗略的记录分组，然后再在分组中通过链表遍历的方式查找记录。</p><p><strong>2. 普通索引和唯一索引在查询效率上有什么不同?</strong></p><p>我们创建索引的时候可以是普通索引，也可以是唯一索引，那么这两个索引在查询效率上有什么不同呢?</p><p>唯一索引就是在普通索引上增加了约束性，也就是关键字唯一，找到了关键字就停止检索。而普通索引，可能会存在用户记录中的关键字相同的情况，根据页结构的原理，当我们读取一条记录的时候，不是单独将这条记录从磁盘中读出去，而是将这个记录所在的页加载到内存中进行读取。InnoDB存储引擎的页大小为16KB，在一个页中可能存储着上千个记录，因此在普通索引的字段上进行查找也就是在内存中多几次”判断下一条记录”的操作，对于CPU来说，这些操作所消耗的时间是可以忽略不计的。所以对一个索引字段进行检索，采用普通索引还是唯一索引在检索效率上基本上没有差别。</p><h2 id="3-InnoDB-行格式"><a href="#3-InnoDB-行格式" class="headerlink" title="3. InnoDB 行格式"></a>3. InnoDB 行格式</h2><p>我们平时的数据以行为单位来向表中插入数据，这些记录在磁盘上的存放方式也被称为<code>行格式</code>或者<code>记录格式</code>。InnoDB存储引擎设计了4种不同类型的<code>行格式</code>，分别是<code>Compact</code>、 <code>Redundant</code>、 <code>Dynamic</code>和<code>Compressed</code>行格式。</p><p>查看MySQL8的默认行格式:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT @@innodb_default_row_format;+-----------------------------+ @@innodb_default_row_format +-----------------------------+ dynamic                     +-----------------------------+1 row in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用如下语法查看具体表使用的行格式:</p><pre class="line-numbers language-none"><code class="language-none">SHOW TABLE STATUS like &#39;表名&#39;\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-1-指定行格式的语法"><a href="#3-1-指定行格式的语法" class="headerlink" title="3.1 指定行格式的语法"></a>3.1 指定行格式的语法</h3><p>在创建或修改表的语句中指定行格式:</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE 表名(列的信息) ROW_FORMAT&#x3D;行格式名称ALTER TABLE 表名 ROW_FORMAT&#x3D;行格式名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CREATE TABLE record_test_table (-col1 VARCHAR(8),-&gt;   col2 VARCHAR(8)NOT NULL,-&gt;   col3 CHAR(8),-&gt;   col4 VARCHAR(8)-&gt;   )CHARSET&#x3D;ascii ROW_FORMAT&#x3D;COMPACT;Query OK, 0 rows affected (0.03 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向表中插入两条记录:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO record_test_table(col1, col2, col3,col4)VALUES(&#39;zhangsan&#39;, &#39;lisi&#39; , &#39;wangwu&#39;, &#39;songhk&#39;),(&#39;tong&#39;, &#39;chen&#39;,NULL,NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-COMPACT行格式"><a href="#3-2-COMPACT行格式" class="headerlink" title="3.2 COMPACT行格式"></a>3.2 COMPACT行格式</h3><p><img src="http://img-md-js.linjsblog.top/img/202208261717306.png" alt="image-20220826171730258"></p><h4 id="3-2-1-变长字段长度列表"><a href="#3-2-1-变长字段长度列表" class="headerlink" title="3.2.1 变长字段长度列表"></a>3.2.1 变长字段长度列表</h4><p>MySQL支持一些变长的数据类型，比如VARCHAR(M)、VARBINARY(M)、TEXT类型，BLOB类型，这些数据类型修饰列称为变长字段，变长字段中存储多少字节的数据不是固定的，所以我们在存储真实数据的时候需要顺便把这些数据占用的字节数也存起来。<strong>在Compact行格式中，把所有变长字段的真实数据占用的字节长度都存放在记录的开头部位，从而形成一个变长字段长度列表。</strong></p><p>注意:这里面存储的变长长度和字段顺序是反过来的。比如两个varchar字段在表结构的顺序是a(10)，b(15)。那么在变长字段长度列表中存储的长度顺序就是15，10，是反过来的。</p><p>以record_test_table表中的第一条记录举例:因为record_test_table表的col1、col2、col4列都是VARCHAR(8)类型的，所以这三个列的值的长度都需要保存在记录开头处，注意record_test_table表中的各个列都使用的是ascii字符集（每个字符只需要1个字节来进行编码）。</p><p><img src="http://img-md-js.linjsblog.top/img/202208261719728.png" alt="image-20220826171930769"></p><p>又因为这些长度值需要按照列的逆序存放，所以最后变长字段长度列表的字节串用十六进制表示的效果就是（各个字节之间实际上没有空格，用空格隔开只是方便理解）:</p><p>06 04 08</p><p>把这个字节串组成的变长字段长度列表填入上边的示意图中的效果就是:</p><p><img src="http://img-md-js.linjsblog.top/img/202208261720046.png" alt="image-20220826172051793"></p><h4 id="3-2-2-NULL值列表"><a href="#3-2-2-NULL值列表" class="headerlink" title="3.2.2 NULL值列表"></a>3.2.2 NULL值列表</h4><p>Compact行格式会把可以为NULL的列统一管理起来，存在一个标记为NULL值列表中。如果表中没有允许存储 NULL 的列，则NULL值列表也不存在了。</p><p><strong>为什么定义NULL值列表?</strong></p><p>之所以要存储NULL是因为数据都是需要对齐的，如果没有标注出来NULL值的位置，就有可能在查询数据的时候出现混乱。如果使用一个特定的符号放到相应的数据位表示空置的话，虽然能达到效果，但是这样很浪费空间，所以直接就在行数据得头部开辟出一块空间专门用来记录该行数据哪些是非空数据，哪些是空数据，格式如下:</p><ol><li><p>二进制位的值为1时，代表该列的值为NULL。</p></li><li><p>二进制位的值为0时，代表该列的值不为NULL。</p></li></ol><p>例如:字段a、b、c，其中a是主键，在某一行中存储的数依次是a&#x3D;1、b&#x3D;null、c&#x3D;2。那么Compact行格式中的NULL值列表中存储:01。第一个0表示c不为null，第二个1表示b是null。这里之所以没有a是因为数据库会自动跳过主键，因为主键肯定是非NULL且唯一的，在NULL值列表的数据中就会自动跳过主键。</p><p>record_test_table的两条记录的NULL值列表就如下:</p><p><img src="http://img-md-js.linjsblog.top/img/202208261724846.png" alt="image-20220826172405656"></p><p>第一条记录：</p><p><img src="http://img-md-js.linjsblog.top/img/202208261723188.png" alt="image-20220826172342686"></p><p>第二条记录：</p><p><img src="http://img-md-js.linjsblog.top/img/202208261724609.png" alt="image-20220826172437633"></p><h4 id="3-3-3-记录头信息（5字节）"><a href="#3-3-3-记录头信息（5字节）" class="headerlink" title="3.3.3 记录头信息（5字节）"></a>3.3.3 记录头信息（5字节）</h4><p>创建一个表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;CREATE TABLE page_demo(-&gt;c1 INT,-&gt;c2 IINl,-&gt;c3 VARCHAR( 10000),-&gt; PRIMARY KEY (c1)-&gt; )CHARSET&#x3D;ascii RoW_FORMAT&#x3D;Compact;Query OK, 0 rows affected (0.03 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个表记录的行格式如下图：</p><p><img src="http://img-md-js.linjsblog.top/img/202208241902490.png" alt="image-20220824190239509"></p><p>这些记录头的各个属性如下：</p><p><img src="http://img-md-js.linjsblog.top/img/202208241911946.png" alt="image-20220824191135719"></p><p>简化后的行格式示意图</p><p><img src="http://img-md-js.linjsblog.top/img/202208241912380.png" alt="image-20220824191214548"></p><p>插入数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO page_demo VALUES(1,100, &#39;song&#39;),(2，200, &#39;tong&#39;),(3,300, &#39;zhan&#39;),(4，400,&#39;lisi&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>图示如下：</p><p><img src="http://img-md-js.linjsblog.top/img/202208241914887.png" alt="image-20220824191433878"></p><h5 id="delete-mask"><a href="#delete-mask" class="headerlink" title="delete_mask"></a>delete_mask</h5><p>这个属性标记着当前记录是否被删除，占用1个二进制位。</p><ul><li>值为0:代表记录并没有被删除</li><li>值为1:代表记录被删除掉了</li></ul><p><code>被删除的记录为什么还在页中存储呢?</code></p><p>你以为它删除了，可它还在真实的磁盘上。这些被删除的记录之所以不立即从磁盘上移除，是因为移除它们之后其他的记录在磁盘上需要<code>重新排列，导致性能消耗</code>。所以只是打一个删除标记而已，所有被删除掉的记录都会组成一个所谓的<code>垃圾链表</code>，在这个链表中的记录占用的空间称之为<code>可重用空间</code>，之后如果有新记录插入到表中的话，可能把这些被删除的记录占用的存储空间覆盖掉。</p><h5 id="min-rec-mask"><a href="#min-rec-mask" class="headerlink" title="min_rec_mask"></a>min_rec_mask</h5><p>B+树的每层非叶子节点中的最小记录都会添加该标记，min_rec_mask值为1。</p><p>我们自己插入的四条记录的min_rec_mask值都是0．意味着它们都不是B+树的非叶子节点中的最小记录。</p><h5 id="record-type"><a href="#record-type" class="headerlink" title="record_type"></a>record_type</h5><p>这个属性表示当前记录的类型，一共有4种类型的记录:</p><p>​ 0:表示普通记录 ​ 1:表示B+树非叶节点记录 ​ 2:表示最小记录 ​ 3:表示最大记录</p><p>从图中我们也可以看出来，我们自己插入的记录就是普通记录，它们的record_type值都是0，而最小记录和最大记录的record_type值分别为2和3。至于record_type为1的情况，我们在索引的数据结构章节讲过。</p><h5 id="heap-no"><a href="#heap-no" class="headerlink" title="heap_no"></a>heap_no</h5><p>这个属性表示当前记录在本页中的位置。</p><p>从图中可以看出来，我们插入的4条记录在本页中的位置分别是:2、3、4、5。</p><p>怎么不见heap_no值为0和1的记录呢?</p><p>MySQL会自动给每个页里加了两个记录，由于这两个记录并不是我们自己插入的，所以有时候也称为<code>伪记录</code>或者<code>虚拟记录</code>。这两个伪记录一个代表<code>最小记录</code>，一个代表<code>最大记录</code>。最小记录和最大记录的heap_no值分别是0和1，也就是说它们的位置最靠前。</p><h5 id="n-owned"><a href="#n-owned" class="headerlink" title="n_owned"></a>n_owned</h5><p>页目录中每个组中最后一条记录的头信息中会存储该组一共有多少条记录，作为n_owned字段。</p><p>详情见page directory。</p><h5 id="next-record"><a href="#next-record" class="headerlink" title="next_record"></a>next_record</h5><p>记录头信息里该属性非常重要，它表示从当前记录的真实数据到下一条记录的真实数据的<code>地址偏移量</code>。</p><p>比如:第一条记录的next_record值为32，意味着从第一条记录的真实数据的地址处向后找32个字节便是下一条记录的真实数据。</p><p><strong>注意，下一条记录指得并不是按照我们插入顺序的下一条记录，而是按照主键值由小到大的顺序的下一条记录</strong>。而且规定Infimum记录（也就是最小记录）的下一条记录就是本页中主键值最小的用户记录，而本页中主键值最大的用户记录的下一条记录就是Supremum记录（也就是最大记录）。下图用箭头代替偏移量表示next_record。</p><p><img src="http://img-md-js.linjsblog.top/img/202208241936414.png" alt="image-20220824193625096"></p><ol><li><p>演示：删除操作</p><p>从表中删除掉一条记录，这个链表也是会跟着变化：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; DELETE FROM page_demo WHERE c1 &#x3D; 2;Query OK, 1 row affected (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删掉第2条记录后的示意图就是:</p><p><img src="http://img-md-js.linjsblog.top/img/202208241938411.png" alt="image-20220824193848109"></p><p>从图中可以看出来，删除第2条记录前后主要发生了这些变化:</p><p>第2条记录并没有从存储空间中移除，而是把该条记录的delete_mask值设置为1。</p></li><li><p>演示：添加操作</p><p>主键值为2的记录被我们删掉了，但是存储空间却没有回收，如果我们再次把这条记录插入到表中，会发生什么事呢?</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; INSERT INTO page_demo VALUES(2,200, &#39;tong&#39;);Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们看一下记录情况</p><p><img src="http://img-md-js.linjsblog.top/img/202208241944324.png" alt="image-20220824194445533"></p><p>直接复用了原来被删除记录的存储空间。</p><p>说明:</p><p>当数据页中存在多条被删除掉的记录时，这些记录的next_record属性将会把这些被删除掉的记录组成一个垃圾链表，以备之后重用这部分存储空间。</p></li></ol><h4 id="3-3-4-记录真实数据"><a href="#3-3-4-记录真实数据" class="headerlink" title="3.3.4 记录真实数据"></a>3.3.4 记录真实数据</h4><p>记录的真实数据除了我们自己定义的列的数据以外，还会有三个隐藏列:</p><p><img src="http://img-md-js.linjsblog.top/img/202208261726760.png" alt="image-20220826172651406"></p><p>实际上这几个列的真正名称其实是:DB_ROW_ID、DB_TRX_ID、DB_ROLL_PTR。。一个表没有手动定义主键，则会选取一个Unique键作为主键，如果连Unique键都没有定义的话，则会为表默认添加一个名为row_id的隐藏列作为主键。所以row_id是在没有自定义主键以及Unique键的情况下才会存在的。</p><p>事务ID和回滚指针在后面的章节中讲解。</p><h3 id="3-3-Dynamic-和-Compressed-行格式"><a href="#3-3-Dynamic-和-Compressed-行格式" class="headerlink" title="3.3 Dynamic 和 Compressed 行格式"></a>3.3 Dynamic 和 Compressed 行格式</h3><h4 id="3-3-1-行溢出"><a href="#3-3-1-行溢出" class="headerlink" title="3.3.1 行溢出"></a>3.3.1 行溢出</h4><p>InnoDB存储引擎可以将一条记录中的某些数据存储在真正的数据页面之外。</p><p>很多DBA喜欢MySQL数据库提供的VARCHAR(M)类型，认为可以存放65535字节。这是真的吗?如果我们使用ascii字符集的话，一个字符就代表一个字节，我们看看VARCHAR(65535)是否可用。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLEvarchar_size_demo(c VARCHAR(65535))CHARSET&#x3D;ascii ROW_FORMAT&#x3D;Compact;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果如下:</p><pre class="line-numbers language-none"><code class="language-none">ERROR 1118(42000):Row size too large.The maximum row size for the used tabletype, not counting BLOBs, is 65535.This includes storage overhead, check the manual.You have to change some columns to TEXT or BLOBs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错信息表达的意思是:MySQL对一条记录占用的最大存储空间是有限制的，除BLOB或者TEXT类型的列之外，其他所有的列(不包括隐藏列和记录头信息）占用的字节长度加起来不能超过65535个字节。</p><p>这个65535个字节除了列本身的数据之外，还包括一些其他的数据，以Compact行格式为例，比如说我们为了存储一个VARCHAR(MI)类型的列，除了真实数据占有空间以外，还需要记录的额外信息。</p><p>如果该VARCHAR类型的列没有NOT NULL属性，那最多只能存储65532个字节的数据，因为变长字段的长度占用2个字节，NULL值标识需要占用1个字节。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE varchar_size_demo(c VARCHAR(65532))CHARSET&#x3D;ascii ROW_FORMAT&#x3D;Compact;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过上面的案例，我们可以知道一个页的大小一般是16KB，也就是16384字节，而一个VARCHAR(M)类型的列就最多可以存储65533个字节，这样就可能出现一个页存放不了一条记录，这种现象称为<strong>行溢出</strong>。</p><p>在Compact和Reduntant行格式中，对于占用存储空间非常大的列，在记录的真实数据处只会存储该列的一部分数据，把剩余的数据分散存储在几个其他的页中进行分页存储，然后记录的真实数据处用20个字节存储指向这些页的地址（当然这20个字节中还包括这些分散在其他页面中的数据的占用的字节数），从而可以找到剩余数据所在的页。</p><p>这称为页的扩展，举例如下:</p><h4 id="3-3-2-Dynamic-和-Compressed-行格式"><a href="#3-3-2-Dynamic-和-Compressed-行格式" class="headerlink" title="3.3.2 Dynamic 和 Compressed 行格式"></a>3.3.2 Dynamic 和 Compressed 行格式</h4><p>在MySQL 8.0中，默认行格式就是Dynamic，Dynamic、Compressed行格式和Compact行格式挺像，只不过在处理行溢出数据时有分歧:</p><ul><li>Compressed和Dynamic两种记录格式对于存放在BLOB中的数据采用了完全的行溢出的方式。如图，在数据页中只存放20个字节的指针（溢出页的地址），实际的数据都存放在Off Page（溢出页）中。</li><li>Compact和Redundant两种格式会在记录的真实数据处存储一部分数据（存放768个前缀字节）。</li></ul><p>Compressed行记录格式的另一个功能就是，存储在其中的行数据会以zlib的算法进行压缩，因此对于BLOB、TEXT、VARCHAR这类大长度类型的数据能够进行非常有效的存储</p><p><img src="http://img-md-js.linjsblog.top/img/202208311731348.png" alt="image-20220831173151130"></p><h3 id="3-4-Redundant-行格式"><a href="#3-4-Redundant-行格式" class="headerlink" title="3.4 Redundant 行格式"></a>3.4 Redundant 行格式</h3><p>Redundant是MySQL 5.0版本之前InnoDB的行记录存储方式，MySQL 5.0支持Redundant是为了兼容之前版本的页格式。</p><p>现在我们把表record_test__table的行格式修改为Redundant:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE record_test_table ROW_FORMAT&#x3D;Redundant;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Query OK, 0 rows affected (0.05 sec)</p><p><img src="http://img-md-js.linjsblog.top/img/202208311734045.png" alt="image-20220831173447519"></p><p>从上图可以看到，不同于Compact行记录格式，Redundant行格式的首部是一个字段长度偏移列表,同样是按照列的顺序逆序放置的。</p><p>下边我们从各个方面看一下Redundant行格式有什么不同的地方。</p><h4 id="3-4-1-字段长度偏移列表"><a href="#3-4-1-字段长度偏移列表" class="headerlink" title="3.4.1 字段长度偏移列表"></a>3.4.1 字段长度偏移列表</h4><p>注意Compact行格式的开头是变长字段长度列表，而Redundant行格式的开头是字段长度偏移列表，与变长字段长度列表有两处不同:</p><ul><li>少了“变长”两个字:Redundant行格式会把该条记录中所有列（包括隐藏列）的长度信息都按照逆序存储到字段长度偏移列表。</li><li>多了“偏移”两个字:这意味着计算列值长度的方式不像Compact行格式那么直观，它是采用两个相邻数值的差值来计算各个列值的长度。</li></ul><p>举例:比如第一条记录的字段长度偏移列表就是:</p><pre class="line-numbers language-none"><code class="language-none">2B 25 1F1B 13 0C 06<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为它是逆序排放的，所以按照列的顺序排列就是:</p><pre class="line-numbers language-none"><code class="language-none">06 0C 1317 1A 24 25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照两个相邻数值的差值来计算各个列值的长度的意思就是:</p><p>第一列(row_id)的长度就是0x06个字节，也就是6个字节。</p><p>第二列(transaction_id)的长度就是(OxOC - ox06)个字节，也就是6个字节。</p><p>第三列(roll_pointer)的长度就是(Ox13- oxOC)个字节，也就是7个字节。</p><p>第四列(col1)的长度就是(Ox1B - Ox13)个字节，也就是8个字节。</p><p>第五列(col2)的长度就是(Ox1F - Ox1B)个字节，也就是4个字节。</p><h4 id="3-4-2记录头信息"><a href="#3-4-2记录头信息" class="headerlink" title="3.4.2记录头信息"></a>3.4.2记录头信息</h4><p>不同于Compact行格式，Redundant行格式中的记录头信息固定占用6个字节(48位)，每位的含义见下表。</p><p><img src="http://img-md-js.linjsblog.top/img/202208311743095.png" alt="image-20220831174352064"></p><p>与Compact行格式的记录头信息对比来看，有两处不同:</p><ul><li>Redundant行格式多了n_field和1byte_offs_flag这两个属性。</li><li>Redundant行格式没有record_type这个属性。</li></ul><h2 id="4-区、段、碎片区"><a href="#4-区、段、碎片区" class="headerlink" title="4. 区、段、碎片区"></a>4. 区、段、碎片区</h2><h3 id="4-1-为什么要有区"><a href="#4-1-为什么要有区" class="headerlink" title="4.1 为什么要有区"></a>4.1 为什么要有区</h3><p>B+树的每一层中的页都会形成一个双向链表，如果是以页为单位来分配存储空间的话，双向链表相邻的两个页之间的物理位置可能离得非常远。我们介绍B+树索引的适用场景的时候特别提到范围查询只需要定位到最左边的记录和最右边的记录，然后沿着双向链表一直扫描就可以了，而如果链表中相邻的两个页物理位置离得非常远，就是所谓的随机I&#x2F;O。再一次强调，磁盘的速度和内存的速度差了好几个数量级，随机I&#x2F;O是非常慢的，所以我们应该尽量让链表中相邻的页的物理位置也相邻，这样进行范围查询的时候才可以使用所谓的顺序I&#x2F;O。</p><p>引入区的概念，一个区就是在物理位置上连续的64个页。因为InnoDB中的页大小默认是16KB，所以一个区的大小是64*16KB&#x3D; 1MB。在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照区为单位分配，甚至在表中的数据特别多的时候，可以一次性分配多个连续的区。虽然可能造成一点点空间的浪费(数据不足以填充满整个区)，但是从性能角度看，可以消除很多的随机I&#x2F;O，功大于过!</p><h3 id="4-2-为什么要有段"><a href="#4-2-为什么要有段" class="headerlink" title="4.2 为什么要有段"></a>4.2 为什么要有段</h3><p>对于范围查询，其实是对B+树叶子节点中的记录进行顺序扫描，而如果不区分叶子节点和非叶子节点，统统把节点代表的页面放到申请到的区中的话，进行范围扫描的效果就大打折扣了。所以InnoDB对B+树的叶子节点和非叶子节点进行了区别对待，也就是说叶子节点有自己独有的区，非叶子节点也有自己独有的区。存放叶子节点的区的集合就算是一个段( segment )，存放非叶子节点的区的集合也算是一个段。也就是说一个索引会生成2个段，一个叶子节点段，一个非叶子节点段。</p><p>除了索引的叶子节点段和非叶子节点段之外，InnoDB中还有为存储一些特殊的数据而定义的段，比如回滚段。所以，常见的段有数据段、索引段、回滚段。数据段即为B+树的叶子节点，索引段即为B+树的非叶子节点。</p><p>在InnoDB存储引擎中，对段的管理都是由引擎自身所完成，DBA不能也没有必要对其进行控制。这从一定程度上简化了DBA对于段的管理。</p><p>段其实不对应表空间中某一个连续的物理区域，而是一个逻辑上的概念，由若千个零散的页面以及一些完整的区组成。</p><h3 id="4-3-为什么要有碎片区"><a href="#4-3-为什么要有碎片区" class="headerlink" title="4.3 为什么要有碎片区"></a>4.3 为什么要有碎片区</h3><p>默认情况下，一个使用InnoDB存储引擎的表只有一个聚簇索引，一个索引会生成2个段，而段是以区为单位申请存储空间的，一个区默认占用1M (64*16Kb&#x3D;1024Kb）存储空间，所以默认情况下一个只存了几条记录的小表也需要2M的存储空间么?以后每次添加一个索引都要多申请2M的存储空间么?这对于存储记录比较少的表简直是天大的浪费。这个问题的症结在于到现在为止我们介绍的区都是非常纯粹的，也就是一个区被整个分配给某一个段，或者说区中的所有页面都是为了存储同一个段的数据而存在的，即使段的数据填不满区中所有的页面，那余下的页面也不能挪作他用。</p><p>为了考虑以完整的区为单位分配给某个段对于数据量较小的表太浪费存储空间的这种情况，InnoDB提出了一个碎片(fragment)区的概念。在一个碎片区中，并不是所有的页都是为了存储同一个段的数据而存在的，而是碎片区中的页可以用于不同的目的，比如有些页用于段A，有些页用于段B，有些页甚至哪个段都不属于。碎片区直属于表空间，并不属于任何一个段。</p><p>所以此后为某个段分配存储空间的策略是这样的:</p><ul><li>在刚开始向表中插入数据的时候，段是从某个碎片区以单个页面为单位来分配存储空间的。</li><li>当某个段已经占用了32个碎片区页面之后，就会申请以完整的区为单位来分配存储空间。</li></ul><p>所以现在段不能仅定义为是某些区的集合，更精确的应该是某些零散的页面以及一些完整的区的集合。</p><h3 id="4-4-区的分类"><a href="#4-4-区的分类" class="headerlink" title="4.4 区的分类"></a>4.4 区的分类</h3><p>区大体上可以分为4种类型:</p><ul><li>空闲的区(FREE):现在还没有用到这个区中的任何页面。</li><li>有剩余空间的碎片区(FREE_FRAG):表示碎片区中还有可用的页面。</li><li>没有剩余空间的碎片区(FULL_FRAG)︰表示碎片区中的所有页面都被使用，没有空闲页面。</li><li>附属于某个段的区(FSEG):每一个索引都可以分为叶子节点段和非叶子节点段。</li></ul><p>处于FREE、FREE_FRAG以及 FULL_FRAG这三种状态的区都是独立的，直属于表空间。而处于FSEG状态的区是附属于某个段的。</p><blockquote><p>如果把表空间比作是一个集团军，段就相当于师，区就相当于团。一般的团都是隶属于某个师的，就像是处于FSEG的区全都隶属于某个段，而处于FREE、FREE_FRAG以及FULL_FRAG这三种状态的区却直接隶属于表空间，就像独立团直接听命于军部一样。</p></blockquote><h2 id="5-表空间"><a href="#5-表空间" class="headerlink" title="5. 表空间"></a>5. 表空间</h2><p>表空间可以看做是InnoDB存储引擎逻辑结构的最高层，所有的数据都存放在表空间中。</p><p>表空间是一个逻辑容器，表空间存储的对象是段，在一个表空间中可以有一个或多个段，但是一个段只能属于一个表空间。表空间数据库由一个或多个表空间组成，表空间从管理上可以划分为系统表空间(System tablespace)、独立表空间(File-per-table tablespace)、撤销表空间(Undo Tablespace)和临时表空间(Temporary Tablespace)等。</p><h3 id="5-1-独立表空间"><a href="#5-1-独立表空间" class="headerlink" title="5.1 独立表空间"></a>5.1 独立表空间</h3><p>独立表空间，即每张表有一个独立的表空间，也就是数据和索引信息都会保存在自己的表空间中。独立的表空间(即:单表)可以在不同的数据库之间进行迁移。</p><p>空间可以回收(DROP TABLE操作可自动回收表空间;其他情况，表空间不能自己回收)。如果对于统计分析或是日志表，删除大量数据后可以通过: alter table TableName engine&#x3D;innodb;回收不用的空间。对于使用独立表空间的表，不管怎么删除，表空间的碎片不会太严重的影响性能，而且还有机会处理。</p><p><strong>独立表空间结构</strong></p><p>独立表空间由段、区、页组成。前面已经讲解过了。</p><p><strong>真实表空间对应的文件大小</strong></p><p>我们到数据目录里看，会发现一个新建的表对应的.ibd文件只占用了96K，才6个页面大小(MySQL5.7中)，这是因为一开始表空间占用的空间很小，因为表里边都没有数据。不过别忘了这些.ibd文件是自扩展的，随着表中数据的增多，表空间对应的文件也逐渐增大。</p><p><strong>查看InnoDB的表空间类型</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; show variables like &#39;innodb_file_per_table&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202208312026403.png" alt="image-20220831202620764"></p><p>你能看到innodb_file_per_table&#x3D;ON，这就意味着每张表都会单独保存为一个.ibd 文件。</p><h3 id="5-2-系统表空间"><a href="#5-2-系统表空间" class="headerlink" title="5.2 系统表空间"></a>5.2 系统表空间</h3><p>系统表空间的结构和独立表空间基本类似，只不过由于整个MysQL进程只有一个系统表空间，在系统表空间中会额外记录一些有关整个系统信息的页面，这部分是独立表空间中没有的。</p><p><strong>InnoDB 数据字典</strong></p><p>每当我们向一个表中插入一条记录的时候，MySQL校验过程如下:</p><p>先要校验一下插入语句对应的表存不存在，插入的列和表中的列是否符合，如果语法没有问题的话，还需要知道该表的聚簇索引和所有二级索引对应的根页面是哪个表空间的哪个页面，然后把记录插入对应索引的B+树中。所以说，MySQL除了保存着我们插入的用户数据之外，还需要保存许多额外的信息，比方说:</p><pre class="line-numbers language-none"><code class="language-none">-某个表属于哪个表空间，表里边有多少列-表对应的每一个列的类型是什么-该表有多少索引，每个索引对应哪几个字段，该索引对应的根页面在哪个表空间的哪个页面-该表有哪些外键，外键对应哪个表的哪些列-某个表空间对应文件系统上文件路径是什么...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述这些数据并不是我们使用INSERT语句插入的用户数据，实际上是为了更好的管理我们这些用户数据而不得已引入的一些额外数据，这些数据也称为元数据。InnoDB存储引擎特意定义了一些列的内部系统表(internalsystem table)来记录这些这些元数据:</p><p><img src="http://img-md-js.linjsblog.top/img/202208312031651.png" alt="image-20220831203108839"></p><p>注意:用户是不能直接访问InnoDB的这些内部系统表，除非你直接去解析系统表空间对应文件系统上的文件。不过考虑到查看这些表的内容可能有助于大家分析问题，所以在系统数据库<code>information_screma</code>中提供了一些以innodb_sys开头的表:</p><p><img src="http://img-md-js.linjsblog.top/img/202208312037691.png" alt="image-20220831203735625"></p><p>在information_schema数据库中的这些以INNODB_SYS开头的表并不是真正的内部系统表(内部系统表就是我们上边以SYS开头的那些表)，而是在存储引擎启动时读取这些以SYS开头的系统表，然后填充到这些以INNODB_SYS开头的表中。以INNODB_SYS开头的表和以SYS开头的表中的字段并不完全一样，但供大家参考已经足矣。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL高级 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(二) 运行时数据区及程序计数器</title>
      <link href="/2022/08/26/%E4%BA%8C-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%8F%8A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
      <url>/2022/08/26/%E4%BA%8C-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%8F%8A%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="二-运行时数据区及程序计数器"><a href="#二-运行时数据区及程序计数器" class="headerlink" title="(二) 运行时数据区及程序计数器"></a>(二) 运行时数据区及程序计数器</h1><h2 id="1-运行时数据区"><a href="#1-运行时数据区" class="headerlink" title="1. 运行时数据区"></a>1. 运行时数据区</h2><h3 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h3><p>本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段</p><p><img src="http://img-md-js.linjsblog.top/img/202208222142510.png" alt="image-20220822214247266"></p><p>当我们通过前面的：类的加载-&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时执行引擎将会使用到我们运行时数据区</p><p><img src="http://img-md-js.linjsblog.top/img/202208222143019.png" alt="image-20220822214321049"></p><p>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行JVM内存布局规定了Java在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。结合JVM虚拟机规范，来探讨一下经典的JVM内存布局。</p><p><img src="http://img-md-js.linjsblog.top/img/202208222144166.png" alt="image-20220822214407259"></p><p>我们把大厨后面的东西（切好的菜，刀，调料），比作是运行时数据区。而厨师可以类比于执行引擎，将通过准备的东西进行制作成精美的菜品</p><p><img src="http://img-md-js.linjsblog.top/img/202208222144865.png" alt="image-20220822214426898"></p><p>我们通过磁盘或者网络IO得到的数据，都需要先加载到内存中，然后CPU从内存中获取数据进行读取，也就是说内存充当了CPU和磁盘之间的桥梁</p><p><img src="http://img-md-js.linjsblog.top/img/202208222147905.png" alt="image-20220822214700735"></p><p>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</p><p><strong>灰色的为单独线程私有</strong>的，<strong>红色的为多个线程共享</strong>的。即：</p><ul><li><p>每个线程：独立包括程序计数器、栈、本地栈。</p></li><li><p>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208222151714.png" alt="image-20220822215101799"></p><p>每个JVM只有一个Runtime实例。即为运行时环境，相当于内存结构的中间的那个框框：运行时环境。</p><p><img src="http://img-md-js.linjsblog.top/img/202208222158925.png" alt="image-20220822215828531"></p><h3 id="1-2-线程"><a href="#1-2-线程" class="headerlink" title="1.2 线程"></a>1.2 线程</h3><p>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行。 在Hotspot JVM里，每个线程都与操作系统的本地线程直接映射。(用户级线程和内核级线程)</p><p>当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java线程执行终止后，本地线程也会回收。</p><p>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run()方法。</p><h3 id="1-3-JVM线程"><a href="#1-3-JVM线程" class="headerlink" title="1.3 JVM线程"></a>1.3 JVM线程</h3><p>如果你使用console或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用<code>public static void main(String[] args)</code>的main线程以及所有这个main线程自己创建的线程。</p><p>这些主要的后台系统线程在Hotspot JVM里主要是以下几个：</p><ul><li>虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行类型包括”stop-the-world”的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销。</li><li>周期任务线程：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行。</li><li>GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。</li><li>编译线程：这种线程在运行时会将字节码编译成到本地代码。</li><li>信号调度线程：这种线程接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</li></ul><h2 id="2-程序计数器-PC寄存器"><a href="#2-程序计数器-PC寄存器" class="headerlink" title="2.程序计数器(PC寄存器)"></a>2.程序计数器(PC寄存器)</h2><p>JVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟。</p><p><img src="http://img-md-js.linjsblog.top/img/202208261921166.png" alt="image-20220826192104383"></p><p><strong>作用</strong></p><p>PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。</p><p><img src="http://img-md-js.linjsblog.top/img/202208261923285.png" alt="image-20220826192352230"></p><p>它是一块很小的内存空间，几乎可以忽略不记。也是<code>运行速度最快的存储区域</code>。 在JVM规范中，<code>每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致</code>。 <code>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法</code>。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefined）。 它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。 字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。 它是唯一一个在Java虚拟机规范中没有规定任何OutofMemoryError情况的区域。</p><p><strong>举例说明</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    intc <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    intd <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> c <span class="token operator">-</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字节码文件：</p><pre class="line-numbers language-none"><code class="language-none">0: iconst_31: istore_12: iconst_43: istore_24: iload_15: iload_26: isub7: ireturn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？</strong></p><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。</p><p>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p><p><img src="http://img-md-js.linjsblog.top/img/202208261942621.png" alt="image-20220826194231656"></p><p><strong>PC寄存器为什么被设定为私有的？</strong></p><p>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p><p>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p><p>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p><p><strong>CPU时间片</strong></p><p>CPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。</p><p>在宏观上：俄们可以同时打开多个应用程序，每个程序并行不悖，同时运行。</p><p>但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p><p><img src="http://img-md-js.linjsblog.top/img/202208261944476.png" alt="image-20220826194403684"></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/2022/08/25/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/25/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h1><h2 id="1、游戏角色状态恢复问题"><a href="#1、游戏角色状态恢复问题" class="headerlink" title="1、游戏角色状态恢复问题"></a>1、游戏角色状态恢复问题</h2><p>游戏鱼色有攻击力和防御力，在大战 Boss 前保存自身的状态（攻击力和防御力），当大战 Boss 后攻击力和防御万下降，从备忘录对象恢复到大战前的状态</p><p><strong>传统方案</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208251655941.png" alt="img"></p><p><strong>传统方案问题分析</strong></p><ul><li><p>1）一个对象，就对应一个保存对象状态的对象。这样当我们游戏的对象很多时，不利于管理，开销也很大</p></li><li><p>2）传统的方式是简单地做备份，<code>new</code>出另外一个对象出来，再把需要备份的数据放到这个新对象，但这就暴露了对象内部的细节</p></li><li><p>3）解决方案：备忘录模式</p></li></ul><h2 id="2、备忘录模式基本介绍"><a href="#2、备忘录模式基本介绍" class="headerlink" title="2、备忘录模式基本介绍"></a>2、备忘录模式基本介绍</h2><ul><li><p>1）备忘录模式（Memento Pattern）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态</p></li><li><p>2）可以这样理解备忘录模式：现实生活中的备忘录是用来记录某些要去做的事情，或者是记录已经达成的共同意见的事情，以防忘记了。而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来记录一个对象的某种状态，或者某些数据，当要做回退时，可以从备忘录对象里获取原来的数据进行恢复操作</p></li><li><p>3）备忘录模式属于行为型模式</p></li></ul><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208251659913.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202208251700055.png" alt="img"></p><p><strong>示例代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 源对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">createMementor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revertStateFromMementor</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 备忘录对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 守护者对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Memento</span><span class="token punctuation">></span></span> mementoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mementoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mementoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Originator</span> originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Caretaker</span> caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"当前状态："</span> <span class="token operator">+</span> <span class="token string">" 状态#1 血量 100 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>caretaker<span class="token punctuation">.</span><span class="token function">addMemento</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">createMementor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"当前状态："</span> <span class="token operator">+</span> <span class="token string">" 状态#2 血量 80 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>caretaker<span class="token punctuation">.</span><span class="token function">addMemento</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">createMementor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"当前状态："</span> <span class="token operator">+</span> <span class="token string">" 状态#3 血量 60 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>caretaker<span class="token punctuation">.</span><span class="token function">addMemento</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">createMementor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 恢复到状态1</span>originator<span class="token punctuation">.</span><span class="token function">revertStateFromMementor</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复状态："</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前状态： 状态#1 血量 100</span><span class="token comment">//当前状态： 状态#2 血量 80</span><span class="token comment">//当前状态： 状态#3 血量 60</span><span class="token comment">//恢复状态：当前状态： 状态#1 血量 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>备忘录模式中的角色和职责</strong></p><ul><li><p><code>Originator</code>源对象：需要保存状态的对象</p></li><li><p><code>Memento</code>备忘录对象：负责保存<code>Originator</code>内部状态</p></li><li><p><code>Caretaker</code>守护者对象：负责存放多个<code>Memento</code>对象，使用集合管理，提高效率</p></li><li><p>如果希望保存多个<code>Originator</code>对象的不同内部状态，也可以使用<code>Map&lt;String, List&lt;Memento&gt;&gt;</code></p></li></ul><h2 id="3、备忘录模式解决游戏角色状态回复问题"><a href="#3、备忘录模式解决游戏角色状态回复问题" class="headerlink" title="3、备忘录模式解决游戏角色状态回复问题"></a>3、备忘录模式解决游戏角色状态回复问题</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208251714694.png" alt="img"></p><p><strong>备忘录对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> vit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> def<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> vit<span class="token punctuation">,</span> <span class="token class-name">Integer</span> def<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> vit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> def<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>守护者对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Memento</span> memento<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memento <span class="token operator">=</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>游戏角色对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameRole</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> vit<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> def<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVit</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> vit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> vit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> def<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDef</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> def<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> def<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vit<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getVit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>def <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游戏角色当前攻击力："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vit <span class="token operator">+</span> <span class="token string">"，当前防御力："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>def<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======大战前状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GameRole</span> gameRole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">setVit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">setDef</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Caretaker</span> caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>caretaker<span class="token punctuation">.</span><span class="token function">setMemento</span><span class="token punctuation">(</span>gameRole<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======大战后状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">setVit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">setDef</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======从备忘录对象恢复到大战前的状态======"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">recoverMemento</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gameRole<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//======大战前状态======</span><span class="token comment">//游戏角色当前攻击力：100，当前防御力：100</span><span class="token comment">//======大战后状态======</span><span class="token comment">//游戏角色当前攻击力：10，当前防御力：10</span><span class="token comment">//======从备忘录对象恢复到大战前的状态======</span><span class="token comment">//游戏角色当前攻击力：100，当前防御力：100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、备忘录模式的注意事项和细节"><a href="#4、备忘录模式的注意事项和细节" class="headerlink" title="4、备忘录模式的注意事项和细节"></a>4、备忘录模式的注意事项和细节</h2><p><strong>优点</strong></p><ul><li><p>1）给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态</p></li><li><p>2）实现了信息的封装，使得用户不需要关心状态的保存细节</p></li></ul><p><strong>缺点</strong></p><ul><li>3）如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存，这个需要注意</li></ul><p><strong>其他</strong></p><ul><li>4）适用的应用场景：</li></ul><ol><li><ol><li>后悔药</li><li>打游戏时的存档</li><li><code>Windows</code>里的<code>ctrl+z</code></li><li><code>IE</code>中的后退</li><li>数据库的事务管理</li></ol></li></ol><ul><li>5）为了节约内存，备忘录模式可以和原型模式配合使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目亮点：集群部署挑战！深入理解TCP！</title>
      <link href="/2022/08/25/%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%EF%BC%9A%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E6%8C%91%E6%88%98%EF%BC%81%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3tcp%EF%BC%81/"/>
      <url>/2022/08/25/%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%EF%BC%9A%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E6%8C%91%E6%88%98%EF%BC%81%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3tcp%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="项目亮点：集群部署挑战！深入理解TCP！"><a href="#项目亮点：集群部署挑战！深入理解TCP！" class="headerlink" title="项目亮点：集群部署挑战！深入理解TCP！"></a>项目亮点：集群部署挑战！深入理解TCP！</h1><h2 id="问题抛出"><a href="#问题抛出" class="headerlink" title="问题抛出"></a>问题抛出</h2><p>当我们在服务发布的时候，一上线有少量的请求会报失败，毛估在发布的这一个短暂的时间，可能也就几秒钟，有10%左右的失败率，问题的关键是过了几秒钟之后，失败率又下来了，所以给人感觉就是在发布的过程中，并不能保证一个发布的平顺性，在一些流量不是很大的系统，这个失败率可能不是很大，但如果系统的流量非常的大，每秒有上万qps,而且如果是写入的流量的话，并且没有做这种分布式事务的控制，那就有可能造成两边数据的不一致，这也就是我们面试中常问到的问题：就是请求超时的话，会有什么问题，其实很多时候就是因为发布引起的这个原因。所以当时我负责的这个系统就不得不去解决这个问题。</p><p>不知道大家是否了解“惊群效应”，在某一个瞬间，流量突然过来之后会造成一些资源的争抢，并不是说这个机器不能承载这样的流量，而是流量来得很快，才会导致这样的现象。造成这样的原因其实有很多，比如：Java的即时编译，或者缓存没有预热，或者有一些其他的资源本来就是懒加载的，最开始几个请求过来的话，是非常消耗资源的，导致上游就请求超时了。</p><p>我当时排查出来的原因跟底层的TCP有关系。</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>一般我们可以通过查应用程序的日志，甚至Linux的日志，根据报错的时间点去看了一下Dubbo的日志</p><p><img src="http://img-md-js.linjsblog.top/img/202208251125267.png" alt="image-20220825112501985"></p><p>意思是通道关闭, 一般一个RPC框架服务有三个模块，第一个是注册中心，第二个是Consumer,第三个provider，我们这个日志是从consumer报出来的。</p><p><img src="http://img-md-js.linjsblog.top/img/202208251204949.png" alt="image-20220825120407751"></p><p>通道关闭之后它就去重连，重连之后就可以去正常的传输请求了，查到这里我就比较疑惑了：为什么会报通道关闭？为什么重连之后就可以正常的请求呢？</p><p><img src="http://img-md-js.linjsblog.top/img/202208251136541.png" alt="image-20220825113602544"></p><p>搜索Dubbo的日志是在哪一个类里面输出的</p><p><img src="http://img-md-js.linjsblog.top/img/202208251201299.png" alt="image-20220825120147695"></p><p>又去参考了dubbo的架构图</p><p><img src="http://img-md-js.linjsblog.top/img/202208251205174.png" alt="image-20220825120516261"></p><p>发现这个类是在TCP这一层去做一个连接的通道，那竟然都涉及到TCP这一层了，那么抛开Dubbo这个日志，在Linux底层，TCP的连接是有日志的。所以我们找到Linux当时打印的日志，发现了一个很重要的信息：</p><p><img src="http://img-md-js.linjsblog.top/img/202208251211558.png" alt="image-20220825121148695"></p><p>意思就是在某个端口上它发现有这种洪水攻击，大家应该都听说过DDOS，就是分布式拒绝服务式攻击，这个攻击的原理其实也很简单，可能黑客就是用很多这种木马病毒传播出去之后再做成服务的跳板或者代理，朝某一个服务发送请求包，然后导致正常的请求不能响应，但是这里的情况可能不太一样，我们看到<code>SYN</code>,SYN是什么，我就想到了TCP三次握手的过程中的syn</p><p>我们来复习一下tcp的三次握手：</p><p><img src="http://img-md-js.linjsblog.top/img/202204061057650.png" alt="image-20220406105652577"></p><ul><li>客户端–发送带有 SYN 标志的数据包–一次握手–服务端</li><li>服务端–发送带有 SYN&#x2F;ACK 标志的数据包–二次握手–客户端</li><li>客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端</li></ul><p>为什么要三次握手，中间握手失败了会怎么样？具体可参考：<a href="http://www.linjsblog.top/archives/161">http://www.linjsblog.top/archives/161</a></p><p>我相信大家对上面的内容一定非常熟悉，但是针对于这种问题的原因是什么呢？我们详细的来看一下：</p><p><img src="http://img-md-js.linjsblog.top/img/202208251225000.png" alt="image-20220825122548985"></p><p>整个服务端其实是有两个队列的，一个叫同步队列（半连接队列），另外一个叫accept 队列（全连接队列）</p><p>什么是半连接队列：就是这个请求还没有完成建立连接，只是做了一个收发，三次握手就是要保证服务端和客户端它的收发功能都是正常的，第二次握手之后其实服务端不知道自己发送的是否正常，所以服务端先将客户端的连接放到一个半连接队列里面，只有第三次握手结束后，才能保证连接是一个全双工的正常状态，然后再把半连接队列移动到全连接队列（Accept queue）里面.</p><p>如果这个时候全连接队列已经满了，该怎么办呢？有两种策略：让客户端重试（RST），或者说告诉客户端请求已经满了，你不用再请求了，你可以通过负载均衡去调到其他节点，就不要掉我这个机器了。</p><p>所以问题的关键就两个：1. 这两个队列的长度是怎么去设置的 2. 队列满的时候，应该采取怎样的策略</p><p>其实这个都是有参数的，而且这几个参数设计的还比较复杂，在Linux 不同的版本，甚至它的默认值也不太一样</p><p><img src="http://img-md-js.linjsblog.top/img/202208251241148.png" alt="image-20220825124110228"></p><p>它会优先使用应用框架传进去的长度: TCP 全连接队列的长度取 <code>net.core.somaxconn</code> 及业务进程调用 listen 时传入的 backlog 参数，两者中的较小值</p><p><img src="http://img-md-js.linjsblog.top/img/202208251245206.png" alt="image-20220825124524042"></p><p>当这个队列满的时候具体采用哪些策略，我后面也去看了下Linux内核TCP这一块的一些源代码，发现是从客户端这边直接把请求移除掉还是发送RST这种请求让它去重视，这个逻辑还是比较复杂的</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先把Netty的代码更新了一下，默认参数是50，把它调大，然后把Linux的几个参数也调大，并且半连接和全连接的长度设置成一样的</p><p><img src="http://img-md-js.linjsblog.top/img/202208251253931.png" alt="image-20220825125332649"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置全连接队列，大小为80</span><span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_BACKLOG</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后就再也没有发现这个问题了。 所以，一般网络服务程序(tomcat、redis、mysql等)都会有一个backlog的配置，在springboot内置的tomcat中，backlog配置方法如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>    <span class="token key atrule">accept-count</span><span class="token punctuation">:</span> <span class="token number">8192</span>   <span class="token comment"># 内置tomcat的全连接队列大小配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.bilibili.com/video/BV1eg411r7Yn">困扰团队几年的问题！大厂集群部署挑战！深入理解TCP！</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)Java类加载子系统</title>
      <link href="/2022/08/22/%E4%B8%80java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/08/22/%E4%B8%80java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Java类加载子系统"><a href="#一-Java类加载子系统" class="headerlink" title="(一)Java类加载子系统"></a>(一)Java类加载子系统</h2><h2 id="1-内存结构概述"><a href="#1-内存结构概述" class="headerlink" title="1. 内存结构概述"></a>1. 内存结构概述</h2><ul><li><p>Class文件</p></li><li><p><strong>类加载子系统</strong></p></li><li><p>运行时数据区</p><ul><li>方法区</li><li>堆</li><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul></li><li><p>执行引擎</p></li><li><p>本地方法接口</p></li><li><p>本地方法库</p></li></ul><p>简图</p><p><img src="http://img-md-js.linjsblog.top/img/202208071144283.png" alt="image-20220807114410060"></p><p>我们这章讲的就是类加载子系统，详细图：</p><p><img src="http://img-md-js.linjsblog.top/img/202208071150043.png" alt="image-20220807115022158"></p><p>Java的类加载机制是指类的<strong>加载</strong>、<strong>链接</strong>、<strong>初始化</strong>的过程</p><p>如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？</p><ul><li><p>类加载器</p></li><li><p>执行引擎</p></li></ul><h2 id="2-类加载器和类的加载过程"><a href="#2-类加载器和类的加载过程" class="headerlink" title="2. 类加载器和类的加载过程"></a>2. 类加载器和类的加载过程</h2><p><strong>类加载器子系统作用</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208071202296.png"></p><ul><li><p>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</p></li><li><p>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p></li><li><p>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</p></li></ul><p><strong>类加载器ClassLoader角色</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208071211429.png" alt="image-20220807121107124"></p><ul><li><p>class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。</p></li><li><p>class file加载到JVM中，被称为DNA元数据模板，放在方法区。</p></li><li><p>在.class文件-&gt;JVM-&gt;最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色。</p></li></ul><p><strong>类的加载过程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *示例代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用流程图表示上述示例代码：</p><p><img src="http://img-md-js.linjsblog.top/img/202208071212559.png" alt="image-20220807121245529"></p><h3 id="2-1-加载阶段"><a href="#2-1-加载阶段" class="headerlink" title="2.1 加载阶段"></a>2.1 加载阶段</h3><p><img src="http://img-md-js.linjsblog.top/img/202208101904471.png" alt="image-20220810190439355"></p><ol><li><p>通过一个类的全限定名获取定义此类的二进制字节流</p></li><li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p></li><li><p>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p></li></ol><p><strong>补充：加载class文件的方式</strong></p><ul><li><p>从本地系统中直接加载</p></li><li><p>通过网络获取，典型场景：Web Applet</p></li><li><p>从zip压缩包中读取，成为日后jar、war格式的基础</p></li><li><p>运行时计算生成，使用最多的是：动态代理技术</p></li><li><p>由其他文件生成，典型场景：JSP应用</p></li><li><p>从专有数据库中提取.class文件，比较少见</p></li><li><p>从加密文件中获取，典型的防Class文件被反编译的保护措施</p></li></ul><h3 id="2-2-链接阶段"><a href="#2-2-链接阶段" class="headerlink" title="2.2 链接阶段"></a>2.2 链接阶段</h3><ul><li><p><strong>验证（Verify）</strong>：</p></li><li><ul><li>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</li></ul></li><li><ul><li>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</li></ul></li><li><p><strong>准备（Prepare）</strong>：</p></li><li><ul><li>为类变量分配内存并且设置该类变量的默认初始值，即零值。</li></ul></li><li><ul><li>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；</li></ul></li><li><ul><li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</li></ul></li><li><p><strong>解析（Resolve）</strong>：</p></li><li><ul><li>将常量池内的符号引用转换为直接引用的过程。</li></ul></li><li><ul><li>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</li></ul></li><li><ul><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li></ul></li><li><ul><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info，CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。</li></ul></li></ul><h3 id="2-3-初始化阶段"><a href="#2-3-初始化阶段" class="headerlink" title="2.3 初始化阶段"></a>2.3 初始化阶段</h3><ul><li><p>初始化阶段就是执行类构造器方法()的过程。</p></li><li><p>此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</p></li><li><p>构造器方法中指令按语句在源文件中出现的顺序执行。</p></li><li><p>()不同于类的构造器。（关联：构造器是虚拟机视角下的()）</p></li><li><p>若该类具有父类，JVM会保证子类的()执行前，父类的()已经执行完毕。</p></li><li><p>虚拟机必须保证一个类的()方法在多线程下被同步加锁。</p></li></ul><h2 id="3-类加载器的分类"><a href="#3-类加载器的分类" class="headerlink" title="3.类加载器的分类"></a>3.类加载器的分类</h2><p>JVM支持两种类型的类加载器 。分别为<code>引导类加载器（Bootstrap ClassLoader）</code>和<code>自定义类加载器（User-Defined ClassLoader）</code>。</p><p>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将<code>所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。</code></p><p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202208132219122.png" alt="image-20220813221945113"></p><p>这里的四者之间的关系是包含关系。不是上层下层，也不是子父类的继承关系。</p><h3 id="3-1-虚拟机自带的加载器"><a href="#3-1-虚拟机自带的加载器" class="headerlink" title="3.1 虚拟机自带的加载器"></a>3.1 虚拟机自带的加载器</h3><p><strong>启动类加载器（引导类加载器，Bootstrap ClassLoader）</strong></p><ul><li>这个类加载使用<strong>C&#x2F;C++语言</strong>实现的，嵌套在JVM内部。</li><li>它用来加载Java的核心库<strong>（JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar、resources.jar或sun.boot.class.path路径下的内容）</strong>，用于<strong>提供JVM自身需要的类</strong></li><li>并不继承自java.lang.ClassLoader，没有父加载器。</li><li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</li><li>出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类</li></ul><p>获取BootstrapClassLoader 能够加载的api的路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********启动类加载器***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取BootstrapClassLoader 能够加载的api的路径</span><span class="token constant">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urLs <span class="token operator">=</span> <span class="token class-name">Launcher</span><span class="token punctuation">.</span><span class="token function">getBootstrapClassPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token constant">URL</span> element<span class="token operator">:</span> urLs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">toExternalForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">**********启动类加载器***********file:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;lib&#x2F;resources.jarfile:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;lib&#x2F;rt.jarfile:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;lib&#x2F;sunrsasign.jarfile:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;lib&#x2F;jsse.jarfile:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;lib&#x2F;jce.jarfile:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;lib&#x2F;charsets.jarfile:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;lib&#x2F;jfr.jarfile:&#x2F;D:&#x2F;Java&#x2F;jdk1.8.0_321&#x2F;jre&#x2F;classes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>扩展类加载器（Extension ClassLoader）</strong></p><ul><li><p>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。</p></li><li><p>派生于ClassLoader类</p></li><li><p>父类加载器为启动类加载器</p></li><li><p>从<strong>java.ext.dirs系统属性</strong>所指定的目录中加载类库，或从JDK的安装目录的<strong>jre&#x2F;lib&#x2F;ext</strong>子目录（扩展目录）下加载类库。<strong>如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********扩展类加载器***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> extDirs <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token operator">:</span>extDirs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">**********扩展类加载器***********D:\Java\jdk1.8.0_321\jre\lib\extC:\Windows\Sun\Java\lib\ext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>应用程序类加载器（系统类加载器，AppClassLoader）</strong></p><ul><li>java语言编写，由sun.misc.LaunchersAppClassLoader实现</li><li>派生于ClassLoader类</li><li>父类加载器为扩展类加载器</li><li>它负责<strong>加载环境变量classpath或系统属性java.class.path指定路径下的类库</strong></li><li>该类加载是程序中<strong>默认的类加载器</strong>，一般来说，Java应用的类都是由它来完成加载</li><li>通过ClassLoader#getSystemclassLoader() 方法可以获取到该类加载器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取系统类加载器</span>        <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>        <span class="token comment">//获取其上层，拓展类加载器</span>        <span class="token class-name">ClassLoader</span> extClassLoader <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>extClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$ExtClassLoader@1b6d3586</span>        <span class="token comment">//获取不到引导类加载器</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> extClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>        <span class="token comment">//对于用户自定义类来说：</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLoaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span>        <span class="token comment">//说明String类使用引导类加载器加载的  ---》 Java的核心类库都是使用引导类加载器加载的</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202208132315675.png" alt="image-20220813231519478"></p><h3 id="3-2-用户自定义类加载器"><a href="#3-2-用户自定义类加载器" class="headerlink" title="3.2. 用户自定义类加载器"></a>3.2. 用户自定义类加载器</h3><p>在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。 为什么要自定义类加载器？</p><ul><li><p>隔离加载类</p></li><li><p>修改类加载的方式</p></li><li><p>扩展加载源</p></li><li><p>防止源码泄漏</p></li></ul><p>用户自定义类加载器实现步骤：</p><ol><li>开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求</li><li>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass() 方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖loadclass() 方法，而是建议把自定义的类加载逻辑写在findClass()方法中</li><li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass() 方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">findClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token function">getClassFromCustomPath</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>result<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getClassFromCustomPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从自定义路径中加载指定类：细节略</span>        <span class="token comment">//如果指定路径的字节码文件进行了加密，则需要在此方法进行解密操作</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-ClassLoader的使用"><a href="#4-ClassLoader的使用" class="headerlink" title="4.ClassLoader的使用"></a>4.ClassLoader的使用</h2><p>ClassLoader类是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）</p><p><img src="http://img-md-js.linjsblog.top/img/202208132341975.png"></p><p>sun.misc.Launcher 它是一个java虚拟机的入口应用</p><p><img src="http://img-md-js.linjsblog.top/img/202208132342289.png" alt="image-20220813234210240"></p><p><strong>获取ClassLoader的途径</strong></p><ul><li><p>方式一：获取当前ClassLoader</p><pre class="line-numbers language-none"><code class="language-none">clazz.getClassLoader()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式二：获取当前线程上下文的ClassLoader</p><pre class="line-numbers language-none"><code class="language-none">Thread.currentThread().getContextClassLoader()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式三：获取系统的ClassLoader</p><pre class="line-numbers language-none"><code class="language-none">ClassLoader.getSystemClassLoader()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式四：获取调用者的ClassLoader</p><pre class="line-numbers language-none"><code class="language-none">DriverManager.getCallerClassLoader()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="5-双亲委派机制"><a href="#5-双亲委派机制" class="headerlink" title="5. 双亲委派机制"></a>5. 双亲委派机制</h2><p>java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由<strong>父类</strong>处理，它是一种任务委派模式。</p><p><strong>工作原理</strong></p><ul><li><p>1）如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</p></li><li><p>2）如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</p></li><li><p>3）如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208222116205.png" alt="image-20220822211649151"></p><p><strong>举例</strong></p><p>当我们加载jdbc.jar 用于实现数据库连接的时候，首先我们需要知道的是 jdbc.jar是基于SPI接口进行实现的，所以在加载的时候，会进行双亲委派，最终从根加载器中加载 SPI核心类，然后在加载SPI接口类，接着在进行反向委派，通过线程上下文类加载器进行实现类jdbc.jar的加载。</p><p><img src="http://img-md-js.linjsblog.top/img/202208222119334.png"></p><p><strong>优势</strong></p><ul><li><p>避免类的重复加载</p></li><li><p>保护程序安全，防止核心API被随意篡改</p></li><li><ul><li>自定义类：java.lang.String</li></ul></li><li><ul><li>自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）</li></ul></li></ul><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h2><p><strong>如何判断两个class对象是否相同</strong></p><p>在JVM中表示两个class对象是否为同一个类存在两个必要条件：</p><ul><li><p>类的完整类名必须一致，包括包名。</p></li><li><p>加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。</p></li></ul><p>换句话说，在JVM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</p><p><strong>沙箱安全机制</strong></p><p>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\lang\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的string类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。</p><p><strong>对类加载器的引用</strong></p><p>JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由<strong>用户类加载器</strong>加载的，那么JVM<strong>会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中</strong>。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p><p><strong>类的主动使用和被动使用</strong></p><p>Java程序对类的使用方式分为：主动使用和被动使用。</p><p>主动使用，又分为七种情况：</p><ul><li><p>创建类的实例</p></li><li><p>访问某个类或接口的静态变量，或者对该静态变量赋值</p></li><li><p>调用类的静态方法</p></li><li><p>反射（比如：Class.forName（”com.atguigu.Test”））</p></li><li><p>初始化一个类的子类</p></li><li><p>Java虚拟机启动时被标明为启动类的类</p></li><li><p>JDK 7 开始提供的动态语言支持： java.lang.invoke.MethodHandle实例的解析结果 REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化</p></li></ul><p>除了以上七种情况，其他使用Java类的方式都被看作是对<strong>类的被动使用</strong>，<strong>都不会导致类的初始化</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/2022/08/22/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/22/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><h2 id="1、智能家庭管理问题"><a href="#1、智能家庭管理问题" class="headerlink" title="1、智能家庭管理问题"></a>1、智能家庭管理问题</h2><p>智能家庭项目：</p><ul><li><p>1）智能家庭包括各种设备，闹钟、咖啡机、电视机、窗帘等</p></li><li><p>2）主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作，比如流程为： 闹铃响起 &#x3D;&gt; 咖啡机开始做咖啡 &#x3D;&gt; 窗帘自动落下 &#x3D;&gt; 电视机开始播放</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208221355614.png" alt="img"></p><p>传统方案解决智能家庭管理问题</p><p><img src="http://img-md-js.linjsblog.top/img/202208221355796.png" alt="img"></p><p>传统方式问题分析</p><ul><li><p>1）当各电器对象有多种状态改变时，相互之间的调用关系会比较复杂</p></li><li><p>2）各个电器对象彼此联系，你中有我，我中有你，不利于松耦合</p></li><li><p>3）各个电器对象之间所传递的消息（参数），容易混乱</p></li><li><p>4）当系统增加一个新的电器对象时，或者执行流程改变时，代码的可维护性、扩展性都不理想→考虑中介者模式</p></li></ul><h2 id="2、中介者模式"><a href="#2、中介者模式" class="headerlink" title="2、中介者模式"></a>2、中介者模式</h2><ul><li><p>1）中介者模式（<code>Mediator Pattern</code>），用一个中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互</p></li><li><p>2）中介者模式属于行为型模式，使代码易于维护</p></li><li><p>3）比如 MVC 模式，C（<code>Controller</code>控制器）是M（<code>Model</code>模型）和V（<code>View</code>视图）的中介者，在前后端交互时起到了中间人的作用</p></li></ul><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208221407745.png" alt="img"></p><p><strong>中介者模式角色及职责</strong></p><ul><li><p><code>Mediator</code>【抽象中介者】：定义了同事对象到中介者对象的接口</p></li><li><p><code>ConcreteMediator</code>【具体的中介者对象】：实现抽象中介者方法，需要知道所有具体的同事类，即以一个集合来管理<code>HashMap</code>，并接受某个同事对象消息，完成相应的任务</p></li><li><p><code>Colleague</code>【抽象同事类】</p></li><li><p><code>ConcreteColleague</code>【具体的同事类】：会有很多，只知道自己的行为，而不了解其他同事类的行为（方法），但他们都依赖中介者对象</p></li></ul><h2 id="3、中介者模式解决智能家庭管理问题"><a href="#3、中介者模式解决智能家庭管理问题" class="headerlink" title="3、中介者模式解决智能家庭管理问题"></a>3、中介者模式解决智能家庭管理问题</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208221431333.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202208221431502.png" alt="img"></p><p><strong>智能家庭管理操作流程</strong></p><ul><li><p>1）创建<code>ConcreMediator</code>对象</p></li><li><p>2）创建各个同事类对象，比如：<code>Alarm</code>、<code>CoffeeMachine</code>、<code>TV</code>…</p></li><li><p>3）在创建同事类对象时，直接通过构造器加入到<code>colleagueMap</code></p></li><li><p>4）同事类对象可以调用<code>sendMessage</code>，最终会去调用<code>ConcreteMediator</code>的<code>getMessage</code>方法</p></li><li><p>5）<code>getMessage</code>会根据接收到的同事对象发出的消息，来协调调用其它的同事对象，完成任务</p></li><li><p>6）可以看到<code>getMessage</code>是核心方法，完成相应任务</p></li></ul><p><strong>核心代码</strong></p><p>抽象中介者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">registerColleague</span><span class="token punctuation">(</span><span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象同事类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Colleague</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mediator</span> <span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mediator<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体同事类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 闹钟 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alarm</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Alarm</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerColleague</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 闹铃响起     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>闹铃响起"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//模拟闹铃耗时</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 闹铃关闭     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>闹铃关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 咖啡机 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeMachine</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerColleague</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 煮咖啡     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>煮咖啡中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//模拟煮咖啡耗时</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 煮咖啡完毕     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>咖啡已煮好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 窗帘 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Curtain</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Curtain</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerColleague</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 拉起窗帘     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upCurtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>拉起窗帘..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//模拟拉起窗帘耗时</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 拉下窗帘     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downCurtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>拉下窗帘..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//模拟拉下窗帘耗时</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 电视机 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token function">TV</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerColleague</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 打开电视     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>打开电视..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 关闭电视     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>关闭电视..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 切换频道     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchChannel</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>切换频道："</span> <span class="token operator">+</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//模拟看电视耗时</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体中介者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Colleague</span><span class="token punctuation">></span></span> colleagueMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colleagueMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerColleague</span><span class="token punctuation">(</span><span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        colleagueMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>colleague<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Colleague</span> colleague <span class="token operator">=</span> colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> <span class="token class-name">Alarm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dealAlarm</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dealCoffeeMachine</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> <span class="token class-name">Curtain</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dealCurtain</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token keyword">instanceof</span> <span class="token class-name">TV</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">dealTV</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 闹铃响起后操作     *     * @param state     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dealAlarm</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Alarm</span><span class="token punctuation">)</span> colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Alarm</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CoffeeMachine</span><span class="token punctuation">)</span> colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">CoffeeMachine</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 咖啡机煮咖啡完毕后操作     *     * @param state     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dealCoffeeMachine</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Curtain</span><span class="token punctuation">)</span> colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Curtain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">downCurtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 窗帘落下后操作     *     * @param state     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dealCurtain</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TV</span> tv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">TV</span><span class="token punctuation">)</span> colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">TV</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tv<span class="token punctuation">.</span><span class="token function">openTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tv<span class="token punctuation">.</span><span class="token function">switchChannel</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 电视关闭后操作     *     * @param state     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dealTV</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Curtain</span><span class="token punctuation">)</span> colleagueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Curtain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upCurtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Do Nothing...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建中介者</span><span class="token class-name">Mediator</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建各个同事类，并加入Mediator中介者的Map对象中</span><span class="token class-name">Alarm</span> alarm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alarm</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CoffeeMachine</span> coffeeMachine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMachine</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Curtain</span> curtain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Curtain</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TV</span> tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//闹钟响起</span>alarm<span class="token punctuation">.</span><span class="token function">openAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coffeeMachine<span class="token punctuation">.</span><span class="token function">completeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tv<span class="token punctuation">.</span><span class="token function">closeTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//>>>闹铃响起</span><span class="token comment">//>>>闹铃关闭</span><span class="token comment">//>>>煮咖啡中...</span><span class="token comment">//>>>咖啡已煮好</span><span class="token comment">//>>>拉下窗帘...</span><span class="token comment">//>>>打开电视...</span><span class="token comment">//>>>切换频道：101</span><span class="token comment">//>>>关闭电视...</span><span class="token comment">//>>>拉起窗帘...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、中介者模式的注意事项和细节"><a href="#4、中介者模式的注意事项和细节" class="headerlink" title="4、中介者模式的注意事项和细节"></a>4、中介者模式的注意事项和细节</h2><p><strong>优点</strong></p><ul><li><p>1）多个类相互耦合，会形成网状结构，使用中介者模式将网状结构分离为星型结构，进行解耦</p></li><li><p>2）减少类间依赖，降低了耦合，符合迪米特原则</p></li></ul><p><strong>缺点</strong></p><ul><li><p>3）中介者承担了较多的责任，一旦中介者出现了问题，整个系统就会受到影响</p></li><li><p>4）如果设计不当，中介者对象本身变得过于复杂，这点在实际使用时，要特别注意</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2022/08/10/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/10/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="1、天气预报需求"><a href="#1、天气预报需求" class="headerlink" title="1、天气预报需求"></a>1、天气预报需求</h2><p>具体要求如下：</p><ul><li><p>1）气象站可以将每天测量到的温度，湿度，气压等等以公告的形式发布出去（比如发布到自己的网站或第三方）</p></li><li><p>2）需要设计开放型 API，便于其他第三方也能接入气象站获取数据</p></li><li><p>3）提供温度、气压和湿度的接口</p></li><li><p>4）测量数据更新时，要能实时的通知给第三方</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208101327666.png" alt="img"></p><h2 id="2、天气预报需求方案之普通方案"><a href="#2、天气预报需求方案之普通方案" class="headerlink" title="2、天气预报需求方案之普通方案"></a>2、天气预报需求方案之普通方案</h2><p><strong>WeatherData类</strong></p><p>通过对气象站项目的分析，我们可以初步设计出一个<code>WeatherData</code>类</p><p><img src="http://img-md-js.linjsblog.top/img/202208101333665.png" alt="img"></p><ul><li><p>1）通过<code>getXxx</code>方法，可以让第三方接入，并得到相关信息</p></li><li><p>2）当数据有更新时，气象站通过调用<code>dataChange()</code>去更新数据，当第三方再次获取时，就能得到最新数据，当然也可以推送</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208101333251.png" alt="img"></p><p><code>CurrentConditions</code>（当前的天气情况）可以理解成是我们气象局的网站</p><p><strong>核心代码</strong></p><p>气象网站类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 当前的天气情况：可以理解成是气象局的网站 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditions</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新天气情况，通过推送的方式，由 WeatherData 调用     *     * @param temperature     * @param pressure     * @param humidity     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Float</span> temperature<span class="token punctuation">,</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">,</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 更新最新天气数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token comment">// 展示最新天气数据</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 公告板展示天气情况     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============最新天气============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 当前温度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">+</span> <span class="token string">" ℃ ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 当前气压："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">+</span> <span class="token string">" kPa ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 当前湿度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">+</span> <span class="token string">" %RH ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>气象数据类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 核心类 * 1、包含最新的天气信息情况 * 2、含有 CurrentConditions 对象 * 3、当数据更新时，主动调用 CurrentConditions 的 update() 方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CurrentConditions</span> conditions<span class="token punctuation">;</span>    <span class="token comment">/**     * 传入 CurrentConditions 对象     *     * @param conditions     */</span>    <span class="token keyword">public</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token class-name">CurrentConditions</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>conditions <span class="token operator">=</span> conditions<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> temperature<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pressure<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> humidity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 推送天气数据到网站     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        conditions<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 当天气数据发生变化时进行更新     *     * @param temperature     * @param pressure     * @param humidity     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Float</span> temperature<span class="token punctuation">,</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">,</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题分析</strong></p><ul><li><p>1）其他第三方接入气象站获取数据的问题</p></li><li><p>2）无法在运行时动态的添加第三方（新浪网站）</p></li><li><p>3）违反<code>OCP</code>原则 &#x3D;&gt; 观察者模式</p></li></ul><p>在<code>WeatherData</code>中增加第三方时，都需要创建对应的第三方公台板对象并加入到<code>dataChange()</code>方法中，既不是动态加入，也不利于维护</p><h2 id="3、观察者模式原理"><a href="#3、观察者模式原理" class="headerlink" title="3、观察者模式原理"></a>3、观察者模式原理</h2><p>观察者模式类似订牛奶业务</p><ul><li><p>1）奶站 &#x2F; 气象局：<code>Subject</code></p></li><li><p>2）用户 &#x2F; 第三方网站：<code>Observer</code></p></li></ul><p><code>Subject</code>：登记注册、移除和通知</p><p><img src="http://img-md-js.linjsblog.top/img/202208101337631.png" alt="img"></p><ul><li><p>1）<code>registerObserver()</code>：注册</p></li><li><p>2）<code>removeObserver()</code>：移除</p></li><li><p>3）<code>notifyObservers()</code>：通知所有的注册的用户，根据不同需求，可以是更新数据，让用户来取，也可能是实施推送，看具体需求定</p></li></ul><p><code>Observer</code>：接收输入</p><p><img src="http://img-md-js.linjsblog.top/img/202208101337573.png" alt="img"></p><p>观察者模式：对象之间多对一依赖的一种设计方案，被依赖的对象为<code>Subject</code>，依赖的对象为<code>Observer</code>，<code>Subject</code>通知<code>Observer</code>变化，比如这里的奶站是<code>Subject</code>，是1的一方。用户是<code>Observer</code>，是多的一方</p><h2 id="4、天气预报需求方案之观察者模式"><a href="#4、天气预报需求方案之观察者模式" class="headerlink" title="4、天气预报需求方案之观察者模式"></a>4、天气预报需求方案之观察者模式</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208101343223.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202208101343161.png" alt="img"></p><p><strong>核心代码</strong></p><p><strong>观察者对象</strong><code>Observer</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 观察者接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Float</span> temperature<span class="token punctuation">,</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">,</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 观察者实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditions</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Float</span> temperature<span class="token punctuation">,</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">,</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 更新最新天气数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token comment">// 展示最新天气数据</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 公告板展示天气情况     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============最新天气============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 当前温度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">+</span> <span class="token string">" ℃ ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 当前气压："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">+</span> <span class="token string">" kPa ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 当前湿度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">+</span> <span class="token string">" %RH ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主体对象</strong><code>**Subject**</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 主体对象接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 主体对象实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span> observerList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        observerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> temperature<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pressure<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> humidity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 推送天气数据到网站     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 当天气数据发生变化时进行更新     *     * @param temperature     * @param pressure     * @param humidity     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Float</span> temperature<span class="token punctuation">,</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">,</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        observerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> observerList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            observerList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observerList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> pressure<span class="token punctuation">,</span> humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用测试</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建气象网站对象</span>        <span class="token class-name">CurrentConditions</span> currentConditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建气象数据对象</span>        <span class="token class-name">WeatherData</span> weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册气象网站对象</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>currentConditions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 天气发生变化时，更新最新的气象数据</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">10f</span><span class="token punctuation">,</span> <span class="token number">150f</span><span class="token punctuation">,</span> <span class="token number">40f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;最新天气&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*** 当前温度：10.0 ℃ ****** 当前气压：150.0 kPa ****** 当前湿度：40.0 %RH ***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>观察者模式的好处</strong></p><ul><li><p>1）观察者模式设计后，会以集合的方式来管理用户<code>Observer</code>，包括注册、移除和通知</p></li><li><p>2）这样，我们增加观察者（这里可以理解成一个新的公告板），就不需要去修改核心类<code>WeatherData</code>不会修改代码，遵守了<code>ocp</code>原则</p></li></ul><p>例如，我们新增<code>SinaWebSite</code>和<code>BaiDuWebSite</code>两个三方网站，接口气象局。此时三方只需实现相应接口即可，<code>WeatherData</code>不需要有任何的改变</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 新增的三方观察者对象——新浪网 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SinaWebSite</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新天气情况，通过推送的方式，由 WeatherData 调用     *     * @param temperature     * @param pressure     * @param humidity     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Float</span> temperature<span class="token punctuation">,</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">,</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 更新最新天气数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token comment">// 展示最新天气数据</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 公告板展示天气情况     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============新浪网-最新天气============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 新浪网-当前温度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">+</span> <span class="token string">" ℃ ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 新浪网-当前气压："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">+</span> <span class="token string">" kPa ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 新浪网-当前湿度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">+</span> <span class="token string">" %RH ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 新增的三方观察者对象——百度网 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaiDuWebSite</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新天气情况，通过推送的方式，由 WeatherData 调用     *     * @param temperature     * @param pressure     * @param humidity     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Float</span> temperature<span class="token punctuation">,</span> <span class="token class-name">Float</span> pressure<span class="token punctuation">,</span> <span class="token class-name">Float</span> humidity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 更新最新天气数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token comment">// 展示最新天气数据</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 公告板展示天气情况     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============百度网-最新天气============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 百度网-当前温度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">+</span> <span class="token string">" ℃ ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 百度网-当前气压："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">+</span> <span class="token string">" kPa ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*** 百度网-当前湿度："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">+</span> <span class="token string">" %RH ***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用测试</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 新增三方气象网站，只需注册即可</span>weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SinaWebSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BaiDuWebSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 天气发生变化时，更新最新的气象数据</span>weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">15f</span><span class="token punctuation">,</span> <span class="token number">120f</span><span class="token punctuation">,</span> <span class="token number">80f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output</p><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;最新天气&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*** 当前温度：10.0 ℃ ****** 当前气压：150.0 kPa ****** 当前湿度：40.0 %RH ***&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;百度网-最新天气&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*** 百度网-当前温度：10.0 ℃ ****** 百度网-当前气压：150.0 kPa ****** 百度网-当前湿度：40.0 %RH ***&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;新浪网-最新天气&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*** 新浪网-当前温度：10.0 ℃ ****** 新浪网-当前气压：150.0 kPa ****** 新浪网-当前湿度：40.0 %RH ***Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当三方网站不再需要时，只要做相应的移除即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 移除气象网站</span>weatherData<span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span>currentConditions<span class="token punctuation">)</span><span class="token punctuation">;</span>weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">20f</span><span class="token punctuation">,</span> <span class="token number">160f</span><span class="token punctuation">,</span> <span class="token number">30f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//============新浪网-最新天气============</span><span class="token comment">//*** 新浪网-当前温度：20.0 ℃ ***</span><span class="token comment">//*** 新浪网-当前气压：160.0 kPa ***</span><span class="token comment">//*** 新浪网-当前湿度：30.0 %RH ***</span><span class="token comment">//============百度网-最新天气============</span><span class="token comment">//*** 百度网-当前温度：20.0 ℃ ***</span><span class="token comment">//*** 百度网-当前气压：160.0 kPa ***</span><span class="token comment">//*** 百度网-当前湿度：30.0 %RH ***</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、JDK-源码分析"><a href="#5、JDK-源码分析" class="headerlink" title="5、JDK 源码分析"></a>5、JDK 源码分析</h2><p>JDK 中的<code>Observable</code>就使用到了观察者模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Observable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">></span></span> obs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>obs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>obs<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">deleteObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obs<span class="token punctuation">.</span><span class="token function">removeElement</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Observable</span> o<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>角色分析和职责说明</strong></p><ul><li><p>1）<code>Observable</code>即充当了<code>Subject</code>接口及其实现类，其中包括了<code>Observer</code>的集合，并且包括对观察者相关的注册、移除和通知等方法：<code>addObserver()</code>、<code>deleteObserver()</code>和<code>notifyObservers()</code>，这些方法就类似于我们上面例子中的<code>registerObserver()</code>、<code>removeObserver()</code>和<code>notifyObservers()</code></p></li><li><p>2）<code>Observer</code>即观察者接口，具有<code>update()</code>方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2022/08/09/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/09/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><h2 id="1、学校院系结构展示需求"><a href="#1、学校院系结构展示需求" class="headerlink" title="1、学校院系结构展示需求"></a>1、学校院系结构展示需求</h2><p>编写程序展示一个学校院系结构，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。如图：</p><p><img src="http://img-md-js.linjsblog.top/img/202208091627649.png" alt="img"></p><p><strong>传统方案分析</strong></p><ul><li><p>1）将学院看做是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的</p></li><li><p>2）实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案，不能很好实现的遍历的操作</p></li><li><p>3）解决方案：迭代器模式</p></li></ul><h2 id="2、基本介绍"><a href="#2、基本介绍" class="headerlink" title="2、基本介绍"></a>2、基本介绍</h2><ul><li><p>1）迭代器模式（lterator Pattern）是常用的设计模式，属于行为型模式</p></li><li><p>2）如果我们的集合元素是用<strong>不同方式</strong>实现的，<strong>有数组、集合或者其他方式</strong>。当客户端要遍历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决</p></li><li><p>3）迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部的结构</p></li></ul><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208091635854.png" alt="img"></p><p><strong>迭代器模式的角色及职责</strong></p><ul><li><p><code>Iterator</code>迭代器接口：系统提供，含有<code>hasNext</code>、<code>next</code>、<code>remove</code></p></li><li><p><code>ConcreteIterator</code>具体的迭代器：管理相关的迭代</p></li><li><p><code>Aggregate</code>聚合接口：将客户端和具体的聚合解耦</p></li><li><p><code>ConcreteAggregate</code>具体的聚合类：提供一个方法，返回可以正确遍历集合的迭代器</p></li><li><p><code>Client</code>客户端：通过<code>Iterator</code>迭代器接口和<code>Aggregate</code>聚合接口依赖其具体的迭代器和聚合子类</p></li></ul><h2 id="3、迭代器完成学校院系结构展示需求"><a href="#3、迭代器完成学校院系结构展示需求" class="headerlink" title="3、迭代器完成学校院系结构展示需求"></a>3、迭代器完成学校院系结构展示需求</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208091650302.png" alt="img"></p><p><strong>核心代码</strong></p><p>具体的迭代器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 计算机学院迭代器类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollegeIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ComputerCollegeIterator</span><span class="token punctuation">(</span><span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> position <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> departments<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> departments<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> departments<span class="token punctuation">[</span><span class="token operator">++</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 信息学院迭代器类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoCollegeIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">></span></span> departments<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfoCollegeIterator</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">></span></span> departments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> position <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> departments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> departments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>聚合接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">College</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">></span></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的聚合类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 计算机学院 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollege</span> <span class="token keyword">implements</span> <span class="token class-name">College</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        departments<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"Java专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"PHP专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"Python专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"计算机学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">></span></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputerCollegeIterator</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 信息学院 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoCollege</span> <span class="token keyword">implements</span> <span class="token class-name">College</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">></span></span> departments<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfoCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"信息安全专业"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"网络安全专业"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"服务器安全专业"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"信息学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">></span></span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InfoCollegeIterator</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutPutImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">OutPutImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCollege</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">College</span><span class="token punctuation">></span></span> collegeList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">College</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> collegeList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">College</span> college <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span> <span class="token operator">+</span> college<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printDepartment</span><span class="token punctuation">(</span>college<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printDepartment</span><span class="token punctuation">(</span><span class="token class-name">College</span> college<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> college<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">College</span><span class="token punctuation">></span></span> collegeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InfoCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">OutPutImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printCollege</span><span class="token punctuation">(</span>collegeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;计算机学院&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Java专业PHP专业Python专业&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;信息学院&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;信息安全专业网络安全专业服务器安全专业Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、ArrayList-集合源码分析"><a href="#4、ArrayList-集合源码分析" class="headerlink" title="4、ArrayList 集合源码分析"></a>4、ArrayList 集合源码分析</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208091750323.png" alt="img"></p><p><strong>角色分析说明</strong></p><ul><li><p><code>Iterator</code>迭代器接口：由系统提供，定义了<code>hasNext()</code>和<code>next()</code>等方法</p></li><li><p><code>Itr</code>具体的迭代器实现类：作为<code>ArrayList</code>的内部类存在，实现了<code>Iterator</code>接口的<code>hasNext()</code>和<code>next()</code>等方法</p></li><li><p><code>List</code>聚合接口：定义了<code>iterator()</code>方法，返回一个迭代器接口对象</p></li><li><p><code>ArrayList</code>具体的聚合类：实现了<code>iterator()</code>方法</p></li></ul><p>迭代器模式提供了一个不同集合类型（如<code>ArrayList</code>、<code>LinkedList</code>等）的统一遍历解决方案</p><h2 id="5、迭代器模式的注意事项和细节"><a href="#5、迭代器模式的注意事项和细节" class="headerlink" title="5、迭代器模式的注意事项和细节"></a>5、迭代器模式的注意事项和细节</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li><p>1）提供一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了</p></li><li><p>2）隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成</p></li><li><p>3）提供了一种设计思想，就是一个类应该只有一个引起变化的原因（单一责任原则）。在聚合类中，我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来集合改变的话，只影响到聚合对象。而如果遍历方式改变的话，只影响到了迭代器</p></li><li><p>4）当要展示一组相似对象，或者遍历一组相同对象时使用，适合使用迭代器模式</p></li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引的数据结构</title>
      <link href="/2022/08/07/mysql%E7%B4%A2%E5%BC%95%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/"/>
      <url>/2022/08/07/mysql%E7%B4%A2%E5%BC%95%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h1><h2 id="1-为什么要使用索引"><a href="#1-为什么要使用索引" class="headerlink" title="1.为什么要使用索引"></a>1.为什么要使用索引</h2><p>索引是存储引擎用于快速找到数据记录的一种数据结构，就好比一本教课书的目录部分，通过目录找到对应文件章的页码，便可以快速定位到需要的文章。MySQL也是一样的道理，进行数据查找时，首先查找查询条件是否命中某条索引，符合则<code>通过索引查找</code>相关数据，如果不符合则需要<code>全表扫描</code>，即需要一条一条地查找记录，直到找到与条件符合的记录。</p><p><img src="http://img-md-js.linjsblog.top/img/202208042146546.png" alt="image-20220804214646075"></p><p>如上图所示，数据库没有索引的情况下，数据<code>分布在硬盘不同的位置上面</code>，读取数据时，摆臂需要前后摆动查找数据，这样操作非常消耗时间。如果数据顺序摆放，那么也需要从1到6行按顺序读取，这样就相当于进行了6次lO操作，依旧非常耗时。如果我们不借助任何索引结构帮助我们快速定位数据的话，我们查找Col 2&#x3D;89这条记录，就要逐行去查找、去比较。从Col2&#x3D;34开始，进行比较，发现不是，继续下一行。我们当前的表只有不到10行数据，但如果表很大的话，有上千万条数据，就意味着要做很多很多次磁盘I&#x2F;0才能找到。现在要查找Col 2&#x3D;89这条记录。CPU必须先去磁盘查找这条记录，找到之后加载到内存，再对数据进行处理。这个过程最耗时间的就是磁盘I&#x2F;O</p><p>假如给数据使用<code>二叉树</code>这样的数据结构进行存储，如下图所示<img src="http://img-md-js.linjsblog.top/img/202208042225084.png" alt="image-20220804222506253"></p><p>对字段Col2添加了索引，就相当于在硬盘上为Col 2维护了一个索引的数据结构，即这个<code>二叉搜索树</code>。二叉搜索树的每个结点存储的是（K, V)结构，key是Col 2，value是该key所在行的文件指针(地址)。比如:该二叉搜索树的根节点就是:（34,0x07)。现在对Col2添加了索引，这时再去查找Col 2&#x3D;89这条记录的时候会先去查找该二叉搜索树（二叉树的遍历查找）。读34到内存，89&gt;34;继续右侧数据，读89到内存，89 &#x3D;&#x3D; 89;找到数据返回。找到之后就根据当前结点的value快速定位到要查找的记录对应的地址。我们可以发现，只需要查找两次就可以定位到记录的地址，查询速度就提高了。</p><p>这就是我们为什么要建索引，目的就是为了<code>减少磁盘I/0的次数</code>，加快查询速率。</p><h2 id="2-索引及其优缺点"><a href="#2-索引及其优缺点" class="headerlink" title="2.索引及其优缺点"></a>2.索引及其优缺点</h2><h3 id="2-1-索引概述"><a href="#2-1-索引概述" class="headerlink" title="2.1 索引概述"></a>2.1 索引概述</h3><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构</p><p><strong>索引的本质</strong>:索引是数据结构。你可以简单理解为“排好序的快速查找数据结构”，满足特定查找算法。这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法。</p><p>索引是在存储引擎中实现的，因此每种存储引擎的索引不一定完全相同，并且每种存储引擎不一定支持所有索引类型。同时，存储引擎可以定义每个表的最大索引数和最大索引长度。所有存储引擎支持每个表至少16个索引，总索引长度至少为256字节。有些存储引擎支持更多的索引数和更大的索引长度。</p><h3 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h3><p>(1）类似大学图书馆建书目索引，提高数据检索的效率，<code>降低数据库的IO成本</code>，这也是创建索引最主要的原因。</p><p>(2）通过创建唯一索引，可以保证数据库表中每一行<code>数据的唯一性</code>。</p><p>(3）在实现数据的参考完整性方面，可以<code>加速表和表之间的连接</code>。换句话说，对于有依赖关系的子表和父表联合查询时，可以提高查询速度。</p><p>(4) 在使用分组查询和排序子句进行数据查询时，可以显著 <code>减少查询分组和排序的时间</code>，降低CPU的消耗</p><h3 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3 缺点"></a>2.3 缺点</h3><p>增加索引也有许多不利的方面，主要表现在如下几个方面:</p><p>(1）创建索引和维护索引要耗费时间，并且随着数据量的增加，所耗费的时间也会增加。</p><p>(2）索引需要占磁盘空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，存储在磁盘上，如果有大量的索引，索引文件就可能比数据文件更快达到最大文件尺寸。</p><p>(3）虽然索引大大提高了查询速度，同时却会降低更新表的速度。当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</p><blockquote><p>提示：索引可以提高查询的速度，但是会影响插入记录的速度，这种情况下</p></blockquote><h2 id="3-InnDB中索引的推演"><a href="#3-InnDB中索引的推演" class="headerlink" title="3. InnDB中索引的推演"></a>3. InnDB中索引的推演</h2><h3 id="3-1-索引之前的查找"><a href="#3-1-索引之前的查找" class="headerlink" title="3.1 索引之前的查找"></a>3.1 索引之前的查找</h3><p>先来看一个精确匹配的例子</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">[</span>列名列表<span class="token punctuation">]</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 列名 <span class="token operator">=</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-在一个页中查找"><a href="#1-在一个页中查找" class="headerlink" title="1. 在一个页中查找"></a>1. 在一个页中查找</h4><p><code>假设</code>目前表中的记录比较少，所有的记录都可以被存放到一个页中，在查找记录的时候可以根据搜索条件的不同分为两种情况:</p><ul><li><p>以主键为搜索条件</p><p>可以在页目录中使用<strong>二分法</strong>快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</p></li><li><p>以其他列作为搜索条件</p><p>因为在数据页中并没有对非主键列建立所谓的页目录，所以我们无法通过二分法快速定位相应的槽。这种情况下只能从<strong>最小记录</strong>开始<strong>依次遍历</strong>单链表中的每条记录，然后对比每条记录是不是符合搜索条件。很显然，这种查找的效率是非常低的。</p></li></ul><h4 id="2-很多页中查找"><a href="#2-很多页中查找" class="headerlink" title="2.很多页中查找"></a>2.很多页中查找</h4><p>大部分情况下我们表中存放的记录都是非常多的，需要好多的数据页来存储这些记录。在很多页中查找记录的话可以分为两个步骤:</p><ol><li>定位到记录所在的页。</li><li>从所在的页内中查找相应的记录。</li></ol><p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能从<code>第一个页</code>沿着<code>双向链表</code>一直往下找，在每一个页中根据我们上面的查找方式去查找指定的记录。因为要遍历所有的数据页，所以这种方式显然是超级<strong>耗时</strong>的。如果一个表有一亿条记录呢?此时索引应运而生。</p><h3 id="3-2-设计索引"><a href="#3-2-设计索引" class="headerlink" title="3.2 设计索引"></a>3.2 设计索引</h3><p>建一个表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE index_demo(    c1 INT,    c2 INT,    c3 CHAR(1)    PAIMARY KEY(c1))ROW_FORMAT &#x3D; Compact;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个新建的<code>index_demo</code>表中有2个lINT类型的列，1个CHAR(1)类型的列，而且我们规定了c1列为主键，这个表使用<code>Compact</code>行格式来实际存储记录的。这里我们简化了index_demo表的行格式示意图:</p><p><img src="http://img-md-js.linjsblog.top/img/202208052232088.png" alt="image-20220805223229400"></p><p>我们只在示意图里展示记录的这几个部分:</p><ul><li>record_type :记录头信息的一项属性，表示记录的类型，0表示普通记录、2表示最小记录、3表示最大记录、1暂时还没用过，下面讲。</li><li>next_record :记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量，我们用箭头来表明下一条记录是谁。</li><li>各个列的值:这里只记录在index_demo表中的三个列，分别是c1、c2和c3。</li><li>其他信息︰除了上述3种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</li></ul><p>将记录格式示意图的其他信息项暂时去掉并把它竖起来的效果就是这样:</p><p><img src="http://img-md-js.linjsblog.top/img/202208052236842.png" alt="image-20220805223643342"></p><p>把一些记录放到页里的示意图就是：</p><p><img src="http://img-md-js.linjsblog.top/img/202208052237175.png" alt="image-20220805223748390"></p><h4 id="1-一个简单的索引设计方案"><a href="#1-一个简单的索引设计方案" class="headerlink" title="1.一个简单的索引设计方案"></a>1.一个简单的索引设计方案</h4><p>我们在根据某个搜索条件查找一些记录时为什么要遍历所有的数据页呢?因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页中的记录，所以不得不依次遍历所有的数据页。所以如果我们想快速的定位到需要查找的记录在哪些数据页中该咋办?我们可以为快速定位记录所在的数据页而建立一个目录，建这个目录必须完成下边这些事:</p><ul><li><p><strong>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。</strong></p><p><code>假设</code>:每个数据页最多能存放3条记录(实际上一个数据页非常大，可以存放下好多记录)。有了这个假设之后我们向index_demo表插入3条记录:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO index_demo VALUES(1,4,&#39;u&#39;),(3,9,&#39;d&#39;),(5,3,&#39;y&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么这些记录已经按照主键值的大小串联成单项链表了，如图所示</p><p><img src="http://img-md-js.linjsblog.top/img/202208052244575.png" alt="image-20220805224401560"></p><p>从图中可以看出来，index_demo表中的3条记录都被插入到了编号为10的数据页中了。此时我们再来插入一条记录:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO index_demo VALEUS(4,4,&#39;a&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为页10最多存放3条记录，所以我们不得不再分配一个新页：</p><p><img src="http://img-md-js.linjsblog.top/img/202208052246179.png" alt="image-20220805224623035"></p><p>注意，新分配的数据页编号可能并不是连续的。它们只是通过维护着上一个页和下一个页的编号而建立了链表关系。另外，页10中用户记录最大的主键值是5，而页28中有一条记录的主键值是4，因为5&gt;4，所以这就不符合下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值的要求，所以在插入主键值为4的记录的时候需要伴随着一次记录移动，也就是把主键值为5的记录移动到页28中，然后再把主键值为4的记录插入到页10中，这个过程的示意图如下:</p><p><img src="http://img-md-js.linjsblog.top/img/202208052250682.png"></p><p>这个过程表明了在对页中的记录进行增删改操作的过程中，我们必须通过一些诸如记录移动的操作来始终保证这个状态一直成立:下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。这个过程我们称为<code>页分裂</code>。</p></li><li><p><strong>给所有页建立一个目录项</strong></p><p>由于<code>数据页的编号可能是不连续的</code>，所以在向index_demo表中插入许多条记录后，可能是这样的效果：</p><p><img src="http://img-md-js.linjsblog.top/img/202208052255358.png" alt="image-20220805225512120"></p><p>因为这些16KB的页在物理存储上是不连续的，所以如果想从这么多页中根据主键值快速定位某些记录所在的页，我们需要给它们做个目录，每个页对应一个目录项，每个目录项包括下边两个部分:</p><ol><li>页的用户记录中最小的主键值，我们用<code>key</code>来表示。</li><li>页号，我们用<code>page_no</code>表示。</li></ol><p>所以我们为上面几个页做好的目录就像这样子：</p><p><img src="http://img-md-js.linjsblog.top/img/202208052300250.png" alt="image-20220805230012572"></p><p>以<strong>页28</strong>为例，它对应目录项2，这个目录项中包含着该页的页号<strong>28</strong>以及该页中用户记录的最小主键值5。我们只需要把几个目录项在物理存储器上连续存储（比如:数组)，就可以实现根据主键值快速查找某条记录的功能了。比如:查找主键值为<strong>20</strong>的记录，具体查找过程分两步:</p><ol><li>先从目录项中根据二分法快速确定出主键值为20的记录在目录项3中(因为12 &lt; 20 &lt; 209)，它对应的页是页9</li><li>再根据前边说的在页中查找记录的方式去<strong>页9</strong>中定位具体的记录。</li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为索引</p></li></ul><h4 id="2-InnoDB的索引方案"><a href="#2-InnoDB的索引方案" class="headerlink" title="2. InnoDB的索引方案"></a>2. InnoDB的索引方案</h4><h5 id="①迭代1次-目录项纪录的页"><a href="#①迭代1次-目录项纪录的页" class="headerlink" title="①迭代1次:目录项纪录的页"></a><strong>①迭代1次:目录项纪录的页</strong></h5><p>上边称为一个简易的索引方案，是因为我们为了在根据主键值进行查找时使用<code>二分法</code>快速定位具体的目录项而<code>假设</code>所有目录项都可以在物理存储器上<code>连续存储</code>，但是这样做有几个问题:</p><ul><li>InnoDB是使用页来作为管理存储空间的基本单位，最多能保证<code>16KB</code>的连续存储空间，而随着表中记录数量的增多，需要非常大的连续的存储空间才能把所有的目录项都放下，这对记录数量非常多的表是不现实的。</li><li>我们时常会对记录进行增删，<code>假设</code>我们把页28中的记录都删除了，那意味着目录项2也就没有存在的必要了，这就需要把目录项2后的目录项都向前移动一下，这样牵一发而动全身的操作效率很差。</li></ul><p>所以，我们需要一种可以灵活管理所有目录项的方式。我们发现目录项其实长得跟我们的用户记录差不多，只不过目录项中的两个列是主键和页号而已，为了和用户记录做一下区分，我们把这些用来表示目录项的记录称为目录项记录。那InnoDB怎么区分一条记录是普通的用户记录还是目录项记录呢? 使用记录头信息里的<code>record_type</code>属性，它的各个取值代表的意思如下:</p><ul><li>0：普通用户记录</li><li>1：目录项记录</li><li>2：最小记录</li><li>3：最大记录</li></ul><p>我们把前边使用到的目录项放到数据页中的样子就是这样:</p><p><img src="http://img-md-js.linjsblog.top/img/202208071634425.png" alt="image-20220807163444080"></p><p>从图中可以看出来，我们新分配了一个编号为30的页来专门存储目录项记录。这里再次强调<code>目录项记录</code>和普通的<code>用户记录</code>的<strong>不同点</strong>:</p><ul><li><code>目录项记录</code>的<code>record_type</code>值是1，而<code>普通用户记录</code>的<code>record_type</code>值是0。</li><li>目录项记录只有<code>主键值和页的编号</code>两个列，而普通的用户记录的列是用户自己定义的，可能包含<code>很多列</code>，另外还有InnoDB自己添加的隐藏列。</li><li>了解:记录头信息里还有一个叫<code>min_rec_mask</code>的属性，只有在存储<code>目录项记录</code>的页中的主键值最小的<code>目录项记录</code>的<code>min_rec_mask</code>值为1，其他别的记录的<code>min_rec_mask</code>值都是0。</li></ul><p><strong>相同点</strong>:两者用的是一样的数据页，都会为主键值生成<code>Page Directory</code>(页目录)，从而在按照主键值进行查找时可以使用<code>二分法</code>来加快查询速度</p><p>现在以查找主键为<code>20</code>的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步:</p><ol><li>先到存储<code>目录项记录</code>的页，也就是页30中通过<code>二分法</code>快速定位到对应目录项，因为<code>12 &lt; 20 &lt; 209</code>，所以定位到对应的记录所在的页就是页9。</li><li>再到存储用户记录的页9中根据<code>二分法</code>快速定位到主键值为<code>20</code>的用户记录</li></ol><h5 id="②迭代2次-多个目录项纪录的页"><a href="#②迭代2次-多个目录项纪录的页" class="headerlink" title="②迭代2次:多个目录项纪录的页"></a><strong>②迭代2次:多个目录项纪录的页</strong></h5><p>虽然说<code>目录项记录</code>中只存储主键值和对应的页号，比用户记录需要的存储空间小多了，但是不论怎么说一个页只有<code>16KB</code>大小，能存放的<code>目录项记录</code>也是有限的，那如果表中的数据太多，以至于一个数据页不足以存放所有的<code>目录项记录</code>，如何处理呢? 这里我们<code>假设</code>一个存储目录项记录的页<code>最多只能存放4条目录项</code>记录，所以如果此时我们再向上图中插入一条主键值为320的用户记录的话，那就需要分配一个新的存储目录项记录的页:</p><p><img src="http://img-md-js.linjsblog.top/img/202208071703129.png" alt="image-20220807170322437"></p><p>从图中看出，我们插入了一条主键值为320的用户记录之后需要两个新的数据页：</p><ul><li>为存储该用户记录而新生成了页31</li><li>因为原先存储目录项记录的页30的容量已满（我们前边假设只能存储4条目录项记录)，所以不得不需要一个新的页32来存放页31对应的目录项</li></ul><p>现在因为存储目录项记录的页不止一个，所以如果我们想根据主键值查找一条用户记录大致需要3个步骤，以查找主键值为20的记录为例:</p><ol><li><p>确定目录项记录页</p><p>我们现在的存储目录项记录的页有两个，即页30和页32，又因为页30表示的目录项的主键值的范围是[1,320)，页32表示的目录项的主键值不小于320，所以主键值为20的记录对应的目录项记录在页30中。</p></li><li><p>通过目录项记录页确定用户记录真实所在的页。</p><p>在一个存储目录项纪录的页中通过主键值定位一条目录项记录的方式说过了</p></li><li><p>在真实存储用户记录的页中定位到具体的记录。</p></li></ol><h5 id="③迭代3次-目录项纪录页的目录页"><a href="#③迭代3次-目录项纪录页的目录页" class="headerlink" title="③迭代3次:目录项纪录页的目录页"></a><strong>③迭代3次:目录项纪录页的目录页</strong></h5><p>问题来了，在这个查询步骤的第1步中我们需要定位存储目录项记录的页，但是这些页是不连续的，如果我们表中的数据非常多则会产生很多存储目录项记录的页，那我们怎么根据主键值快速定位一个存储目录项记录的页呢?那就为这些存储目录项记录的页再生成一个<code>更高级的目录</code>，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，所以现在各个页的示意图就是这样子:</p><p><img src="http://img-md-js.linjsblog.top/img/202208071726676.png" alt="image-20220807172618481"></p><p>如图，我们生成了一个存储更高级目录项的页33，这个页中的两条记录分别代表页3o和页32，如果用户记录的主键值在[1，320)之间，则到页30中查找更详细的目录项记录，如果主键值不小于320的话，就到页32中查找更详细的目录项记录。</p><p>随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，那么我们可以用下边这个图来描述它:</p><p><img src="http://img-md-js.linjsblog.top/img/202208071728637.png" alt="image-20220807172825318"></p><p>这个数据结构，他的名称是<code>B+树</code></p><h5 id="④B-树"><a href="#④B-树" class="headerlink" title="④B+树"></a>④B+树</h5><p>不论是存放用户记录的数据页，还是存放目录项记录的数据页，我们都把它们存放到B+树这个数据结构中了，所以我们也称这些数据页为节点。从图中可以看出，我们的实际用户记录其实都存放在B+树的最底层的节点上，这些节点也被称为叶子节点，其余用来存放目录项的节点称为非叶子节点或者内节点，其中B+树最上边的那个节点也称为根节点。</p><p>一个B+树的节点其实可以分成好多层，规定最下边的那层，也就是存放我们用户记录的那层为第0层，之后依次往上加。之前我们做了一个非常极端的假设:存放用户记录的页最多存放3条记录，存放目录项记录的页最多存放4条记录。其实真实环境中一个页存放的记录数量是非常大的，假设所有存放用户记录的<code>叶子节点</code>代表的数据页可以存放<code>100条用户记录</code>，所有存放目录项记录的内节点代表的数据页可以存放<code>1000条目录项记录</code>，那么:</p><ul><li>如果B+树只有1层，也就是只有1个用于存放用户记录的节点，最多能存放100条记录。</li><li>如果B+树有2层，最多能存放1000x100&#x3D;100000条记录</li><li>如果B+树有3层，最多能存放1000×100×100&#x3D;1000,0000,0000条记录</li><li>如果B+树有4层，最多能存放100×1000×1000×100&#x3D;1000,0000,0000 条记录。相当多的记录! ! !</li></ul><p>你的表里能存放100000000000 条记录吗?所以一般情况下，我们<code>用到的B+树都不会超过4层</code>，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页)，又因为在每个页面内有所谓的<code>Page Directory(页目录)</code>，所以在页面内也可以通过<code>二分法</code>实现快速定位记录。</p><h3 id="3-3-常见索引概念"><a href="#3-3-常见索引概念" class="headerlink" title="3.3 常见索引概念"></a>3.3 常见索引概念</h3><p>索引按照物理实现方式，可以分为两种：聚簇（聚集）和非聚簇（非聚集）索引。我们也吧非聚簇索引称为二级索引和或者辅助索引。</p><h4 id="1-聚簇索引"><a href="#1-聚簇索引" class="headerlink" title="1.聚簇索引"></a>1.聚簇索引</h4><p><code>聚簇索引</code>并不是一种单独的索引类型，而是一种数据存储方式（所有用户记录都存储在了叶子节点），也就是所谓的 <code>索引即数据</code>，<code>数据即索引</code>。</p><blockquote><p>术语“聚簇”表示数据行和相邻的键值聚簇的存储在一起</p></blockquote><p><strong>特点：</strong></p><ol><li><p>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义:</p><ul><li>页内的记录是按照主键的大小顺序排成一个单向链表</li><li>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表</li><li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表</li></ul></li><li><p>B+树的<code>叶子节点</code>存储的是完整的用户记录</p><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）</p></li></ol><p>我们把具有这两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个聚簇索引的叶子节点处。这种聚簇索引并不需要我们在MysQL语句中显式的使用INDEX语句去创建,InnoDB存储引擎会自动的为我们创建聚簇索引。</p><p><strong>优点：</strong></p><ul><li><code>数据访问更快</code>，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</li><li>聚簇索引对于主键的排序查找和范围查找速度非常快</li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据块中提取数据，所以节省了大量的io操作</li></ul><p><strong>缺点：</strong></p><ul><li><code>插入速度严重依赖于插入顺序</code>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键</li><li><code>更新主键的代价很高</code>，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新</li><li><code>二级索引访问需要两次索引查找</code>，第一次找到主键值，第二次根据主键值找到行数据</li></ul><p><strong>限制：</strong></p><ul><li>对于MySQL数据库目前只有InnoDB数据引擎支持聚簇索引，而MylSAM并不支持聚簇索引</li><li>由于数据物理存储排序方式只能有一种，所以每个MysQL的表只能有一个聚簇索引。一般情况下就是该表的主键</li><li>如果没有定义主键，Innodb会选择非空的唯一索引代替。如果没有这样的索引，Innodb会隐式的定义一个主键来作为聚簇索引</li><li>为了充分利用聚簇索引的聚簇的特性，所以innodb表的主键列尽量选用有序的顺序id，而不建议用无序的id，比如UUID、MD5、HASH、字符串列作为主键无法保证数据的顺序增长</li></ul><h4 id="2-二级索引（辅助索引、非聚簇索引）"><a href="#2-二级索引（辅助索引、非聚簇索引）" class="headerlink" title="2.二级索引（辅助索引、非聚簇索引）"></a>2.二级索引（辅助索引、非聚簇索引）</h4><p>上边介绍的<strong>聚簇索引</strong>只能在搜索条件是<strong>主键值</strong>时才能发挥作用，因为B+树中的数据都是按照主键进行排序的。那如果我们想以别的列作为搜索条件该怎么办呢?肯定不能是从头到尾沿着链表依次遍历记录一遍</p><p>答案:我们可以<strong>多建几棵B+树</strong>，不同的B+树中的数据采用不同的排序规则。比方说我们用c2列的大小作为数据页、页中记录的排序规则，再建一棵B+树，效果如下图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208092112297.png" alt="image-20220809211204219"></p><p>这个B+树与上边介绍的聚簇索引有几处不同:</p><ul><li>使用记录c2列的大小进行记录和页的排序，这包括三个方面的含义：<ul><li>页内的记录是按照c2列的大小顺序排成一个单向链表</li><li>各个存放用户记录的页也是根据页中记录的c2列大小顺序排成一个双向链表</li><li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的c2列大小顺序排成一个双向链表</li></ul></li><li>B+树的叶子节点存储的并不是完整的用户记录，而只是c2列+主键这两个列的值</li><li>目录项记录中不再是<code>主键+页号</code>的搭配，而变成了<code>c2列+页号</code>的搭配</li></ul><p>所以如果我们现在想通过c2列的值查找某些记录的话就可以使用我们刚刚建好的这个B+树了。以查找c2列的值为4的记录为例，查找过程如下：</p><ol><li><p>确定目录项记录页</p><p>根据根页面，也就是页44，可以快速定位到目录项记录所在的页为页42(因为2&lt;4 &lt;9 )</p></li><li><p>通过目录项记录页确定用户记录真实所在的页</p><p>在页42中可以快速定位到实际存储用户记录的页，但是由于c2列并没有唯一性约束，所以c2列值为4的记录可能分布在多个数据页中，又因为2&lt;4≤4，所以确定实际存储用户记录的页在页34和页35中</p></li><li><p>在真实存储用户记录的页中定位到具体的记录</p></li><li><p>但是这个B+树的叶子节点中的记录只存储了c2和c1(也就是主键）两个列，所以我们必须再根据主键值去聚簇索引中再查找—遍完整的用户记录（<strong>回表</strong>）</p></li></ol><p><strong>概念：回表</strong></p><p>我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根据c2列的值查找到完整的用户记录的话，仍然需要到聚簇索引中再查一遍，这个过程称为<code>回表</code>。也就是根据c2列的值查询一条完整的用户记录需要使用到2棵B+树!</p><p><strong>问题:</strong> 为什么我们还需要一次回表操作呢?直接把完整的用户记录放到叶子节点不OK吗?</p><p>如果把完整的用户记录放到叶子节点是可以不用回表。但是<code>太占地方</code>了，相当于每建立一棵B+树都需要把所有的用户记录再都拷贝一遍，这就有点太浪费存储空间了</p><p>因为这种按照非主键列建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为二级索引(英文名<code>secondary index</code>)，或者辅助索引。由于我们使用的是c2列的大小作为B+树的排序规则，所以我们也称这个B+树是为c2列建立的索引</p><p>非聚簇索引的存在不影响数据在聚簇索引中的组织，所以一张表可以有多个非聚簇索引</p><p><img src="http://img-md-js.linjsblog.top/img/202208092131104.png" alt="image-20220809213150612"></p><p>小结:聚簇索引与非聚簇索引的原理不同，在使用上也有一些区别:</p><ol><li>聚簇索引的叶子节点存储的就是我们的数据记录，非聚簇索引的叶子节点存储的是数据位置。非聚簇索引不会影响数据表的物理存储顺序</li><li>一个表只能有一个聚簇索引，因为只能有一种排序存储的方式，但可以有多个非聚簇索引，也就是多个索引目录提供数据检索</li><li>使用聚簇索引的时候，数据的查询效率高，但如果对数据进行插入，删除，更新等操作，效率会比非聚簇索</li></ol><h4 id="3-联合索引"><a href="#3-联合索引" class="headerlink" title="3.联合索引"></a>3.联合索引</h4><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照<code>c2和c3列</code>的大小进行排序，这个包含两层含义:</p><ul><li>先把各个记录和页按照c2列进行排序</li><li>在记录的c2列相同的情况下，采用c3列进行排序为c2和c3列建立的索引的示意图如下：</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208092138957.png" alt="image-20220809213811334"></p><p>如图所示，我们需要注意以下几点:</p><ul><li>每条目录项记录都由c2、c3、页号这三个部分组成，各条记录先按照c2列的值进行排序，如果记录的c2列相同，则按照c3列的值进行排序</li><li>B+树叶子节点处的用户记录由c2、c3和主键c1列组成</li></ul><p>注意一点，以c2和c3列的大小为排序规则建立的B+树称为联合索引，本质上也是一个二级索引。它的意思与分别为c2和c3列分别建立索引的表述是不同的，不同点如下:</p><ul><li>建立联合索引只会建立如上图一样的1棵B+树</li><li>为c2和c3列分别建立索引会分别以c2和c3列的大小为排序规则建立2棵B+树</li></ul><h3 id="3-4-InnDB的B-树索引的注意事项"><a href="#3-4-InnDB的B-树索引的注意事项" class="headerlink" title="3.4 InnDB的B+树索引的注意事项"></a>3.4 InnDB的B+树索引的注意事项</h3><h4 id="1-根页面位置万年不动"><a href="#1-根页面位置万年不动" class="headerlink" title="1. 根页面位置万年不动"></a>1. 根页面位置万年不动</h4><p>我们前边介绍B+树索引的时候，为了大家理解上的方便，先把存储用户记录的叶子节点都画出来，然后接着画存储目录项记录的内节点，实际上B+树的形成过程是这样的:</p><ul><li>每当为某个表创建一个B+树索引(聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个<code>根节点</code>页面。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录。</li><li>随后向表中插入用户记录时，先把用户记录存储到这个<strong>根节点</strong>中。</li><li>当根节点中的可用空间用完时继续插入记录，此时会将根节点中的所有记录复制到一个新分配的页，比如<code>页a</code>中，然后对这个新页进行<code>页分裂</code>，得到另一个新页，比如<code>页b</code>。这时新插入的记录根据键值（也就是聚簇索引中的主键值，二级索引中对应的索引中的主键值，二级索引中对应索引列的值）的大小就会被分配到<code>页a</code>或者<code>页b</code>中，而<code>根节点</code>便升级为存储目录项记录的页。</li></ul><p>这个过程特别注意的是:一个B+树索引的根节点自诞生之日起，便不会再移动。这样只要我们对某个表建立一个索引，那么它的根节点的页号便会被记录到某个地方，然后凡是InnoDB存储引擎需要用到这个索引的时候，都会从那个固定的地方取出根节点的页号，从而来访问这个索引。</p><h4 id="2-内节点中目录项记录的唯一性"><a href="#2-内节点中目录项记录的唯一性" class="headerlink" title="2.内节点中目录项记录的唯一性"></a>2.内节点中目录项记录的唯一性</h4><p>我们知道B+树索引的内节点中目录项记录的内容是<code>索引列＋页号</code>的搭配，但是这个搭配对于二级索引来说有点儿不严谨。还拿<code>index_demo</code>表为例，假设这个表中的数据是这样的:</p><p>c1</p><p>c2</p><p>c3</p><p>1</p><p>1</p><p>‘u’</p><p>3</p><p>1</p><p>‘d’</p><p>5</p><p>1</p><p>‘y’</p><p>7</p><p>1</p><p>‘a’</p><p>如果二级索引中目录项记录的内容只是<code>索引列＋页号</code>的搭配的话，那么为<code>c2</code>列建立索引后的B+树应该长这样:</p><p><img src="http://img-md-js.linjsblog.top/img/202208191618612.png" alt="image-20220819161858657"></p><p>如果我们想新插入一行记录，其中c1、c2、c3的值分别是:9、1、 ‘c’，那么在修改这个为c2列建立的二级索引对应的B+树时便碰到了个大问题:由于页3中存储的目录项记录是由c2列＋页号的值构成的，页3中的两条目录项记录对应的c2列的值都是1，而我们新插入的这条记录的c2列的值也是1，那我们这条新插入的记录到底应该放到页4中，还是应该放到页5中啊?答案是:对不起，懵了。</p><p>为了让新插入记录能找到自己在那个页里，我们需要<strong>保证在B+树的同一层内节点的目录项记录除页号这个字段以外是唯一的</strong>。所以对于二级索引的内节点的目录项记录的内容实际上是由三个部分构成的:</p><ul><li>索引列的值</li><li>主键值</li><li>页号</li></ul><p>也就是我们把<strong>主键值</strong>也添加到二级索引内节点中的目录项记录了，这样就能保证B+树每一层节点中各条目录项记录除页号这个字段外是唯一的，所以我们为c2列建立二级索引后的示意图实际上应该是这样子的:</p><p><img src="http://img-md-js.linjsblog.top/img/202208191624546.png" alt="image-20220819162416608"></p><p>这样我们再插入记录<code>(9，1，&#39;c&#39;)</code>时，由于<code>页3</code>中存储的目录项记录是由<code>c2列＋主键＋页号</code>的值构成的，可以先把新记录的<code>c2</code>列的值和<code>页3</code>中各目录项记录的c2列的值作比较，如果c2列的值相同的话，可以接着<strong>比较主键值</strong>，因为B+树同一层中不同目录项记录的c2列＋主键的值肯定是不一样的，所以最后肯定能定位唯一的一条目录项记录，在本例中最后确定新记录应该被插入到<code>页5</code>中。</p><h4 id="3-一个页面最少存储2条记录"><a href="#3-一个页面最少存储2条记录" class="headerlink" title="3.一个页面最少存储2条记录"></a>3.一个页面最少存储2条记录</h4><p>一个B+树只需要很少的层级就可以轻松存储数亿条记录，查询速度相当不错!这是因为B+树本质上就是一个大的多层级目录，每经过一个目录时都会过滤掉许多无效的子目录，直到最后访问到存储真实数据的目录。那如果一个大的目录中只存放一个子目录是个啥效果呢?那就是目录层级非常非常非常多，而且最后的那个存放真实数据的目录中只能存放一条记录。费了半天劲只能存放一条真实的用户记录?所以InnoDB的一个数据页至少可以存放两条记录。</p><h2 id="4-MyISAM中的索引的方案"><a href="#4-MyISAM中的索引的方案" class="headerlink" title="4.MyISAM中的索引的方案"></a>4.MyISAM中的索引的方案</h2><p><strong>B树索引适用引擎如表所示</strong></p><p>索引&#x2F;存储引擎</p><p>MyISAM</p><p>InnoDB</p><p>Memory</p><p>B- Tree索引</p><p>支持</p><p>支持</p><p>支持</p><p>即使多个存储引擎支持同一种类型的索引，但是他们的实现原理也是不同的。Innodb和MyISAM默认的索引是Btree索引;而Memory默认的索引是Hash索引。</p><p>MylSAM引擎使用<code>B+Tree</code>作为索引结构，叶子节点的data域存放的是<code>数据记录的地址</code>。</p><h3 id="4-1-MyISAM索引的原理"><a href="#4-1-MyISAM索引的原理" class="headerlink" title="4.1 MyISAM索引的原理"></a>4.1 MyISAM索引的原理</h3><p>下图是MylSAM索引的原理图。</p><p>我们知道<strong>InnoDB中索引即数据</strong>，也就是聚簇索引的那棵B+树的叶子节点中已经把所有完整的用户记录都包含了，而<strong>MyISAM</strong>的索引方案虽然也使用树形结构，但是却将<strong>索引和数据分开存储</strong>:</p><ul><li>将表中的记录<strong>按照记录的插入顺序</strong>单独存储在一个文件中，称之为<strong>数据文件</strong>（.MYD）。这个文件并不划分为若干个数据页，有多少记录就往这个文件中塞多少记录就成了。由于在插入数据的时候并<strong>没有刻意按照主键大小排序</strong>，所以我们并不能在这些数据上使用二分法进行查找。</li><li>使用<strong>MyISAM</strong>存储引擎的表会把索引信息另外存储到一个称为<strong>索引文件</strong>的另一个文件中(.MYI)。<strong>MyISAM</strong>会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是<strong>主键值＋数据记录地址</strong>的组合。</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208191652760.png" alt="image-20220819165232165"></p><p>这里设表一共有三列，假设我们以col1为主键，上图是一个MyISAM表的主索引 (Primary key)示意。可以看出<strong>MylSAM的索引文件仅仅保存数据记录的地址</strong>。在MyISAM中，主键索引和二级索引(Secondary key)在结构上没有任何区别，只是主键索引要求key是唯一的，而二级索引的key可以重复。如果我们在col2上建立一个二级索引，则此索引的结构如下图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208191704759.png" alt="image-20220819170457292"></p><p>同样也是一棵B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为:首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p><h3 id="4-2-MyISAM-与-InnoDB对比"><a href="#4-2-MyISAM-与-InnoDB对比" class="headerlink" title="4.2 MyISAM 与 InnoDB对比"></a>4.2 MyISAM 与 InnoDB对比</h3><p><strong>MyISAM的索引方式都是“非聚簇”的，与InnoDB包含1个聚簇索引是不同的。小结两种引擎中索引的区别:</strong></p><p>① 在InnoDB存储引擎中，我们只需要根据主键值对<code>聚簇索引</code>进行一次查找就能找到对应的记录，而在<code>MyISAM</code>中却需要进行一次回表操作，意味着MylSAM中建立的索引相当于全部都是二级索引。</p><p>② InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是<code>分离的</code>，索引文件仅保存数据记录的地址。</p><p>③ InnoDB的非聚簇索引data域存储相应记录<code>主键的值</code>，而MylSAM索引记录的是<code>地址</code>。换句话说，InnoDB的所有非聚簇索引都引用主键作为data域。</p><p>④ MyISAM的回表操作是十分<code>快速</code>的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</p><p>⑤ InnoDB要求表<code>必须有主键（MyISAM可以没有）</code>。如果没有显式指定，则MysQL系统会自动选择一个可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MysQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整型。</p><p><strong>小结：</strong></p><p>了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助。比如:</p><p>举例1:知道了InnoDB的索引实现后，就很容易明白<code>为什么不建议使用过长的字段作为主键</code>，因为所有二级索引都引用主键索引，过长的主键索引会令二级索引变得过大。</p><p>举例2:用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一棵B+Tree，非单调的主键会造成在插入新记录时，数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而<code>使用自增字段作为主键则是一个很好的选择</code>。</p><p><img src="http://img-md-js.linjsblog.top/img/202208191727570.png" alt="image-20220819172752153"></p><h2 id="5-索引的代价"><a href="#5-索引的代价" class="headerlink" title="5. 索引的代价"></a>5. 索引的代价</h2><p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗：</p><ul><li><p><strong>空间上的代价</strong></p><p>每建立一个索引都要为它建立一棵B+树，每一棵B+树的每一个节点都是一个数据页，一个页默认会占用<strong>16KB</strong>的存储空间，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p></li><li><p><strong>时间上的代价</strong></p><p>每次对表中的数据进行<code>增、删、改</code>操作时，都需要去修改各个B+树索引。而且我们讲过，B+树每层节点都是按照索引列的值<code>从小到大的顺序排序</code>而组成了<code>双向链表</code>。不论是叶子节点中的记录，还是内节点中的记录〈也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些<code>记录移位</code>，<code>页面分裂</code>、<code>页面回收</code>等操作来维护好节点和记录的排序。如果我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会给性能拖后腿。</p></li></ul><blockquote><p>一个表上索引建的越多，就会占用越多的存储空间，在增删改记录的时候性能就越差。为了能建立又好又少的索引，我们得学学这些索引在哪些条件下起作用的。</p></blockquote><h2 id="6-MySQL数据结构选择的合理性"><a href="#6-MySQL数据结构选择的合理性" class="headerlink" title="6. MySQL数据结构选择的合理性"></a>6. MySQL数据结构选择的合理性</h2><p>从MySQL的角度讲，不得不考虑一个现实问题就是磁盘IO。如果我们能让索引的数据结构尽量减少硬盘的IO操作，所消耗的时间也就越小。可以说，磁盘的 <code>I/O操作次数</code>对索引的使用效率至关重要。</p><p>查找都是索引操作，一般来说索引非常大，尤其是关系型数据库，当数据量比较大的时候，索引的大小有可能几个G甚至更多，为了减少索引在内存的占用，<strong>数据库索引是存储在外部磁盘上</strong>的。当我们利用索引查询的时候，不可能把整个索引全部加载到内存，只能<strong>逐一加载</strong>，那么MySQL衡量查询效率的标准就是磁盘to次数。</p><h3 id="6-1-全表遍历"><a href="#6-1-全表遍历" class="headerlink" title="6.1 全表遍历"></a>6.1 全表遍历</h3><p>这里懒得说了</p><h3 id="6-2-Hash结构"><a href="#6-2-Hash结构" class="headerlink" title="6.2 Hash结构"></a>6.2 Hash结构</h3><p>Hash本身是一个函数，又被称为散列函数，它可以帮助我们大幅提升检索数据的效率。</p><p>Hash算法是通过某种确定性的算法(比如MD5、SHA1、SHA2、SHA3)将输入转变为输出。<strong>相同的输入永远可以得到相同的输出</strong>，假设输入内容有微小偏差，在输出中通常会有不同的结果。</p><p>举例:如果你想要验证两个文件是否相同，那么你不需要把两份文件直接拿来比对，只需要让对方把 Hash 函数计算得到的结果告诉你即可，然后在本地同样对文件进行Hash函数的运算，最后通过比较这两个Hash 函数的结果是否相同，就可以知道这两个文件是否相同。</p><p>加速查找速度的数据结构，常见的有两类：</p><ol><li>树，例如平衡二叉搜索树，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是O(log2N);</li><li>哈希，例如HashMap，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是O(1);</li></ol><p><img src="http://img-md-js.linjsblog.top/img/202208221554168.png" alt="image-20220822155426202"></p><p>采用Hash进行检索效率非常高，基本上一次检索就可以找到数据，而B+树需要自顶向下依次查找，多次访问节点才能找到数据，中间需要多次l&#x2F;O操作，从效率来说 Hash比 B+树更快。</p><p>在哈希的方式下，一个元素k处于h(k)中，即利用哈希函数h，根据关键字k计算出槽的位置。函数h将关键字域映射到哈希表T[o…m-1]的槽位上。</p><p><img src="http://img-md-js.linjsblog.top/img/202208221606776.png" alt="image-20220822160603844"></p><p>上图中哈希函数h有可能将两个不同的关键字映射到相同的位置，这叫做<code>碰撞</code>，在数据库中一般采用<code>拉链法</code>来解决。在链接法中，将散列到同一槽位的元素放在一个链表中，如下图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208221608536.png" alt="image-20220822160830565"></p><p>实验：体会数组和hash表查找方面效率的差别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//算法复杂度为O(n)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time="</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//827</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//算法复杂度为O(1)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">100000</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> contains <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"time="</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Hash结构效率高，那为什么索引结构要设计成树型结构呢？</strong></p><p>原因1: Hash索引仅能满足 (&#x3D;) (&lt;&gt;) 和 IN 查询。如果进行范围查询，哈希型的索引，时间复杂度会退化为o(n);而树型的“有序””特性，依然能够保持o(log2N)的高效率。</p><p>原因2: Hash索引还有一个缺陷，数据的存储是没有顺序的，在ORDER BY的情况下，使用Hash索引还需要对数据重新排序。</p><p>原因3:对于联合索引的情况，Hash值是将联合索引键合并后一起来计算的，无法对单独的一个键或者几个索引键进行查询。</p><p>原因4∶对于等值查询来说，通常Hash索引的效率更高，不过也存在一种情况，就是索引列的重复值如果很多，效率就会降低。这是因为遇到Hash冲突时，需要遍历桶中的行指针来进行比较，找到查询的关键字，非常耗时。所以，Hash索引通常不会用到重复值多的列上，比如列为性别、年龄的情况等</p><p><strong>Hash索引适用存储引擎如表所示：</strong></p><p>索引&#x2F;存储引擎</p><p>MyISAM</p><p>InnoDB</p><p>Memory</p><p>Hash索引</p><p>不支持</p><p>不支持</p><p>支持</p><p><strong>Hash索引的适用性</strong></p><p>Hash索引存在着很多限制，相比之下在数据库中B+树索引的使用面会更广，不过也有一些场景采用Hash索引效率更高，比如在键值型(Key-Value）数据库中， <code>Redis 存储的核心就是 Hash表</code>。</p><p>MySQL中的Memory存储引擎支持Hash存储，如果我们需要用到查询的临时表时，就可以选择Memory存储引擎，把某个字段设置为Hash 索引，比如字符串类型的字段，进行Hash计算之后长度可以缩短到几个字节。当字段的重复度低，而且经常需要进行<code>等值查询</code>的时候，采用Hash索引是个不错的选择。</p><p>另外，InnoDB本身不支持 Hash 索引，但是提供<code>自适应 Hash索引</code>(Adaptive Hash Index)。什么情况下才会使用自适应Hash索引呢?如果某个数据经常被访问，当满足一定条件的时候，就会将这个数据页的地址存放到Hash表中。这样下次查询的时候，就可以直接找到这个页面的所在位置。这样让B+树也具备了Hash索引的优点。</p><p><img src="http://img-md-js.linjsblog.top/img/202208221638661.png" alt="image-20220822163826357"></p><p>采用自适应Hash索引目的是方便根据SQL的查询条件加速定位到叶子节点，特别是当B+树比较深的时候，通过自适应Hash索引可以明显提高数据的检索效率。</p><p>我们可以通过<code>innodb_adaptive_hash_index</code>变量来查看是否开启了自适应Hash，比如:</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show variables like &#39;%adaptive_hash_index%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202208221757729.png" alt="image-20220822175709116"></p><h3 id="6-3-二叉搜索树"><a href="#6-3-二叉搜索树" class="headerlink" title="6.3 二叉搜索树"></a>6.3 二叉搜索树</h3><p>如果我们利用二叉搜索树作为索引结构，那么磁盘的IO次数和索引数的高度是相关的。</p><ol><li><p><strong>二叉搜索树的特点</strong></p><ul><li>一个节点只能有两个子节点，也就是节点度不能超过2</li><li>左子节点&lt;本节点；右子节点&gt;&#x3D;本节点，比我大的向右，比我小的向左</li></ul></li><li><p><strong>查找规则</strong></p><p>我们先来看下最基础的二叉搜索树(Binary Search Tree)，搜索某个节点和插入节点的规则一样，我们假设搜索插入的数值为key:</p><ol><li>如果key大于根节点，则在右子树中进行查找；</li><li>如果key小于根节点，则在左子树中进行查找;</li><li>如果key等于根节点，也就是找到了这个节点，返回根节点即可</li></ol><p>举个例子，我们对数列(34，22，89，5，23，77，91）创造出来的二分查找树如下图所示:</p></li></ol><p><img src="http://img-md-js.linjsblog.top/img/202208221803172.png" alt="image-20220822180357598"></p><p>但是存在特殊的情况，就是有时候二叉树的深度非常大。比如我们给出的数据顺序是(5, 22,23,34,77,89,91)，创造出来的二分搜索树如下图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208221805206.png" alt="image-20220822180500205"></p><p>上面第二棵树也属于二分查找树，但是性能上已经退化成了一条链表，查找数据的时间复杂度变成了O(n)。你能看出来第一个树的深度是3，也就是说最多只需3次比较，就可以找到节点，而第二个树的深度是7，最多需要7次比较才能找到节点。</p><p>为了提高查询效率，就需要减少磁盘IO数。为了减少磁盘lo的次数，就需要尽量降低树的高度，需要把原来”瘦高”的树结构变的“矮胖”，树的每层的分叉越多越好。</p><h3 id="6-4-AVL树"><a href="#6-4-AVL树" class="headerlink" title="6.4 AVL树"></a>6.4 AVL树</h3><p>为了解决上面二叉查找树退化成链表的问题，人们提出了<code>平衡二叉搜索树(Balanced Binary Tree)</code>，又称为AVL树(有别于AVL算法)，它在二叉搜索树的基础上增加了约束，具有以下性质:</p><p><strong>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</strong></p><p>这里说一下，常见的平衡二叉树有很多种，包括了<code>平衡二叉搜索树、红黑树、数堆、伸展树</code>。平衡二叉搜索树是最早提出来的自平衡二叉搜索树，当我们提到平衡二叉树时一般指的就是平衡二叉搜索树。事实上，第一棵树就属于平衡二叉搜索树，搜索时间复杂度就是O( log2n)。</p><p>数据查询的时间主要依赖于磁盘I&#x2F;O的次数，如果我们采用二叉树的形式，即使通过平衡二叉搜索树进行了改进，树的深度也是o(log2n)，当n比较大时，深度也是比较高的，比如下图的情况:</p><p><img src="http://img-md-js.linjsblog.top/img/202208221835421.png" alt="image-20220822183552413"></p><p>每访问一次节点就需要进行一次磁盘Ⅰ&#x2F;О 操作，对于上面的树来说，我们需要进行5次I&#x2F;O操作。虽然平衡二叉树的效率高，但是树的深度也同样高，这就意味着磁盘I&#x2F;o操作次数多，会影响整体数据查询的效率。</p><p>针对同样的数据，如果我们把二叉树改成M叉树(M&gt;2）呢?当M&#x3D;3时，同样的31个节点可以由下面的三叉树来进行存储:</p><p><img src="http://img-md-js.linjsblog.top/img/202208221838166.png" alt="image-20220822183820259"></p><p>你能看到此时树的高度降低了，当数据量N大的时候，以及树的分叉数M大的时候，M叉树的高度会远小于二叉树的高度(M&gt;2)。所以，我们需要把树从”瘦高”变”矮胖”。</p><h3 id="6-5-B-Tree"><a href="#6-5-B-Tree" class="headerlink" title="6.5 B- Tree"></a>6.5 B- Tree</h3><p>B树的英文是Balance Tree，也就是多路平衡查找树。简写为B-Tree (注意横杠表示这两个单词连起来的意思，不是减号)。它的高度远小于平衡二叉树的高度。</p><p>B树的结构如下图所示:</p><p><img src="http://img-md-js.linjsblog.top/img/202208221842310.png" alt="image-20220822184233296"></p><p>B树作为多路平衡查找树，它的每一个节点最多可以包括M个子节点，<code>M称为B树的阶</code>。每个磁盘块中包括了<strong>关键字</strong>和<strong>子节点的指针</strong>。如果一个磁盘块中包括了x个关键字，那么指针数就是x+1。对于一个100阶的B树来说，如果有3层的话最多可以存储约100万的索引数据。对于大量的索引数据来说，采用B树的结构是非常适合的，因为树的高度要远小于二叉树的高度。</p><p>一个M阶的B树(M&gt;2)有以下的特性:</p><ol><li>根节点的儿子数的范围是[2,M]。</li><li>每个中间节点包含k-1个关键字和k个孩子，孩子的数量&#x3D;关键字的数量+1，k的取值范围为[ceil(M&#x2F;2),M]。</li><li>叶子节点包括k-1个关键字（叶子节点没有孩子)，k的取值范围为[ceil(M&#x2F;2),M]。</li><li>假设中间节点节点的关键字为:Key[1], Key[2], . . , Key[k-1]，且关键字按照升序排序，即Key[i]&lt;Key[i+1]。此时k-1个关键字相当于划分了k个范围，也就是对应着k个指针，即为: P[1],P[2], …P[k]，其中P[1]指向关键字小于Key[1]的子树，P]指向关键字属于(Key[i-1],Key[i])的子树，P[K]指向关键字大于Key[k-1]的子树。</li><li>所有叶子节点位于同一层</li></ol><p>上面那张图所表示的B树就是一棵3阶的B树。我们可以看下磁盘块2，里面的关键字为(8，12)，它有3个孩子(3，5)，(9，10)和(13，15)，你能看到(3，5)小于8，(9，10)在8和12之间，而(13，15)大于12，刚好符合刚才我们给出的特征。</p><p>然后我们来看下如何用B树进行查找。假设我们想要查找的关键字是9，那么步骤可以分为以下几步:</p><ol><li>我们与根节点的关键字(17，35）进行比较，9小于17那么得到指针P1</li><li>按照指针P1找到磁盘块2，关键字为(8，12)，因为9在8和12之间，所以我们得到指针P2;</li><li>按照指针P2找到磁盘块6，关键字为(9，10)，然后我们找到了关键字9</li></ol><p>你能看出来在B树的搜索过程中，我们比较的次数并不少，但如果把数据读取出来然后在内存中进行比较，这个时间就是可以忽略不计的。而读取磁盘块本身需要进行I&#x2F;O操作，消耗的时间比在内存中进行比较所需要的时间要多，是数据查找用时的重要因素。<code>B树相比于平衡二叉树来说磁盘工/O 操作要少</code>，在数据查询中比平衡二叉树效率要高。所以<code>只要树的高度足够低，IO次数足够少，就可以提高查询性能</code>。</p><p><strong>小结：</strong></p><ol><li>B树在插入和删除节点的时候如果导致树不平衡，就通过自动调整节点的位置来保持树的自平衡。</li><li>关键字集合分布在整棵树中,即叶子节点和非叶子节点都存放数据。搜索有可能在非叶子节点结束</li><li>其搜索性能等价于在关键字全集内做一次二分查找。</li></ol><p><strong>再举例1：</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208221942842.png" alt="image-20220822194246779"></p><h3 id="6-6-B-Tree"><a href="#6-6-B-Tree" class="headerlink" title="6.6 B+ Tree"></a>6.6 B+ Tree</h3><p>B+树也是一种多路搜索树，<code>基于B树做出了改进</code>，主流的DBMS都支持B+树的索引方式，比如MySQL。相比于B-Tree，B+树适合文件索引系统。</p><p><strong>B+树和B树的差异在于以下几点:</strong></p><ol><li><p>有k个孩子的节点就有k个关键字。也就是孩子数量&#x3D;关键字数，而B树中，孩子数量&#x3D;关键字数+1。</p></li><li><p>非叶子节点的关键字也会同时存在在子节点中，并且是在子节点中所有关键字的最大(或最小)。</p></li><li><p>非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而B树中，非叶子节点既<code>保存索引，也保存数据记录。</code></p></li><li><p>所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大小从小到大顺序链接。</p></li></ol><p>下图就是一棵B+树，阶数为3，根节点中的关键字1、18、35分别是子节点(1，8，14)， (18，24，31)和(35，41，53)中的最小值。每一层父节点的关键字都会出现在下一层的子节点的关键字中，因此在叶子节点中包括了所有的关键字信息，并且每一个叶子节点都有一个指向下一个节点的指针，这样就形成了一个链表。</p><p><img src="http://img-md-js.linjsblog.top/img/202208221955317.png" alt="image-20220822195535017"></p><p>比如，我们想要查找关键字16，B+树会自顶向下逐层进行查找:</p><ol><li>与根节点的关键字(1，18，35)进行比较，16在1和18之间，得到指针P1(指向磁盘块2)</li><li>找到磁盘块2，关键字为(1，8，14)，因为16大于14，所以得到指针P3(指向磁盘块7)</li><li>找到磁盘块7，关键字为(14，16，17)，然后我们找到了关键字16，所以可以找到关键字16所对应的数据</li></ol><p>整个过程一共进行了3次I&#x2F;o操作，看起来B+树和B树的查询过程差不多，但是B+树和B树有个根本的差异在于，<strong>B+树的中间节点并不直接存储数据</strong>。这样的好处都有什么呢?</p><p>首先，<strong>B+树查询效率更稳定</strong>。因为B+树每次只有访问到叶子节点才能找到对应的数据，而在B树中，非叶子节点也会存储数据，这样就会造成查询效率不稳定的情况，有时候访问到了非叶子节点就可以找到关键字，而有时需要访问到叶子节点才能找到关键字。</p><p>其次，<strong>B+树的查询效率更高</strong>。这是因为通常B+树比B树<code>更矮胖</code>（阶数更大，深度更低)，查询所需要的磁盘I&#x2F;O也会更少。同样的磁盘页大小，B+树可以存储更多的节点关键字。</p><p>不仅是对单个关键字的查询上，<strong>在查询范围上，B+树的效率也比B树高</strong>。这是因为所有关键字都出现在B+树的叶子节点中，叶子节点之间会有指针，数据又是递增的，这使得我们范围查找可以通过指针连接查找。而在B树中则需要通过中序遍历才能完成查询范围的查找，效率要低很多。</p><blockquote><p>B树和B+树都可以作为索引的数据结构，在 MySQL中采用的是B+树。但B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</p></blockquote><p><strong>思考题：为了减少IO,索引树会一次加载吗？</strong></p><blockquote><ol><li>数据库索引是存储在磁盘上的，如果数据量很大，必然导致索引的大小也会很大，超过几个G。</li><li>当我们利用索引查询时候，是不可能将全部几个G的索引都加载进内存的，我们能做的只能是:逐一加载每一个磁盘页，因为磁盘页对应着索引树的节点。</li></ol></blockquote><p><strong>思考题:B+树的存储能力如何?为何说一般查找行记录，最多只需1~3次磁盘IO</strong></p><blockquote><p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT(占用4个字节）或BIGINT(占用8个字节)，指针类型也一般为4或8个字节，也就是说一个页(卧Tree中的一个节点)中大概存储16KB&#x2F;(8B+8B)&#x3D;1K个键值（(因为是估值，为方便计算，这里的K取值为10^3。也就是说一个深度为3的B+Tree索引可以维护10^3 <em>10^3</em> 10^3&#x3D;10亿条记录。(这里假定一个数据页也存储10^3条行记录数据了)</p><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree 的高度一般都在2<del>4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1</del>3次磁盘I&#x2F;O操作。</p></blockquote><p><strong>思考题:为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引?</strong></p><blockquote><ol><li><p>B+树的磁盘读写代价更低</p><p>B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。</p></li><li><p>B+树的查询效率更加稳定</p><p>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p></li></ol></blockquote><p><strong>思考题:Hash索引与B+树索引的区别</strong></p><blockquote><p>我们之前讲到过B+树索引的结构，Hash索引结构和B+树的不同，因此在索引使用上也会有差别。</p><ol><li><p>Hash索引不能进行范围查询，而B+树可以。这是因为Hash索引指向的数据是无序的，而B树的叶子节点是个有序的链表。</p></li><li><p>Hash索引不支持联合索引的最左侧原则(即联合索引的部分索引无法使用)，而B+树可以。对于联合索引来说，Hash索引在计算Hash值的时候是将索引键合并后再一起计算Hash值，所以不会针对每个索引单独计算Hash值。因此如果用到联合索引的一个或者几个索引时，联合索引无法被利用。</p></li><li><p>Hash索引不支持ORDER BY排序，因为Hash索引指向的数据是无序的，因此无法起到排序优化的作用，而B+树索引数据是有序的，可以起到对该字段ORDER BY排序优化的作用。同理，我们也无法用Hash索引进行模糊查询，而B+树使用LIKE进行模糊查询的时候，LIKE后面后模糊查询（比如%结尾)的话就可</p></li><li><p>InnoDB 不支持哈希索引</p></li></ol></blockquote><p><strong>思考题:Hash索引与B+树索引是在建索引的时候手动指定的吗?</strong></p><p>如果使用的是MySQL的话，我们需要了解MySQL的存储引擎都支持哪些索引结构，如下图所示(参考来源 <a href="https://dev.mysql.com/doc/refman/8.0/en/create-index.html">https://dev.mysql.com/doc/refman/8.0/en/create-index.html)。如果是其他的DBMS，可以参考相关的DBMS文档</a>。如果是其他的DBMS，可以参考相关的DBMS文档)。</p><p><img src="http://img-md-js.linjsblog.top/img/202208222016021.png" alt="image-20220822201631783"></p><p>你能看到，针对InnoDB和MyISAM存储引擎，都会默认采用B+树索引，无法使用Hash索引。InnoDB提供的自适应Hash是不需要手动指定的。如果是Memory&#x2F;Heap和NDB存储引擎，是可以进行选择Hash索引的。</p><h3 id="6-7-R树"><a href="#6-7-R树" class="headerlink" title="6.7 R树"></a>6.7 R树</h3><p>R-Tree在MysQL很少使用，仅支持 <code>geometry数据继型</code>，支持该类型的存储引擎只有myisam、bdb、innodb、ndb、archive几种。举个R树在现实领域中能够解决的例子:查找20英里以内所有的餐厅。如果没有R树你会怎么解决?一般情况下我们会把餐厅的坐标(xy)分为两个字段存放在数据库中，一个字段记录经度，另一个字段记录纬度。这样的话我们就需要遍历所有的餐厅获取其位置信息，然后计算是否满足要求。如果一个地区有100家餐厅的话，我们就要进行10o次位置计算操作了，如果应用到谷歌、百度地图这种超大数据库中，这种方法便必定不可行了。R树就很好的解决了这种高维空间搜索问题。它把B树的思想很好的扩展到了多维空间，采用了B树分割空间的思想，并在添加、删除操作时采用合并、分解结点的方法，保证树的平衡性。因此，R树就是一棵用来存储高维数据的平衡树。相对于B-Tree，R-Tree的优势在于范围查找。</p><h3 id="6-8-小结"><a href="#6-8-小结" class="headerlink" title="6.8 小结"></a>6.8 小结</h3><p>使用索引可以帮助我们从海量的数据中快速定位想要查找的数据，不过索引也存在一些不足，比如占用存储空间、降低数据库写操作的性能等，如果有多个索引还会增加索引选择的时间。当我们使用索引时，需要平衡索引的利(提升查询效率）和弊（维护索引所需的代价）</p><p>在实际工作中，我们还需要基于需求和数据本身的分布情况来确定是否使用索引，尽管索引不是万能的，但数据量大的时候不使用索引是不可想象的，毕竟索引的本质，是帮助我们提升数据检索的效率。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL高级 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM概述</title>
      <link href="/2022/08/07/jvm%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/08/07/jvm%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM概述"><a href="#JVM概述" class="headerlink" title="JVM概述"></a>JVM概述</h1><h2 id="JVM-vs-JDK-vs-JRE"><a href="#JVM-vs-JDK-vs-JRE" class="headerlink" title="JVM vs JDK vs JRE"></a>JVM vs JDK vs JRE</h2><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><p><strong>JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。</strong> 也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM 规范的一种实现而已。</p><p>JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><blockquote><p>《JavaGuide》</p></blockquote><h3 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h3><p><img src="http://img-md-js.linjsblog.top/img/202208071002117.png" alt="image-20220807100211649"></p><h2 id="JVM的整体结构"><a href="#JVM的整体结构" class="headerlink" title="JVM的整体结构"></a>JVM的整体结构</h2><p><img src="http://img-md-js.linjsblog.top/img/202208071014614.png" alt="image-20220807101430576"></p><h2 id="Java代码的执行流程"><a href="#Java代码的执行流程" class="headerlink" title="Java代码的执行流程"></a>Java代码的执行流程</h2><p><img src="http://img-md-js.linjsblog.top/img/202208071159231.png"></p><p><img src="http://img-md-js.linjsblog.top/img/202208071033291.jpg"></p><h2 id="区分栈的指令集架构和寄存器的指令集架构"><a href="#区分栈的指令集架构和寄存器的指令集架构" class="headerlink" title="区分栈的指令集架构和寄存器的指令集架构"></a>区分栈的指令集架构和寄存器的指令集架构</h2><p>Java编译器输入的指令流基本上是一种<code>基于栈的指令集架构</code>，另外一种指令集架构则是<code>基于寄存器的指令集架构</code>。</p><p>具体来说:这两种架构之间的区别</p><ul><li><p>具体来说:这两种架构之间的区别</p><ol><li><p>设计和实现更简单，适用于资源受限的系统</p></li><li><p>避开了寄存器的分配难题:使用零地址指令方式分配。</p></li><li><p>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小， 编译器容易实现。</p></li><li><p>不需要硬件支持，可移植性更好，更好实现跨平台</p></li></ol></li><li><p>基于寄存器架构的特点</p><ol><li>典型的应用是x86的二进制指令集:比如传统的PC以及Android的Davlik虚拟机。</li><li><strong>指令集架构则完全依赖硬件，可移植性差</strong></li><li><strong>性能优秀和执行更高效</strong></li><li>花费更少的指令去完成一项操作。</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主。</li></ol></li></ul><h2 id="JVM-的生命周期"><a href="#JVM-的生命周期" class="headerlink" title="JVM 的生命周期"></a>JVM 的生命周期</h2><h3 id="虚拟机的启动"><a href="#虚拟机的启动" class="headerlink" title="虚拟机的启动"></a>虚拟机的启动</h3><p>Java虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。</p><h3 id="虚拟机的执行"><a href="#虚拟机的执行" class="headerlink" title="虚拟机的执行"></a>虚拟机的执行</h3><ul><li>一个运行中的Java虚拟机有着一个清晰的任务:执行Java程序。</li><li>程序开始执行时他才运行，程序结束时他就停止。</li><li>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程。</li></ul><h3 id="虚拟机的退出"><a href="#虚拟机的退出" class="headerlink" title="虚拟机的退出"></a>虚拟机的退出</h3><p>有如下的几种情况：</p><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li><li>某线程调用Runtime类或system类的exit方法，或 Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作</li><li>除此之外，JNI ( Java Native Interface)规范描述了用JNIInvocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用户线程和守护线程</title>
      <link href="/2022/08/07/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/08/07/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h1><h2 id="用户线程（User-Thread）"><a href="#用户线程（User-Thread）" class="headerlink" title="用户线程（User Thread）"></a>用户线程（User Thread）</h2><p>一般情况下不做特别说明配置，<strong>默认都是用户线程</strong>，是系统的工作线程，它会完成这个程序需要完成的业务员操作</p><p>isDaemon测试此线程是否为守护线程</p><p>通过Thread.setDaemon(false)设置为用户线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 开始运行，"</span>                    <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"守护线程"</span><span class="token operator">:</span><span class="token string">"用户线程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 开始运行，"</span>                <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"守护线程"</span><span class="token operator">:</span><span class="token string">"用户线程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202208071600597.png" alt="image-20220807160012294"></p><h2 id="守护线程（Daemon-Thread"><a href="#守护线程（Daemon-Thread" class="headerlink" title="守护线程（Daemon Thread)"></a>守护线程（Daemon Thread)</h2><p>是一种特殊的线程为其它线程服务的，在后台默默地完成一些系统性的服务，比如<strong>垃圾回收线程</strong>就是最典型的例子。</p><p>守护线程作为一个服务线程，没有服务对象就没有必要继续运行了，如果用户线程全部结束了，意味着程序需要完成的业务操作已经结束了,系统可以退出了。所以假如当系统只剩下守护线程的时候，java虚拟机会自动退出。</p><p>通过Thread.setDaemon(true)设置为守护线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 开始运行，"</span>                    <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"守护线程"</span><span class="token operator">:</span><span class="token string">"用户线程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//暂停几秒线程</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t 开始运行，"</span>                <span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"守护线程"</span><span class="token operator">:</span><span class="token string">"用户线程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202208071609426.png" alt="image-20220807160129318"></p><p>我们发现，程序已经推出了，因为t1是守护线程，当main线程（用户线程）结束后，系统只剩下守护线程，就自动退出了。</p><p><strong>总结：</strong></p><ol><li><p>如果用户线程全部结束意味着程序需要完成的业务操作已经结束了，守护线程随着JVM一同结束工作</p></li><li><p>setDaemon(true)方法必须在start()之前设置，否则报legalThreadStateException异常</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/2022/08/05/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/05/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><h2 id="1、测评系统"><a href="#1、测评系统" class="headerlink" title="1、测评系统"></a>1、测评系统</h2><p><strong>完成测评系统需求</strong></p><ul><li><p>1）将人、观众分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手不同的评价（评价有不同的种类，比如成功、失败等）</p></li><li><p>2）传统方案</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208051400039.png" alt="img"></p><p><strong>传统方式的问题分析</strong></p><ul><li><p>1）如果系统比较小，还是 ok 的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了 OCP 原则，不利于维护</p></li><li><p>2）扩展性不好，比如增加了新的人员类型，或者管理方法，都不好做</p></li><li><p>3）引出我们会使用新的设计模式——访问者模式</p></li></ul><h2 id="2、基本介绍"><a href="#2、基本介绍" class="headerlink" title="2、基本介绍"></a>2、基本介绍</h2><ul><li><p>1）访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作</p></li><li><p>2）主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题</p></li><li><p>3）访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口</p></li><li><p>4）访问者模式主要应用场景是：需要对一个对象结构中的对象进行很多不同操作（这些操作彼此没有关联），同时需要避免让这些操作“污染“这些对象的类，可以选用访问者模式解决</p></li></ul><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208051419425.png" alt="img"></p><p><strong>访问者角色及职责</strong></p><ul><li><p><code>Visitor</code>抽象访问者：为该对象结构中每个<code>ConcreteElement</code>类声明一个<code>visit</code>操作</p></li><li><p><code>ConcreteVisitor</code>具体访问者：实现<code>Visitor</code>中声明的操作</p></li><li><p><code>ObjectStructure</code>对象结构：能枚举它的元素，提供一个高层接口，允许访问者访问元素</p></li><li><p><code>Element</code>抽象元素：定义一个<code>accept</code>方法，接受一个访问者对象</p></li><li><p><code>ConcreteElement</code>具体元素：实现了<code>accept</code>方法</p></li></ul><h2 id="3、访问者模式实现测评系统"><a href="#3、访问者模式实现测评系统" class="headerlink" title="3、访问者模式实现测评系统"></a>3、访问者模式实现测评系统</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208051437815.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 抽象访问者*/</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> woman<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 具体访问者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Success</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男生给了通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> woman<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女生给了通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fail</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男生给了不通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> woman<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女生给了不通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 抽象元素 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 具体元素 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        action<span class="token punctuation">.</span><span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 具体元素 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        action<span class="token punctuation">.</span><span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 对象结构*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//维护了一个集合</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//增加到list</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        personList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> person <span class="token operator">:</span> personList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            person<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ObjectStructure</span> objectStructure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//男生给了通过</span><span class="token comment">//女生给了通过</span><span class="token comment">//============</span><span class="token comment">//男生给了不通过</span><span class="token comment">//女生给了不通过</span><span class="token comment">//============</span><span class="token comment">//男生给了待定</span><span class="token comment">//女生给了待定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、双分派"><a href="#4、双分派" class="headerlink" title="4、双分派"></a>4、双分派</h2><p>该例中我们使用到了双分派</p><ul><li><p><strong>第一次分派</strong>：首先在客户端程序中，将具体状态作为参数传递<code>Woman</code>中</p></li><li><p><strong>第二次分派</strong>：然后<code>Woman</code>类调用作为参数的具体方法<code>getWomanResult</code>，同时将自己<code>this</code>作为参数传入</p></li></ul><p>所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行</p><p>双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型</p><p>以上述实例为例，假设我们要添加一个<code>Wait</code>的状态类，考察<code>Man</code>类和<code>Woman</code>类的反应</p><p>由于使用了双分派，只需增加一个 Action 子类即可在客户端调用即可，不需要改动任何其他类的代码</p><p>5、访问者模式的注意事项和细节</p><p>优点</p><p>●1）访问者模式符合单一职责原则、让程序具有优秀的扩展性、灵活性非常高 ●2）访问者模式可以对功能进行统一，可以做报表、UI、拦截器与过滤器，适用于数据结构相对稳定的系统</p><p>缺点</p><p>●1）具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变更比较困难 ●2）违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素 ●3）因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问者模式就是比较合适的</p><p>若有收获，就点个赞吧</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程通信、sleep和wait方法</title>
      <link href="/2022/08/03/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%E3%80%81sleep%E5%92%8Cwait%E6%96%B9%E6%B3%95/"/>
      <url>/2022/08/03/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%E3%80%81sleep%E5%92%8Cwait%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>使用两个线程打印1-100。线程1，2交替打印。</p><p>要让线程1、2交替打印，就需要使用 <code>wait()</code> 阻塞方法，并且wait方法会释放锁，当另一个线程执行完后调用 notify()<code>或</code> notifyAll()`唤醒线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ljs<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Communication</span> communication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Communication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>communication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>communication<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Communication</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>wait()：当前线程进入阻塞状态，并释放同步监视器锁</p></li><li><p>notify(): 唤醒被wait的一个线程，如果有多个线程被wait，就唤醒优先级高的那个</p></li><li><p>notifyAll(): 唤醒所有被wait的线程</p></li><li><p>wait() notify() notifyAll() 必须使用在同步代码块或同步方法中</p></li><li><p>wait() notify() notifyAll() 必须是的调用者必须是同步代码块或同步方法中的同步监视器，</p><p><img src="http://img-md-js.linjsblog.top/img/202208031534661.png" alt="image-20220803153411016"></p><p>否则会报错</p></li></ol><p><img src="http://img-md-js.linjsblog.top/img/202208031534103.png" alt="image-20220803153433992"></p><p>或者可以这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wait-和sleep-的异同"><a href="#wait-和sleep-的异同" class="headerlink" title="wait()和sleep()的异同"></a>wait()和sleep()的异同</h2><ul><li><p>两者最主要的区别在于：**<code>sleep()</code> 方法没有释放锁，而 <code>wait()</code> 方法释放了锁** 。</p></li><li><p>两者都可以暂停线程的执行。</p></li><li><p><code>wait()</code> 通常被用于线程间交互&#x2F;通信，<code>sleep()</code> 通常被用于暂停执行。</p></li><li><p><code>wait()</code> 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 <code>notify()</code> 或者 <code>notifyAll()</code> 方法。<code>sleep()</code> 方法执行完成后，线程会自动苏醒。或者可以使用 <code>wait(long timeout)</code> 超时后线程会自动苏醒。</p><blockquote><p>来源：《Javaguide》说说 sleep() 方法和 wait() 方法区别和共同点?</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/2022/08/03/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/03/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="1、智能生活项目需求"><a href="#1、智能生活项目需求" class="headerlink" title="1、智能生活项目需求"></a>1、智能生活项目需求</h2><p><img src="http://img-md-js.linjsblog.top/img/202208031337799.png" alt="img"></p><ul><li><p>1）我们买了一套智能家电，有照明灯、风扇、冰箱、洗衣机，只要在手机上安装 APP 就可以控制这些家电的工作</p></li><li><p>2）这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个 APP 分别控制，我们希望只要一个 APP 就可以控制全部智能家电</p></li><li><p>3）要实现一个 APP 控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给 APP 调用，这时就可以考虑使用命令模式</p></li><li><p>4）命令模式可将“动作的请求者”从“动作的执行者”对象中解耦出来</p></li><li><p>5）在我们的例子中，动作的请求者是手机 APP，动作的执行者是每个厂商的一个家电产品</p></li></ul><h2 id="2、基本介绍"><a href="#2、基本介绍" class="headerlink" title="2、基本介绍"></a>2、基本介绍</h2><ul><li><p>1）命令模式（Command Pattern）：在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可。此时可以使用命令模式来进行设计</p></li><li><p>2）命令模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦</p></li><li><p>3）在命令模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命名），同时命令模式也支持可撤销的操作</p></li><li><p>4）通俗易懂的理解：将军发布命令，士兵去执行。其中有几个角色：</p></li><li><ul><li>将军（命令发布者）、士兵（命令的具体执行者）、命令（连接将军和士兵）</li></ul></li><li><ul><li><code>Invoker</code>是调用者（将军），<code>Receiver</code>是被调用者（士兵），<code>MyCommand</code>是命令，实现了<code>Command</code>接口，持有接收对象</li></ul></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202208031337286.png" alt="img"></p><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208031406949.png" alt="img"></p><p><strong>命令模式的角色及职责</strong></p><ul><li><p><code>Invoker</code>调用者角色，只需要发布命令就可以控制接收者的行为</p></li><li><p><code>Receiver</code>接收者角色，知道如何实施或执行请求的相关操作</p></li><li><p><code>Command</code>命令角色，需要执行的所有命令都定义在这里，可以是接口或抽象类</p></li><li><p><code>ConcreteCommand</code>具体的命令角色，将一个接收者和一个动作绑定，调用接收者相应的操作，实现<code>execute</code></p></li></ul><h2 id="3、命令模式解决智能生活项目"><a href="#3、命令模式解决智能生活项目" class="headerlink" title="3、命令模式解决智能生活项目"></a>3、命令模式解决智能生活项目</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208031417128.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202208031417320.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 命令角色 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 接收者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LighterReceiver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯打开了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯关闭了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVReceiver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视打开了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视关闭了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 没有任何命令，即空执行：用于初始化每个按钮，当调用空命令时，对象什么都不做，其实，这样是一种设计模式，可以省掉空判断 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 具体的命令角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LighterReceiver</span> light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span><span class="token class-name">LighterReceiver</span> light<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LighterReceiver</span> lighterReceiver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span><span class="token class-name">LighterReceiver</span> lighterReceiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lighterReceiver <span class="token operator">=</span> lighterReceiver<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lighterReceiver<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lighterReceiver<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TVReceiver</span> tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TVOnCommand</span><span class="token punctuation">(</span><span class="token class-name">TVReceiver</span> tv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">TVReceiver</span> tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TVOffCommand</span><span class="token punctuation">(</span><span class="token class-name">TVReceiver</span> tv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>command</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> restoreCommand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommands</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">Command</span> onCommand<span class="token punctuation">,</span> <span class="token class-name">Command</span> offCommand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBtnCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        restoreCommand <span class="token operator">=</span> onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>        restoreCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offBtnCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        restoreCommand <span class="token operator">=</span> offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>        restoreCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoBtnCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        restoreCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RemoteController</span> remoteController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作电灯</span>        <span class="token keyword">int</span> no <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">LighterReceiver</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LighterReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommands</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">onBtnCommand</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">offBtnCommand</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">undoBtnCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作电视</span>        no <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">TVReceiver</span> tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommands</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TVOnCommand</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TVOffCommand</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">onBtnCommand</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">offBtnCommand</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        remoteController<span class="token punctuation">.</span><span class="token function">undoBtnCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、Spring-框架-JdbcTemplate-源码分析"><a href="#4、Spring-框架-JdbcTemplate-源码分析" class="headerlink" title="4、Spring 框架 JdbcTemplate 源码分析"></a>4、Spring 框架 JdbcTemplate 源码分析</h2><p>以<code>JdbcTemplate</code>类中<code>query()</code>方法中为例，我们可以发现其中定义了一个内部类<code>QueryStatementCallback</code>，而且<code>QueryStatementCallback</code>类实现了<code>StatementCallback</code>接口的<code>doInStatement</code>方法</p><p><img src="http://img-md-js.linjsblog.top/img/202208031459529.png" alt="img"></p><p>这就是命令模式在 Spring 框架 <code>JdbcTemplate</code>源码中的应用，其中，</p><ul><li><p><code>StatementCallback</code>充当了<code>Command</code>命令，其下有多个实现 <img src="http://img-md-js.linjsblog.top/img/202208031459516.png" alt="img"></p></li><li><p><code>QueryStatementCallback</code>充当了<code>ConcreteCommand</code>具体的命令角色</p></li><li><p><code>Statement</code>充当了<code>Receiver</code>接收者角色</p></li><li><p><code>JdbcTemplate</code>本身作为调用者</p></li></ul><h2 id="5、命令模式的注意事项和细节"><a href="#5、命令模式的注意事项和细节" class="headerlink" title="5、命令模式的注意事项和细节"></a>5、命令模式的注意事项和细节</h2><ul><li><p>1）将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的<code>execute()</code>方法就可以让接收者工作，而不必知道具体的接收者对象是谁、是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：“请求发起者”和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了纽带桥梁的作用</p></li><li><p>2）容易设计一个命令队列。只要把命令对象放到列队，就可以多线程的执行命令</p></li><li><p>3）容易实现对请求的撤销和重做</p></li><li><p>4）<strong>不足</strong>：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，这点在使用的时候要注意</p></li><li><p>5）空命令也是一种设计模式，它为我们省去了判空的操作。在上面的实例中，如果没有用空命令，我们每按下一个按键都要判空，这给我们编码带来一定的麻烦</p></li><li><p>6）命令模式经典的应用场景：界面的一个按钮对应一条命令、模拟 CMD（DOS命令）订单的撤销&#x2F;恢复、触发-反馈机制</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板模式</title>
      <link href="/2022/08/02/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/02/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h1><h2 id="1、豆浆制作问题"><a href="#1、豆浆制作问题" class="headerlink" title="1、豆浆制作问题"></a>1、豆浆制作问题</h2><p>编写制作豆浆的程序，说明如下：</p><ul><li><p>1）制作豆浆的流程选材 —-&gt; 添加配料 —-&gt; 浸泡 —-&gt; 放到豆浆机打碎</p></li><li><p>2）通过添加不同的配料，可以制作出不同口味的豆浆</p></li><li><p>3）选材、浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的</p></li><li><p>4）请使用模板方法模式完成</p></li></ul><p>说明：因为模板方法模式比较简单，很容易就想到这个方案，因此就直接使用，不再使用传统的方案来引出模板方法模式</p><h2 id="2、基本介绍"><a href="#2、基本介绍" class="headerlink" title="2、基本介绍"></a>2、基本介绍</h2><ul><li><p>1）模板方法模式（Template Method Pattern），又叫模板模式（Template Pattern），在一个抽象类公开定义了执行它的方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行</p></li><li><p>2）简单说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤</p></li><li><p>3）这种类型的设计模式属于<strong>行为型模式</strong></p></li></ul><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208021520815.png" alt="img"></p><p><strong>对原理类图的说明——即模板方法模式的角色和职责</strong></p><ul><li><p><code>AbstractClass</code>抽象类中实现了模板方法，定义了算法的骨架，具体子类需要去实现其抽象方法或重写其中方法</p></li><li><p><code>ConcreteClass</code>实现了抽象方法，已完成算法中特定子类的步骤</p></li></ul><h2 id="3、模板模式解决豆浆制作问题"><a href="#3、模板模式解决豆浆制作问题" class="headerlink" title="3、模板模式解决豆浆制作问题"></a>3、模板模式解决豆浆制作问题</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208021521755.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>template</span><span class="token punctuation">;</span><span class="token comment">/** * 抽象方法 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 模板方法，定义为final禁止覆写     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>豆浆制作开始&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">useSoyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>豆浆制作结束&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">useSoyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step1. 选用上好的黄豆."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加不同的配料，有子类具体实现     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step3. 对黄豆和配料进行水洗浸泡."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">mash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step4. 将充分浸泡过的黄豆和配料放入豆浆机中，开始打豆浆."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>template</span><span class="token punctuation">;</span><span class="token comment">/** * 花生豆浆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeanutSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============花生豆浆============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step2. 加入上好的花生."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 红豆豆浆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBeanSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">RedBeanSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============红豆豆浆============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step2. 加入上好的红豆."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>template</span><span class="token punctuation">;</span><span class="token comment">/** * 芝麻豆浆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SesameSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SesameSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============芝麻豆浆============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step2. 加入上好的芝麻."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用模板方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>template</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SoyaMilk</span> peanutSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        peanutSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> redBeanSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBeanSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redBeanSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> sesameSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SesameSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sesameSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><p><img src="http://img-md-js.linjsblog.top/img/202208021533426.png" alt="image-20220802153352371"></p><h2 id="4、钩子方法"><a href="#4、钩子方法" class="headerlink" title="4、钩子方法"></a>4、钩子方法</h2><ul><li><p>1）在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为“钩子”</p></li><li><p>2）还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的模板方法进行改造</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>template</span><span class="token punctuation">;</span><span class="token comment">/** * 抽象方法 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 模板方法，定义为final禁止覆写     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>豆浆制作开始&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">useSoyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">customAddIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>豆浆制作结束&lt;&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">useSoyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step1. 选用上好的黄豆."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加不同的配料，有子类具体实现     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step3. 对黄豆和配料进行水洗浸泡."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">mash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Step4. 将充分浸泡过的黄豆和配料放入豆浆机中，开始打豆浆."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//钩子方法，决定是否要添加配料</span>    <span class="token class-name">Boolean</span> <span class="token function">customAddIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>template</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PureSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">PureSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============纯豆浆============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 空实现即可</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Boolean</span> <span class="token function">customAddIngredients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、Spring-框架源码分析"><a href="#5、Spring-框架源码分析" class="headerlink" title="5、Spring 框架源码分析"></a>5、Spring 框架源码分析</h2><p><code>AbstractApplicationContext.java</code>中有一个<code>refresh()</code>方法就是模板方法，其中定义了抽象方法和钩子方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 模板方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 钩子方法</span>            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 钩子方法</span>            <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                            <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name">ConfigurableListableBeanFactory</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抽象方法</span>    <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抽象方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean factory for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> beanFactory<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// For subclasses: do nothing by default.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208021544554.png" alt="img"></p><h2 id="6、注意事项和细节"><a href="#6、注意事项和细节" class="headerlink" title="6、注意事项和细节"></a>6、注意事项和细节</h2><ul><li><p>1）<strong>基本思想</strong>：算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改</p></li><li><p>2）实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用</p></li><li><p>3）既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现</p></li><li><p>4）<strong>不足之处</strong>：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大</p></li><li><p>5）一般模板方法都加上<code>final</code>关键字，防止子类重写模板方法</p></li><li><p>6）<strong>使用场景</strong>：当要完成在某个过程，该过程要执行一系列步骤，这一系列的步骤基本相同，但其个别步骤在实现时可能不同，通常考虑用模板方法模式来处理</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2022/08/01/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/01/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="1、代理模式的基本介绍"><a href="#1、代理模式的基本介绍" class="headerlink" title="1、代理模式的基本介绍"></a>1、代理模式的基本介绍</h2><ul><li><p>1）代理模式：为一个对象提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象</p></li><li><p>2）这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能</p></li><li><p>3）被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象</p></li><li><p>4）代理模式有不同的形式，主要有三种：</p></li><li><ul><li><strong>静态代理</strong></li></ul></li><li><ul><li><strong>动态代理</strong>：JDK 代理、接口代理</li></ul></li><li><ul><li><strong>Cglib 代理</strong>：可以在内存动态的创建对象，而不需要实现接口，它是属于动态代理的范畴</li></ul></li><li><p><img src="http://img-md-js.linjsblog.top/img/202208011632668.png" alt="img"></p></li></ul><h2 id="2、静态代理"><a href="#2、静态代理" class="headerlink" title="2、静态代理"></a>2、静态代理</h2><h3 id="2-1、基本介绍"><a href="#2-1、基本介绍" class="headerlink" title="2.1、基本介绍"></a>2.1、基本介绍</h3><p>静态代理在使里时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现租同的接口或者是继承和同父类— 应用实例</p><h3 id="2-2、应用实例"><a href="#2-2、应用实例" class="headerlink" title="2.2、应用实例"></a>2.2、应用实例</h3><ul><li><p>1）定义一个接口：<code>ITeacherDao</code></p></li><li><p>2）目标对象<code>TeacherDAO</code>实现接口<code>ITeacherDAO</code></p></li><li><p>3）使用静态代理方式，就需要在代理对象<code>TeacherDAOProxy</code>中也实现<code>ITeacherDAO</code></p></li><li><p>4）调用的时候通过调用代理对象的方法来调用目标对象</p></li><li><p>5）<strong>特别提醒</strong>：代理对象与目标对象要实现相同的接口，然后通过调用相同的方法来调用目标对象的方法</p></li></ul><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208011633309.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202208011633806.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//被代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeachDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师授课中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDaoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ITeacherDao</span> iTeacherDao<span class="token punctuation">;</span><span class="token comment">//目标对象，通过接口来聚合</span>    <span class="token keyword">public</span> <span class="token class-name">TeacherDaoProxy</span><span class="token punctuation">(</span><span class="token class-name">ITeacherDao</span> iTeacherDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iTeacherDao <span class="token operator">=</span> iTeacherDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始代理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iTeacherDao<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用代理</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建被代理对象</span><span class="token class-name">TeacherDao</span> teacherDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建代理对象，聚合被代理对象</span><span class="token class-name">TeacherDaoProxy</span> teacherDaoProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDaoProxy</span><span class="token punctuation">(</span>teacherDao<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过代理对象，调用被代理对象的方法</span>teacherDaoProxy<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3、静态代理优缺点"><a href="#2-3、静态代理优缺点" class="headerlink" title="2.3、静态代理优缺点"></a>2.3、静态代理优缺点</h3><ul><li><p>1）<strong>优点</strong>：在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展</p></li><li><p>2）<strong>缺点</strong>：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类</p></li><li><p>3）<strong>缺点</strong>：一旦接口增加方法，目标对象与代理对象都要维护</p></li></ul><h2 id="3、动态代理"><a href="#3、动态代理" class="headerlink" title="3、动态代理"></a>3、动态代理</h2><h3 id="3-1、基本介绍"><a href="#3-1、基本介绍" class="headerlink" title="3.1、基本介绍"></a>3.1、基本介绍</h3><ul><li><p>1）代理对象不需要实现接口，但是目标对象要实现接口，否则不能用动态代理</p></li><li><p>2）代理对象的生成，是利用 JDK 的 APl，动态的在内存中构建代理对象</p></li><li><p>3）动态代理也叫做：JDK 代理、接口代理</p></li></ul><h3 id="3-2、JDK-中生成代理对象的-API"><a href="#3-2、JDK-中生成代理对象的-API" class="headerlink" title="3.2、JDK 中生成代理对象的 API"></a>3.2、JDK 中生成代理对象的 API</h3><ul><li><p>1）代理类所在包：<code>java.lang.reflect.Proxy</code></p></li><li><p>2）JDK 实现代理只需要使用<code>newProxyInstance</code>方法，但是该方法需要接收三个参数，完整的写法是：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxylnstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span> <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208011712902.png" alt="img"></p><p><strong>核心代码</strong></p><p>ITeachDao和TeachDao同上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TeacherFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*        public static Object newProxyInstance(ClassLoader loader,                                          Class&lt;?>[] interfaces,                                          InvocationHandler h)        1.ClassLoader loader:指定当前目标对象使用的类加载器，获取加载器的方法固定        2.Class&lt;?>[] interfaces：目标对象实现的接口类型，使用泛型方法确认类型        3.InvocationHandler h：事件处理,执行目标对象方法时，会触发事件处理器的方法，会把当前执行的目标对象方法作为参数传入     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK代理授课开始..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDK代理授课结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个目标对象</span>        <span class="token class-name">ITeacherDao</span> teachDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeachDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给目标对象，创建代理对象</span>        <span class="token class-name">ITeacherDao</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ITeacherDao</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">TeacherFactory</span><span class="token punctuation">(</span>teachDao<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxyInstance="</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、Cglib-代理"><a href="#4、Cglib-代理" class="headerlink" title="4、Cglib 代理"></a>4、Cglib 代理</h2><h3 id="4-1、基本介绍"><a href="#4-1、基本介绍" class="headerlink" title="4.1、基本介绍"></a>4.1、基本介绍</h3><ul><li><p>1）静态代理和 JDK 代理模式都要求目标对象是实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理——这就是 Cglib 代理</p></li><li><p>2）Cglib 代理也叫作子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有些书也将 Cglib 代理归属到动态代理。</p></li><li><p>3）Cglib 是一个强大的高性能的代码生成包，它可以在运行期扩展 java 类与实现 java 接口。它广泛的被许多 AOP 的框架使用，例如 Spring AOP，实现方法拦截</p></li><li><p>4）在 AOP 编程中如何选择代理模式：</p></li><li><ul><li>目标对象需要实现接口，用 JDK 代理</li></ul></li><li><ul><li>目标对象不需要实现接口，用 Cglib 代理</li></ul></li><li><p>5）Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类</p></li></ul><h3 id="4-2、实现步骤"><a href="#4-2、实现步骤" class="headerlink" title="4.2、实现步骤"></a>4.2、实现步骤</h3><ul><li><p>1）需要引入<code>cglib</code>的 jar 文件 <img src="http://img-md-js.linjsblog.top/img/202208011939105.png" alt="image-20220801193900737"></p></li><li><p>2）在内存中动态构建子类，注意代理的类不能为<code>final</code>，否则报错<code>java.lang.IllegalArgumentException</code></p></li><li><p>3）目标对象的方法如果为<code>final</code>&#x2F;<code>static</code>，那么就不会被拦截，即不会执行目标对象额外的业务方法</p></li></ul><h3 id="4-2、实现步骤-1"><a href="#4-2、实现步骤-1" class="headerlink" title="4.2、实现步骤"></a>4.2、实现步骤</h3><ul><li><p>1）需要引入<code>cglib</code>的 jar 文件 <img src="https://s2.loli.net/2021/12/10/t6PbNaGwj8FT1gA.png" alt="img"></p></li><li><p>2）在内存中动态构建子类，注意代理的类不能为<code>final</code>，否则报错<code>java.lang.IllegalArgumentException</code></p></li><li><p>3）目标对象的方法如果为<code>final</code>&#x2F;<code>static</code>，那么就不会被拦截，即不会执行目标对象额外的业务方法</p></li></ul><h3 id="4-3、应用实例"><a href="#4-3、应用实例" class="headerlink" title="4.3、应用实例"></a>4.3、应用实例</h3><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208012117680.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202208012117024.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>cglib</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师授课中，我是cglib代理，不需要实现接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>cglib</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回一个代理对象，是 target 对象的代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个工具类</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建子类对象，即代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib代理模式~~开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> returnVal <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib代理提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>company<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>cglib</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建目标对象</span>        <span class="token class-name">TeacherDao</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取到代理对象，并且将目标对象传递给代理对象</span>        <span class="token class-name">TeacherDao</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TeacherDao</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行代理对象的方法 ，intercept方法，从而实现对目标对象的调用</span>        <span class="token class-name">String</span> res <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、代理模式的变体"><a href="#5、代理模式的变体" class="headerlink" title="5、代理模式的变体"></a>5、代理模式的变体</h3><p>几种常见的代理模式介绍一几种变体</p><ul><li><p>1）<strong>防火墙代理</strong>：内网通过代理穿透防火墙，实现对公网的访问</p></li><li><p>2）<strong>缓存代理</strong>：比如：当请求图片文件等资源时，先到缓存代理取，如果取到资源则 ok；如果取不到资源，再到公网或者数据库取，然后缓存</p></li><li><p>3）<strong>远程代理</strong>：远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息 <img src="http://img-md-js.linjsblog.top/img/202208012147916.png" alt="img"></p></li><li><p>4）<strong>同步代理</strong>：主要使用在多线程编程中，完成多线程间同步工作</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lock 锁</title>
      <link href="/2022/07/31/lock-%E9%94%81-%E5%85%A5%E9%97%A8/"/>
      <url>/2022/07/31/lock-%E9%94%81-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Lock-锁-入门"><a href="#Lock-锁-入门" class="headerlink" title="Lock (锁) 入门"></a>Lock (锁) 入门</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>从JDK5.0开始，Java提供了更强大的线程同步机制——通过显示定义同步锁对象来实现同步。同步锁使用Lock对象充当</li><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象</li><li>ReentrantLock类实现了Lock，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显示加锁和释放锁</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">//构造器参数设置为true采用公平排序策略</span>    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 加锁</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":售票，票号为："</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 释放锁</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">窗口1:售票，票号为：100窗口2:售票，票号为：99窗口3:售票，票号为：98窗口1:售票，票号为：97窗口2:售票，票号为：96窗口3:售票，票号为：95...窗口2:售票，票号为：3窗口3:售票，票号为：2窗口1:售票，票号为：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样也可以解决卖票的线程安全问题</p><h2 id="synchronized和Lock的异同"><a href="#synchronized和Lock的异同" class="headerlink" title="synchronized和Lock的异同"></a>synchronized和Lock的异同</h2><p>相同：二者都可以解决线程安全问题</p><p>不同：synchronized机制在执行完响应的同步代码以后，自动释放同步监视器，Lock需要手动启动同步（lock()），同时结束也需要显示的释放锁（unlock()）</p><p>Lock只用代码块锁，synchronized有代码块锁和方法锁</p><p>更多的内容可参考：javaguide 《谈谈 synchronized 和 ReentrantLock 的区别》<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#%E8%B0%88%E8%B0%88-synchronized-%E5%92%8C-reentrantlock-%E7%9A%84%E5%8C%BA%E5%88%AB">https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#%E8%B0%88%E8%B0%88-synchronized-%E5%92%8C-reentrantlock-%E7%9A%84%E5%8C%BA%E5%88%AB</a></p>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程死锁问题</title>
      <link href="/2022/07/31/%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/31/%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="线程死锁问题"><a href="#线程死锁问题" class="headerlink" title="线程死锁问题"></a>线程死锁问题</h1><h2 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h2><ol><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。</li><li>出现死锁后，不会出现异常，不会出现提示，只是所用线程都处于阻塞状态，无法继续</li></ol><h2 id="演示死锁问题"><a href="#演示死锁问题" class="headerlink" title="演示死锁问题"></a>演示死锁问题</h2><p>接下来我们演示死锁问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码<strong>可能</strong>导致死锁，为了提高出现死锁的概率，我们在线程拿到第一个锁后睡一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​ 当第一个线程拿到锁s1时，第二个线程进入方法拿到锁s2，线程1sleep后因为s2被线程2占用，而线程2想要拿s1锁被线1占用，双方都想拿到对方的锁，而自己又无法释放自己的锁，从而造成无法向下执行，进而造成死锁</p><p>上面的例子符合产生死锁的四个必要条件：</p><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。</li></ol><h2 id="如何预防和避免线程死锁"><a href="#如何预防和避免线程死锁" class="headerlink" title="如何预防和避免线程死锁?"></a>如何预防和避免线程死锁?</h2><p><strong>如何预防死锁？</strong> 破坏死锁的产生的必要条件即可：</p><ol><li><strong>破坏请求与保持条件</strong> ：一次性申请所有的资源。</li><li><strong>破坏不剥夺条件</strong> ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li><strong>破坏循环等待条件</strong> ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><p><strong>如何避免死锁？</strong></p><p>避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。</p><blockquote><p><strong>安全状态</strong> 指的是系统能够按照某种线程推进顺序（P1、P2、P3…..Pn）来为每个线程分配所需资源，直到满足每个线程对资源的最大需求，使每个线程都可顺利完成。称&lt;P1、P2、P3…..Pn&gt;序列为安全序列。</p></blockquote><p>我们把线程2的代码改成这样就不会产生死锁了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>           <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们分析一下上面的代码为什么避免了死锁的发生?</p><p>线程 1 首先获得到 s1 的监视器锁,这时候线程 2 就获取不到了。然后线程 1 再去获取 s2 的监视器锁，可以获取到。然后线程 1 释放了对 s1、s2 的监视器锁的占用，线程 2 获取到就可以执行了。这样就破坏了破坏循环等待条件，因此避免了死锁。</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程同步</title>
      <link href="/2022/07/30/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2022/07/30/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h2 id="线程安全的问题"><a href="#线程安全的问题" class="headerlink" title="线程安全的问题"></a>线程安全的问题</h2><h3 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h3><ul><li><p>多个线程执行的不确定性引起结果的不稳定</p></li><li><p>多个线程对账本的共享，会造成操作的不完整性，会破坏数据</p><p><img src="http://img-md-js.linjsblog.top/img/202207301008257.png" alt="image-20220730100751510"></p></li></ul><h3 id="线程安全举例"><a href="#线程安全举例" class="headerlink" title="线程安全举例"></a>线程安全举例</h3><p>多窗口卖票问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":卖票，票号为："</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现重票和错票</p><p><img src="http://img-md-js.linjsblog.top/img/202207301023821.png" alt="image-20220730102333439"></p><p>原因：当某个线程操作车票的过程中，尚未完成操作时，其他线程参与进来，也操作车票。</p><p><strong>如何解决：</strong>当线程a在操作ticket的时候，其他线程不能参与进来，直到线程a操作完ticket时，其他线程才可以继续开始操作ticket。这种情况即使a出现阻塞，也不能被改变。在Java中，我们通过同步机制解决线程安全问题。</p><h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//需要被同步的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：</p><ol><li><p>操作共享数据的代码，即为需要被同步的代码。</p></li><li><p>共享数据：多个线程共同操作的变量</p></li><li><p>同步监视器：俗称：<strong>锁</strong>。任何一个类的对象都可以充当锁。</p><p>要求：多个线程必须共用同一把锁</p></li></ol><h3 id="同步代码块处理实现Runnable的线程安全问题"><a href="#同步代码块处理实现Runnable的线程安全问题" class="headerlink" title="同步代码块处理实现Runnable的线程安全问题"></a>同步代码块处理实现Runnable的线程安全问题</h3><p>对象object作为锁，或者使用this关键字表示当前对象作为锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//synchronized (object)&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":卖票，票号为："</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步代码处理继承Thread类的线程安全问题"><a href="#同步代码处理继承Thread类的线程安全问题" class="headerlink" title="同步代码处理继承Thread类的线程安全问题"></a>同步代码处理继承Thread类的线程安全问题</h3><p>因为创建了三个Window2()对象，所以要将ticket和object用static修饰保证三个线程共用一个锁和ticket。</p><p>更简单的可以使用<strong>类锁</strong> <code>Window2.class</code>，保证三个线程共用一个锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window2</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window2</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window2</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Window2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//synchronized (object) &#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明成同步的</p><h3 id="实现Runnable"><a href="#实现Runnable" class="headerlink" title="实现Runnable"></a>实现Runnable</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window3</span> window3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>window3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>window3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>window3<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window3</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ticket <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//同步监视器this</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":卖票，票号为："</span><span class="token operator">+</span>ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><p>把同步方法声明成静态的，静态方法随着类的加载而加载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window4</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window4</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window4</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Window4</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ticket <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类锁和对象锁的区别"><a href="#类锁和对象锁的区别" class="headerlink" title="类锁和对象锁的区别"></a>类锁和对象锁的区别</h2><p>类锁是一个class其中的静态方法和静态变量在内存中只会加载和初始化一份，所以，一旦一个静态的方法被申明为synchronized，此类的所有的实例化对象在调用该方法时，共用同一把锁，称之为类锁。</p><p>类锁是加载类上的，而类信息是存在 JVM 方法区的，并且整个 JVM 只有一份，方法区又是所有线程共享的，所以类锁是所有线程共享的。</p><p><strong>类锁属于一个类，类似静态变量；多个实例对象对应同一个锁</strong>。</p><p><strong>对象锁属于对象实例，类似类属性变量；每一个实例对象，对应一个锁</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程的生命周期</title>
      <link href="/2022/07/29/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/07/29/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p>JDK 中Thread.State 类定义了线程的几种状态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>    <span class="token constant">NEW</span><span class="token punctuation">,</span>    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>    <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>    <span class="token constant">WAITING</span><span class="token punctuation">,</span>    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>    <span class="token constant">TERMINATED</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态</p><p><img src="http://img-md-js.linjsblog.top/img/202207292153795.png" alt="Java 线程的状态 "></p><p>线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示</p><p><img src="http://img-md-js.linjsblog.top/img/202207292156357.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java线程中的常用方法和线程优先级的设置</title>
      <link href="/2022/07/29/java%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/07/29/java%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Java线程中的常用方法和线程优先级的设置"><a href="#Java线程中的常用方法和线程优先级的设置" class="headerlink" title="Java线程中的常用方法和线程优先级的设置"></a>Java线程中的常用方法和线程优先级的设置</h1><h2 id="Thread类中的"><a href="#Thread类中的" class="headerlink" title="Thread类中的"></a>Thread类中的</h2><ol><li><p>**start()**：启动当前线程，调用当前线程的run()</p></li><li><p><strong>run()</strong>: 通常需要重写Thread类中的此方法，将线程要执行的操作声明在此方法中</p></li><li><p><strong>currentThread()</strong>: 静态方法，返回执行当前代码的线程</p></li><li><p><strong>getName()</strong>: 获取当前线程的名字</p></li><li><p><strong>setName()</strong>: 设置当前线程的名字</p><p>代码示例1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       h1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//给主线程命名</span>       <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例2：继承父类Thread的构造方法设置线程名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        h1.setName("线程一");</span>       h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>yield()</strong>: 释放当前cpu的执行权，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        h1.setName("线程一");</span>       h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>join():</strong> 在线程a中调用线程b的join()，此时线程a进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        h1.setName("线程一");</span>       h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               h1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">线程一:6main:18线程一:8main:20线程一:10线程一:12线程一:14。。。线程一:94线程一:96线程一:98main:22main:24main:26main:28。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主线程i&#x3D;&#x3D;20时，执行join(),主线程进入阻塞状态，当分线程执行完后，主线程才结束阻塞状态继续执行</p></li><li><p><strong>stop()</strong>: 已过时。当执行此方法时，强制结束当前线程</p></li><li><p><strong>sleep(long millitime)</strong>: 让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        h1.setName("线程一");</span>       h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>isAlive()</strong>:判断当前线程是否存活</p></li></ol><pre><code><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        h1.setName("线程一");</span>        h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h2 id="线程优先级的设置"><a href="#线程优先级的设置" class="headerlink" title="线程优先级的设置"></a>线程优先级的设置</h2><h3 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h3><h4 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h4><ul><li><p>分时调度</p><p>分时调度模型是指让所有的线程轮流获得cpu的使用权,并且平均分配每个线程占用的CPU的时间片这个也比较好理解。<img src="http://img-md-js.linjsblog.top/img/202207291839695.png" alt="image-20220729183929467"></p></li><li><p>抢占式调度：高优先级的线程抢占CPU</p></li></ul><p>java虚拟机采用抢占式调度模型，是指优先让可运行池中优先级高的线程占用CPU，如果可运行池中的线程优先级相同，那么就随机选择一个线程，使其占用CPU。处于运行状态的线程会一直运行，直至它不得不放弃CPU。</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><h4 id="线程优先级等级"><a href="#线程优先级等级" class="headerlink" title="线程优先级等级"></a>线程优先级等级</h4><ul><li>MAX_PRIORITY: 10 最高优先级</li><li>MIN_PRIORITY: 1 最低优先级</li><li>NORM_PRIORITY: 5 分配给线程的默认优先级</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>getPriority(): 返回当前线程优先值</li><li>setPriority(int newProority): 改变线程的优先级</li></ul><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>线程创建时继承父线程优先级，低优先级知识获得调度的概率低，并非一定是在高优先级线程之后调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202207291906977.png" alt="image-20220729190628272"></p><p>可以看到没有设置优先级，线程的默认优先级是5，通过 <code>setPriority()</code>设置线程HelloThread优先级为最高，将主线程优先级设最低</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置分线程的优先级</span>        h1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token constant">MAX_PRIORITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置主线程优先级</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token constant">MIN_PRIORITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>组合模式</title>
      <link href="/2022/07/29/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/29/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><h2 id="1、学校院系展示需求"><a href="#1、学校院系展示需求" class="headerlink" title="1、学校院系展示需求"></a>1、学校院系展示需求</h2><p>编写程序展示一个学校院系结构：</p><p>需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。如图：</p><p><img src="http://img-md-js.linjsblog.top/img/202207271347119.png" alt="img"></p><p><strong>传统方式解决学校院系展示（类图）</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207271347244.png" alt="img"></p><p><strong>问题分析</strong></p><ul><li><p>1）将学院看做是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的</p></li><li><p>2）实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。因此这种方案，不能很好实现的 <em>管理</em> 的操作，比如对学院、系的添加、删除、遍历等</p></li><li><p>3）解决方案：把学校、院、系都看做是组织结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作 &#x3D;&#x3D;&gt; 组合模式</p></li></ul><h2 id="2、组合模式基本介绍"><a href="#2、组合模式基本介绍" class="headerlink" title="2、组合模式基本介绍"></a>2、组合模式基本介绍</h2><ul><li><p>1）<strong>组合模式（Composite Pattern），又叫部分整体模式</strong>。它创建了对象组的树形结构，将对象组合成树状结构以表示“整体-部分”的层次关系</p></li><li><p>2）组合模式依据树形结构来组合对象，用来表示部分以及整体层次</p></li><li><p>3）这种类型的设计模式属于结构型模式</p></li><li><p>4）组合模式使得用户对单个对象和组合对象的访问具有一致性，即：组合能让客户以一致的方式处理个别对象以及组合对象</p></li></ul><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207271350151.jpeg" alt="img"></p><p><strong>对原理结构图的说明一即组合模式的角色及职责</strong></p><ul><li><p>1）<code>Component</code>：这是组合中对象声明接口。在适当情况下，实现所有类共有的接口默认行为，用于访问和管理 <code>Component</code>子部件。<code>Component</code>可以是抽象类或者接口</p></li><li><p>2）<code>Leaf</code>：在组合中表示叶子结点，叶子结点没有子节点</p></li><li><p>3）<code>Composite</code>：非叶子结点，用于存储子部件，在<code>Component</code>接口中实现子部件的相关操作。比如增加、删除</p></li></ul><p><strong>解决的问题</strong></p><p>组合模式解决这样的问题，当我们的要处理的对象可以生成一棵树形结构，而我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑它是节点还是叶子</p><p><img src="http://img-md-js.linjsblog.top/img/202207271357688.png" alt="img"></p><h2 id="3、组合模式解决学校院系展示"><a href="#3、组合模式解决学校院系展示" class="headerlink" title="3、组合模式解决学校院系展示"></a>3、组合模式解决学校院系展示</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207271436785.png" alt="img"></p><p><strong>核心代码</strong></p><p>Component 抽象类 OrganizationComponent</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Component 抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Composite 非叶子节点 University</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Composite 非叶子节点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">University</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">></span></span> organizationComponentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        organizationComponentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        organizationComponent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent <span class="token operator">:</span> organizationComponentList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Colleage</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">College</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">></span></span> organizationComponentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">College</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        organizationComponentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        organizationComponent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============="</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent <span class="token operator">:</span> organizationComponentList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>leaf 叶子节点major</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Leaf 叶子结点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Major</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端 Client</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//大学</span>        <span class="token class-name">OrganizationComponent</span> university <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token string">"清华大学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//学院</span>        <span class="token class-name">OrganizationComponent</span> computerCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">College</span><span class="token punctuation">(</span><span class="token string">"计算机学院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrganizationComponent</span> infoEngineerCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">College</span><span class="token punctuation">(</span><span class="token string">"信息工程学院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//专业</span>        computerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"软件工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"网络工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        infoEngineerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"通信工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        infoEngineerCollege<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Major</span><span class="token punctuation">(</span><span class="token string">"信息工程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computerCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>infoEngineerCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;计算机学院&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;软件工程网络工程计算机科学与技术&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;信息工程学院&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;通信工程信息工程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、HashMap源码分析"><a href="#4、HashMap源码分析" class="headerlink" title="4、HashMap源码分析"></a>4、HashMap源码分析</h2><p>Java 的集合类—— HashMap 就使用了组合模式</p><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207271454026.png" alt="img"></p><p>核心代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">interface</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Composite</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Leaf</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/2022/07/29/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/29/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="1、展示网站项目需求"><a href="#1、展示网站项目需求" class="headerlink" title="1、展示网站项目需求"></a>1、展示网站项目需求</h2><p>小型的外包项目，给客户 A 做一个产品展示网站，客户 A 的朋友感觉效果不错，也希望做这样的产品展示网站，但是要求都有些不同：</p><ul><li><p>1）有客户要求以新闻的形式发布</p></li><li><p>2）有客户人要求以博客的形式发布</p></li><li><p>3）有客户希望以微信公众号的形式发布</p></li></ul><p><strong>传统方案解决网站展现项目</strong></p><ul><li><p>1）直接复制粘贴一份，然后根据客户不同要求，进行定制修改</p></li><li><p>2）给每个网站租用一个空间</p></li><li><p>3）方案设计示意图</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202207291319263.png" alt="img"></p><p><strong>传统方案解决网站展现项目-问题分析</strong></p><ul><li><p>1）需要的网站结构相似度很高，而且都不是高问量网站，如果分成多个虚拟空间来处理，相当于一个相同网站的实例对象很多，造成服务器的资源浪费</p></li><li><p>2）解决思路：整合到一个网站中，共享其相关的代码和数据，对于硬盘、内存、CPU、数据库空间等服务器资源都可以达成共享，减少服务器资源</p></li><li><p>3）对于代码来说，由于是一份实例，维护和扩展都更加容易</p></li><li><p>4）上面的解决思路就可以使用<strong>享元模式</strong>来解决</p></li></ul><h2 id="2、享元模式基本介绍"><a href="#2、享元模式基本介绍" class="headerlink" title="2、享元模式基本介绍"></a>2、享元模式基本介绍</h2><ul><li><p>1）享元模式（Flyweight Pattern）也叫<strong>蝇量模式</strong>：运用共享技术有效地支持大量细粒度的对象</p></li><li><p>2）常用于系统底层开发，解决系统的性能问题。像<strong>数据库连接池</strong>，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个</p></li><li><p>3）享元模式能够<strong>解决重复对象的内存浪费的问题</strong>。当系统中有大量相似对象，需要缓冲池时，不需总是创建新对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率</p></li><li><p>4）享元模式经典的应用场景就是<strong>池技术</strong>了，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现方式</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202207291351103.png" alt="img"></p><h2 id="3、享元模式的原理类图"><a href="#3、享元模式的原理类图" class="headerlink" title="3、享元模式的原理类图"></a>3、享元模式的原理类图</h2><p><img src="http://img-md-js.linjsblog.top/img/202207291403401.png" alt="img"></p><p><strong>对原理图的说明——即模式的角色和职责</strong></p><ul><li><p>1）Flyweight：抽象的享元角色，是抽象的产品类，同时定义出对象的外部状态和内部状态的接口和实现</p></li><li><p>2）ConcreteFlyweight：具体的享元角色，是具体的产品类，实现抽象角色定义的相关业务</p></li><li><p>3）UnsharedConcreteFlyweight：不可共享的角色，一般不会出现在享元工厂中</p></li><li><p>4）FlyweightFactory：享元工厂类，用于构建一个池容器（集合），同时提供从池中获取对象的方法</p></li></ul><h2 id="4、内部状态和外部状态"><a href="#4、内部状态和外部状态" class="headerlink" title="4、内部状态和外部状态"></a>4、内部状态和外部状态</h2><p>比如围棋、五子棋、跳棋，它们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一点。所以棋子颜色就是棋子的内部状态；而各个棋子之间的差别就是位置的不同。当我们落子后，落子颜色是定的，但位置是变化的，所以棋子坐标就是棋子的外部状态</p><ul><li><p>1）享元模式提出了两个要求：细粒度和共享对象。即将对象的信息分为两个部分：内部状态和外部状态</p></li><li><p>2）<strong>内部状态</strong>：指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</p></li><li><p>3）<strong>外部状态</strong>：指对象得以依赖的一个标记，是随环境改变而改变的、不可共享的状态</p></li></ul><p>举个例子：围模理论上有 361 个空位可以放棋子，每盘棋都有可能有两三百个棋子对象产生。因为内存空间有限，一台服务器很难支持更多的玩家玩围模游戏。如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例，这样就很好的解决了对象的开销问题</p><h2 id="5、享元模式解决网站展现项目"><a href="#5、享元模式解决网站展现项目" class="headerlink" title="5、享元模式解决网站展现项目"></a>5、享元模式解决网站展现项目</h2><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207291418122.png" alt="img"></p><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207291418529.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 内部状态，共享角色 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Type</span> <span class="token punctuation">&#123;</span>    新闻<span class="token punctuation">,</span>    博客<span class="token punctuation">,</span>    微信公众号<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 外部状态，非共享角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 抽象的享元角色 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WebSite</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteWebsite</span> <span class="token keyword">extends</span> <span class="token class-name">WebSite</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Type</span> type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteWebsite</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站正在使用中：类型为"</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，使用者为"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * 享元工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsiteFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Type</span><span class="token punctuation">,</span><span class="token class-name">WebSite</span><span class="token punctuation">></span></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WebSite</span> <span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConcreteWebsite</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WebSite</span> newsWebsite <span class="token operator">=</span> <span class="token class-name">WebsiteFactory</span><span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span>新闻<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebSite</span> blogWebsite <span class="token operator">=</span> <span class="token class-name">WebsiteFactory</span><span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span>博客<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebSite</span> blogWebsite2 <span class="token operator">=</span> <span class="token class-name">WebsiteFactory</span><span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span>博客<span class="token punctuation">)</span><span class="token punctuation">;</span>        blogWebsite2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebSite</span> blogWebsite3 <span class="token operator">=</span> <span class="token class-name">WebsiteFactory</span><span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span>博客<span class="token punctuation">)</span><span class="token punctuation">;</span>        blogWebsite3<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebSite</span> wxWebsite <span class="token operator">=</span> <span class="token class-name">WebsiteFactory</span><span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span>微信公众号<span class="token punctuation">)</span><span class="token punctuation">;</span>        wxWebsite<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Mack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">WebsiteFactory</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">网站正在使用中：类型为博客，使用者为John网站正在使用中：类型为博客，使用者为Smith网站正在使用中：类型为微信公众号，使用者为Mack3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、Integer-源码分析"><a href="#6、Integer-源码分析" class="headerlink" title="6、Integer 源码分析"></a>6、Integer 源码分析</h2><p>首先先看一段代码测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> z <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>w <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>w <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道：<code>equals</code>比较的是对象的内容，<code>==</code>比较的是对象的实例</p><ul><li><p><code>x.equals(y)</code>结果为<code>true</code>：比较的是大小，所以结果为<code>true</code></p></li><li><p><code>x == y</code>、<code>w == x</code>、<code>w == y</code>结果为<code>false</code>：由于 y 是 new 出来的，所以结果为<code>false</code></p></li><li><p><code>x == z</code>结果为<code>true</code>：<strong>这是为什么呢？？？</strong></p></li></ul><p>我们追踪一下<code>Integer</code>对象的<code>valueOf</code>方法，看一下源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// high value may be configured by property</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> integerCacheHighPropValue <span class="token operator">=</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// Maximum array size is Integer.MAX_VALUE</span>                    h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">NumberFormatException</span> nfe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// If the property cannot be parsed into an int, ignore it.</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            high <span class="token operator">=</span> h<span class="token punctuation">;</span>            cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span>            <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过<code>IntegerCache</code>中源码大概基本分析出</p><ul><li><p><code>low</code>为<code>-128</code></p></li><li><p><code>high</code>为<code>127</code></p></li></ul><p>所以当<code>Integer</code>在<code>[-128, 127]</code>时，会返回<code>IntegerCache</code>的<code>cache[]</code>数组内容；否则，<code>valueOf</code>方法相当于<code>new Integer</code>了</p><p>也就是说，<code>Integer.valueOf(x)</code>方法使用的就是<strong>享元模式</strong></p><p>另外，我们也可以分析出：</p><ul><li>当数值范围在时，使用方法执行速度比更快<code>[-128, 127]``valueOf``new</code></li></ul><h2 id="7、享元模式的注意事项和细节"><a href="#7、享元模式的注意事项和细节" class="headerlink" title="7、享元模式的注意事项和细节"></a>7、享元模式的注意事项和细节</h2><ul><li><p>1）在享元模式这样理解，“享”就表示共享，“元”表示对象</p></li><li><p>2）系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式</p></li><li><p>3）用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象，用 HashMap&#x2F;HashTable 存储</p></li><li><p>4）享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率</p></li><li><p>5）享元模式提高了系统的复杂度，需要分离出内部状态和外部状态。而外部状态具有固化特性，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的地方</p></li><li><p>6）使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂类加以控制</p></li><li><p>7）享元模式经典的应用场景是需要缓冲池的场景，比如 String 常量池、数据库连接池</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring 的几种注入方式</title>
      <link href="/2022/07/29/spring-%E7%9A%84%E5%87%A0%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/07/29/spring-%E7%9A%84%E5%87%A0%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-的几种注入方式"><a href="#Spring-的几种注入方式" class="headerlink" title="Spring 的几种注入方式"></a>Spring 的几种注入方式</h1><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>@Autowired注解相信大家都不陌生了，在我们使用idea写代码的时候，经常会发现@Autowired注解下面是有小黄线的。</p><p><img src="http://img-md-js.linjsblog.top/img/202207291445081.png" alt="image-20220729144534727"></p><p>为什么会出现这样的问题呢？</p><p>查阅了相关文档了解了一下，原来这个提示是<code>spring framerwork 4.0</code>以后开始出现的，spring 4.0开始就不推荐使用属性注入，改为推荐构造器注入和setter注入。</p><h2 id="Spring中的三种注入方式"><a href="#Spring中的三种注入方式" class="headerlink" title="Spring中的三种注入方式"></a>Spring中的三种注入方式</h2><h3 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h3><p>在基于属性的依赖注入中，字段&#x2F;属性被标注为**@Autowired**。一旦类被实例化，Spring容器将设置这些字段。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如所看到的，这是依赖注入最干净的方法，因为它避免了添加样板代码，并且不需要声明类的构造函数。代码看起来很干净简洁，但是正如代码检查器已经向我们暗示的那样，这种方法有一些缺点。</p><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><p>在基于构造函数的依赖注入中，类构造函数被标注为**@Autowired**，并包含了许多与要注入的对象相关的参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">UserController</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在spring官方文档中，**@Autowired**注解也是可以省去的。</p><p>基于构造函数注入的主要优点是可以将需要注入的字段声明为<strong>final</strong>， 使得它们会在类实例化期间被初始化，这对于所需的依赖项很方便。</p><h3 id="Setter-方法注入"><a href="#Setter-方法注入" class="headerlink" title="Setter 方法注入"></a>Setter 方法注入</h3><p>在基于setter的依赖注入中，setter方法被标注为**@Autowired**。一旦使用无参数构造函数或无参数静态工厂方法实例化Bean，为了注入Bean的依赖项，Spring容器将调用这些setter方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为什么字段注入不被推荐"><a href="#为什么字段注入不被推荐" class="headerlink" title="为什么字段注入不被推荐"></a>为什么字段注入不被推荐</h2><p>详情可看这篇文章</p><blockquote><p><a href="https://www.vojtechruzicka.com/field-dependency-injection-considered-harmful/">Field Dependency Injection Considered Harmful</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/2022/07/28/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/28/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>1、影院管理项目</p><p>组建一个家庭影院：</p><p>DVD 播放器、投影仪、自动屏幕、环绕立体声、爆米花机，要求完成使用家庭影院的功能，其过程为：</p><p>●直接用遥控器：统筹各设备开关</p><p>●开爆米花机</p><p>●放下屏幕</p><p>●开投影仪</p><p>●开音响</p><p>●开DVD，选dvd</p><p>●去拿爆米花</p><p>●调暗灯光</p><p>●播放</p><p>●观影结束后，关闭各种设备</p><p><strong>传统方式解决影院管理</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207281344253.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClientTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 1、创建相关的对象</span>        <span class="token comment">// 2、调用创建的各个对象的一系列方法</span>        <span class="token comment">// 3、调用DVDPlayer对象的play方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>传统方式解决影院管理问题分析</strong></p><ul><li><p>1）在 ClientTest 的 main 方法中，创建各个子系统的对象，并直接去调用子系统（对象）相关方法，会造成调用过程混乱，没有清晰的过程</p></li><li><p>2）不利于在 ClientTest 中去维护对子系统的操作</p></li><li><p>3）解决思路：定义一个高层接口，给子系统中的一组接口提供一个一致的界面（比如在高层接口提供四个方法ready，play，pause，end），用来访问子系统中的一群接口</p></li><li><p>4）也就是说就是通过定义一个一致的接口（界面类），用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节 &#x3D;&#x3D;》外观模式</p></li></ul><h2 id="2、外观模式基本介绍"><a href="#2、外观模式基本介绍" class="headerlink" title="2、外观模式基本介绍"></a>2、外观模式基本介绍</h2><p>外观模式（Facade），也叫过程模式</p><p>外观模式子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节，这个接口使得这一子系统更加容易使用</p><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207281355500.png" alt="img"></p><p><strong>原理类图的说明（外观模式的角色）</strong></p><ul><li><p>1）外观类（Facade）：为调用端提供统一的调用接口，外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给适当子系统对象</p></li><li><p>2）调用者（Client）：外观接口的调用者</p></li><li><p>3）子系统的集合：指模块或者子系统，处理 Facade 对象指派的任务，是功能的实际提供者</p></li></ul><h2 id="3、外观模式解决影院管理"><a href="#3、外观模式解决影院管理" class="headerlink" title="3、外观模式解决影院管理"></a>3、外观模式解决影院管理</h2><ul><li><p>1）外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口才能达到目的，比如：</p></li><li><ul><li>在 PC 上安装软件的时候经常有一键安装选项（省去选择安装目录、安装的组件等等）</li></ul></li><li><ul><li>手机的重启功能（把关机和启动合为一个操作）</li></ul></li><li><p>2）外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用</p></li></ul><p><strong>使用外观模式来完成家庭影院项目</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207281407477.png" alt="img"></p><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207281407045.png" alt="img"></p><p><strong>核心代码</strong></p><p>【投影仪】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Projector</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Projector</span> projector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Projector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Projector</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> projector<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开投影仪..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭投影仪..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪聚焦..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">zoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪放大..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【DVD 播放器】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DVDPlayer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DVDPlayer</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DVDPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DVDPlayer</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> player<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开DVD播放器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭DVD播放器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"播放DVD播放器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"暂停DVD播放器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDvd</span><span class="token punctuation">(</span><span class="token class-name">String</span> dvd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选dvd："</span> <span class="token operator">+</span> dvd <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【荧幕】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Screen</span> screen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Screen</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> screen<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"升起荧幕..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拉下荧幕..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【立体声】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stereo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Stereo</span> stereo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stereo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stereo</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stereo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开立体声..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭立体声..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> volume<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"立体声音量+"</span> <span class="token operator">+</span> volume <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【灯光】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheaterLights</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TheaterLights</span> lights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheaterLights</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TheaterLights</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lights<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开灯光..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭灯光..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调暗灯光..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bright</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调亮灯光..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【爆米花机器】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Popcorn</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Popcorn</span> popcorn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Popcorn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Popcorn</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> popcorn<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开爆米花机器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭爆米花机器..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出爆米花..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【家庭影院 Facade】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeTheaterFacade</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Popcorn</span> popcorn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Screen</span> screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stereo</span> stereo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TheaterLights</span> lights<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Projector</span> projector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DVDPlayer</span> player<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>popcorn <span class="token operator">=</span> <span class="token class-name">Popcorn</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> <span class="token class-name">Screen</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stereo <span class="token operator">=</span> <span class="token class-name">Stereo</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lights <span class="token operator">=</span> <span class="token class-name">TheaterLights</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>projector <span class="token operator">=</span> <span class="token class-name">Projector</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>player <span class="token operator">=</span> <span class="token class-name">DVDPlayer</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lights<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打开灯光</span>        popcorn<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开爆米花机</span>        screen<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放下屏幕</span>        projector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开投影仪</span>        projector<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">zoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stereo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开音响，设置音量</span>        stereo<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        player<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开DVD，选dvd</span>        player<span class="token punctuation">.</span><span class="token function">setDvd</span><span class="token punctuation">(</span><span class="token string">"坦塔尼克号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        popcorn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去拿爆米花，关闭机器</span>        popcorn<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lights<span class="token punctuation">.</span><span class="token function">dim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调暗灯光</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        player<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        player<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        player<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stereo<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lights<span class="token punctuation">.</span><span class="token function">bright</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【客户端】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HomeTheaterFacade</span> homeTheaterFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========家庭影院初始化============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========家庭影院沉浸式播放============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========家庭影院暂停============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========家庭影院沉浸式播放============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========家庭影院结束============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheaterFacade<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、MyBatis-框架源码分析"><a href="#4、MyBatis-框架源码分析" class="headerlink" title="4、MyBatis 框架源码分析"></a>4、MyBatis 框架源码分析</h2><p>MyBatis 中 Configuration 去创建 MetaObject 对象时使用到了外观模式</p><p><strong>代码分析</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207281445993.png" alt="img"></p><p><img src="http://img-md-js.linjsblog.top/img/202207281445045.png" alt="img"></p><p><strong>示意图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207281445946.png" alt="img"></p><h2 id="5、外观模式的注意事项和细节"><a href="#5、外观模式的注意事项和细节" class="headerlink" title="5、外观模式的注意事项和细节"></a>5、外观模式的注意事项和细节</h2><ul><li>1）外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性</li><li>2）外观模式对客户端与子系统的耦合关系，让子系统内部的模块更易维护和扩展</li><li>3）通过合理的使用外观模式，可以帮我们更好的划分访问的层次</li><li>4）当系统需要进行分层设计时，可以考虑使用 Facade 模式</li><li>5）在维护一个遗留的大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个 Facade 类，来提供遗留系统的比较清晰简单的接口，让新系统与 Facade 类交互，提高复用性</li><li>6）不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好。要以让系统有层次，利于维护为目的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程的创建的几种方式</title>
      <link href="/2022/07/27/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/07/27/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h1><h2 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1.继承Thread类"></a>1.继承Thread类</h2><p>自定义类声明为Thread的子类然后重写run方法，创建线程对象，调用start方法启动线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法线程："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestThread1</span> testThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//start方法的作用：启动当前线程，调用当前线程的run方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、实现Runnable接口"><a href="#2、实现Runnable接口" class="headerlink" title="2、实现Runnable接口"></a>2、实现Runnable接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TestThread2</span> testThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread2<span class="token punctuation">,</span><span class="token string">"方法线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testThread2<span class="token punctuation">,</span><span class="token string">"方法线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较继承Thread和实现Runnable方式创建线程：</p><p>开发中优先选择实现Runnable接口的方式</p><p>原因：</p><ol><li>实现方式没有类的单继承性的局限性</li><li>实现方式更适合用来处理多个线程共享数据的情况</li></ol><p>联系：Thread类实现了Runnable接口</p><p>相同点：都要重写run(),将线程要执行的逻辑声明在run()中</p><h2 id="3、实现Callable接口"><a href="#3、实现Callable接口" class="headerlink" title="3、实现Callable接口"></a>3、实现Callable接口</h2><p>JDK 5.0 新增的创建线程的方式</p><p>与使用Runnable相比，Callable功能更强大一些：</p><ol><li>相比run()方法，可以有返回值，重写call()方法</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask 类，比如获取返回结果</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建Callable实现类的对象</span>        <span class="token class-name">TestCallable</span> testCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将此callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>testCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread类的对象，并调用start</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//get()返回值即为FutureTask构造器参数callable实现类重写的call()方法的返回值</span>            <span class="token class-name">Integer</span> sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span>  <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、使用线程池"><a href="#4、使用线程池" class="headerlink" title="4、使用线程池"></a>4、使用线程池</h2><p>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大</p><p>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中，可以避免频繁的创建和销毁、实现重复利用。</p><p>好处：</p><ol><li>提高响应速度（减少创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中的线程，不需要每次都创建）</li><li>便于线程管理，线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ol><p>在《阿里巴巴 Java 开发手册》“并发处理”这一章节，明确指出线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</p><h3 id="JDK5-0起提供了线程池相关API：ExecutorService和Executors"><a href="#JDK5-0起提供了线程池相关API：ExecutorService和Executors" class="headerlink" title="JDK5.0起提供了线程池相关API：ExecutorService和Executors"></a>JDK5.0起提供了线程池相关API：ExecutorService和Executors</h3><p><strong>ExecutorService：真正的线程池接口。常见了类ThreadPoolExecutor</strong></p><pre class="line-numbers language-none"><code class="language-none">void execute(Runnable command)：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable&lt;T&gt;Future&lt;T&gt;submit(CallabIe&lt;T&gt;task)：执行任务，有返回值，一般又来执行Callablevoid shutdown()：关闭连接池<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</strong></p><pre class="line-numbers language-none"><code class="language-none">Executors.newCachedThreadPool():创建一个可根据需要创建新线程的线程池Executors.newFixedThreadPool(n):创建一个可重用固定线程数的线线程池Executors.newSingleThreadExecutor()：创建一个只有一个线程的线程池Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//提供指定线程数量的线程池</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池的属性</span>        <span class="token class-name">ThreadPoolExecutor</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span><span class="token comment">//        service1.setCorePoolSize(15);</span><span class="token comment">//        service1.setKeepAliveTime();</span>        <span class="token comment">//指定线程的操作，需要提供实现Runnable接口或callable接口实现类的对象</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，《阿里巴巴 Java 开发手册》中强制线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。具体内容的深入学习可以参考<a href="https://javaguide.cn/java/concurrent/java-thread-pool-summary.html#_3-2-%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8-threadpoolexecutor-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0">Javaguide</a></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰者模式</title>
      <link href="/2022/07/26/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/26/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><h2 id="1、星巴克咖啡订单项目"><a href="#1、星巴克咖啡订单项目" class="headerlink" title="1、星巴克咖啡订单项目"></a>1、星巴克咖啡订单项目</h2><p>星巴克咖啡订单项目（咖啡馆）：</p><ul><li><p>1）咖啡种类&#x2F;单品咖啡：Espresso（意大利浓咖）、ShortBlack、LongBlack（美式咖啡）、Decaf（无因咖啡）</p></li><li><p>2）调料：Mik、Soy（豆浆）、Chocolate</p></li><li><p>3）要求在扩展新的咖啡种类时，具有良好的扩展性、改动方便、维护方便</p></li><li><p>4）使用 OO 的来计算不同种类咖啡的费用：客户可以点单品咖啡，也可以单品咖啡+调料组合</p></li></ul><h2 id="2、方案-1-解决星巴克咖啡订单项目（较差的方案）"><a href="#2、方案-1-解决星巴克咖啡订单项目（较差的方案）" class="headerlink" title="2、方案 1-解决星巴克咖啡订单项目（较差的方案）"></a>2、方案 1-解决星巴克咖啡订单项目（较差的方案）</h2><p><img src="http://img-md-js.linjsblog.top/img/202207261254522.png" alt="img"></p><p><strong>方案 1-解决星巴克咖啡订单问题分析</strong></p><ul><li><p>1）Drink 是一个抽象类，表示饮料</p></li><li><p>2）description 就是对咖啡的描述，比如咖啡的名字</p></li><li><p>3）cost 方法就是计算费用，Drink 类中做成一个抽象方法</p></li><li><p>4）Decaf 就是单品咖啡，继承 Drink，并实现 cost</p></li><li><p>5）Espresso &amp;&amp; Milk 就是单品咖啡+调料，这个组合很多</p></li><li><p>6）问题：这样设计，会有很多类。当我们增加一个单品咖啡，或者一个新的调料，类的数量就会倍增，出现类爆炸</p></li></ul><h2 id="3、方案-2-解决星巴克咖啡订单项目（好点的方案）"><a href="#3、方案-2-解决星巴克咖啡订单项目（好点的方案）" class="headerlink" title="3、方案 2-解决星巴克咖啡订单项目（好点的方案）"></a>3、方案 2-解决星巴克咖啡订单项目（好点的方案）</h2><p>前面分析到方案 1 因为咖啡单品+调料组合会造成类的倍增，因此可以做改进，将调料内置到 Drink 类，这样就不会造成类数量过多。从而提高项目的维护性（如图）</p><p><img src="http://img-md-js.linjsblog.top/img/202207261255067.png" alt="img"></p><p>说明：Milk、Soy、Chocolate 可以设计为 Boolean，表示是否要添加相应的调料</p><p><strong>方案 2-解决星巴克咖啡订单问题分析</strong></p><ul><li><p>1）方案 2 可以控制类的数量，不至于造成很多的类</p></li><li><p>2）在增加或者删除调料种类时，代码的维护量很大</p></li><li><p>3）考虑到用户可以添加多份调料时，可以将 hasMilk 返回一个对应 int</p></li><li><p>4）考虑使用装饰者模式</p></li></ul><h2 id="4、装饰者模式"><a href="#4、装饰者模式" class="headerlink" title="4、装饰者模式"></a>4、装饰者模式</h2><p><strong>定义</strong></p><ol><li><p>装饰者模式：动态地将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式体现了开闭原则（OCP）</p></li><li><p>这里提到的动态的将新功能附加到对象和 OCP 原则，在后面的应用实例上会以代码的形式体现，请同学们注意体会</p></li></ol><p><strong>原理</strong></p><ul><li><p>1）装饰者模式就像打包一个快递</p></li><li><ul><li>主体：比如陶瓷、衣服（Component）</li></ul></li><li><ul><li>包装：比如报纸填充、塑料泡沫、纸板、木板（Decorator）</li></ul></li><li><p>2）主体（Component）：比如前面的 Drink</p></li><li><p>3）具体的主体（ConcreteComponent）：比如前面的各个单品咖啡</p></li><li><p>4）装饰者（Decorator）：比如各调料</p></li><li><p>4）Component 与 ConcreteComponent 之间，如果 ConcreteComponent 类很多，还可以设计一个缓冲层，将共有的部分提取出来，抽象成一个类</p></li></ul><p><img src="http://img-md-js.linjsblog.top/img/202207261256336.png" alt="img"></p><h2 id="5、装饰者模式解决星巴克咖啡订单项目"><a href="#5、装饰者模式解决星巴克咖啡订单项目" class="headerlink" title="5、装饰者模式解决星巴克咖啡订单项目"></a>5、装饰者模式解决星巴克咖啡订单项目</h2><p><img src="http://img-md-js.linjsblog.top/img/202207261259557.png" alt="img"></p><p><strong>说明</strong></p><ul><li><p>1）Drink 就是抽象类 Component</p></li><li><p>2）ShortBlack 单品咖啡就是具体的主体</p></li><li><p>3）Decorator 是一个装饰类，含有一个被装饰的对象（Drink）</p></li><li><p>4）Decorator 的 cost 方法进行一个费用的叠加，递归地计算价格</p></li></ul><p>装饰者模式下的订单：2份巧克力 + 一份牛奶的 LongBlack</p><p><img src="http://img-md-js.linjsblog.top/img/202207261308494.png" alt="img"></p><p><strong>说明</strong></p><ul><li><p>1）Milk 包含了 LongBlack</p></li><li><p>2）一份 Chocolate 包含了 Milk + LongBlack</p></li><li><p>3）一份 Chocolate 包含了 Chocolate + Milk + LongBlack</p></li><li><p>4）这样不管是什么形式的单品咖啡 + 调料组合，通过递归方式可以方便的组合和维护</p></li></ul><p><strong>UML类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207261318165.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象主体</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Float</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token class-name">Float</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 具体主体</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decaf</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Decaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"无因咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">20.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"意大利浓咖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">30.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShortBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ShortBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"短黑咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">40.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongBlack</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">LongBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"美式咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">50.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//装饰者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Drink</span> drink<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> drink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>drink <span class="token operator">=</span> drink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> drink<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> drink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">3.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Soy</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Soy</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> drink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chocolate</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> drink<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"巧克力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">5.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeBar</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Drink</span> drink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"意大利浓咖："</span> <span class="token operator">+</span> drink<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"美元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 意大利浓咖：30.0美元</span>        drink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"意大利浓咖 + 1份牛奶："</span> <span class="token operator">+</span> drink<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"美元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 意大利浓咖 + 1份牛奶：33.0美元</span>        drink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"意大利浓咖 + 1份牛奶 + 1份巧克力："</span> <span class="token operator">+</span> drink<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"美元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 意大利浓咖...：38.0美元</span>        drink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"意大利浓咖 + 1份牛奶 + 2份巧克力："</span> <span class="token operator">+</span> drink<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"美元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 意大利浓咖...：43.0美元</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、JDK 源码分析</p><p>Java 的 IO 结构，FilterlnputStream 就是一个装饰者</p><p><img src="http://img-md-js.linjsblog.top/img/202207261322533.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 是一个抽象类，即Component</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 是一个装饰类，即Decorator</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">InputStream</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">protected</span> <span class="token keyword">volatile</span> <span class="token class-name">InputStream</span> in<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">FilterInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// FilterInputStream子类，也继承了被装饰的对象 in</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span> <span class="token keyword">implements</span> <span class="token class-name">DataInput</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析</strong></p><ul><li><p>1）InputStream 是抽象类，类似我们前面讲的 Drink</p></li><li><p>2）FileInputStream 是 InputStream 子类，类似我们前面的 DeCaf、LongBlack</p></li><li><p>3）FilterInputStream 是 InputStream 子类，类似我们前面的 Decorator，修饰者</p></li><li><p>4）DataInputStream 是 FilterInputStream 子类，类似前面的Milk，Soy等，具体的修饰者</p></li><li><p>5）FilterInputStream 类有<code>protected volatile InputStream in;</code>，即含被装饰者</p></li><li><p>6）分析得出在 JDK 的 IO 体系，就是使用装饰者模式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式</title>
      <link href="/2022/07/26/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/26/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>笔记来源：<a href="https://www.bilibili.com/video/BV1G4411c7N4">尚硅谷Java设计模式（图解+框架源码剖析）</a></p><h2 id="1、传统方式解决手机操作问题"><a href="#1、传统方式解决手机操作问题" class="headerlink" title="1、传统方式解决手机操作问题"></a>1、传统方式解决手机操作问题</h2><p>现在对不同手机类型的不同品牌实现操作编程（比如：开机、关机、上网，打电话等），如图：</p><p><img src="http://img-md-js.linjsblog.top/img/202208031338362.png" alt="img"></p><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208031338640.png" alt="img"></p><p><strong>问题分析</strong></p><ol><li><p><strong>扩展性问题（类爆炸）</strong>：如果我们再增加手机的样式（旋转式），就需要增加各个品牌手机的类；同样如果我们增加一个手机品牌，也要在各个手机样式类下增加</p></li><li><p><strong>违反了单一职责原则</strong>：当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护成本</p></li><li><p>解决方案——<strong>使用桥接模式</strong></p></li></ol><h2 id="2、桥接模式基本介绍"><a href="#2、桥接模式基本介绍" class="headerlink" title="2、桥接模式基本介绍"></a>2、桥接模式基本介绍</h2><ol><li><p><strong>桥接模式（Bridge模式）：</strong>一种结构型设计模式：将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变</p></li><li><p>Bridge模式基于类的最小设计原则，通过使用封装、聚合及继承等行为让不同的类承担不同的职责</p></li><li><p>它的主要特点是把抽象（Abstraction）与行为实现（Implementation）分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展</p></li></ol><p><strong>原理类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208031339594.png" alt="img"></p><p><strong>原理类图说明</strong></p><ul><li><p><strong>Client</strong>：桥接模式的调用者</p></li><li><p><strong>Abstraction</strong>：Abstraction 充当桥接类，维护了 Implementor，即 ConcreteImplementorA &#x2F; ConcreteImplementorB</p></li><li><p><strong>RefinedAbstraction</strong>：Abstraction 抽象类的子类</p></li><li><p><strong>Implementor</strong>：行为实现类的接口</p></li><li><p><strong>ConcreteImplementorA &#x2F; ConcreteImplementorB</strong>：行为的具体实现类</p></li><li><p>这里的抽象类和接口是聚合的关系，也是调用者和被调用者的关系</p></li></ul><h2 id="3、桥接模式解决手机操作问题"><a href="#3、桥接模式解决手机操作问题" class="headerlink" title="3、桥接模式解决手机操作问题"></a>3、桥接模式解决手机操作问题</h2><p><strong>UML 类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208031339770.png" alt="img"></p><p><strong>核心代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 行为接口——品牌接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Brand</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 行为实现类——华为品牌</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Huawei</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 行为实现类——小米品牌</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Xiaomi</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 行为实现类——苹果品牌</span><span class="token keyword">public</span> <span class="token keyword">class</span> iPhone <span class="token keyword">implements</span> <span class="token class-name">Brand</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"苹果手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"苹果手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"苹果手机关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 桥接类——手机抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Branch</span> branch<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token class-name">Branch</span> branch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>branch <span class="token operator">=</span> branch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        branch<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        branch<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        branch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 桥接子类——翻盖式手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlipPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">FlipPhone</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"翻盖式手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 桥接子类——滑盖式手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlidePhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SlidePhone</span><span class="token punctuation">(</span><span class="token class-name">Branch</span> branch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>branch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"滑盖式手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 桥接子类——直立式手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UprightPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UprightPhone</span><span class="token punctuation">(</span><span class="token class-name">Branch</span> branch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>branch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直立式手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、JDK-源码分析"><a href="#4、JDK-源码分析" class="headerlink" title="4、JDK 源码分析"></a>4、JDK 源码分析</h2><p>JDBC 的 Driver 接口：如果从桥接模式来看，Driver 就是一个接口，下面可以有 MySQL 的 Driver、Oracle 的 Driver，这些就可以当做实现接口类</p><p><img src="http://img-md-js.linjsblog.top/img/202208031339009.png" alt="img"></p><p><strong>Connection 继承体系</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208031339918.png" alt="img"></p><p><strong>Driver源码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token keyword">extends</span> <span class="token class-name">NonRegisteringDriver</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Driver</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> <span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Required for Class.forName().newInstance()</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>DriverManager 结构</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202208031340492.png" alt="img"></p><p><strong>说明</strong></p><ul><li><p>MySQL 有自己的 Connectionlmpl 类，同样 Oracle 也有对应的实现类</p></li><li><p>Driver 和 Connection 之间是通过 DriverManager 类进行桥连接的</p></li></ul><h2 id="5、注意事项和细节"><a href="#5、注意事项和细节" class="headerlink" title="5、注意事项和细节"></a>5、注意事项和细节</h2><ol><li><p>实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来。这有助于系统进行分层设计，从而产生更好的结构化系统</p></li><li><p>对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其它的部分由具体业务来完成</p></li><li><p>桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本</p></li><li><p>桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程</p></li><li><p>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围有一定的后限性，即需要有这样的应用场景</p></li></ol><h2 id="6、桥接模式其他应用场景"><a href="#6、桥接模式其他应用场景" class="headerlink" title="6、桥接模式其他应用场景"></a>6、桥接模式其他应用场景</h2><p>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用</p><p>常见的应用场景</p><ol><li><p>JDBC 驱动程序</p></li><li><p>银行转账系统</p></li></ol><ul><li><ul><li>转账分类：网上转账、柜台转账、AMT 转账</li></ul></li><li><ul><li>转账用户类型：普通用户、银卡用户、金卡用户</li></ul></li></ul><ol><li>消息管理</li></ol><ul><li><ul><li>消息类型：即时消息、延时消息</li></ul></li><li><ul><li>消息分类：手机短信、邮件消息、QQ消息…</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程和线程</title>
      <link href="/2022/07/23/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/07/23/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><h3 id="何为进程"><a href="#何为进程" class="headerlink" title="何为进程?"></a>何为进程?</h3><p>进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。</p><p>在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p><p>如下图所示，在 windows 中通过看任务管理器的方式，我们就可以清楚看到 window 当前运行的进程（.exe 文件的运行）。</p><p><img src="http://img-md-js.linjsblog.top/img/202207231221498.png" alt="image-20220723122129730"></p><h3 id="何为线程"><a href="#何为线程" class="headerlink" title="何为线程?"></a>何为线程?</h3><p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p>Java 程序天生就是多线程程序，我们可以通过 JMX 来看一下一个普通的 Java 程序有哪些线程，代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取 Java 线程管理 MXBean</span>        <span class="token class-name">ThreadMXBean</span> threadMXBean <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getThreadMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息</span>        <span class="token class-name">ThreadInfo</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threadInfos <span class="token operator">=</span> threadMXBean<span class="token punctuation">.</span><span class="token function">dumpAllThreads</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ThreadInfo</span> threadInfo<span class="token operator">:</span>threadInfos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token operator">+</span>threadInfo<span class="token punctuation">.</span><span class="token function">getThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token operator">+</span>threadInfo<span class="token punctuation">.</span><span class="token function">getThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述程序输出如下（输出内容可能不同，不用太纠结下面每个线程的作用，只用知道 main 线程执行 main 方法即可）：</p><pre class="line-numbers language-none"><code class="language-none">[5] Attach Listener &#x2F;&#x2F;添加事件[4] Signal Dispatcher &#x2F;&#x2F; 分发处理给 JVM 信号的线程[3] Finalizer &#x2F;&#x2F;调用对象 finalize 方法的线程[2] Reference Handler &#x2F;&#x2F;清除 reference 线程[1] main &#x2F;&#x2F;main 线程,程序入口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的输出内容可以看出：<strong>一个 Java 程序的运行是 main 线程和多个其他线程同时运行</strong>。</p><h3 id="JVM线程和进程的关系"><a href="#JVM线程和进程的关系" class="headerlink" title="JVM线程和进程的关系"></a>JVM线程和进程的关系</h3><p>如图</p><p><img src="http://img-md-js.linjsblog.top/img/202207231233879.png" alt="img"></p><p>从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的<strong>堆</strong>和<strong>方法区 (JDK1.8 之后的元空间)<strong>资源，但是每个线程有自己的</strong>程序计数器</strong>、<strong>虚拟机栈</strong> 和 <strong>本地方法栈</strong>。</p><h3 id="程序计数器、虚拟机栈和本地方法栈为什么是私有的"><a href="#程序计数器、虚拟机栈和本地方法栈为什么是私有的" class="headerlink" title="程序计数器、虚拟机栈和本地方法栈为什么是私有的"></a>程序计数器、虚拟机栈和本地方法栈为什么是私有的</h3><h4 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h4><p>程序计数器主要有下面两个作用：</p><ol><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ol><p>需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。</p><p>所以，程序计数器私有主要是为了<strong>线程切换后能恢复到正确的执行位置</strong>。</p><h4 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2.虚拟机栈"></a>2.虚拟机栈</h4><p>每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</p><h4 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h4><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一</p><p>所以，为了<strong>保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的</p><h3 id="为什么要使用多线程，使用多线程会带来什么问题"><a href="#为什么要使用多线程，使用多线程会带来什么问题" class="headerlink" title="为什么要使用多线程，使用多线程会带来什么问题"></a>为什么要使用多线程，使用多线程会带来什么问题</h3><p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：内存泄漏、死锁、线程不安全等等。</p><blockquote><p>参考文章：<a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html">Java 并发常见面试题总结（上）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String StringBuffer Stringbuilder</title>
      <link href="/2022/07/23/string-stringbuffer-stringbuilder/"/>
      <url>/2022/07/23/string-stringbuffer-stringbuilder/</url>
      
        <content type="html"><![CDATA[<h1 id="String-StringBuffer-Stringbuilder的区别"><a href="#String-StringBuffer-Stringbuilder的区别" class="headerlink" title="String StringBuffer Stringbuilder的区别"></a>String StringBuffer Stringbuilder的区别</h1><h2 id="1-可变性"><a href="#1-可变性" class="headerlink" title="1. 可变性"></a>1. 可变性</h2><p><code>String</code> 是不可变的（后面会详细分析原因）。</p><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和 <code>private</code> 关键字修饰，最关键的是这个 <code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法比如 <code>append</code> 方法</p><h2 id="2-线程安全性"><a href="#2-线程安全性" class="headerlink" title="2. 线程安全性"></a>2. 线程安全性</h2><p><code>String</code> 中的对象是不可变的，也就可以理解为常量，线程安全。<code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。<code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p><h2 id="3-性能"><a href="#3-性能" class="headerlink" title="3.性能"></a>3.性能</h2><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p>执行速度由快到慢：<strong>StringBuilder &gt; StringBuffer &gt; String</strong></p><h2 id="4-String为什么不可变"><a href="#4-String为什么不可变" class="headerlink" title="4. String为什么不可变"></a>4. String为什么不可变</h2><p>注意：<code>String</code> 类中使用 <code>final</code> 关键字修饰，所以String不可变，并不是String不可变的真正原因！</p><p>我们知道被 <code>final</code> 关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变，修饰的变量是引用类型则不能再指向其他对象。因此，<code>final</code> 关键字修饰的数组保存字符串并不是 <code>String</code> 不可变的根本原因，因为这个数组保存的字符串是可变的（<code>final</code> 修饰引用类型变量的情况）。</p><p><code>String</code> 真正不可变有下面几点原因：</p><ol><li>保存字符串的数组被 <code>final</code> 修饰且为私有的，并且<code>String</code> 类没有提供&#x2F;暴露修改这个字符串的方法。</li><li><code>String</code> 类被 <code>final</code> 修饰导致其不能被继承，进而避免了子类破坏 <code>String</code> 不可变。</li></ol><blockquote><p>参考文献：</p><p><a href="https://www.zhihu.com/question/20618891/answer/114125846">如何理解 String 类型值的不可变？ - 知乎提问</a></p></blockquote><p><strong>不可变有什么好处</strong></p><p>我们可以看这段代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">Test01</span><span class="token punctuation">.</span><span class="token function">appendStr</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token class-name">Test01</span><span class="token punctuation">.</span><span class="token function">appendStringBuffer</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb4 <span class="token operator">=</span> <span class="token class-name">Test01</span><span class="token punctuation">.</span><span class="token function">appendStringBuilder</span><span class="token punctuation">(</span>sb3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">appendStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token operator">+=</span><span class="token string">"bbb"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuffer</span> <span class="token function">appendStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> stringBuffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> <span class="token function">appendStringBuilder</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> stringBuilder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre class="line-numbers language-none"><code class="language-none">aaaaaabbbaaabbbaaabbbaaabbbaaabbb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果程序员不小心像上面例子里，直接在传进来的参数上加”bbb”，因为Java对象参数传的是引用，所以可变的的StringBuffer参数就被改变了。可以看到变量sb在Test.appendSb(sb)操作之后，就变成了”aaabbb”。有的时候这可能不是程序员的本意。所以String不可变的安全性就体现在这里。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 实习面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS</title>
      <link href="/2022/07/22/cas/"/>
      <url>/2022/07/22/cas/</url>
      
        <content type="html"><![CDATA[<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><h2 id="CAS是什么"><a href="#CAS是什么" class="headerlink" title="CAS是什么"></a>CAS是什么</h2><p>CAS:Compare and Swap 比较与交换 ，它是一条CPU并发原语</p><p>它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。</p><p>CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用UnSafe类中的CAS方法，JVM会帮我们实现出CAS汇编指令。这是一种完全依赖于硬件的功能，通过它实现了原子操作。再次强调，由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程，并且原语的执行必须是连续的，在执行过程中不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成所谓的数据不一致问题。（原子性）</p><p>这部分主要为 CAS 相关操作的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    *  CAS  * @param o         包含要修改field的对象  * @param offset    对象中某field的偏移量  * @param expected  期望值  * @param update    更新值  * @return          true  false  */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>  <span class="token class-name">Object</span> expected<span class="token punctuation">,</span> <span class="token class-name">Object</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span><span class="token keyword">int</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> expected<span class="token punctuation">,</span> <span class="token keyword">long</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h2><p>在 JUC 包的并发工具类中大量地使用了 CAS 操作，像synchronized<code>和</code>AQS<code>也多次用到了 CAS，其作为乐观锁在并发工具类中广泛发挥了作用。在</code> Unsafe <code>类中，提供了</code>compareAndSwapObject<code>、</code>compareAndSwapInt<code>、</code>compareAndSwapLong<code>方法来实现的对</code>Object<code>、</code>int<code>、</code>long<code>类型的 CAS 操作。以</code>compareAndSwapInt`方法为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> expected<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数中<code>o</code>为需要更新的对象，<code>offset</code>是对象<code>o</code>中整形字段的偏移量，如果这个字段的值与<code>expected</code>相同，则将字段的值设为<code>x</code>这个新值，并且此更新是不可被中断的，也就是一个原子操作。下面是一个使用<code>compareAndSwapInt</code>的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">CasTest</span> casTest<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CasTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            casTest<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>casTest<span class="token punctuation">.</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            casTest<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>casTest<span class="token punctuation">.</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> fieldOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">CasTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>fieldOffset<span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码会依次输出：</p><pre class="line-numbers language-none"><code class="language-none">1 2 3 4 5 6 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上面的例子中，使用两个线程去修改<code>int</code>型属性<code>a</code>的值，并且只有在<code>a</code>的值等于传入的参数<code>x</code>减一时，才会将<code>a</code>的值变为<code>x</code>，也就是实现对<code>a</code>的加一的操作。流程如下所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202207221529754.png" alt="img"></p><p>需要注意的是，在调用<code>compareAndSwapInt</code>方法后，会直接返回<code>true</code>或<code>false</code>的修改结果，因此需要我们在代码中手动添加自旋的逻辑。在<code>AtomicInteger</code>类的设计中，也是采用了将<code>compareAndSwapInt</code>的结果作为循环条件，直至修改成功才退出死循环的方式来实现的原子性的自增操作</p><p>参考文献：</p><blockquote><p>JavaGuide java魔法类Unsafe详解 <a href="https://javaguide.cn/java/basis/unsafe.html#cas-%E6%93%8D%E4%BD%9C">https://javaguide.cn/java/basis/unsafe.html#cas-%E6%93%8D%E4%BD%9C</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2022/07/21/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/21/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><strong>适配器模式（Adapter Pattern）</strong>是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于<strong>结构型模式</strong>，它结合了两个独立接口的功能。</p><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p><p>主要分为三类：<strong>类适配器模式、对象适配器模式、接口适配器模式</strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>主要解决：</strong>主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><p><strong>何时使用：</strong> 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</p><p><strong>如何解决：</strong>继承或依赖（推荐）。</p><p><strong>关键代码：</strong>适配器继承或依赖已有的对象，实现想要的目标接口。</p><p><img src="http://img-md-js.linjsblog.top/img/202207201358610.png" alt="image-20220720135814840"></p><p><img src="http://img-md-js.linjsblog.top/img/202207201630268.png" alt="image-20220720163010589"></p><p>用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法</p><h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><p>基本介绍：Adapter类，通过继承 src类，实现 dst 类接口，完成src-&gt;dst的适配。</p><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><p>以生活中充电器的例子来讲解适配器，充电器本身相当于Adapter，220V交流电 相当于src (即被适配者)，我们的目dst(即 目标)是5V直流电</p><p><img src="http://img-md-js.linjsblog.top/img/202207201631009.png" alt="image-20220720163131203"></p><p>类图</p><p><img src="http://img-md-js.linjsblog.top/img/202207201637236.png" alt="image-20220720163751684"></p><p>代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 被适配的类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220V</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//输出220V的电压</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> src <span class="token operator">=</span> <span class="token number">220</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压"</span><span class="token operator">+</span>src<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 适配接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 适配器类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Voltage220V</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取到220V的电压</span>        <span class="token keyword">int</span> srcV <span class="token operator">=</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dstV <span class="token operator">=</span> srcV <span class="token operator">/</span> <span class="token number">44</span><span class="token punctuation">;</span><span class="token comment">//转成5V</span>        <span class="token keyword">return</span> dstV<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//充电</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charging</span><span class="token punctuation">(</span><span class="token class-name">IVoltage5V</span> iVoltage5V<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压为5V,可以充电~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iVoltage5V<span class="token punctuation">.</span><span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压大于5V,不可以充电~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========类适配器模式========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p><img src="http://img-md-js.linjsblog.top/img/202207201711906.png" alt="image-20220720171115204"></p><p>总结：</p><ol><li>Java是单继承机制，所以类适配器需要继承src类这一点算是一个缺点, 因为这要 求dst必须是接口，有一定局限性;</li></ol><ol start="2"><li>src类的方法在Adapter中都会暴露出来，也增加了使用的成本。 3) 由于其继承了src类，所以它可以根据需求重写src类的方法，使得Adapter的灵 活性增强了。</li></ol><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><p>基本思路和类的适配器模式相同，只是将Adapter类作修改，不是继承src类，而是持有src类的实例，以解决兼容性的问题。 即：持有 src类，实现 dst 类接口， 完成src-&gt;dst的适配</p><p>根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系。</p><p>对象适配器模式是适配器模式常用的一种</p><p>思路分析：只需修改适配器即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter2</span> <span class="token keyword">implements</span> <span class="token class-name">Voltage5</span> <span class="token punctuation">&#123;</span> <span class="token keyword">private</span> <span class="token class-name">Voltage220</span> voltage220<span class="token punctuation">;</span> <span class="token comment">//持有Voltage220对象,不是继承了</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 适配器类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Voltage220V</span> voltage220V<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token class-name">Voltage220V</span> voltage220V<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voltage220V <span class="token operator">=</span> voltage220V<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> dst <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> voltage220V<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> src <span class="token operator">=</span> voltage220V<span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用对象适配器进行适配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dst <span class="token operator">=</span> src <span class="token operator">/</span><span class="token number">44</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配完成，输出电压为"</span><span class="token operator">+</span>dst<span class="token operator">+</span><span class="token string">"V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dst<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========对象适配器模式========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Voltage220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="http://img-md-js.linjsblog.top/img/202207201711594.png" alt="image-20220720171124378"></p><p>总结：</p><ol><li><p>对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。 根据合成复用原则，使用组合替代继承， 所以它解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口。</p></li><li><p>使用成本更低，更灵活。</p></li></ol><h2 id="接口适配器"><a href="#接口适配器" class="headerlink" title="接口适配器"></a>接口适配器</h2><p>一些书籍称为：适配器模式(Default Adapter Pattern)或缺省适配器模式。</p><p>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求。</p><p>适用于一个接口不想使用其所有的方法的情况。</p><p><img src="http://img-md-js.linjsblog.top/img/202207201739315.png" alt="image-20220720173935773"></p><p><img src="http://img-md-js.linjsblog.top/img/202207201739109.png" alt="image-20220720173956858"></p><p><img src="http://img-md-js.linjsblog.top/img/202207201740358.png" alt="image-20220720174057710"></p><h2 id="适配器模式在SpringMVC框架应用的源码分析"><a href="#适配器模式在SpringMVC框架应用的源码分析" class="headerlink" title="适配器模式在SpringMVC框架应用的源码分析"></a>适配器模式在SpringMVC框架应用的源码分析</h2><p>1.SpringMvc中的<strong>HandlerAdapter</strong>, 就使用了适配器模式</p><p>2.SpringMVC处理请求的流程回顾</p><p><img src="http://img-md-js.linjsblog.top/img/202204051008975.png" alt="image-20220405100752981"></p><ol><li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li><li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。</li><li>解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li><li><code>HandlerAdapter</code> 会根据 <code>Handler</code>来调用真正的处理器开处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li><li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li><li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li><li>把 <code>View</code> 返回给请求者（浏览器）</li></ol><p><strong>SpringMVC源码：</strong></p><p>使用 HandlerAdapter 的原因分析</p><p>在 DispatcherServlet 中，有一个 doDispatch 方法，其中便使用到了 HandlerAdapter 适配器</p><p><img src="http://img-md-js.linjsblog.top/img/202207201813099.png" alt="img"></p><p>通过 request 可以获得一个 Handler，再根据这个 Handler 获得不同的 HandlerAdapter 进行处理</p><p><img src="http://img-md-js.linjsblog.top/img/202207201814253.png" alt="img"></p><p>HandlerAdapter 本质上是一个适配器接口，具体的适配器实现类有多种，其中有我们较为熟悉的 HttpRequestHandlerAdapter 和 RequestMappingHandlerAdapter</p><p><img src="http://img-md-js.linjsblog.top/img/202207201816912.png" alt="img"></p><p>HandlerAdapter 的实现子类是的每一种 Controller 有一种对应的适配器实现类，每种 Controller 有不同的实现方式</p><p>言归正传，拿到 HandlerAdapter 适配器之后，便会调用其中的 handle 方法， 此方法便是具体的适配器实现类需要实现的方法</p><p><img src="http://img-md-js.linjsblog.top/img/202207201819305.png" alt="img"></p><p>可以看到处理器的类型不同，有多重实现方式，那么调用方式就不是确定的。如果需要直接调用 Controller 方法，需要调用的时候就得不断使用<code>if-else</code>来进行判断是哪一种子类然后执行。那么如果后面要扩展 Controller，就得修改原来的代码，这样违背了 OCP 原则</p><p>为了更深刻地理解其中运用的模式思想，我们自己动手写 SpringMVC，通过适配器设计模式获取到对应的 Controller 的源码</p><h2 id="自己动手写Spring-MVC"><a href="#自己动手写Spring-MVC" class="headerlink" title="自己动手写Spring MVC"></a>自己动手写Spring MVC</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAnnotationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"annotation..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHttpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSimplerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"simple..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义一个Adapter接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnnotationController</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doAnnotationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationController</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpController</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doHttpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HttpController</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SimpleController</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSimplerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">SimpleController</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatchServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerAdapter</span><span class="token punctuation">></span></span> handlerAdapters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DispatchServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        handlerAdapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handlerAdapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handlerAdapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 此处模拟 SpringMVC 从 request 取 handler 的对象，适配器可以获取到希望的 Controller</span>        <span class="token comment">//HttpController controller = new HttpController();</span>        <span class="token class-name">SimpleController</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//AnnotationController controller = new AnnotationController();</span>        <span class="token comment">// 得到对应适配器</span>        <span class="token class-name">HandlerAdapter</span> adapter <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过适配器执行对应的controller对应方法</span>        adapter<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HandlerAdapter</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">Controller</span> controller<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//遍历：根据得到的controller（handler），返回对应适配器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> adapter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong></p><ul><li><p>Spring 定义了一个适配接口，使得每一种 Controller 有一种对应的适配器实现类</p></li><li><p>适配器代替 Controller 执行相应的方法</p></li><li><p>扩展 Controller 时，只需要增加一个适配器类就完成了 SpringMVC 的扩展了</p></li><li><p>这就是设计模式的力量</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2022/07/12/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/12/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><h2 id="克隆羊问题"><a href="#克隆羊问题" class="headerlink" title="克隆羊问题"></a>克隆羊问题</h2><p>现在有一只?tom，姓名为tom，年龄为：1，颜色为：白色，请编写程序创建和tom羊属性完全相同的十只羊。</p><p>传统方式我们会先new Sheep(“tom”, 1, “白色”); 然后for 循环生成10只羊</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Sheep</span> sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span>sheep<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sheep<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样虽然容易理解好操作，但缺点是每次创建新的对象，总是需要重新获取原始对象的属性 ，如果创建的对象比较复杂时，效率较低。总是需要重新初始化对象，而不是动态的获得对象运行时的状态，不够灵活</p><h3 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h3><p>Java 的Object类提供了一个clone方法，该方法可以将一个Java对象复制一份，实现 Cloneable 接口</p><p><img src="http://img-md-js.linjsblog.top/img/202207122050868.png" alt="image-20220712205043135"></p><p>原理结构图说明：</p><ol><li>Prototype：原型类，声明一个自己克隆的接口</li><li>ConcretePrototype：具体的原型类，实现一个克隆自己的操作</li><li>Client：让一个原型对象克隆自己，从而创建一个新的对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloud<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> cloud<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Sheep</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Sheep</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Sheep</span> sheep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sheep</span> sheep1 <span class="token operator">=</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sheep</span> sheep2 <span class="token operator">=</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sheep</span> sheep3 <span class="token operator">=</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sheep</span> sheep4 <span class="token operator">=</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sheep</span> sheep5 <span class="token operator">=</span> sheep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型模式在spring源码的使用"><a href="#原型模式在spring源码的使用" class="headerlink" title="原型模式在spring源码的使用"></a>原型模式在spring源码的使用</h2><p>Spring中原型bean的创建，就是原型模式的应用</p><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id01<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ljs.spring.bean.Monster<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Test.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"id01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean"</span><span class="token operator">+</span>bean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Spring 框架中，创建<code>ApplicationContext</code>时，使用的<code>getBean</code>方法中使用到了原型模式</p><p><img src="http://img-md-js.linjsblog.top/img/202207122253942.png" alt="image-20220712225328649"></p><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><h3 id="浅拷贝基本介绍"><a href="#浅拷贝基本介绍" class="headerlink" title="浅拷贝基本介绍"></a>浅拷贝基本介绍</h3><ul><li><p>1）对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象</p></li><li><p>2）对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组、某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值</p></li><li><p>3）前面我们<strong>克隆羊</strong>就是<strong>浅拷贝</strong></p></li><li><p>4）浅拷贝是使用默认的 clone 方法来实现：<code>sheep=(Sheep)super.clone();</code></p></li></ul><h3 id="深拷贝基本介绍"><a href="#深拷贝基本介绍" class="headerlink" title="深拷贝基本介绍"></a>深拷贝基本介绍</h3><ul><li><p>1）复制对象的所有基本数据类型的成员变量值</p></li><li><p>2）为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝</p></li><li><p>3）深拷贝实现方式 1：<strong>重写 clone 方法</strong>来实现深拷贝</p></li><li><p>4）深拷贝实现方式 2：通过<strong>对象序列化</strong>实现深拷贝</p></li></ul><p><strong>深拷贝方式 1</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepClonableTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cloneName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cloneClass<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepClonableTarget</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloneName<span class="token punctuation">,</span> <span class="token class-name">String</span> cloneClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneName <span class="token operator">=</span> cloneName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneClass <span class="token operator">=</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCloneName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cloneName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCloneName</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloneName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneName <span class="token operator">=</span> cloneName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCloneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCloneClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloneClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneClass <span class="token operator">=</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepPrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DeepClonableTarget</span> deepClonableTarget<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepClonableTarget</span> <span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> deepClonableTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeepClonableTarget</span><span class="token punctuation">(</span><span class="token class-name">DeepClonableTarget</span> deepClonableTarget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deepClonableTarget <span class="token operator">=</span> deepClonableTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//基本数据类型拷贝</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//引用类型拷贝</span>        <span class="token class-name">DeepPrototype</span> deepPrototype <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>        deepPrototype<span class="token punctuation">.</span>deepClonableTarget <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepClonableTarget</span><span class="token punctuation">)</span> deepClonableTarget<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DeepPrototype</span> prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeepPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prototype<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"宋江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prototype<span class="token punctuation">.</span><span class="token function">setDeepClonableTarget</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeepClonableTarget</span><span class="token punctuation">(</span><span class="token string">"及时雨"</span><span class="token punctuation">,</span> <span class="token string">"及时雨的类"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> prototype<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> prototype<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> prototype<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> prototype<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> prototype<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prototype<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> prototype<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1554874502</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone1<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1846274136</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone2<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1639705018</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone3<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1627674070</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone4<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone4<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1360875712</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone5<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone5<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1625635731</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>深拷贝方式 2</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepClonableTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cloneName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cloneClass<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepClonableTarget</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloneName<span class="token punctuation">,</span> <span class="token class-name">String</span> cloneClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneName <span class="token operator">=</span> cloneName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneClass <span class="token operator">=</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCloneName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cloneName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCloneName</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloneName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneName <span class="token operator">=</span> cloneName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCloneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCloneClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> cloneClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cloneClass <span class="token operator">=</span> cloneClass<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepPrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DeepClonableTarget</span> deepClonableTarget<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepClonableTarget</span> <span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> deepClonableTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDeepClonableTarget</span><span class="token punctuation">(</span><span class="token class-name">DeepClonableTarget</span> deepClonableTarget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deepClonableTarget <span class="token operator">=</span> deepClonableTarget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepPrototype</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 序列化</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反序列化</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ois <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DeepPrototype</span> prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeepPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prototype<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"宋江"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prototype<span class="token punctuation">.</span><span class="token function">setDeepClonableTarget</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeepClonableTarget</span><span class="token punctuation">(</span><span class="token string">"及时雨"</span><span class="token punctuation">,</span> <span class="token string">"及时雨的类"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone1 <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone2 <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone3 <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone4 <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeepPrototype</span> clone5 <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prototype<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> prototype<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 644117698</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone1<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 317574433</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone2<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 885284298</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone3<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1389133897</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone4<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone4<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 1534030866</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clone5<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clone5<span class="token punctuation">.</span><span class="token function">getDeepClonableTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 宋江, 664223387</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式 1 和方式 2 对比</strong></p><ul><li><p>在对象引用类型的成员属性较少时，方式 1 简单；在对象引用类型的成员属性较多时，方式 2 简单</p></li><li><p>在对象引用类型的成员属性经常发生变化时，方式 1 需要同步修改，方式 2 不用修改</p></li><li><p>推荐使用方式 2：耦合性低、可维护性强、扩展性高</p></li></ul><h2 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h2><ul><li><p>1）<strong>优点</strong>：创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率</p></li><li><p>2）<strong>优点</strong>：不用重新初始化对象，而是动态地获得对象运行时的状态</p></li><li><p>3）<strong>优点</strong>：如果原始对象发生变化（增加或者减少属性），其它克隆对象的也会发生相应的变化，无需修改代码</p></li><li><p>4）<strong>缺点</strong>：在实现深克隆的时候可能需要比较复杂的代码</p></li><li><p>5）<strong>缺点</strong>：需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了OCP 原则，这点请同学们注意</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式-抽象工厂模式</title>
      <link href="/2022/07/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式-抽象工厂模式"><a href="#工厂模式-抽象工厂模式" class="headerlink" title="工厂模式-抽象工厂模式"></a>工厂模式-抽象工厂模式</h1><ol><li><p>抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类</p></li><li><p>抽象工厂模式可以将<strong>简单工厂模式</strong>和<strong>工厂方法模式</strong>进行整合</p></li><li><p>从设计层面看，抽象工厂模式就是对简单工厂模式的改进（或者称为进一步的抽象）</p></li><li><p>将工厂抽象成两层，AbsFactory()和具体实现的子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个简单工厂类变成工厂簇，更利于代码的维护和拓展</p></li></ol><p><strong>类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207111727247.png" alt="image-20220711172743833"></p><p>代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 抽象工厂模式的抽象层（接口） */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbsFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//下面的工厂子类具体实现</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsFactory</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsFactory</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AbsFactory</span> factory<span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token class-name">AbsFactory</span> absFactory<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setFactory</span><span class="token punctuation">(</span>absFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span><span class="token class-name">AbsFactory</span> factory<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//factory可能是北京的工厂子类，也可能是伦敦的工厂子类</span>            pizza <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza type:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BJFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式-工厂方法模式</title>
      <link href="/2022/07/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式-工厂方法模式"><a href="#工厂模式-工厂方法模式" class="headerlink" title="工厂模式-工厂方法模式"></a>工厂模式-工厂方法模式</h1><p><strong>看一个新的需求</strong></p><p>披萨项目新的需求：客户在点披萨时，可以点<strong>不同b风味</strong>的披萨，比如<strong>北京</strong>的奶酪pizza，<strong>北京</strong>的胡椒pizza，<strong>伦敦</strong>的胡椒pizza，或者<strong>伦敦</strong>的奶酪披萨</p><p><strong>思路一：</strong></p><p>使用简单工厂模式，创建不同的工厂类，比如BJPizzaSimpleFactory、LDPizzaSimpleFactory等等。从当前的这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性、可拓展性并不是特别好。</p><p><strong>思路二：</strong></p><p><strong>使用工厂方法模式</strong></p><p>将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现</p><p>工厂方法模式：定义一个创建对象的抽象方法，由子类决定要实例化的类，工厂方法<strong>将对象的实例化推迟到子类</strong></p><p><strong>类图</strong></p><p><img src="http://img-md-js.linjsblog.top/img/202207111642283.png" alt="image-20220711164248705"></p><p>目录结构：</p><p><img src="http://img-md-js.linjsblog.top/img/202207111620364.png" alt="image-20220711161951259"></p><p>代码：</p><p>Pizza及其子类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//pizza的名字</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//准备原材料，不同pizza的原材料不一样，因此做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" baking;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" cutting;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" boxing;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京的奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"~准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"北京的胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"~准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDCheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"伦敦的奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"~准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDPepperPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"伦敦的胡椒披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"~准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂类：OrderPizza及其子类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> orderType<span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抽象方法，由工厂子类完成</span>            <span class="token comment">//输出pizza的制作过程</span>            pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义一个抽象方法，让各个工厂的子类自己实现</span>    <span class="token keyword">abstract</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza type:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> loc <span class="token operator">=</span> <span class="token string">"bj"</span><span class="token punctuation">;</span><span class="token comment">//修改地点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//创建北京口味的各种披萨</span>            <span class="token keyword">new</span> <span class="token class-name">BJOrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建伦敦口味的各种披萨</span>            <span class="token keyword">new</span> <span class="token class-name">LDOrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="http://img-md-js.linjsblog.top/img/202207111624116.png" alt="image-20220711162415990"></p><p><img src="http://img-md-js.linjsblog.top/img/202207111624513.png" alt="image-20220711162421857"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式-简单工厂模式</title>
      <link href="/2022/07/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式-简单工厂模式"><a href="#工厂模式-简单工厂模式" class="headerlink" title="工厂模式-简单工厂模式"></a>工厂模式-简单工厂模式</h1><p>工厂模式（Factory Pattern）是最常用的一类创建型设计模式，包含简单工厂模式（Simple Factory Pattern）、工厂方法模式（Factory Method Pattern）和抽象工厂模式（Abstract Factory Pattern）</p><p>简单工厂模式（Simple Factory Pattern）：定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态方法，因此简单工厂模式又称为静态工厂方法模式（Static Factory Method Pattern）</p><p><strong>我们看一个具体的需求</strong></p><p>一个披萨的项目，要便于披萨种类的拓展，要便于维护</p><ol><li>披萨的种类有很多（比如 GreekPizz、CheesePizz等）</li><li>披萨的制作有prepare,bake,cut,box</li><li>完成披萨店的订购功能</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pizza</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//pizza的名字</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//准备原材料，不同pizza的原材料不一样，因此做成抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" baking;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" cutting;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" boxing;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheesePizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作奶酪披萨 准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreekPizza</span> <span class="token keyword">extends</span> <span class="token class-name">Pizza</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给希腊披萨准备原材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 简单工厂类 * 如果要增加披萨类直接修改工厂类即可 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//根据orderType 返回对应的Pizza对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用简单工厂模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"greek"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreekPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"希腊披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"奶酪披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> orderType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//用户输入</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza <span class="token operator">=</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出pizza</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订购pizza失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedReader</span> strin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"input pizza type:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> strin<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2022/07/10/201/"/>
      <url>/2022/07/10/201/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>所 谓 类 的 单 例 设 计 模 式 ， 就 是 采 取 一 定 的 方 注 保 证 在 整 个 的 软 件 系 统 中 ， 对 某 个 类 只 能 存 在 一 个 对 象 实 例 ， 并 且 该 类 只 提 供 一 个 取 得 其 对 象 实 例 的 方 法 （ 静 态 方 法 )</p><p>比 如 Hibernate 的 SessionFactory, 它 充 当 数 据 存 储 源 的 代 理 ， 并 负责 创建 Session对 象 。 SessionFactory 并 不 是 轻 量级 的 ， 一 般 情 况 下 ， 一 个 项 目 通 常 只 需 要 一 个SessionFactory 就 够， 这 是 就 会 使 用 到 单 例 模 式 。</p><p><strong>单例设计模式的8种方式：</strong></p><ol><li>饿汉式（静态常量）</li><li>饿汉式（静态代码块）</li><li>懒汉式（线程不安全）</li><li>懒汉式（线程安全，同步方法）</li><li>懒汉式（线程安全，同步代码块）</li><li>双重检查</li><li>静态内部类</li><li>枚举</li></ol><h2 id="1-饿汉式（静态常量）"><a href="#1-饿汉式（静态常量）" class="headerlink" title="1.饿汉式（静态常量）"></a>1.饿汉式（静态常量）</h2><p>步骤：</p><ul><li>构造器私有化（防止通过new创建实例）</li><li>类的内部创建对象</li><li>向外暴露一个静态的公共方法。<strong>getInstance()</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 饿汉式（静态常量） */</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.构造器私有化，外部不能new</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.本类内部创建实例</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.提供一个公有的静态方法。返回实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点说明：</strong></p><p>1 ） 优 点 ： 这 种 写 法 比 较 简 单 ， 就 是 在 类 装 载 的 时 候 就 完 成 实 例 化 。 避 免 了 线 程 同 步 问 题 ： 2 ） 缺 点 ： 在 类 装 载 的 时 候 就 完 成 实 例 化 ， 没 有 达 到 Lazy Loading 的 效 果 ： 如 果 从 始 至 终 从 未 使 用 过 这 个 实 例 ， 则 会 造 成 内 存 的 浪 费 3 ） 这 种 方 式 基 于 classloader 机 制 避 免 了 多 线 程 的 同 步 问 题 ， 不 过 ， instance 在 类 装 载 时 就 实 例 化 ， 在 单 例 模 式 中 大 多 数 都 是 调 用 getInstance 方 法 ， 但 是 导 致 类 装 载 的 原 因 有 很 多 种 ， 因 此 不 能 确 定 有 其 他 的 方 式 （ 或 者 其 他 的 静 态 方 法 ） 导 致 类 装 载 ， 这 时 候 初 始 化 instance 就 没 有 达 到 lazy loading 的 效 果 4 ） 结 论 ： 这 种 单 例 模 式 可 用 ， 可 能 造 成 内 存 浪 费</p><h2 id="2-饿汉式（静态代码块）"><a href="#2-饿汉式（静态代码块）" class="headerlink" title="2.饿汉式（静态代码块）"></a>2.饿汉式（静态代码块）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 饿汉式（静态代码块） */</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.构造器私有化，外部不能new</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.本类内部创建实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3.提供一个公有的静态方法。返回实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优 缺 点 说 明 ：</strong> 1 ） 这 种 方 式 和 上 面 的 方 式 其 实 类 似 ， 只 不 过 将 类 实 例 化 的 过 程 放 在 了 静 态 代 码 块 中 ， 也 是 在 类 装 载 的 时 候 ， 就 执 行 静 态 代 码 块 中 的 代 码 ， 初 始 化 类 的 实 例 。 优 缺 点 和 上 面 是 一 样 的 。 2 ） 结 论 ： 这 种 单 例 模 式 可 用 ， 但 是 可 能 造 成 内 存 浪 费</p><h2 id="3-懒汉式（线程不安全）"><a href="#3-懒汉式（线程不安全）" class="headerlink" title="3.懒汉式（线程不安全）"></a>3.懒汉式（线程不安全）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供静态的公有方法，当使用到该方法时，才去创建instance</span>    <span class="token comment">//既懒汉式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点：</strong></p><p>1）起到了lazy loading的效果，但是只能在单线程下使用</p><p>2）如果在多线程下，一个线程进入了if(instance &#x3D;&#x3D; null)判断语句块，还未来得及向下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p><p>3）结论：在实际开发中，不要使用这种方式。</p><h2 id="4-懒汉式（线程安全）"><a href="#4-懒汉式（线程安全）" class="headerlink" title="4.懒汉式（线程安全）"></a>4.懒汉式（线程安全）</h2><p>在getInstance方法加一个synchronized,解决线程不安全的问题,</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//加入了同步代码，解决线程不安全的问题</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优缺点：</strong></p><ol><li>解决了线程不安全的问题 2) <strong>效率太低</strong>了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步，而其实这个方法只需要执行一次实例化代码就够了，后面的想获得该类实例，直接return就行了。方法进行同步的效率太低。 3) 结论：在实际开发中，不推荐使用这种方式</li></ol><h2 id="5-懒汉式（同步代码块，但是线程不安全）"><a href="#5-懒汉式（同步代码块，但是线程不安全）" class="headerlink" title="5.懒汉式（同步代码块，但是线程不安全）"></a>5.懒汉式（同步代码块，但是线程不安全）</h2><p>为了解决上面懒汉式效率太低的问题，我们使用同步代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这么搞就会出现和第3个例子中同样的<strong>线程不安全</strong>的问题，假如一个线程进入了if (instance &#x3D;&#x3D; null)，还未来得及向下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以这种方法更不靠谱。</p><h2 id="6-双重检查"><a href="#6-双重检查" class="headerlink" title="6.双重检查"></a>6.双重检查</h2><p>volatile:保证可见性，防止指令重排序</p><p>理解：</p><p>不用volatile的状态： 老板让多个人共同完成一件事（初始状态为进行中），假设其中某一个人完成后，事件状态变成了已完成，但是 其他人不知道这件事已完成，认为该事件依然处于进行中，这就造成了事情的状态与真实状态不同步的现象。使用volatile的状态：老板让多个人共同完成一件事（初始状态为进行中），假设其中某一个人完成后，事件状态变成了已完成；此时其他人立刻从老板那接到了事情已完成的通知，于是都明确了这件事已经完成了。</p><p>volatile的作用：每次读取前必须先从主存刷新最新的值。每次写入后必须立即同步回主存当中</p><p><strong>二次判空原因</strong></p><p>第一次判断是为了验证是否创建对象，判断为了避免不必要的同步 第二次判断是为了避免重复创建单例，因为可能会存在多个线程通过了第一次判断在等待锁，来创建新的实例对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开发中推荐使用</strong></p><h2 id="7-静态内部类"><a href="#7-静态内部类" class="headerlink" title="7.静态内部类"></a>7.静态内部类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>这种方式采用了类装载的机制来保证初始化实例时只有一个线程</li><li><strong>静态内部类在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装在SingletonInstance类，从而完成Singleton的实例化。</strong></li><li>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的</li><li>优点：避免了线程不安全，利用静态内部类特点实现了延迟加载，效率高</li><li>结论：推荐使用</li></ol><h2 id="8-枚举"><a href="#8-枚举" class="headerlink" title="8.枚举"></a>8.枚举</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest08</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> instance1 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance1.hashCode="</span><span class="token operator">+</span>instance1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instance<span class="token punctuation">.</span><span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用枚举，实现单例</span><span class="token keyword">enum</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>这是借助JDK1.5中添加的枚举实现单例模式，不仅避免多线程同步问题，而且还能防止反序列化重新创建新的对象</li><li>这种方式是Effective Java作者Josh Bloch 提倡的方式</li><li>结论：推荐使用</li></ol><h2 id="单例模式在JDK源码中的应用分析"><a href="#单例模式在JDK源码中的应用分析" class="headerlink" title="单例模式在JDK源码中的应用分析"></a>单例模式在JDK源码中的应用分析</h2><p>在JDK中，java.lang.Runtime就是经典的单例模式</p><p><img src="http://img-md-js.linjsblog.top/img/202207092357451.png" alt="image-20220709235740282"></p><p>可以看出来是单例饿汉式</p><hr><ol><li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能</li><li>当想要实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</li><li>单 例 模 式 使 用 的 场 景 ： 需 要 频 繁 的 进 行 创 建 和 销 毁 的 对 象 、 创 建 对 象 时 耗 时 过 多 或 耗 费 资 源 过 多 （ 即 ： 重 量 级 对 象 ） ， 但 又 经 常 用 到 的 对 象 、 工 具 类 对 象 、 频 繁 访 问 数 据 库 或 文 件 的 对 象 （ 比 如 数 据 源 、 session 工 厂 等 ）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>类的依赖、泛化、实现、关联、聚合和组合</title>
      <link href="/2022/07/08/%E7%B1%BB%E7%9A%84%E4%BE%9D%E8%B5%96%E3%80%81%E6%B3%9B%E5%8C%96%E3%80%81%E5%AE%9E%E7%8E%B0%E3%80%81%E5%85%B3%E8%81%94%E3%80%81%E8%81%9A%E5%90%88%E5%92%8C%E7%BB%84%E5%90%88/"/>
      <url>/2022/07/08/%E7%B1%BB%E7%9A%84%E4%BE%9D%E8%B5%96%E3%80%81%E6%B3%9B%E5%8C%96%E3%80%81%E5%AE%9E%E7%8E%B0%E3%80%81%E5%85%B3%E8%81%94%E3%80%81%E8%81%9A%E5%90%88%E5%92%8C%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="类的依赖、泛化、实现、关联、聚合和组合"><a href="#类的依赖、泛化、实现、关联、聚合和组合" class="headerlink" title="类的依赖、泛化、实现、关联、聚合和组合"></a>类的依赖、泛化、实现、关联、聚合和组合</h1><h2 id="1-依赖关系（Dependence）"><a href="#1-依赖关系（Dependence）" class="headerlink" title="1.依赖关系（Dependence）"></a>1.依赖关系（Dependence）</h2><p>只要在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方连编译都过不了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">PersonDao</span> personDao<span class="token punctuation">;</span><span class="token comment">//类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">IDCard</span> <span class="token function">getIDCard</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> personId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Department</span> department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上所示，PersonServiceBean和Person、IDCard、Department、PersonDao构成依赖关系。</p><p><img src="http://img-md-js.linjsblog.top/img/202207072008776.png" alt="image-20220707200817089"></p><ol><li>如果类中用到了对方</li><li>如果是类的成员方法属性</li><li>如果是方法的返回类型</li><li>是方法接收的参数类型</li><li>方法中使用到</li></ol><p>以上情况构成依赖关系</p><h2 id="2-泛化关系-generalization"><a href="#2-泛化关系-generalization" class="headerlink" title="2.泛化关系(generalization)"></a>2.泛化关系(generalization)</h2><p>泛化关系实际上就是继承关系，它是依赖关系的特例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DaoSupport</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Object</span> entity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Object</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token keyword">extends</span> <span class="token class-name">DaoSupport</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202207072046631.png" alt="image-20220707202425702"></p><ol><li>泛化关系实际上就是继承关系；</li><li>如果A类继承了B类，我们就说A和B存在泛化关系</li></ol><h2 id="3-实现关系-Implementation"><a href="#3-实现关系-Implementation" class="headerlink" title="3.实现关系(Implementation)"></a>3.实现关系(Implementation)</h2><p>实现是接口和类的关系，是指类实现了接口中定义的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonServiceBean</span> <span class="token keyword">implements</span> <span class="token class-name">PersonService</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202207072046947.png" alt="image-20220707204652740"></p><h2 id="4-关联关系-Association"><a href="#4-关联关系-Association" class="headerlink" title="4.关联关系(Association)"></a>4.关联关系(Association)</h2><p>关联关系是类与类之间的联系，是依赖关系的特例。<strong>关联分为双向和单向关联</strong>.</p><p>关系具有多重性，可能是一对一，也可能是一对多、多对多、多对一</p><p><strong>单向一对一</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> card<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>双向一对一</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> card<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202207081737817.png" alt="image-20220708173727338"></p><h2 id="5-聚合关系-Aggregation"><a href="#5-聚合关系-Aggregation" class="headerlink" title="5.聚合关系(Aggregation)"></a>5.聚合关系(Aggregation)</h2><p>聚合关系标识的是整体和部分的关系，<strong>整体和部分可以分开</strong>。聚合关系是关联关系的特例。</p><p>如：一台电脑由键盘、显示器、鼠标等构成；组成电脑的各个配件可以从电脑上分离出来，使用带空心菱形实线表示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Mouse</span> mouse<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Monitor</span> monitor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMouse</span><span class="token punctuation">(</span><span class="token class-name">Mouse</span> mouse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mouse <span class="token operator">=</span> mouse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonitor</span><span class="token punctuation">(</span><span class="token class-name">Monitor</span> monitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monitor <span class="token operator">=</span> monitor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202207082018723.png" alt="image-20220708195534461"></p><h2 id="6-组合关系-Composition"><a href="#6-组合关系-Composition" class="headerlink" title="6.组合关系(Composition)"></a>6.组合关系(Composition)</h2><p>组合也是整体与部分的关系，但是<strong>整体与部分不可以分开</strong>。简单来讲，组合是一种较为紧密的关系，从生命周期上看，部分和整体是共存亡的关系。聚合则是一种较为松散的关系，部分和整体的生命周期未必一致。</p><p>在程序中我们定义实体：Person与IDCard、Head，那么Head和Person是组合，IDCard和Person是聚合的关系</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Head</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Head</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">IDCard</span> idCard<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202207082018651.png" alt="image-20220708201823080"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>电子账务系统</title>
      <link href="/2022/07/03/%E7%94%B5%E5%AD%90%E8%B4%A6%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/07/03/%E7%94%B5%E5%AD%90%E8%B4%A6%E5%8A%A1%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>项目地址： 前端：<a href="https://gitee.com/CZJCoder/electronic_account_web">https://gitee.com/CZJCoder/electronic_account_web</a> 后端：<a href="https://gitee.com/CZJCoder/electronic_account_mid">https://gitee.com/CZJCoder/electronic_account_mid</a></p><h1 id="electronic-account-web"><a href="#electronic-account-web" class="headerlink" title="electronic_account_web"></a>electronic_account_web</h1><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>神州信息暑期培训第1、2组联合开发前端代码仓库</p><h4 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h4><p>软件架构说明</p><h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><ol><li><p>克隆项目</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;gitee.com&#x2F;CZJCoder&#x2F;electronic_account_web.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入项目目录</p><pre class="line-numbers language-none"><code class="language-none">cd app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装依赖</p><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>建议不要直接使用 cnpm 安装依赖，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题</p><pre class="line-numbers language-none"><code class="language-none">npm install --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动服务</p><pre class="line-numbers language-none"><code class="language-none">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器访问<a href="http://localhost:8080/">http://localhost:8080</a></p></li></ol><h4 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h4><h5 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h5><ol><li><p>node_modules:放置项目依赖的地方</p></li><li><p>public:一般放置一些共用的静态资源，打包上线的时候，public文件夹里面资源原封不动打包到dist文件夹里面</p></li><li><p>src：程序员源代码文件夹</p></li><li><p>assets文件夹：经常放置一些静态资源（图片），assets文件夹里面资源webpack会进行打包为一个模块（js文件夹里面</p></li><li><p>components文件夹:一般放置非路由组件（或者项目共用的组件）</p></li><li><p>pages:放置路由组件</p></li><li><p>utils:工具类</p></li><li><p>mock:放置mockjs json假数据</p></li><li><p>store: vuex模块化状态仓库</p></li><li><p>api:用户请求后端api的JavaScript函数，统一管理api接口</p></li></ol><h5 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h5><ol><li><p>App.vue 唯一的根组件</p></li><li><p>main.js 入口文件【程序最先执行的文件】</p></li><li><p>babel.config.js:babel配置文件</p></li><li><p>package.json：看到项目描述、项目依赖、项目运行指令</p></li><li><p>vue.config.js:<a href="https://cli.vuejs.org/zh/config/#vue-config-js">https://cli.vuejs.org/zh/config/#vue-config-js</a></p></li></ol><h4 id="使用到的类库"><a href="#使用到的类库" class="headerlink" title="使用到的类库"></a>使用到的类库</h4><ol><li><p>UI组件库：element-ui</p></li><li><p>ajax请求：axios</p></li><li><p>路由：vue-router</p></li><li><p>状态管理：Vuex</p></li><li><p>cookie工具：js-cookie</p></li><li><p>进度条：nprogress</p></li><li><p>日期操作处理类库：moment.js <a href="http://momentjs.cn/">http://momentjs.cn/</a></p></li><li><p>RSA加密工具：jsencrypt</p></li><li><p>假数据模拟：mock.js</p></li></ol><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><pre class="line-numbers language-none"><code class="language-none"># 构建生产环境npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h4><ol><li>Fork 本仓库</li><li>新建 Feat_xxx 分支</li><li>提交代码</li><li>新建 Pull Request</li></ol><h4 id="特技"><a href="#特技" class="headerlink" title="特技"></a>特技</h4><ol><li>使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md</li><li>Gitee 官方博客 <a href="https://blog.gitee.com/">blog.gitee.com</a></li><li>你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目</li><li><a href="https://gitee.com/gvp">GVP</a> 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目</li><li>Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a></li><li>Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis 缓存机制</title>
      <link href="/2022/04/29/mybatis-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/04/29/mybatis-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-缓存机制"><a href="#Mybatis-缓存机制" class="headerlink" title="Mybatis 缓存机制"></a>Mybatis 缓存机制</h1><h2 id="Mybatis一级缓存"><a href="#Mybatis一级缓存" class="headerlink" title="Mybatis一级缓存"></a>Mybatis一级缓存</h2><p>一级缓存是SqlSession级别的，通过同一个SqlSession<strong>查询</strong>的数据会被缓存，下次<strong>查询</strong>相同的数据，就会从缓存中直接获取，不会从数据库重新访问，一级缓存是默认开启的</p><p>使一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间清空了缓存</li></ol><h2 id="Mybatis二级缓存"><a href="#Mybatis二级缓存" class="headerlink" title="Mybatis二级缓存"></a>Mybatis二级缓存</h2><p>二级缓存是SqlSessionFectory, 通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p><strong>二级缓存开启的条件</strong>：</p><ol><li>在核心配置文件中，设置全局配置属性cacheEnable&#x3D;”true”,默认为true，不需要设置</li><li>在映射文件中设置标签</li><li>二级缓存必须在SqlSession关闭或提交后有效</li><li>查询的数据转换的实体类必须实现序列化接口</li></ol><p><strong>使二级缓存失效的方法</strong>：</p><p>两次查询之间执行任意的增删改，会使一级和二级缓存同时失效</p><h3 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h3><p>在mapper映射文件中添加的cache标签可以设置一些属性：</p><ul><li><p>eviction属性：缓存回收策略</p><p>LRU(Least Recently Used) -最少使用的：移除最长时间不被使用的对象</p><p>FIFO(First in First out) -先进先出：按对象进入缓存的顺序来一处他们</p><p>SOFT -软引用：移除基于垃圾回收器状态和软引用规则的对象</p><p>Weak -弱引用：更积极的移除基于垃圾收集器状态和弱引用规则的对象</p><p>默认的是LRU</p></li><li><p>flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p></li><li><p>size: 引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p></li><li><p>readOnly: 只读，true&#x2F;false</p><p>true: 只读缓存，会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</p><p>false: 读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p></li></ul><h3 id="MyBatis缓存的查询顺序"><a href="#MyBatis缓存的查询顺序" class="headerlink" title="MyBatis缓存的查询顺序"></a>MyBatis缓存的查询顺序</h3><ul><li>先查询二级缓存，因为二级缓存可能会有其他程序查出来的数据，可以直接拿来使用</li><li>如果二级缓存没有命中，再去查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭后，一级缓存中的数据会写入二级缓存</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/04/28/docker/"/>
      <url>/2022/04/28/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>昨天实习面试被问到了docker，但是我上一次写dockerfile和使用docker-compose编排服务的时候还是在去年，忘得一干二净&#x2F;(ㄒoㄒ)&#x2F;~~</p><p>结果一问三不知，所以在这里做个笔记当作复习吧。</p><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><ul><li><strong>Docker 是世界领先的软件容器平台。</strong></li><li><strong>Docker</strong> 使用 Google 公司推出的 <strong>Go 语言</strong> 进行开发实现，基于 <strong>Linux 内核</strong> 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 <strong>UnionFS</strong> 等技术，<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。</strong> 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</li><li><strong>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</strong></li><li><strong>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</strong></li></ul><h2 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h2><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p>下面是对比图</p><p><img src="http://img-md-js.linjsblog.top/img/202204281026993.png" alt="image-20220428102645555"></p><ul><li><strong>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。</strong> <strong>多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行</strong> 。与虚拟机相比， <strong>容器占用的空间较少</strong>（容器镜像大小通常只有几十兆），<strong>瞬间就能完成启动</strong> 。</li><li><strong>虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。</strong> 管理程序允许多个 VM 在一台机器上运行。每个 VM 都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 <strong>占用大量空间</strong> 。而且 VM <strong>启动也十分缓慢</strong> 。</li></ul><p>总之：<strong>虚拟机更擅长于彻底隔离整个运行环境</strong>；<strong>Docker 通常用于隔离不同的应用</strong>，例如前端，后端以及数据库。</p><h2 id="Docker-的基本概念：镜像、容器、仓库"><a href="#Docker-的基本概念：镜像、容器、仓库" class="headerlink" title="Docker 的基本概念：镜像、容器、仓库"></a>Docker 的基本概念：镜像、容器、仓库</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>是一种轻量级、可执行的独立软件包，我们把应用程序和配置依赖打包好形成一个可交互的运行环境（包括代码、运行时需要的库、环境变量、配置文件等），这个打包好的运行环境就是image镜像文件</p><p>Docker 设计时，就充分利用 <strong>Union FS</strong> 的技术，将其设计为<strong>分层存储的架构</strong> 。镜像实际是由多层文件系统联合组成。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>镜像运行的实体，它们的关系就像java中的类和实例一样，镜像是静态的定义，<strong>容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</strong></p><p><strong>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此</strong></p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p><strong>集中存放镜像文件的地方</strong></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1.基本命令"></a>1.基本命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version <span class="token comment"># 查看docker版本</span><span class="token function">docker</span> images <span class="token comment"># 查看所有已下载镜像，等价于：docker image ls 命令</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment">#查看正在运行的容器，加-a查看包括已经停止的容器</span><span class="token function">docker</span> image prune <span class="token comment"># 清理临时的、没有被使用的镜像文件。-a, --all: 删除所有没有用的镜像，而不仅仅是临时文件；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-拉取镜像"><a href="#2-拉取镜像" class="headerlink" title="2.拉取镜像"></a>2.拉取镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search mysql <span class="token comment"># 查看mysql相关镜像</span><span class="token function">docker</span> pull mysql:5.7 <span class="token comment"># 拉取mysql镜像</span><span class="token function">docker</span> images <span class="token comment"># 查看所有已下载镜像</span><span class="token function">docker</span> images redis <span class="token comment"># 该指令能够查询指定镜像名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-删除镜像"><a href="#3-删除镜像" class="headerlink" title="3.删除镜像"></a>3.删除镜像</h3><p>通过 docker rmi [image] （可以通过标签名称或者镜像 ID删除）</p><h3 id="4-容器指令"><a href="#4-容器指令" class="headerlink" title="4.容器指令"></a>4.容器指令</h3><p>运行一个容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过该方式运行的 tomcat 是不能直接被外部访问的，因为容器具有隔离性，若是想直接通过 3306 端口访问容器内部的 redis，则需要对宿主机端口与容器内的端口进行映射：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 redis:6.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个 6379为宿主机端口，第二个 6379为容器内的端口，外部访问 6379端口就会通过映射访问容器内的 6379端口。</p><p>容器还能够以后台的方式运行，这样就不会占用终端：加个参数 -d</p><p>启动容器时默认会给容器一个名称，但这个名称其实是可以设置的，使用指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis-test redis-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>容器的停止、重启指令：</p><p>启动容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start redis-test <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart redis-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop redis-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当容器被停止之后，容器虽然不再运行了，但仍然是存在的，若是想删除它，则使用指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> redis-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当容器以后台的方式运行时，我们无法知晓容器的运行状态，若此时需要查看容器的运行日志，则使用指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs redis-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的方式显示的日志并不是实时的，若是想实时显示，需要使用<code>-f</code>参数；通过<code>-t</code>参数还能够显示日志的时间戳，通常与<code>-f</code>参数联合使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token parameter variable">-ft</span> redis-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis-test <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>未完待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 内部类</title>
      <link href="/2022/04/25/java-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2022/04/25/java-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>成员内部类：分为静态内部类和非静态内部类</p></li><li><p>局部内部类</p></li><li><p>匿名内部类</p></li></ul><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>作为其外部类成员的内部类，称为<strong>成员内部类</strong>。除另有说明外，“内部类”通常是指成员内部类。</p><p>与实例的方法和变量一样，内部类与其外围类的实例相关联，并可直接访问该外围类对象的方法和字段。此外，由于内部类与实例相关联，因此不能在非静态内部类中定义任何静态成员（静态类可以）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> outerId <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"AA"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是外部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//静态内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner2</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//非静态的内部类</span>    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> innerId <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"BB"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是内部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//OuterClass.this.eat()</span>            <span class="token comment">//内部类可以获取外部类的私有属性</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>outerId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>innerId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span>            <span class="token comment">//同名优先获取内部类的属性</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BB</span>            <span class="token comment">//获取外部类的同名属性</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">OuterClass</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//AA</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//实例化成员内部类</span>        <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用静态内部类的方法</span>        <span class="token class-name">OuterClass<span class="token punctuation">.</span>Inner2</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li><p>一方面：成员内部类作为外部类成员：可以</p><ul><li>调用外部类结构</li><li>可以被static修饰</li><li>可以被四种不同的权限修饰</li></ul></li><li><p>另一方面，作为一个类：</p><ul><li>类内可以定义属性、方法、构造器等</li><li>可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</li><li>可以被abstarct修饰</li></ul></li></ol><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>写在方法内、代码块内、构造器内的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">BB</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">CC</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest1</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回一个实现了Comparable接口的类的对象</span>    <span class="token keyword">public</span> <span class="token class-name">Comparable</span> <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个实现了Comparable接口的类</span>        <span class="token keyword">class</span> <span class="token class-name">MyComparable</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p><strong>匿名类概念：</strong></p><ul><li>匿名类可以使你的<strong>代码更加简洁</strong> (JDK8之后<strong>Lambda</strong>更简洁)。</li><li>你可以<strong>定义一个类的同时对其进行实例化</strong>。</li><li>它与局部类很相似，不同的是它<strong>没有类名</strong>，如果<strong>某个局部类你只需要使用一次，就可以使用匿名类代替局部类</strong>。</li><li>匿名类是表达式，而非常规的类</li></ul><p><strong>匿名类的使用场景：</strong></p><ul><li>一个局部类只需要使用一次的时候</li><li>由于匿名类没有类名，那么除了定义它的地方，其他地方无法调用，所以匿名类也可以叫匿名内部类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldAnonymousClasses</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 包含两个方法的HelloWorld接口     */</span>    <span class="token keyword">interface</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token class-name">String</span> someone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1、局部类EnglishGreeting实现了HelloWorld接口</span>        <span class="token keyword">class</span> <span class="token class-name">EnglishGreeting</span> <span class="token keyword">implements</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token class-name">String</span> someone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                name <span class="token operator">=</span> someone<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">HelloWorld</span> englishGreeting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnglishGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、匿名类实现HelloWorld接口</span>        <span class="token class-name">HelloWorld</span> frenchGreeting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"tout le monde"</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token string">"tout le monde"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token class-name">String</span> someone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                name <span class="token operator">=</span> someone<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Salut "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 3、匿名类实现HelloWorld接口</span>        <span class="token class-name">HelloWorld</span> spanishGreeting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"mundo"</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token string">"mundo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token class-name">String</span> someone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                name <span class="token operator">=</span> someone<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hola, "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        englishGreeting<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frenchGreeting<span class="token punctuation">.</span><span class="token function">greetSomeone</span><span class="token punctuation">(</span><span class="token string">"Fred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        spanishGreeting<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HelloWorldAnonymousClasses</span> myApp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorldAnonymousClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myApp<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Hello worldSalut FredHola, mundo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考资料：</p><p>尚硅谷内部类</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP</title>
      <link href="/2022/04/18/tcp%E5%92%8Cudp/"/>
      <url>/2022/04/18/tcp%E5%92%8Cudp/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 却是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等</p><p>TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务（TCP 的可靠体现在 TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。</p><h2 id="TCP三次握手和四次挥手"><a href="#TCP三次握手和四次挥手" class="headerlink" title="TCP三次握手和四次挥手"></a>TCP三次握手和四次挥手</h2><p><img src="http://img-md-js.linjsblog.top/img/202204061057650.png" alt="image-20220406105652577"></p><ul><li>客户端–发送带有 SYN 标志的数据包–一次握手–服务端</li><li>服务端–发送带有 SYN&#x2F;ACK 标志的数据包–二次握手–客户端</li><li>客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端</li></ul><h3 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h3><p><strong>三次握手的目的是建立可靠的通信信道，双方确认自己与对方的发送与接收是正常的</strong></p><p>第一次握手：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</p><p>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</p><p>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常</p><blockquote><p>谢希仁版《计算机网络》中的例子是这样的，“已失效的连接请求报文段” 的产生在这样一种情况下：client 发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达 server。本来这是一个早已失效的报文段。但 server 收到此失效的连接请求报文段后，就误认为是 client 再次发出的一个新的连接请求。于是就向 client 发出确认报文段，同意建立连接。假设不采用 “三次握手”，那么只要 server 发出确认，新的连接就建立了。由于现在 client 并没有发出建立连接的请求，因此不会理睬 server 的确认，也不会向 server 发送数据。但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。采用 “三次握手” 的办法可以防止上述现象发生。例如刚才那种情况，client 不会向 server 的确认发出确认。server 由于收不到确认，就知道 client 并没有要求建立连接。”</p></blockquote><h3 id="第-2-次握手传回了-ACK，为什么还要传回-SYN？"><a href="#第-2-次握手传回了-ACK，为什么还要传回-SYN？" class="headerlink" title="第 2 次握手传回了 ACK，为什么还要传回 SYN？"></a>第 2 次握手传回了 ACK，为什么还要传回 SYN？</h3><p>接收端传回发送端所发送的 ACK 是为了告诉客户端，我接收到的信息确实就是你所发送的信号了，这表明从客户端到服务端的通信是正常的。而回传 SYN 则是为了建立并确认从服务端到客户端的通信。</p><h3 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h3><p><img src="http://img-md-js.linjsblog.top/img/202204061117373.png" alt="image-20220406111706580"></p><p>断开一个 TCP 连接则需要“四次挥手”：</p><ul><li>客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</li><li>服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加 1 。和 SYN 一样，一个 FIN 将占用一个序号</li><li>服务器-关闭与客户端的连接，发送一个 FIN 给客户端</li><li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加 1</li></ul><p>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了 TCP 连接。</p><p>举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B 回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pingke开发中遇到的问题和解决方案</title>
      <link href="/2022/04/17/pingke%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2022/04/17/pingke%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="开发中遇到的问题和解决方案"><a href="#开发中遇到的问题和解决方案" class="headerlink" title="开发中遇到的问题和解决方案"></a>开发中遇到的问题和解决方案</h1><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><ul><li><p>前台（面向用户）：</p><p>前端：Vue 2、webpack、Element UI、axios， 后端：Spring Boot、Mybatis-plus、Lombok，Spring Security、JWT 数据库：MySQL、Redis 客服聊天功能：Websocket</p></li><li><p>后台管理系统：</p><p>前端：thymeleaf、Jquery，</p><p>后端：Spring Boot、Mybatis、Shiro、MySQL、Swagger，</p></li><li><p>文件存储：阿里云OSS对象存储</p></li><li><p>部署：Docker</p></li></ul><h2 id="登录状态的保持以及登录状态过期的处理"><a href="#登录状态的保持以及登录状态过期的处理" class="headerlink" title="登录状态的保持以及登录状态过期的处理"></a>登录状态的保持以及登录状态过期的处理</h2><ol><li><strong>登录状态的保持</strong></li></ol><p>由于我们项目的架构是前后端分离，使用传统的session认证会存在很大的弊端。如由于session保存在服务端，随着用户的增多，服务器开销会增大，且会在分布式系统中失效，且session认证无法跨域，对单点登录不适用。对于非浏览器的客户端、手机移动端等不适用，因为<code>session</code>依赖于<code>cookie</code>，而移动端经常没有<code>cookie</code></p><p><strong>解决方案</strong>：</p><p>我们的登录功能是通过Spring Security + JWT（Json Web Token）,用户在登陆后，在Redis中缓存已登陆的用户信息，客户端中保存服务端签发的token，每次前端请求后端的需要权限的接口都在Http请求头中携带token，后端Spring Security会根据token获取用户的权限信息，判断用户是否有权限获取该信息。</p><p><img src="http://img-md-js.linjsblog.top/img/202204171909202.png" alt="image-20220417190904823"></p><ol start="2"><li><strong>登录过期的处理</strong></li></ol><p>我们在保存在redis中的用户信息和token是有过期时间的，假如用户要退出登录，那么用户必须携带token请求后端退出登录的接口，删除redis中用户的登录信息，如果此时token或redis中的LoginUser过期了，Spring Security无法获取到用户的信息，就会报错，从而影响到前端的效果展示。</p><p>解决方案：1.redis不设置过期时间并在token快过期时刷新token，不采用，如果用户长期不访问网站，会占用redis资源。2.要实现退出登录，则自定义退出处理类，实现LogoutSuccessHandler，这样就不会在退出登录时，出现权限校验失败的情况。</p><p><img src="http://img-md-js.linjsblog.top/img/202204171928155.png" alt="image-20220417192830682"></p><p>前端提示用户状态过期，跳转用户登录页面请重新登录</p><p><img src="http://img-md-js.linjsblog.top/img/202204171935553.png" alt="image-20220417193541681"></p><h2 id="密码的安全问题"><a href="#密码的安全问题" class="headerlink" title="密码的安全问题"></a>密码的安全问题</h2><p>首先，我们保存在数据库中的密码都是经过spring security加密的密文，但是在前端提交登录信息到后端的密码时明文，在http协议中，攻击者很容易在密码传输过程中进行劫持拿到你的密码</p><p><img src="http://img-md-js.linjsblog.top/img/202204171943249.png" alt="image-20220417194314020"></p><p><strong>解决方案</strong>：</p><ol><li>使用HTTPS协议加密传输数据，可以有效防止HTTP劫持，我们打算在部署后采用。</li><li>使用RSA非对称加密算法密码，使用支付宝开发平台助手生成公钥和私钥，将公钥存在前端（前端的所有代码对用户都是可见的），私钥存在后端，在注册或登录过程中使用公钥对密码加密，到后端使用私钥进行解密，最后在后端再加密保存在数据库或与数据库密文进行matches匹配校验用户密码是否正确。这样一定程度上保证了用户密码再传输过程中的安全性。</li></ol><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><p>1.用户再未登录时，不能访问客服、创建项目、我的项目。登录后不能再访问登录页面。</p><p><strong>解决方案</strong>：Vue的路由守卫实现权限控制</p><p><img src="http://img-md-js.linjsblog.top/img/202204172010351.png" alt="image-20220417195809851"></p><p>2.用户由两种：普通用户和客服，二者在登录后看到的页面组件应该不同，如客服左侧应该是主页和用户列表</p><p><strong>解决方案</strong>：要保证普通用户不会通过特殊手段跳转到客服的页面，用户在登录时后端校验用户权限，返回在数据库中对应权限路由组件的相关信息如组件名、路由地址等，前端Vue通过路由守卫和路由导航实现权限控制</p><h2 id="OSS文件上传的性能问题"><a href="#OSS文件上传的性能问题" class="headerlink" title="OSS文件上传的性能问题"></a>OSS文件上传的性能问题</h2><blockquote><p>参考文档：<a href="https://help.aliyun.com/document_detail/31926.html">阿里云OSS最佳实践(https://help.aliyun.com/document_detail&#x2F;31926.html)</a></p></blockquote><p>Web端常见的上传方法是用户在浏览器或App端上传文件到应用服务器，应用服务器再把文件上传到OSS。具体流程如下图所示。</p><p><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/7354449951/p140018.png" alt="时序图"></p><p>存在以下缺点：</p><ul><li>上传慢：用户数据需先上传到应用服务器，之后再上传到OSS，网络传输时间比直传到OSS多一倍。如果用户数据不通过应用服务器中转，而是直传到OSS，速度将大大提升。而且OSS采用BGP带宽，能保证各地各运营商之间的传输速度。</li><li>扩展性差：如果后续用户数量逐渐增加，则应用服务器会成为瓶颈。</li><li>费用高：需要准备多台应用服务器。由于OSS上行流量是免费的，如果数据直传到OSS，将节省多台应用服务器的费用。</li></ul><p><strong>解决方案</strong>：</p><p><strong>服务端签名直传</strong>：</p><p><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/0747006361/p139016.png" alt="时序图"></p><h2 id="客服功能（网页聊天室）的实现"><a href="#客服功能（网页聊天室）的实现" class="headerlink" title="客服功能（网页聊天室）的实现"></a>客服功能（网页聊天室）的实现</h2><blockquote><p>参考资料：<a href="https://www.bilibili.com/video/BV1r54y1D72U">黑马程序员：WebSocket打造在线聊天室(https://www.bilibili.com/video/BV1r54y1D72U)</a></p></blockquote><p>传统方法：使用Http协议实现；</p><p>弊端：HTTP协议是一种单向、无连接、无状态的应用层协议。通信请求只能由客户端发起，服务端应答，服务端无法主动向客户端发起消息，这种单向请求的特点，注定了如果服务端有连续的状态变化，客户端要获知就非常困难。大多数web应用程序将通过频繁的异步Ajax请求实现长轮询。</p><p>轮询是指浏览器通过JavaScript启动一个定时器，然后以固定的间隔给服务器发请求，询问服务器有没有新消息。这个机制的缺点一是实时性不够，二是频繁的请求会给服务器带来极大的压力轮询的效率低，非常浪费资源。</p><p><strong>解决方案</strong></p><p>使用websocket协议。使用websocket建立连接，减少系统性能开销</p><p><img src="http://img-md-js.linjsblog.top/img/202204172039125.png" alt="image-20220417203937134"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> spring security </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 算法训练 区间k大数查询</title>
      <link href="/2022/04/07/157/"/>
      <url>/2022/04/07/157/</url>
      
        <content type="html"><![CDATA[<h1 id="算法训练-区间k大数查询"><a href="#算法训练-区间k大数查询" class="headerlink" title="算法训练 区间k大数查询"></a>算法训练 区间k大数查询</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给定一个序列，每次询问序列中第l个数到第r个数中第K大的数是哪个。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入描述:</p><p>第一行包含一个数n，表示序列长度。</p><p>第二行包含n个正整数，表示给定的序列。</p><p>第三个包含一个正整数m，表示询问个数。</p><p>接下来m行，每行三个数l,r,K，表示询问序列从左往右第l个数到第r个数中，从大往小第K大的数是哪个。序列元素从1开始标号。</p><p>输入样例:</p><p>5</p><p>1 2 3 4 5</p><p>2</p><p>1 5 2</p><p>2 3 2</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出描述:</p><p>总共输出m行，每行一个数，表示询问的答案。</p><p>输出样例:</p><p>4</p><p>2</p><p><strong>HINT</strong>:时间限制：1.0s 内存限制：256.0MB</p><p>对于30%的数据，n,m&lt;&#x3D;100；</p><p>对于100%的数据，n,m&lt;&#x3D;1000；</p><p>保证k&lt;&#x3D;(r-l+1)，序列中的数&lt;&#x3D;106。</p><p><strong>Source</strong></p><p>蓝桥杯练习系统 ID: 11 原题链接: <a href="http://lx.lanqiao.cn/problem.page?gpid=T11">http://lx.lanqiao.cn/problem.page?gpid=T11</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储输出结果</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> <span class="token class-name">I</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> <span class="token class-name">K</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//list.subList(fromIndex, toIndex)截取指定范围</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//降序排序</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// TODO Auto-generated method stub</span>                    <span class="token keyword">return</span> o2<span class="token operator">-</span>o1<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> res <span class="token operator">:</span> output<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 算法训练 蜜蜂飞舞</title>
      <link href="/2022/04/07/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E8%9C%9C%E8%9C%82%E9%A3%9E%E8%88%9E/"/>
      <url>/2022/04/07/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E8%9C%9C%E8%9C%82%E9%A3%9E%E8%88%9E/</url>
      
        <content type="html"><![CDATA[<p>算法训练 蜜蜂飞舞 Description</p><p>　　“两只小蜜蜂呀，飞在花丛中呀……”</p><p>　　话说这天天上飞舞着两只蜜蜂，它们在跳一种奇怪的舞蹈。用一个空间直角坐标系来描述这个世界，那么这两只蜜蜂初始坐标分别为(x1,y1,z1)，(x2,y2,z2)　　。在接下来它们将进行n次飞行，第i次飞行两只蜜蜂分别按照各自的速度向量飞行ti个单位时间。对于这一现象，玮玮已经观察了很久。他很想知道在蜜蜂飞舞结束时，两只蜜蜂的距离是多少。现在他就求教于你，请你写一个程序来帮他计算这个结果。</p><p>Input 输入描述:</p><p>　　第一行有且仅有一个整数n，表示两只蜜蜂将进行n次飞行。</p><p>　　接下来有n行。</p><p>　　第i行有7个用空格分隔开的整数ai,bi,ci,di,ei,fi,ti　　，表示第一只蜜蜂单位时间的速度向量为(ai,bi,ci) ，第二只蜜蜂单位时间的速度向量为(di,ei,fi) ，它们飞行的时间为ti 。</p><p>　　最后一行有6个用空格分隔开的整数x1,y1,z1,x2,y2,z2，如题所示表示两只蜜蜂的初始坐标。</p><p>输入样例:</p><p>Output 输出描述:</p><p>　　输出仅包含一行，表示最后两只蜜蜂之间的距离。保留4位小数位。</p><p>输出样例:</p><p>Sample Input 1</p><p>参考上文 Sample Output 1</p><p>参考上文 Hint</p><p>HINT:时间限制：1.0s 内存限制：512.0MB</p><p>Source</p><p>蓝桥杯练习系统 ID: 109 原题链接: <a href="http://lx.lanqiao.cn/problem.page?gpid=T109">http://lx.lanqiao.cn/problem.page?gpid=T109</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">beeflying</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z2<span class="token punctuation">;</span>        <span class="token comment">//两只蜜蜂在各个方向飞行的总位移</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">+=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b <span class="token operator">+=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">+=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            d <span class="token operator">+=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e <span class="token operator">+=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f <span class="token operator">+=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x1 <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y1 <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        z1 <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x2 <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y2 <span class="token operator">=</span> e <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        z2 <span class="token operator">=</span> f <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>z1<span class="token operator">-</span>z2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>z1<span class="token operator">-</span>z2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4f"</span><span class="token punctuation">,</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 常见问题</title>
      <link href="/2022/04/05/spring-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/05/spring-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-面试常见问题"><a href="#Spring-面试常见问题" class="headerlink" title="Spring 面试常见问题"></a>Spring 面试常见问题</h1><h2 id="Spring-IOC-和-AOP"><a href="#Spring-IOC-和-AOP" class="headerlink" title="Spring IOC 和 AOP"></a>Spring IOC 和 AOP</h2><h3 id="谈谈对Spring-IOC的了解"><a href="#谈谈对Spring-IOC的了解" class="headerlink" title="谈谈对Spring IOC的了解"></a>谈谈对Spring IOC的了解</h3><p><strong>IoC（Inverse of Control:控制反转）</strong> 是一种设计思想，而不是一个具体的技术实现。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。</p><h4 id="为什么叫控制反转"><a href="#为什么叫控制反转" class="headerlink" title="为什么叫控制反转"></a>为什么叫控制反转</h4><ul><li><strong>控制</strong> ：指的是对象创建（实例化、管理）的权力</li><li><strong>反转</strong> ：控制权交给外部环境（Spring 框架、IoC 容器）</li></ul><p><img src="http://img-md-js.linjsblog.top/img/202204051043213.png" alt="image-20220405104301282"></p><blockquote><p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。 IoC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件&#x2F;注解即可，完全不用考虑对象是如何被创建出来的。</p><p>在 Spring 中， IoC 容器是 Spring 用来实现 IoC 的载体， IoC 容器实际上就是个 Map（key，value），Map 中存放的是各种对象。</p><p>Spring 时代我们一般通过 XML 文件来配置 Bean，后来开发人员觉得 XML 文件来配置不太好，于是 SpringBoot 注解配置就慢慢开始流行起来。</p></blockquote><h3 id="谈谈自己对Spring-AOP的理解"><a href="#谈谈自己对Spring-AOP的理解" class="headerlink" title="谈谈自己对Spring AOP的理解"></a>谈谈自己对Spring AOP的理解</h3><p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><p>Spring AOP 就是基于动态代理的</p><blockquote><p>动态代理：</p><ol><li>在程序的执行过程中，面向目标对象创建代理对象；</li><li>通过代理对象调用目标对象的方法，从而在目标对象的方法中增加额外的功能（比如日志，性能分析等）</li></ol></blockquote><p>如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：</p><p><img src="http://img-md-js.linjsblog.top/img/202204051058589.png" alt="image-20220405105819600"></p><p>当然你也可以使用 <strong>AspectJ</strong> ！Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。</p><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。</p><p>参考资料：</p><ul><li><a href="https://javadoop.com/post/spring-ioc">IoC 源码阅读</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486938&idx=1&sn=c99ef0233f39a5ffc1b98c81e02dfcd4&chksm=cea24211f9d5cb07fa901183ba4d96187820713a72387788408040822ffb2ed575d28e953ce7&token=1736772241&lang=zh_CN#rd">面试被问了几百遍的 IoC 和 AOP ，还在傻傻搞不清楚？</a></li><li><a href="https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html#%E8%B0%88%E8%B0%88%E8%87%AA%E5%B7%B1%E5%AF%B9%E4%BA%8E-spring-ioc-%E7%9A%84%E4%BA%86%E8%A7%A3">JavaGuide Spring常见问题总结</a></li></ul><h2 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h2><h3 id="什么是Spring-Bean"><a href="#什么是Spring-Bean" class="headerlink" title="什么是Spring Bean"></a>什么是Spring Bean</h3><p>简单来说，Bean 代指的就是那些被 IoC 容器所管理的对象。</p><p>我们需要告诉 IoC 容器帮助我们管理哪些对象，这个是通过配置元数据来定义的。配置元数据可以是 XML 文件、注解或者 Java 配置类。</p><h3 id="Bean-和-Component的区别"><a href="#Bean-和-Component的区别" class="headerlink" title="@Bean 和 @Component的区别"></a>@Bean 和 @Component的区别</h3><ol><li><code>@Component</code> 注解作用于类，而<code>@Bean</code>注解作用于方法。</li><li><code>@Component</code>通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中（我们可以使用 <code>@ComponentScan</code> 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中）。<code>@Bean</code> 注解通常是我们在标有该注解的方法中定义产生这个 bean,<code>@Bean</code>告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我。</li><li><code>@Bean</code> 注解比 <code>@Component</code> 注解的自定义性更强，而且很多地方我们只能通过 <code>@Bean</code> 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 <code>Spring</code>容器时，则只能通过 <code>@Bean</code>来实现。</li></ol><h3 id="将一个类声明为-bean-的注解有哪些"><a href="#将一个类声明为-bean-的注解有哪些" class="headerlink" title="将一个类声明为 bean 的注解有哪些?"></a>将一个类声明为 bean 的注解有哪些?</h3><p>我们一般使用 <code>@Autowired</code> 注解自动装配 bean，要想把类标识成可用于 <code>@Autowired</code> 注解自动装配的 bean 的类,采用以下注解可实现：</p><ul><li><code>@Component</code> ：通用的注解，可标注任意类为 <code>Spring</code> 组件。如果一个 Bean 不知道属于哪个层，可以使用<code>@Component</code> 注解标注。</li><li><code>@Repository</code> : 对应持久层即 Dao 层，主要用于数据库相关操作。</li><li><code>@Service</code> : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</li><li><code>@Controller</code> : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。</li></ul><h3 id="Bean-的作用域有哪些"><a href="#Bean-的作用域有哪些" class="headerlink" title="Bean 的作用域有哪些"></a>Bean 的作用域有哪些</h3><p>Spring 中 Bean 的作用域通常有下面几种：</p><ul><li><strong>singleton</strong> : 唯一 bean 实例，Spring 中的 bean 默认都是单例的，对单例设计模式的应用。</li><li><strong>prototype</strong> : 每次请求都会创建一个新的 bean 实例。</li><li><strong>request</strong> : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。</li><li><strong>session</strong> : 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。</li><li><strong>global-session</strong> ： 全局 session 作用域，仅仅在基于 portlet 的 web 应用中才有意义，Spring5 已经没有了。Portlet 是能够生成语义代码(例如：HTML)片段的小型 Java Web 插件。它们基于 portlet 容器，可以像 servlet 一样处理 HTTP 请求。但是，与 servlet 不同，每个 portlet 都有不同的会话。</li></ul><p><strong>Bean的生命周期</strong></p><p>创建，初始化，调用，销毁； bean的创建方式有四种，构造器，静态工厂，实例工厂，setter注入的方式。 spring在调用bean的时候因为作用域的不同，不同的bean初始化和创建的时间也不相同。 在作用域为singleton的时候，bean是随着容器一起被创建好并且实例化的， 在作用域为pritotype的时候，bean是随着它被调用的时候才创建和实例化完成。 然后程序就可以使用bean了，当程序完成销毁的时候，bean也被销毁。</p><p><strong>如何配置 bean 的作用域呢？</strong></p><p>xml 方式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注解方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_PROTOTYPE</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">personPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://javaguide.cn/system-design/framework/spring/spring-knowledge-and-questions-summary.html#%E5%B0%86%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%A3%B0%E6%98%8E%E4%B8%BA-bean-%E7%9A%84%E6%B3%A8%E8%A7%A3%E6%9C%89%E5%93%AA%E4%BA%9B">JavaGuide Spring常见问题总结</a></p><h2 id="Spring-框架中用到的设计模式"><a href="#Spring-框架中用到的设计模式" class="headerlink" title="Spring 框架中用到的设计模式"></a>Spring 框架中用到的设计模式</h2><p>Spring 框架中用到了哪些设计模式：</p><ul><li><strong>工厂设计模式</strong> : Spring使用工厂模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 对象。</li><li><strong>代理设计模式</strong> : Spring AOP 功能的实现。</li><li><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</li><li><strong>模板方法模式</strong> : Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li><li><strong>包装器设计模式</strong> : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li><li><strong>观察者模式:</strong> Spring 事件驱动模型就是观察者模式很经典的一个应用。</li><li><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配<code>Controller</code>。</li><li>……</li></ul><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485303&idx=1&sn=9e4626a1e3f001f9b0d84a6fa0cff04a&chksm=cea248bcf9d5c1aaf48b67cc52bac74eb29d6037848d6cf213b0e5466f2d1fda970db700ba41&token=255050878&lang=zh_CN#rd">面试官:“谈谈 Spring 中都用到了那些设计模式?”</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 实习面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC的工作流程与前后端分离的Spring MVC</title>
      <link href="/2022/04/05/spring-mvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84spring-mvc/"/>
      <url>/2022/04/05/spring-mvc%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84spring-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC的工作流程与前后端分离的Spring-MVC"><a href="#Spring-MVC的工作流程与前后端分离的Spring-MVC" class="headerlink" title="Spring MVC的工作流程与前后端分离的Spring MVC"></a>Spring MVC的工作流程与前后端分离的Spring MVC</h1><h2 id="Spring-MVC的工作流程"><a href="#Spring-MVC的工作流程" class="headerlink" title="Spring MVC的工作流程"></a>Spring MVC的工作流程</h2><h3 id="1-Spring-MVC-常用组件"><a href="#1-Spring-MVC-常用组件" class="headerlink" title="1.Spring MVC 常用组件"></a>1.Spring MVC 常用组件</h3><ul><li>DispatcherServlet: 前端控制器，不需要工程师开发，由框架提供作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</li><li>HandlerMapping：处理器映射器，不需要工程师开发，由框架提供作用：根据请求的url、method等信息查找Handler，即控制器方法</li><li>Handler：处理器（控制器），需要工程师开发 作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</li><li>HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供 作用：通过HandlerAdapter对处理器（控制器方法）进行执行</li><li>ViewResolver：视图解析器，不需要工程师开发，由框架提供 作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、 RedirectView</li><li>View：视图</li></ul><h3 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2.工作流程"></a>2.工作流程</h3><p><img src="http://img-md-js.linjsblog.top/img/202204051008975.png" alt="image-20220405100752981"></p><ol><li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li><li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。</li><li>解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li><li><code>HandlerAdapter</code> 会根据 <code>Handler</code>来调用真正的处理器开处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li><li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li><li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li><li>把 <code>View</code> 返回给请求者（浏览器）</li></ol><h2 id="前后端分离的spring-mvc"><a href="#前后端分离的spring-mvc" class="headerlink" title="前后端分离的spring mvc"></a>前后端分离的spring mvc</h2><h3 id="MVC-的不足"><a href="#MVC-的不足" class="headerlink" title="MVC 的不足"></a>MVC 的不足</h3><blockquote><ol><li>每次请求必须经过“控制器-&gt;模型-&gt;视图”这个流程，用户才能看到最终的展现的界面，这个过程似乎有些复杂。</li><li>实际上视图是依赖于模型的，换句话说，如果没有模型，视图也无法呈现出最终的效果。</li><li>渲染视图的过程是在服务端来完成的，最终呈现给浏览器的是带有模型的视图页面，性能无法得到很好的优化。</li></ol></blockquote><p>为了使数据展现过程更加直接，并且提供更好的用户体验，我们有必要对MVC模式进行改进。不妨这样来尝试，首先从<strong>浏览器发送AJAX请求，然后服务端接受该请求并返回JSON数据返回给浏览器，最后在浏览器中进行界面渲染</strong>。</p><p>也就是说，我们输入的是AJAX请求，输出的是JSON数据，市面上有这样的技术来实现这个功能吗？答案是<strong>REST</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 实习面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> spring mvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式  七大原则</title>
      <link href="/2022/04/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
      <url>/2022/04/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h1><ul><li><p>单一职责原则</p></li><li><p>接口隔离原则</p></li><li><p>依赖倒转原则</p></li><li><p>里氏替换原则</p></li><li><p>开闭原则</p></li><li><p>迪米特法则</p></li><li><p>合成复用原则</p></li></ul><h2 id="一、单一职责原则"><a href="#一、单一职责原则" class="headerlink" title="一、单一职责原则"></a>一、单一职责原则</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责：职责1，职责2。 当职责1需求变更而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为 A1，A2</p><h3 id="以交通工具案例来演示"><a href="#以交通工具案例来演示" class="headerlink" title="以交通工具案例来演示"></a>以交通工具案例来演示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResponsibility1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"火车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> vehicle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">" 在公路上运行。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">汽车 在公路上运行。。。火车 在公路上运行。。。飞机 在公路上运行。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这就违反了单一职责原则，解决方案很简单，根据交通工具运行方法的不同，分解成不同的类即可</p><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class RoadVehicle&#123;    public void run(String vehicle) &#123;        System.out.println(vehicle+&quot; 在公路上运行。。。&quot;);    &#125;&#125;class AirVehicle&#123;    public void run(String vehicle) &#123;        System.out.println(vehicle+&quot; 在天空上运行。。。&quot;);    &#125;&#125;class WaterVehicle&#123;    public void run(String vehicle) &#123;        System.out.println(vehicle+&quot; 在水路上运行。。。&quot;);    &#125;&#125;。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：但是这么做改动很大，还要修改客户端</p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> vehicle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">" 在公路上运行。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token class-name">String</span> vehicle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">" 在铁轨上运行。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token class-name">String</span> vehicle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vehicle<span class="token operator">+</span><span class="token string">" 在天空上运行。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Vehicle</span> vehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token string">"火车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">run2</span><span class="token punctuation">(</span><span class="token string">"飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在类这违反了单一职责原则，在方法上没有</p><h3 id="单一职责原则注意事项和细节"><a href="#单一职责原则注意事项和细节" class="headerlink" title="单一职责原则注意事项和细节"></a>单一职责原则注意事项和细节</h3><ol><li>降低类的复杂度，一个类只负责一项职责。 2) 提高类的可读性，可维护性 3) 降低变更引起的风险 4) 通常情况下，我们应当遵守单一职责原则，只有逻辑足够简单，才可以在代码级违 反单一职责原则；只有类中方法数量足够少，可以在方法级别保持单一职责原则</li></ol><h2 id="二、接口隔离原则"><a href="#二、接口隔离原则" class="headerlink" title="二、接口隔离原则"></a>二、接口隔离原则</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><img src="http://img-md-js.linjsblog.top/img/202204041527810.png" alt="image-20220402234539091"></p><p>我们用代码展现：</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Interface1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token comment">//A通过接口Interface1依赖B,只会使用到1，2，3方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend2</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend3</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span><span class="token comment">//A通过接口Interface1依赖D,只会使用到4，5方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend4</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend5</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拆分接口"><a href="#拆分接口" class="headerlink" title="拆分接口"></a>拆分接口</h3><p><img src="http://img-md-js.linjsblog.top/img/202204041527311.png" alt="image-20220403001050150"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Interface1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Interface2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Interface3</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class B只需要实现interface1和interface2即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">,</span><span class="token class-name">Interface2</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 实现了operation3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span><span class="token punctuation">,</span><span class="token class-name">Interface3</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D 实现了operation5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token comment">//A通过接口Interface1,interface2依赖B,只会使用到1，2，3方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend2</span><span class="token punctuation">(</span><span class="token class-name">Interface2</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend3</span><span class="token punctuation">(</span><span class="token class-name">Interface2</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span><span class="token comment">//A通过接口Interface1,interface3依赖B,只会使用到1，2，3方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend1</span><span class="token punctuation">(</span><span class="token class-name">Interface1</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend4</span><span class="token punctuation">(</span><span class="token class-name">Interface3</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">depend5</span><span class="token punctuation">(</span><span class="token class-name">Interface3</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token punctuation">.</span><span class="token function">operation5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Segregation1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">depend1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//A通过接口依赖B</span>        a<span class="token punctuation">.</span><span class="token function">depend2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">depend3</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">depend1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">depend4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">depend5</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202204041527769.png" alt="image-20220403002351633"></p><h2 id="三、依赖倒转原则"><a href="#三、依赖倒转原则" class="headerlink" title="三、依赖倒转原则"></a>三、依赖倒转原则</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>依赖倒转原则是指：</p><ol><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖细节，细节应该依赖抽象</li><li>依赖倒转(倒置)的中心思想是<strong>面向接口编程</strong></li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在java中，抽象指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>简单设计一个Person接受消息的功能：</p><h4 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h4><p>一般情况下，我们比较容易想到这样做</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependecyInversion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Email</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"电子邮件信息：hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">Email</span> email<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，入过我们想获取微信、短信等，则要新增加类，同时Person也要增加新的方法，严重影响可拓展性</p><h4 id="方案二-1"><a href="#方案二-1" class="headerlink" title="方案二"></a>方案二</h4><p>所以在方案二中，我们引入一个抽象类接口IReceiver，表示接收者，这样Person类与接口IReceiver发生依赖，因为Email 、WeiXin等等都属于接受的范围，他们各自实现了IReceiver接口，这样就符合依赖倒转原则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependecyInversion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeiXin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IReceiver</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Email</span> <span class="token keyword">implements</span> <span class="token class-name">IReceiver</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"电子邮件信息：hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WeiXin</span> <span class="token keyword">implements</span> <span class="token class-name">IReceiver</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"微信信息：hello,world"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">IReceiver</span> iReceiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iReceiver<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">电子邮件信息：hello world微信信息：hello,world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="依赖关系传递的三种方式和应用案例"><a href="#依赖关系传递的三种方式和应用案例" class="headerlink" title="依赖关系传递的三种方式和应用案例"></a>依赖关系传递的三种方式和应用案例</h3><h4 id="1-接口传递"><a href="#1-接口传递" class="headerlink" title="1. 接口传递"></a>1. 接口传递</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方式1： 通过接口传递实现依赖</span><span class="token comment">// 开关的接口</span><span class="token keyword">interface</span> <span class="token class-name">IOpenAndClose</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">ITV</span> tv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抽象方法,接收接口</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">ITV</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ITV接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChangHong</span> <span class="token keyword">implements</span> <span class="token class-name">ITV</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长虹电视机，打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现接口</span><span class="token keyword">class</span> <span class="token class-name">OpenAndClose</span> <span class="token keyword">implements</span> <span class="token class-name">IOpenAndClose</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">ITV</span> tv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-构造方法传递"><a href="#2-构造方法传递" class="headerlink" title="2. 构造方法传递"></a>2. 构造方法传递</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOpenAndClose</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抽象方法</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">ITV</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ITV接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">OpenAndClose</span> <span class="token keyword">implements</span> <span class="token class-name">IOpenAndClose</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">ITV</span> tv<span class="token punctuation">;</span> <span class="token comment">// 成员</span>    <span class="token keyword">public</span> <span class="token class-name">OpenAndClose</span><span class="token punctuation">(</span><span class="token class-name">ITV</span> tv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-setter方式传递"><a href="#3-setter方式传递" class="headerlink" title="3. setter方式传递"></a>3. setter方式传递</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方式3 , 通过setter方法传递</span><span class="token keyword">interface</span> <span class="token class-name">IOpenAndClose</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTv</span><span class="token punctuation">(</span><span class="token class-name">ITV</span> tv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">ITV</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ITV接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">OpenAndClose</span> <span class="token keyword">implements</span> <span class="token class-name">IOpenAndClose</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ITV</span> tv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTv</span><span class="token punctuation">(</span><span class="token class-name">ITV</span> tv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChangHong</span> <span class="token keyword">implements</span> <span class="token class-name">ITV</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长虹电视机，打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="依赖倒转原则的注意事项和细节"><a href="#依赖倒转原则的注意事项和细节" class="headerlink" title="依赖倒转原则的注意事项和细节"></a>依赖倒转原则的注意事项和细节</h3><ol><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.</li><li>变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</li><li>继承时遵循里氏替换原则</li></ol><h2 id="四、里氏替换原则"><a href="#四、里氏替换原则" class="headerlink" title="四、里氏替换原则"></a>四、里氏替换原则</h2><h3 id="继承的弊端"><a href="#继承的弊端" class="headerlink" title="继承的弊端"></a>继承的弊端</h3><ol><li>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契 约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实 现的方法任意修改，就会对整个继承体系造成破坏。</li><li>继承在给程序设计带来便利的同时，也带来了弊端。比如使用继承会给程序带来侵 入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他的类所继承， 则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子 类的功能都有可能产生故障</li><li>那么在编程中，该如何正确的使用继承? &#x3D;&gt; <strong>里氏替换原则</strong></li></ol><h3 id="什么是里氏替换原则？"><a href="#什么是里氏替换原则？" class="headerlink" title="什么是里氏替换原则？"></a>什么是里氏替换原则？</h3><ol><li>里氏替换原则(Liskov Substitution Principle)在1987年，它由芭芭拉·利斯科夫（Barbara Liskov）提出。</li><li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序 P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1 的子类型。换句话说，所有引用基类的地方必须能透明地使用其子类的对象。</li><li>在使用继承时，遵循里氏替换原则，在<strong>子类中尽量不要重写父类的方法</strong></li><li>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，<strong>在适当的情况下，可以通过聚合，组合，依赖 来解决问题</strong>。</li></ol><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>我们来看一下这段代码，</p><p><img src="http://img-md-js.linjsblog.top/img/202204041738493.png" alt="image-20220404173816384"></p><p>输出如下</p><pre class="line-numbers language-none"><code class="language-none">11-3&#x3D;81-8&#x3D;-7----------------------11-3&#x3D;141-8&#x3D;911+3+9&#x3D;23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上述代码可以看出，若类B在继承类A时不注意，重写了父类方法func1就会导致结果与预想的不一致，改变了父类原有的功能</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li>我们发现原来运行正常的相减功能发生了错误。原因就是类B无意中重写了父类的 方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用性会比较差。特别是运 行多态比较频繁的时候</li><li>通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉， 采用依赖，聚合，组合等关系代替</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token comment">//更基础的成员与方法写到Base类</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token comment">//如果B类需要使用A类的方法，使用组合关系</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// B类需要使用A类的方法</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、开闭原则"><a href="#五、开闭原则" class="headerlink" title="五、开闭原则"></a>五、开闭原则</h2><h3 id="什么是开闭原则"><a href="#什么是开闭原则" class="headerlink" title="什么是开闭原则"></a>什么是开闭原则</h3><ol><li>开闭原则（Open Closed Principle）是编程中最基础、最重要的设计原则</li><li>一个软件实体如类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节。</li><li>当软件需要变化时，尽量<strong>通过扩展</strong>软件实体的行为来实现变化，而<strong>不是通过修改</strong>已 有的代码来实现变化。</li><li>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。</li></ol><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>我们来看看这段代码有什么问题</p><h4 id="方案一-2"><a href="#方案一-2" class="headerlink" title="方案一"></a>方案一</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ocp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用看看存在的问题</span>        <span class="token class-name">GraphicEditor</span> graphicEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphicEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这是一个用于绘图的类 [使用方]</span><span class="token keyword">class</span> <span class="token class-name">GraphicEditor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//接收Shape对象，然后根据type，来绘制不同的图形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">drawRectangle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token function">drawCircle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//绘制矩形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawRectangle</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 绘制矩形 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//绘制圆形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 绘制圆形 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Shape类，基类</span><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m_type<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>优点是比较好理解，简单易操作。</li><li>缺点是违反了设计模式的ocp原则，即对扩展开放(提供方)，对修改关闭(使用方)。 即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码.</li><li>比如我们这时要新增加一个图形种类 三角形，我们需要做如下修改，修改的地方较多</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//新增画三角形</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>m_type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接收Shape对象，然后根据type，来绘制不同的图形</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">drawRectangle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">drawCircle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>m_type <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token function">drawTriangle</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//绘制三角形</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawTriangle</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 绘制三角形 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h4><p>思路：把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可， 这样我们有新的图形种类时，只需要让新的图形类继承Shape，并实现draw方法即可， 使用方的代码就不需要修 -&gt; 满足了开闭原则</p><h4 id="方案二-2"><a href="#方案二-2" class="headerlink" title="方案二"></a>方案二</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ljs<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>ocp<span class="token punctuation">.</span>improve</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ocp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用看看存在的问题</span>        <span class="token class-name">GraphicEditor</span> graphicEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphicEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphicEditor<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//这是一个用于绘图的类 [使用方]</span><span class="token keyword">class</span> <span class="token class-name">GraphicEditor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//接收Shape对象，然后根据type，来绘制不同的图形</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//Shape类，基类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抽象方法 </span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制矩形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制圆形 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//新增画三角形</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制三角形 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、迪米特法则"><a href="#六、迪米特法则" class="headerlink" title="六、迪米特法则"></a>六、迪米特法则</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ol><li>一个对象应该对其他对象保持最少的了解</li><li>类与类关系越密切，耦合度越大</li><li>迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的 越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内 部。对外除了提供的public 方法，不对外泄露任何信息</li><li>迪米特法则还有个更简单的定义：只与直接的朋友通信</li><li>_直接的朋友_：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系， 我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合 等。其中，我们称出现<strong>成员变量，方法参数，方法返回值中的类</strong>为直接的朋友，而出现在<strong>局部变量中的类不是直接的朋友</strong>。也就是说，陌生的类最好不要以局部变量 的形式出现在类的内部。</li></ol><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ol><li>有一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的id</li><li>编程实现上面的功能, 看代码演示</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ljs<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>demeter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demeter1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">SchoolManager</span> schoolManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        schoolManager<span class="token punctuation">.</span><span class="token function">printAllEmployee</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CollegeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//学校总部员工类</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//学院员工类</span><span class="token keyword">class</span> <span class="token class-name">CollegeEmployee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//管理学院员工的一个管理类</span><span class="token keyword">class</span> <span class="token class-name">CollegeManager</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回学院的所有员工</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里我们增加了10个员工到list</span>            <span class="token class-name">CollegeEmployee</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollegeEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学院员工id= "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//学校的管理类</span><span class="token keyword">class</span> <span class="token class-name">SchoolManager</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回学校总部的员工</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里我们增加了5个员工到list</span>            <span class="token class-name">Employee</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学校总部员工id= "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//该方法完成输出学校总部和学院员工信息(id)</span>    <span class="token keyword">void</span> <span class="token function">printAllEmployee</span><span class="token punctuation">(</span><span class="token class-name">CollegeManager</span> sub<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> sub<span class="token punctuation">.</span><span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------分公司员工------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CollegeEmployee</span> e <span class="token operator">:</span> list1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------学校总部员工------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/202204042238285.png" alt="image-20220404223817986"></p><p>分析：SchoolManager的直接朋友有那些：Employee、CollegeManage，CollegeEmployee不是直接朋友而是陌生类，这样违背了迪米特法则，CollegeEmployee是以局部变量出现在SchoolManager</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><ol><li>前面设计的问题在于SchoolManager中，CollegeEmployee类并不是 SchoolManager类的直接朋友 (分析）</li><li>按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合</li><li>将输出学院的员工的方法，封装到CollegeManager</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//管理学院员工的一个管理类</span><span class="token keyword">class</span> <span class="token class-name">CollegeManager</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回学院的所有员工</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里我们增加了10个员工到list</span>            <span class="token class-name">CollegeEmployee</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollegeEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学院员工id= "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CollegeEmployee</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------分公司员工------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CollegeEmployee</span> e <span class="token operator">:</span> list1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//学校的管理类</span><span class="token keyword">class</span> <span class="token class-name">SchoolManager</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回学校总部的员工</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里我们增加了5个员工到list</span>            <span class="token class-name">Employee</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"学校总部员工id= "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//该方法完成输出学校总部和学院员工信息(id)</span>    <span class="token keyword">void</span> <span class="token function">printAllEmployee</span><span class="token punctuation">(</span><span class="token class-name">CollegeManager</span> sub<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sub<span class="token punctuation">.</span><span class="token function">printEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------学校总部员工------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迪米特法则注意事项和细节"><a href="#迪米特法则注意事项和细节" class="headerlink" title="迪米特法则注意事项和细节"></a>迪米特法则注意事项和细节</h3><p>迪米特法则的核心是降低类之间的耦合</p><p>但是注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低 类间(对象间)耦合关系， 并不是要求完全没有依赖关系</p><h2 id="七、合成复用原则"><a href="#七、合成复用原则" class="headerlink" title="七、合成复用原则"></a>七、合成复用原则</h2><p>原则是尽量使用合成&#x2F;聚合的方式，而不是使用继承</p><p><img src="http://img-md-js.linjsblog.top/img/202204042316733.png" alt="image-20220404231240328"></p><h2 id="设计原则的核心思想"><a href="#设计原则的核心思想" class="headerlink" title="设计原则的核心思想"></a>设计原则的核心思想</h2><ol><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</li><li>针对接口编程，而不是针对实现编程。</li><li>为了交互对象之间的松耦合设计而努力</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 学习笔记 </category>
          
          <category> 实习面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包装类型的常量池技术</title>
      <link href="/2022/04/04/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/04/04/%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%B8%B8%E9%87%8F%E6%B1%A0%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="包装类型的常量池技术"><a href="#包装类型的常量池技术" class="headerlink" title="包装类型的常量池技术"></a>包装类型的常量池技术</h1><p>Java 基本类型的包装类的大部分都实现了常量池技术。</p><p>Byte,Short,Integer,Long这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，Character创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，Boolean直接返回 True or False。</p><p>在指定范围内，不会创建新的对象，所以在相同值使用&#x3D;&#x3D;比较时，Byte,Short,Integer,Long会返回true</p><p>我们看看源码：</p><p><strong>Integer 缓存源码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// high value may be configured by property</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Character缓存源码:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Character</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// must cache</span>      <span class="token keyword">return</span> <span class="token class-name">CharacterCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CharacterCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">CharacterCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Character</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Boolean源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token constant">TRUE</span> <span class="token operator">:</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>如果超出对应范围仍然会去创建新的对象</strong>，缓存的范围区间的大小只是在性能和资源之间的权衡。</p><p><strong>两种浮点数类型的包装类 <code>Float</code>,<code>Double</code> 并没有实现常量池技术。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 true</span><span class="token class-name">Float</span> i11 <span class="token operator">=</span> <span class="token number">333f</span><span class="token punctuation">;</span><span class="token class-name">Float</span> i22 <span class="token operator">=</span> <span class="token number">333f</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i11 <span class="token operator">==</span> i22<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 false</span><span class="token class-name">Double</span> i3 <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span><span class="token class-name">Double</span> i4 <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们来看一下问题。下面的代码的输出结果是 <code>true</code> 还是 <code>false</code> 呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">==</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Integer i1=40</code> 这一行代码会发生装箱，也就是说这行代码等价于 <code>Integer i1=Integer.valueOf(40)</code> 。因此，<code>i1</code> 直接使用的是常量池中的对象。而<code>Integer i2 = new Integer(40)</code> 会直接创建新的对象。</p><p>因此，答案是 <code>false</code> 。你答对了吗？</p><p>记住：<strong>所有整型包装类对象之间值的比较，全部使用 equals 方法比较</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 实习面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯 算法训练 调和级数问题</title>
      <link href="/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/"/>
      <url>/2022/04/03/%E8%93%9D%E6%A1%A5%E6%9D%AF-%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-算法训练-调和级数问题"><a href="#蓝桥杯-算法训练-调和级数问题" class="headerlink" title="蓝桥杯 算法训练 调和级数问题"></a>蓝桥杯 算法训练 调和级数问题</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>输入一个实数x，求最小的n使得，1&#x2F;2+1&#x2F;3+1&#x2F;4+…+1&#x2F;(n+1)&gt;&#x3D;x。</p><p>　　输入的实数x保证大于等于0.01，小于等于5.20，并且恰好有两位小数。你的程序要能够处理多组数据，即不停地读入x，如果x不等于0.00，则计算答案，否则退出程序。</p><p>　　输出格式为对于一个x，输出一行n card(s)。其中n表示要计算的答案。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入描述:</p><p>　　分行输入x的具体数值</p><p>输入样例:</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出描述:</p><p>　　分行输出n的数值，格式为n card(s)</p><p>输出样例:</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>0.36 1.45 2.78 4.12 0.00</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1 card(s) 5 card(s) 24 card(s) 93 card(s)</p><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>HINT:时间限制：1.0s 内存限制：512.0MB</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>蓝桥杯练习系统 ID: 107 原题链接: <a href="http://lx.lanqiao.cn/problem.page?gpid=T107">http://lx.lanqiao.cn/problem.page?gpid=T107</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">double</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.00</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token number">1.00</span><span class="token operator">/</span>i<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token operator">>=</span>input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    n <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token string">" card(s)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 常用数据类型</title>
      <link href="/2022/03/29/redis-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/29/redis-%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-常用数据类型"><a href="#Redis-常用数据类型" class="headerlink" title="Redis 常用数据类型"></a>Redis 常用数据类型</h1><h2 id="1-字符串（String）"><a href="#1-字符串（String）" class="headerlink" title="1.字符串（String）"></a><strong>1.字符串（String）</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k1 100OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k1<span class="token string">"100"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>append 将给定的追加到原值末尾</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> k4 v456OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> append k4 <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get k4<span class="token string">"v4561"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">strlen &lt;key&gt;获得值的长度setnx &lt;key&gt; &lt;value&gt; 只有在key 不存在时设置key的值incr &lt;key&gt; 将key中存储的的数字加1，只能对数字值操作decr &lt;key&gt; 将key中存储的的数字减1incrby&#x2F;decrby &lt;key&gt; &lt;步长&gt; 将key中存储的数字值增减。自定义步长mset &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt; &lt;key3&gt; &lt;value3&gt;... 同时设置一个或多个key-valuemget &lt;key1&gt; &lt;key2&gt; ... 同时获取一个或多个value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mset k1 v1 k2 v2 k3 v3OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> keys *<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"k3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"k2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"k1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> mget k1 k2 k3<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">msetnx &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt; &lt;key3&gt; &lt;value3&gt;... 同时设置一个或多个key-value,当且仅当给定的key都不存在getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt; 获取值的范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> name lucymaryOK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> getrange name <span class="token number">0</span> <span class="token number">3</span><span class="token string">"lucy"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setex &lt;过期时间&gt; 设置键值的同时，设置过期时间，单位秒</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> setex age <span class="token number">30</span> v111OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> ttl age<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-列表（List）"><a href="#2-列表（List）" class="headerlink" title="2.列表（List）"></a><strong>2.列表（List）</strong></h2><p>redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部右边。它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能较差。</p><p><code>lpush/rpush ....key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt;.....</code> 从左边&#x2F;右边插入一个或多个值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush k1 v1 v2 v3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange k1 <span class="token number">0</span> <span class="token parameter variable">-1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v3"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lpop/rpop &lt;key&gt;</code> 从左边&#x2F;右边吐出一个值。值在键在，值光键亡。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpop k1<span class="token string">"v3"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpop k1<span class="token string">"v1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>rpoplpush &lt;key1&gt;&lt;key2&gt;</code> 从列表右边吐出一个值，插到key2列表左边</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lpush k1 v1 v2 v3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpush k2 v11 v12 v13<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> rpoplpush k1 k2<span class="token string">"v1"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange k2 <span class="token number">0</span> <span class="token parameter variable">-1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v11"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v12"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"v13"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</code> 按照索引下标 获取列表指定范围内的元素(从左到右)</p><p><code>lindex &lt;key&gt;&lt;index&gt;</code> 通过索引获取列表中的元素 <code>llen</code> 获取列表的长度 <code>linsert &lt;key&gt; before/after &lt;value&gt; &lt;newvalue&gt;</code> 在 的前面&#x2F;后面插入插入值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> linsert k2 before v11 v110<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange k2 <span class="token number">0</span> <span class="token parameter variable">-1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v110"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v11"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"v12"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"v13"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> linsert k2 after v11 v111<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> lrange k2 <span class="token number">0</span> <span class="token parameter variable">-1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"v110"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"v11"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"v111"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"v12"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"v13"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code> 从左边删除n个value <code>lset &lt;key&gt;&lt;index&gt;&lt;value&gt;</code> 将列表key下标为index的值替换为value</p><h2 id="3-集合（Set）"><a href="#3-集合（Set）" class="headerlink" title="3.集合（Set）"></a><strong>3.集合（Set）</strong></h2><p><code>sadd &lt;key&gt; &lt;value1&gt; &lt;value2&gt;......</code> 向集合添加一个或多个成员</p><p><a href="https://www.runoob.com/redis/redis-sets.html">https://www.runoob.com/redis/redis-sets.html</a></p><h2 id="4-哈希（Hash）"><a href="#4-哈希（Hash）" class="headerlink" title="4.哈希（Hash）"></a><strong>4.哈希（Hash）</strong></h2><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。类似java中的Map</p><p><a href="https://www.runoob.com/redis/redis-hashes.html">https://www.runoob.com/redis/redis-hashes.html</a></p><h2 id="5-有序集合"><a href="#5-有序集合" class="headerlink" title="5.有序集合"></a><strong>5.有序集合</strong></h2><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><p><a href="https://www.runoob.com/redis/redis-sorted-sets.html">https://www.runoob.com/redis/redis-sorted-sets.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 6.0 新功能</title>
      <link href="/2022/03/05/redis-6-0-%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/03/05/redis-6-0-%E6%96%B0%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-6-0-新功能"><a href="#Redis-6-0-新功能" class="headerlink" title="Redis 6.0 新功能"></a>Redis 6.0 新功能</h1><h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><p>Redis ACL 是Access Control List (访问控制列表)的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p><p>在Redis 5版本之前，Redis安全规则只有密码控制还有通过rename来调整高危命令比如flushdb , KEYS*, sHutdown等。Redis 6则提供ACL的功能对用户进行更细粒度的权限控制:</p><ol><li>接入权限:用户名和密码</li><li>可以执行的命令</li><li>可以操作的KEY</li></ol><blockquote><p>参考官网：<a href="https://redis.io/topics/acl">https://redis.io/topics/acl</a></p></blockquote><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol><li><p>acl list:展现用户的权限列表</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220304233159109.png" alt="image-20220304233159109"></p><p>on表示权限启动，nopass表示不需要密码，~*可操作的key，+@all 可执行的命令</p></li><li><p>acl cat: 查看添加权限的指令类别</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220304233824956.png" alt="image-20220304233824956"></p><p><img src="http://img-md-js.linjsblog.top/img/image-20220304233855916.png" alt="image-20220304233855916"></p><p>acl whoami: 查看当前用户</p></li><li><p>创建新用户默认权限</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acl setuser lucy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p>设置密码、acl权限、并启用用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">acl setuser marry on <span class="token operator">></span>password ~cached:* +get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换用户</p><pre class="line-numbers language-none"><code class="language-none">auth password marry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> key1 value1<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to run the <span class="token string">'set'</span> <span class="token builtin class-name">command</span> or its subcommand<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> cached:key1 value1<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to run the <span class="token string">'set'</span> <span class="token builtin class-name">command</span> or its subcommand<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get a<span class="token punctuation">(</span>error<span class="token punctuation">)</span> NOPERM this user has no permissions to access one of the keys used as arguments<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get cached:a<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h2><p>IO 多线程其实指客户端交互部分的网络I0交互处理模块多线程，而非执行命令多线程。Redis6执行命令依然是单线程。·只是用来处理网络数据的读写和协议解析</p><p>另外，多线程IO默认也是不开启的，需要在配置文件中配置</p><p>io-threads-do-reads yes</p><p>io-threads 4</p><h2 id="工具支持Cluster"><a href="#工具支持Cluster" class="headerlink" title="工具支持Cluster"></a>工具支持Cluster</h2><p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5将redis-trib.rb的功能集成到redis-cli。另外官方redis-benchmark工具开始支持cluster模式了，通过多线程的方式对多个分片进行压测。</p><h2 id="Redis6新功能还有"><a href="#Redis6新功能还有" class="headerlink" title="Redis6新功能还有"></a>Redis6新功能还有</h2><ol><li><strong>RESP3新的 Redis 通信协议</strong>：优化服务端与客户端之间通信</li><li><strong>Client side caching客户端缓存</strong>：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据cache到客户端。减少TCP网络交互。</li><li><strong>Proxy集群代理模式</strong>：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用cluster的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多Key操作。</li><li><strong>Modules API</strong>：Redis 6中模块API开发进展非常大，因为Redis Labs为了开发复杂的功能，从一开始就用上Redis模块。Redis可以变成一个框架，利用Modules来构建不同系统，而不需要从头开始写然后还要BSD许可。Redis一开始就是一个向编写各种系统开放的平台。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 分布式锁</title>
      <link href="/2022/03/04/redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2022/03/04/redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-分布式锁"><a href="#Redis-分布式锁" class="headerlink" title="Redis 分布式锁"></a>Redis 分布式锁</h1><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的JavaAPI并不能提供分布式锁的能力。为了解决这个问题就需要一种跨VM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题!</p><p>分布式锁的主流的实现方案：</p><ol><li>基于数据库实现分布式锁</li><li>基于缓存（Redis等）</li><li>基于zookeeper</li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li>性能：Redis最高</li><li>可靠性：zookeeper最高</li></ol><p>这里，我们就基于redis实现分布式锁</p><h2 id="设置锁和过期时间"><a href="#设置锁和过期时间" class="headerlink" title="设置锁和过期时间"></a>设置锁和过期时间</h2><p>命令：setnx KEY_NAME VALUE</p><p>将 key 的值设为 value，当且仅当 key 不存在。 若给定的 key 已经存在，则 SETNX 不做任何动作。</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220304182037198.png" alt="image-20220304182037198"></p><p>如果锁一直不释放，可以设置key过期时间，过期后会释放锁</p><pre class="line-numbers language-none"><code class="language-none">expire user 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果上锁后出现异常，无法设置过期时间：可以上锁的同时设置过期时间；</p><pre class="line-numbers language-none"><code class="language-none">set user 10 nx ex [expire time]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>java代码实现，我们根据之前 <a href="http://www.linjsblog.top/archives/123">springboot整合redis</a>搭建环境</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220304203234917.png" alt="image-20220304203234917"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testLOck"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取锁，setnx,并设置锁的过期时间</span>        <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span><span class="token string">"111"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取锁成功，查询num值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//panduan</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 有值就转换成</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 把redis的num加1</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 释放锁del</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//获取锁失败，每隔0.1秒再获取</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用ab工具模拟并发测试</p><p>centos7 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> httpd-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ab <span class="token parameter variable">-n</span> <span class="token number">1000</span> <span class="token parameter variable">-c</span> <span class="token number">100</span> http://10.211.28.124:8080/redisTest/testLock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/image-20220304204433577.png" alt="image-20220304204433577"></p><h2 id="UUID防止误删"><a href="#UUID防止误删" class="headerlink" title="UUID防止误删"></a>UUID防止误删</h2><p><img src="http://img-md-js.linjsblog.top/img/image-20220304205653851.png" alt="image-20220304205653851"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testLock"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//生成uuid</span>        <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取锁，setnx,并设置锁的过期时间</span>        <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">,</span>uuid<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取锁成功，查询num值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//panduan</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 有值就转换成</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 把redis的num加1</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 释放锁del</span>            <span class="token comment">// 判断比较uuid的值是否一样</span>            <span class="token class-name">String</span>  lockUuid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lockUuid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//获取锁失败，每隔0.1秒再获取</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样做的问题是：删除操作缺乏原子性</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220304224854522.png" alt="image-20220304224854522"></p><h2 id="LUA保证删除的原子性"><a href="#LUA保证删除的原子性" class="headerlink" title="LUA保证删除的原子性"></a>LUA保证删除的原子性</h2><p>代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testLockLua"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1 声明一个uuid ,将做为一个value 放入我们的key所对应的值中</span>    <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span>    <span class="token class-name">String</span> skuId <span class="token operator">=</span> <span class="token string">"25"</span><span class="token punctuation">;</span> <span class="token comment">// 访问skuId 为25号的商品 100008348542</span>    <span class="token class-name">String</span> locKey <span class="token operator">=</span> <span class="token string">"lock:"</span> <span class="token operator">+</span> skuId<span class="token punctuation">;</span> <span class="token comment">// 锁住的是每个商品的数据</span>    <span class="token comment">// 3 获取锁</span>    <span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>locKey<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 第一种： lock 与过期时间中间不写任何的代码。</span>    <span class="token comment">// redisTemplate.expire("lock",10, TimeUnit.SECONDS);//设置过期时间</span>    <span class="token comment">// 如果true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行的业务逻辑开始</span>        <span class="token comment">// 获取缓存中的num 数据</span>        <span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果是空直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不是空 如果说在这出现了异常！ 那么delete 就删除失败！ 也就是说锁永远存在！</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使num 每次+1 放入缓存</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*使用lua脚本来锁*/</span>        <span class="token comment">// 定义lua 脚本</span>        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>        <span class="token comment">// 使用redis执行lua执行</span>        <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置一下返回值类型 为Long</span>        <span class="token comment">// 因为删除判断的时候，返回的0,给其封装为数据类型。如果不封装那么默认返回String 类型，</span>        <span class="token comment">// 那么返回字符串与0 会有发生错误。</span>        redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个要是script 脚本 ，第二个需要判断的key，第三个就是key所对应的值。</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>locKey<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 其他线程等待</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 睡眠</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 睡醒了之后，调用方法。</span>            <span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/image-20220304231047599.png" alt="image-20220304231047599"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 尚硅谷 </tag>
            
            <tag> lua </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 整合redis</title>
      <link href="/2022/03/04/springboot-%E6%95%B4%E5%90%88redis/"/>
      <url>/2022/03/04/springboot-%E6%95%B4%E5%90%88redis/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-整合redis"><a href="#springboot-整合redis" class="headerlink" title="springboot 整合redis"></a>springboot 整合redis</h1><p>1.创建springboot工程引入依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.application.yml配置redis配置</p><pre class="line-numbers language-none"><code class="language-none">spring:  redis:    host: 120.25.84.170    port: 6379    # 数据库索引（默认为0）    database: 0    # 连接超时时间    timeout: 1800000    lettuce:      pool:        # 连接池的最大连接数        max-active: 20        # 最大阻塞等待时间（使用负值表示没有限制）        max-wait: 1        # 连接池中的最大空闲连接        max-idle: 5        # 最小空闲连接        min-idle: 0  application:    name: springboot_redis_demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.创建redis配置类</p><pre class="line-numbers language-none"><code class="language-none">@EnableCaching@Configurationpublic class RedisConfig extends CachingConfigurerSupport &#123;    @Bean    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123;        RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate&lt;&gt;();        RedisSerializer&lt;String&gt; redisSerializer &#x3D; new StringRedisSerializer();        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer(Object.class);        ObjectMapper om &#x3D; new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        template.setConnectionFactory(factory);        &#x2F;&#x2F;key序列化方式        template.setKeySerializer(redisSerializer);        &#x2F;&#x2F;value序列化        template.setValueSerializer(jackson2JsonRedisSerializer);        &#x2F;&#x2F;value hashmap序列化        template.setHashValueSerializer(jackson2JsonRedisSerializer);        return template;    &#125;    @Bean    public CacheManager cacheManager(RedisConnectionFactory factory) &#123;        RedisSerializer&lt;String&gt; redisSerializer &#x3D; new StringRedisSerializer();        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new Jackson2JsonRedisSerializer(Object.class);        &#x2F;&#x2F;解决查询缓存转换异常的问题        ObjectMapper om &#x3D; new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        &#x2F;&#x2F; 配置序列化（解决乱码的问题）,过期时间600秒        RedisCacheConfiguration config &#x3D; RedisCacheConfiguration.defaultCacheConfig()                .entryTtl(Duration.ofSeconds(600))                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))                .disableCachingNullValues();        RedisCacheManager cacheManager &#x3D; RedisCacheManager.builder(factory)                .cacheDefaults(config)                .build();        return cacheManager;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.测试一下</p><p>在RedisTestController增加测试方法</p><pre class="line-numbers language-none"><code class="language-none">@RestController@RequestMapping(&quot;&#x2F;redisTest&quot;)public class RedisTestController &#123;    @Autowired    private RedisTemplate redisTemplate;    @GetMapping    public String testRedis()&#123;        redisTemplate.opsForValue().set(&quot;name&quot;,&quot;lucy&quot;);        String name &#x3D; (String) redisTemplate.opsForValue().get(&quot;name&quot;);        return name;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.启动springboot启动类</p><p>浏览器输入</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost:8080&#x2F;redisTest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/1bc7f20cd1e5ce0c15a22d59e51fee68.png" alt="1bc7f20cd1e5ce0c15a22d59e51fee68.png"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 缓存穿透、缓存击穿、缓存雪崩</title>
      <link href="/2022/03/04/redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
      <url>/2022/03/04/redis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-缓存穿透、缓存击穿、缓存雪崩"><a href="#Redis-缓存穿透、缓存击穿、缓存雪崩" class="headerlink" title="Redis 缓存穿透、缓存击穿、缓存雪崩"></a>Redis 缓存穿透、缓存击穿、缓存雪崩</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>对空值缓存：如果一个查询返回的数据为空(不管是数据是否不存在)），我们仍然把这个空结果(null )进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</li><li>设置可访问的名单(白名单):使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和 bitmap里面的 id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</li><li>采用布隆过滤器∶(布隆过滤器(Bloom Filter )是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数)。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</li><li>进行实时监控：当发现redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><p>比如说：redis中的某个key过期了，此时大量访问使用这个key，造成大量请求去查数据库，造成数据库压力瞬间增大。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题:缓存被“击穿”的问题。</p><ol><li><p>预先设置热门数据：在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p></li><li><p>实时调整：现场监控哪些数据热门，实时调整key的过期时长</p></li><li><p>使用锁：就是在缓存失效的时候(判断拿出来的值为空），不是立即去load db。先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的SETNX )。当操作返回成功时，再进行load db的操作，开回设缓存，最后在删除 mutex key（互斥锁）。当操作返回失败，证明有线程在load db ,当前线程睡眠一段时间再重试整个get key缓存的办法</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220304154040707.png" alt="image-20220304154040707"></p></li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。<strong>和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库</strong>。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>构建多级缓存架构：nginx缓存 + redis缓存 +其他缓存(ehcache等)</li><li>使用锁或队列：用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况。</li><li>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</li><li>将缓存失效时间分散开：比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis6 新数据类型 Bitmaps,HyperLogLog,Geospatial</title>
      <link href="/2022/03/04/redis6-%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-bitmapshyperlogloggeospatial/"/>
      <url>/2022/03/04/redis6-%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-bitmapshyperlogloggeospatial/</url>
      
        <content type="html"><![CDATA[<h1 id="redis6-新数据类型-Bitmaps-HyperLogLog-Geospatial"><a href="#redis6-新数据类型-Bitmaps-HyperLogLog-Geospatial" class="headerlink" title="redis6 新数据类型 Bitmaps,HyperLogLog,Geospatial"></a>redis6 新数据类型 Bitmaps,HyperLogLog,Geospatial</h1><p><strong>1.Bitmaps</strong></p><p>(1)Bitmaps并不是实际的数据类型，而是定义在String类型上的一个面向字节操作的集合。因为字符串是二进制安全的块，他们的最大长度是512M。</p><p>(2)Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><p><img src="http://img-md-js.linjsblog.top/img/3073170888b1b94f8805c7036924009d.png" alt="3073170888b1b94f8805c7036924009d.png"></p><p>命令</p><p><strong>setbit</strong></p><p>实例 </p><p>每个独立用户是否访问过网站放在Bitmaps中，将访问的用户记为1，没有访问的用户记为0，用户偏移量作为用户id。</p><p>setbit \<key> \<offset> \<value></p><p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid&#x3D;1， 6， 11， 16， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图所示。</p><p><img src="http://img-md-js.linjsblog.top/img/11abeb9c7d31764a59fb7740475e1537.png" alt="11abeb9c7d31764a59fb7740475e1537.png"></p><p>unique:users:202100101 代表2021-01-01这天的独立访问用户的Bitmaps：</p><p><img src="http://img-md-js.linjsblog.top/img/c025f42db37439af46f961e6569de3d0.png" alt="c025f42db37439af46f961e6569de3d0.png"></p><p><strong>getbit</strong></p><p>getbit \<key> \<offset> \<value>  获取bitmap中某个偏移量的值</p><p>实例</p><p><img src="http://img-md-js.linjsblog.top/img/5c51112536fd2b96174dc58fcf185988.png" alt="5c51112536fd2b96174dc58fcf185988.png"></p><p><strong>bitcount</strong></p><p>bitcount \<key> [start end]   统计字符串从start字节到end<strong>字节</strong>比特值为1的数量</p><p><img src="http://img-md-js.linjsblog.top/img/2115c236863c22c4ab599f51fef4ad1e.png" alt="2115c236863c22c4ab599f51fef4ad1e.png"></p><p><img src="http://img-md-js.linjsblog.top/img/374eb6ab007405885c203c4bc2385d07.png" alt="374eb6ab007405885c203c4bc2385d07.png"></p><p><strong>bitop</strong></p><p>bitop and(or&#x2F;not&#x2F;xor) \<destkey> [key…]</p><p>bitop 是一个复合操作，它可以 做多个Bitmap的  and（交集）、or（并集）、not（非）、xor（异或）操作并将结果保存在destkey中。</p><p>实例：</p><p>2021-11-04日访问网站的userid&#x3D;1,2,5,9</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; setbit unique:user:20211104 1 1(integer) 0127.0.0.1:6379&gt; setbit unique:user:20211104 2 1(integer) 0127.0.0.1:6379&gt; setbit unique:user:20211104 5 1(integer) 0127.0.0.1:6379&gt; setbit unique:user:20211104 9 1(integer) 0127.0.0.1:6379&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 2021-11-03日访问网站的userid&#x3D;0,1,4,9</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; setbit unique:user:20211103 0 1(integer) 0127.0.0.1:6379&gt; setbit unique:user:20211103 1 1(integer) 0127.0.0.1:6379&gt; setbit unique:user:20211103 4 1(integer) 0127.0.0.1:6379&gt; setbit unique:user:20211103 9 1(integer) 0127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算两天都访问过网站的用户数量</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; bitop and unique:user:20211104_03 unique:user:20211103  unique:user:20211104<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/f9e80c20f88815d8e5e8f3df5b2f65e3.png" alt="f9e80c20f88815d8e5e8f3df5b2f65e3.png"></p><p><strong>2.HyperLogLog</strong></p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数？</p><p>比如数据集{1,3,5,7,5,7,8}，那么这个数据集的基数集为{1,3,5,7,8}，基数(不重复元素)为5。基数估计就是在误差可接受范围内快速计算基数</p><p>命令</p><p><strong>pfadd</strong></p><p>pfadd \<key> \<element> [element…]      添加指定元素到HyperLogLog中</p><p>将所有元素添加到指定的HyperLogLog中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; pfadd program &quot;java&quot;(integer) 1127.0.0.1:6379&gt; pfadd program &quot;php&quot;(integer) 1127.0.0.1:6379&gt; pfadd program &quot;java&quot;(integer) 0127.0.0.1:6379&gt; pfadd program &quot;c++&quot; &quot;c&quot;(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>pfcount</strong></p><p>pfcount \<key> [key…] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; pfcount program(integer) 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>pfmerge</strong></p><p>pfmerge \<destkey> \<sourcekey> [sourcekey …] 将一个或多个HLL合并后的结果存储在另一个HLL，比如每月活跃用户可以使用每天活跃用户来合并计算可得</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; pfadd k1 &quot;a&quot; &quot;b&quot; &quot;c&quot;(integer) 1127.0.0.1:6379&gt; pfcount k1(integer) 3127.0.0.1:6379&gt; pfadd k2 &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot;(integer) 1127.0.0.1:6379&gt; pfadd k3 &quot;g&quot; &quot;h&quot; &quot;h&quot;(integer) 1127.0.0.1:6379&gt; pfcount k2(integer) 4127.0.0.1:6379&gt; pfcount k3(integer) 2127.0.0.1:6379&gt; pfmerge k1_k2_k3 k1 k2 k3OK127.0.0.1:6379&gt; pfcount k1_k2_k3(integer) 8127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.Geospatial</strong></p><p>Redis3.2中增加了对GEO类型的支持。GEO,Geographic,地理信息的缩写。</p><p>该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬</p><p>度设置，查询，范围查询，距离查询，经纬度Hash等常见操作.</p><p><strong>geoadd</strong> 添加地理坐标</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai(integer) 1127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38  38.90 beijing(integer) 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>geopos</strong> 获得指定地区的坐标值</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; geopos china:city shanghai1) 1) &quot;121.47000163793563843&quot;   2) &quot;31.22999903975783553&quot;127.0.0.1:6379&gt; geopos china:city shenzhen chongqing1) 1) &quot;114.04999762773513794&quot;   2) &quot;22.5200000879503861&quot;2) 1) &quot;106.49999767541885376&quot;   2) &quot;29.52999957900659211&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>geodist</strong> 获取两个位置之间的直线距离</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; geodist china:city shanghai beijing km&quot;970.3997&quot;127.0.0.1:6379&gt; geodist china:city shanghai beijing m&quot;970399.6506&quot;127.0.0.1:6379&gt; geodist china:city shanghai beijing ft&quot;3183725.8880&quot;127.0.0.1:6379&gt; geodist china:city shanghai beijing mi&quot;602.9799&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单位：</p><p>m表示单位为米[默认值]。</p><p>km表示单位为千米。</p><p>mi表示单位为英里。</p><p>ft表示单位为英尺。</p><p>如果用户没有显示的指定参数，那么geodist默认使用米作为单位</p><p><strong>georadius</strong> 以给定的经纬度为中心，找出某一半径内的元素</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km1) &quot;chongqing&quot;2) &quot;shenzhen&quot;127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯算法训练 接水问题</title>
      <link href="/2022/03/03/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/03/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83-%E6%8E%A5%E6%B0%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯算法训练-接水问题"><a href="#蓝桥杯算法训练-接水问题" class="headerlink" title="蓝桥杯算法训练 接水问题"></a>蓝桥杯算法训练 接水问题</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>学校里有一个水房，水房里一共装有m 个龙头可供同学们打开水，每个龙头每秒钟的 供水量相等，均为1。 现在有n 名同学准备接水，他们的初始接水顺序已经确定。将这些同学按接水顺序从1 到n 编号，i 号同学的接水量为wi。接水开始时，1 到m 号同学各占一个水龙头，并同时打 开水龙头接水。当其中某名同学j 完成其接水量要求wj 后，下一名排队等候接水的同学k 马上接替j 同学的位置开始接水。这个换人的过程是瞬间完成的，且没有任何水的浪费。即 j 同学第x 秒结束时完成接水，则k 同学第x+1 秒立刻开始接水。若当前接水人数n’不足m， 则只有n’个龙头供水，其它m−n’个龙头关闭。 现在给出n 名同学的接水量，按照上述接水规则，问所有同学都接完水需要多少秒。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入描述:</p><p>　　第1 行2 个整数n 和m，用一个空格隔开，分别表示接水人数和龙头个数。 第2 行n 个整数w1、w2、……、wn，每两个整数之间用一个空格隔开，wi 表示i 号同 学的接水量。</p><p>输入样例:</p><p>5 3</p><p>4 4 1 2 1</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出描述:</p><p>　　输出只有一行，1 个整数，表示接水所需的总时间。</p><p>输出样例:</p><p>4</p><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>HINT:时间限制：1.0s 内存限制：64.0MB</p><p>　　第1 秒，3 人接水。第1 秒结束时，1、2、3 号同学每人的已接水量为1，3 号同学接完水，4 号同学接替3 号同学开始接水。</p><p>　　第2 秒，3 人接水。第2 秒结束时，1、2 号同学每人的已接水量为2，4 号同学的已接水量为1。</p><p>　　第3 秒，3 人接水。第3 秒结束时，1、2 号同学每人的已接水量为3，4 号同学的已接水量为2。4 号同学接完水，5 号同学接替4 号同学开始接水。</p><p>　　第4 秒，3 人接水。第4 秒结束时，1、2 号同学每人的已接水量为4，5 号同学的已接水量为1。1、2、5 号同学接完水，即所有人完成接水。</p><p>总接水时间为4 秒。</p><h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><p>蓝桥杯练习系统 ID: 100 原题链接: <a href="http://lx.lanqiao.cn/problem.page?gpid=T100">http://lx.lanqiao.cn/problem.page?gpid=T100</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> waterOuts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                waterOuts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>waterOuts<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                time <span class="token operator">+=</span> waterOuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> waterOuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    waterOuts<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                waterOuts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>waterOuts<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            time <span class="token operator">+=</span> waterOuts<span class="token punctuation">[</span>waterOuts<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 集群</title>
      <link href="/2022/03/03/redis-%E9%9B%86%E7%BE%A4/"/>
      <url>/2022/03/03/redis-%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-集群-Redis-Cluster"><a href="#Redis-集群-Redis-Cluster" class="headerlink" title="Redis 集群 Redis Cluster"></a>Redis 集群 Redis Cluster</h1><h2 id="Docker搭建redis集群"><a href="#Docker搭建redis集群" class="headerlink" title="Docker搭建redis集群"></a>Docker搭建redis集群</h2><p>配置6个redis docker容器实例，端口分别为6379，6380，6381，6389，6390，6391</p><p>我们依次创建六个redis配置文件</p><h3 id="修改配置文件选项"><a href="#修改配置文件选项" class="headerlink" title="修改配置文件选项"></a>修改配置文件选项</h3><pre class="line-numbers language-none"><code class="language-none">port 6379 #端口号requirepass 123456 #设置redis密码masterauth 123456 #如果设置了requirepass 这个也要设置dbfilename dump6379.rdbcluster-enabled yes #开启redis集群模式cluster-config-file nodes-6379.conf #设定节点配置文件名cluster-node-timeout 15000 设置节点失联时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后复制到其他配置文件将6379替换为响应端口号</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220302193229727.png" alt="image-20220302193229727"></p><h3 id="启动6个容器"><a href="#启动6个容器" class="headerlink" title="启动6个容器"></a>启动6个容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis-6379 <span class="token parameter variable">-v</span> /mydata/redis/conf/redis6379.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /mydata/redis/data/6379:/data <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6380</span>:6380 <span class="token parameter variable">--name</span> redis-6380 <span class="token parameter variable">-v</span> /mydata/redis/conf/redis6380.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /mydata/redis/data/6380:/data <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6381</span>:6381 <span class="token parameter variable">--name</span> redis-6381 <span class="token parameter variable">-v</span> /mydata/redis/conf/redis6381.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /mydata/redis/data/6381:/data <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6389</span>:6389 <span class="token parameter variable">--name</span> redis-6389 <span class="token parameter variable">-v</span> /mydata/redis/conf/redis6389.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /mydata/redis/data/6389:/data <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6390</span>:6390 <span class="token parameter variable">--name</span> redis-6390 <span class="token parameter variable">-v</span> /mydata/redis/conf/redis6390.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /mydata/redis/data/6390:/data <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6391</span>:6391 <span class="token parameter variable">--name</span> redis-6391 <span class="token parameter variable">-v</span> /mydata/redis/conf/redis6391.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /mydata/redis/data/6391:/data <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然如果你不想写配置文件和设置密码的话，可以按照尚硅谷的方法<a href="https://www.bilibili.com/video/BV1gr4y1U7CY?p=45">https://www.bilibili.com/video/BV1gr4y1U7CY?p=45</a></p><p>更简便</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-1 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6381</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-2 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6382</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-3 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6383</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-4 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6384</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-5 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6385</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-6 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6386</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>--net host 使用宿主机的ip和端口</p><p>--priviliged&#x3D;true 获得宿主机root用户权限</p><p>-v &#x2F;data&#x2F;redis&#x2F;share&#x2F;redis-node-3:&#x2F;data 容器卷 宿主机地址:docker内部地址</p><p>cluster-enabled yes 开机redis集群</p><p>--appendonly yes 开启AOF持久化</p><p>--port 6386 redis端口号</p><p>查看6个容器的内网ip地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network inspect bridge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/image-20220302202905609.png" alt="image-20220302202905609"></p><pre class="line-numbers language-none"><code class="language-none">redis-6379 172.17.0.3redis-6380 172.17.0.4redis-6381 172.17.0.5redis-6389 172.17.0.6redis-6390 172.17.0.7redis-6391 172.17.0.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将6个节点合成一个集群"><a href="#将6个节点合成一个集群" class="headerlink" title="将6个节点合成一个集群"></a>将6个节点合成一个集群</h3><p>进入redis-6379容器，如果使用第二种方法启动redis容器，那么请使用外网ip地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> create --cluster-replicas <span class="token number">1</span> <span class="token number">172.17</span>.0.3:6379 <span class="token number">172.17</span>.0.4:6380 <span class="token number">172.17</span>.0.5:6381 <span class="token number">172.17</span>.0.6:6389 <span class="token number">172.17</span>.0.7:6390 <span class="token number">172.17</span>.0.8:6391 <span class="token parameter variable">-a</span> in12JS<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用第二种方法的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> create --cluster-replicas <span class="token number">1</span> <span class="token number">192.168</span>.56.10:6381 <span class="token number">192.168</span>.56.10:6382 <span class="token number">192.168</span>.56.10:6383 <span class="token number">192.168</span>.56.10:6384 <span class="token number">192.168</span>.56.10:6385 <span class="token number">192.168</span>.56.10:6386<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果配置文件加了密码一定要加 -a &lt;密码&gt;</p><p>查看集群信息，连接redis节点，参数一定要带-c 否则读取或写入数值会报错（error）moved</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis-xxxx redis-cli <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>port<span class="token operator">></span> <span class="token parameter variable">-a</span> <span class="token operator">&lt;</span>requirepass<span class="token operator">></span> <span class="token parameter variable">-c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> cluster nodes <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/image-20220303000449493.png" alt="image-20220303000449493"></p><h3 id="OK-All-16384-slots-covered"><a href="#OK-All-16384-slots-covered" class="headerlink" title="[OK] All 16384 slots covered."></a>[OK] All 16384 slots covered.</h3><p>redis集群搭建成功后，控制台会显示</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220303102348787.png" alt="image-20220303102348787"></p><p>一个Redis 集群包含16384个插槽( hash slot )，数据库中的每个键都属于这16384个插槽的其中一个，集群使用公式CRC16(key)% 16384来计算键key属于哪个槽，其中CRC16(key)语句用于计算键key的CRC16校验和。集群中的每个节点负责处理一部分插槽。举个例子，如果一个集群可以有主节点，节点A负责处理0号至5460号插槽。一个Redis 集群包含16384个插槽( hash slot )，数据库中的每个键都属于这16384个插槽的其中一个， 集群使用公式CRC16(key)% 16384来计算键key属于哪个槽，其中CRC16(key)语句用于计算键ikey的:CRC16校验和。 集群中的每个节点负责处理一部分插槽。举个例子，如果一个集群可以有主节点， 节点A负责处理0号至5460号插槽。 节点B负责处理5461号至10922号插槽。 节点C负责处理10923号至16383号插槽。</p><h2 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h2><h3 id="插入值"><a href="#插入值" class="headerlink" title="插入值"></a>插入值</h3><p><img src="C:/Users/mzx/AppData/Roaming/Typora/typora-user-images/image-20220303103637929.png" alt="image-20220303103637929"></p><h3 id="插入多个值"><a href="#插入多个值" class="headerlink" title="插入多个值"></a>插入多个值</h3><p>分到user组，集群就会根据”user”来计算插槽</p><pre class="line-numbers language-none"><code class="language-none">mset name&#123;user&#125; lucy age&#123;user&#125; 20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询集群的值"><a href="#查询集群的值" class="headerlink" title="查询集群的值"></a>查询集群的值</h3><p>cluster getkeysinslot 返回count个slot槽中的键</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220303105116512.png" alt="image-20220303105116512"></p><p>只能看当前节点插槽范围内的值 所以12706 的值为0</p><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><p>如果主节点下线，从节点会自动升为主节点，主节点回复后，主节点变为从机。</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage为yes，那么，整个集群都挂掉</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage为yes，那么，整个集群都挂掉</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage为no，那么，该插槽数据全都不能使用，也无法存储。</p><p>redis.conf中的参数cluster-require-full-coverage 默认是yes</p><h2 id="集群的jedis开发"><a href="#集群的jedis开发" class="headerlink" title="集群的jedis开发"></a>集群的jedis开发</h2><p>即使连接的不是主机，集群也会自动切换为主机存储。主机写，从机读。</p><p>无中心化主从集群，无论从哪台主机写的数据，其他主机上都能读到数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisClusterTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HostAndPort</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.56.10"</span><span class="token punctuation">,</span><span class="token number">6381</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JedisCluster</span> jedisCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k5"</span><span class="token punctuation">,</span><span class="token string">"v5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"k5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisCluster<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带密码的还不会，卡在这里，以后再解决</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装docker</title>
      <link href="/2022/03/03/%E5%AE%89%E8%A3%85docker/"/>
      <url>/2022/03/03/%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><h2 id="删除旧版本docker"><a href="#删除旧版本docker" class="headerlink" title="删除旧版本docker"></a>删除旧版本docker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>                  docker-client <span class="token punctuation">\</span>                  docker-client-latest <span class="token punctuation">\</span>                  docker-common <span class="token punctuation">\</span>                  docker-latest <span class="token punctuation">\</span>                  docker-latest-logrotate <span class="token punctuation">\</span>                  docker-logrotate <span class="token punctuation">\</span>                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装yum-utils包（提供yum-config-manager-实用程序）并设置稳定的存储库。"><a href="#安装yum-utils包（提供yum-config-manager-实用程序）并设置稳定的存储库。" class="headerlink" title="安装yum-utils包（提供yum-config-manager 实用程序）并设置稳定的存储库。"></a>安装<code>yum-utils</code>包（提供<code>yum-config-manager</code> 实用程序）并设置<strong>稳定</strong>的存储库。</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\</span>    --add-repo <span class="token punctuation">\</span>    https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h2><p>安装_最新版本_的 Docker Engine 和 containerd</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看docker 是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置docker开机自启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置阿里云镜像加速"><a href="#设置阿里云镜像加速" class="headerlink" title="设置阿里云镜像加速"></a>设置阿里云镜像加速</h2><p>打开阿里云网站，找到容器镜像服务-&gt;镜像加速，执行下面的代码即可</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220303170500677.png" alt="image-20220303170500677"></p><p>参考文献：</p><blockquote><p>【尚硅谷】全新2022版Docker与微服务实战教程（从入门到进阶）<a href="https://www.bilibili.com/video/BV1gr4y1U7CY">https://www.bilibili.com/video/BV1gr4y1U7CY</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 主从复制</title>
      <link href="/2022/03/02/redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/03/02/redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><p>主从复制的好处：</p><ol><li><p>读写分离（主库写、从库读），一般情况下是一个主数据库，多个从数据库（一主多从）；</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220301135435529.png" alt="image-20220301135435529"></p></li><li><p>容灾的快速恢复，当某一台从机宕机后可以快速切换到另一台从机继续为应用提供服务。</p></li></ol><h2 id="搭建主从复制"><a href="#搭建主从复制" class="headerlink" title="搭建主从复制"></a>搭建主从复制</h2><p>我们使用docker创建多个redis容器实现主从复制。</p><p><a href="http://www.linjsblog.top/archives/87">docker 创建redis 并以配置文件启动</a></p><ol><li>我们下载好镜像后启动3个redis容器服务，分别映射到宿主机的6380、6381和6382端口</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis-6380 <span class="token parameter variable">-p</span> <span class="token number">6380</span>:6379 <span class="token parameter variable">-d</span> redis redis-server<span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis-6381 <span class="token parameter variable">-p</span> <span class="token number">6381</span>:6379 <span class="token parameter variable">-d</span> redis redis-server<span class="token function">docker</span> run <span class="token parameter variable">--name</span> redis-6382 <span class="token parameter variable">-p</span> <span class="token number">6382</span>:6379 <span class="token parameter variable">-d</span> redis redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>查看3个容器的内网ip地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect redis-6380<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/image-20220301152710997.png" alt="image-20220301152710997"></p></li></ol><p>3个redis容器的内网ip分别为</p><pre class="line-numbers language-none"><code class="language-none">redis-6380   172.17.0.4redis-6381   172.17.0.5redis-6382   172.17.0.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们进入redis容器内部，查看redis容器角色，此时三个redis容器都是master，并没有主从关系</p><p>命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">info replication<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/image-20220301153435167.png" alt="image-20220301153435167"></p><p>此时我们需要在两台从机上（redis-6381、redis-6382）执行命令slaveof &lt;主机ip&gt; &lt;主机端口号&gt;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slaveof <span class="token number">172.17</span>.0.4 <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时我们在查看主机redis-6380 的info，此时有了两台从机</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220301154927912.png" alt="image-20220301154927912"></p><p>我们在主机redis-6380 写入数据：set k1 v1,在从机中也可以查到k1</p><p>注意：我们只能在主机中进行写操作，不能再从机中做写操作，如图我们在从机中写操作，会报错</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220301160428329.png" alt="image-20220301160428329"></p><h2 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h2><ol><li>Slave(从机)启动成功连接到master(主机)后会发送一个 sync命令(同步命令)</li><li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步。</li><li>全量复制:而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li><li>增量复制:Master继续将新的所有收集到的修改命令依次传给slave,完成同步。</li><li>当连接断开又重新连上之后，一般都会进行一个完整的重新同步，但是从Redis2.8开始，只重新同步一部分也可以。</li></ol><h2 id="Redis-主从复制的三种常见情况"><a href="#Redis-主从复制的三种常见情况" class="headerlink" title="Redis 主从复制的三种常见情况"></a>Redis 主从复制的三种常见情况</h2><h3 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h3><p>即上面我们搭建的一个主机有两个从机，redis-6381和redis-6382是redis6380的从服务器</p><p>当从机挂掉后，如果没有再配置文件中写slaveof指定主机，在重新连接后从机角色将变回master，重新slaveof设置为从机后，主机中的数据会复制给从机达到数据同步。</p><h3 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h3><p>我们不再把两个从机redis-6381和redis-6382指向主机redis-6380,而是redis-6382指向redis-6381，redis-6381指向redis-6380，即6382是6381的从服务器，6381是6380的从服务器，形成多级结构。</p><p>上一个slave可以是下一个slave的Master， slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master,可以有效减轻master的写压力,去中心化降低风险。</p><p>一旦某个slave挂机，后面的slave都没法备份，主机挂了，从机还是从机，无法写数据了</p><h3 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h3><p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不做任何修改</p><p>用slaveof no one 将从机变为可以主机，但是这样必须手动实现，要实现在主机宕机后，从机自动变为主机，就需要引入<strong>哨兵模式</strong>。</p><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>是什么：反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220301230251672.png" alt="image-20220301230251672"></p><h3 id="哨兵模式的使用"><a href="#哨兵模式的使用" class="headerlink" title="哨兵模式的使用"></a>哨兵模式的使用</h3><h4 id="切换为一主二仆的模式"><a href="#切换为一主二仆的模式" class="headerlink" title="切换为一主二仆的模式"></a>切换为一主二仆的模式</h4><p>在redis-6381和redis-6382使用语句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slaveof <span class="token number">172.17</span>.0.4 <span class="token number">6379</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作为redis-6380的从服务器</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220301232455123.png" alt="image-20220301232455123"></p><h4 id="创建sentinel-conf-文件"><a href="#创建sentinel-conf-文件" class="headerlink" title="创建sentinel.conf 文件"></a>创建sentinel.conf 文件</h4><p>在&#x2F;mydata&#x2F;redis&#x2F;conf 创建sentinel.conf</p><p>sentinel.conf</p><pre class="line-numbers language-none"><code class="language-none">sentinel monitor mymaster 172.17.0.4 6379 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，172.17.0.4 表示监控的主服务器的ip，6379表示端口，1表示至少有多少个哨兵 同意迁移（认为主服务器不可用）的数量。</p><h4 id="docker启动redis-sentinel哨兵服务"><a href="#docker启动redis-sentinel哨兵服务" class="headerlink" title="docker启动redis-sentinel哨兵服务"></a>docker启动redis-sentinel哨兵服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-sentinel1 <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /mydata/redis/conf/sentinel.conf:/sentinel.conf <span class="token punctuation">\</span><span class="token parameter variable">--net</span><span class="token operator">=</span>host <span class="token punctuation">\</span>redis redis-sentinel /sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看哨兵日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs redis-sentinel1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://img-md-js.linjsblog.top/img/image-20220302103746448.png" alt="image-20220302103746448"></p><p>停止主服务器</p><pre class="line-numbers language-none"><code class="language-none">docker stop redis-6380<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查看哨兵日志</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220302104933142.png" alt="image-20220302104933142"></p><p>此时redis-6381变为主机</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220302105312115.png" alt="image-20220302105312115"></p><p>如果当原来的主机redis-6380重新连接，那么redis-6380会变为新主机redis-6381的从机</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220302105731871.png" alt="image-20220302105731871"></p><h4 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h4><p>​ 由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p><h4 id="选举规则"><a href="#选举规则" class="headerlink" title="选举规则"></a>选举规则</h4><ol><li>根据优先级，**<em>slave-priority&#x2F;replica-priority</em>**，优先选择优先级靠前的。数字越小，优先级越高</li></ol><p><img src="http://img-md-js.linjsblog.top/img/image-20220302111832184.png" alt="image-20220302111832184"></p><ol start="2"><li>根据偏移量，优先选择偏移量大的。偏移量是指获得原主机数据最全的</li><li>根据 **<em>runid</em>**，优先选择最小的服务。每个redis实例启动后都会随机生成一个40位的runnid</li></ol><h4 id="Java代码实现哨兵模式"><a href="#Java代码实现哨兵模式" class="headerlink" title="Java代码实现哨兵模式"></a>Java代码实现哨兵模式</h4><p>很简单</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.126.20:26379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JedisSentinelPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span><span class="token string">"mymaster"</span><span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参考文献：</p><blockquote><p><a href="https://blog.csdn.net/qq_36850813/article/details/91350727">Docker搭建redis主从复制</a></p><p><a href="https://www.bilibili.com/video/BV1Rv41177Af?p=32">【尚硅谷】Redis 6 入门到精通 超详细 教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 持久化 RDB和AOF</title>
      <link href="/2022/02/11/redis-%E6%8C%81%E4%B9%85%E5%8C%96-rdb%E5%92%8Caof/"/>
      <url>/2022/02/11/redis-%E6%8C%81%E4%B9%85%E5%8C%96-rdb%E5%92%8Caof/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-持久化-RDB和AOF"><a href="#Redis-持久化-RDB和AOF" class="headerlink" title="Redis 持久化 RDB和AOF"></a>Redis 持久化 RDB和AOF</h1><p>Redis 提供了不同级别的持久化方式:</p><ul><li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储.</li><li>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大.</li><li>如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</li><li>你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li></ul><blockquote><p>《Redis官方文档》</p></blockquote><h2 id="持久化操作-RDB"><a href="#持久化操作-RDB" class="headerlink" title="持久化操作-RDB"></a>持久化操作-RDB</h2><p>RDB持久化就是&#x3D;&#x3D;fork&#x3D;&#x3D;一个子进程，现将内存中的数据写入到一个临时文件中，待持久化结束后，在用这个临时文件替换上次持久化好的文件。</p><h3 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h3><p>在redis.conf中配置文件名称，默认为dump.rdb</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220211010345294.png" alt="image-20220211010345294"></p><p>redis 持久化命令：save</p><h3 id="配置文件参数"><a href="#配置文件参数" class="headerlink" title="配置文件参数"></a>配置文件参数</h3><ol><li>stop-writes-on-bgsave-error :</li></ol><p>当redis无法写入磁盘时，直接关掉redis的写操作。推荐yes</p><ol start="2"><li>rdbcompression:</li></ol><p>对于存储到磁盘中的快照，可以设置为是否进行压缩存储。如果是的话，redis会 采用LZF算法进行压缩。如果你不想消耗CPU进行压缩的话，可以设置为关闭此功能。推荐 yes</p><ol start="3"><li>rdbchecksum:</li></ol><p>完整性检查，存储快照后，redis使用CRC64算法来进行数据校验。但这样做会增加大约10%的性能消耗。推荐yes</p><ol start="4"><li>save ：</li></ol><p>指定当m秒内发生n次变化时，会触发持久化操作bgsave</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220211015159976.png" alt="image-20220211015159976"></p><p>持久化操作命令save: save时只管保存，其他不管，全部阻塞。手动保存。不建议。</p><p>bgsave: Redis在后台根据redis配置文件的save 参数异步进行快照操作，快照同时还可以快速响应客户端请求</p><h3 id="RDB的优势"><a href="#RDB的优势" class="headerlink" title="RDB的优势"></a>RDB的优势</h3><ol><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ol><h3 id="RDB的缺点"><a href="#RDB的缺点" class="headerlink" title="RDB的缺点"></a>RDB的缺点</h3><ol><li>Fork的时候，内存中的数据被克隆了一份，大致两倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了写时拷贝技术，如果数据庞大时还是比较消耗性能</li><li>在备份周期在一定时间做一次备份，如果redis意外挂掉，就会丢失最后一次快照的所有修改</li></ol><h3 id="RDB备份"><a href="#RDB备份" class="headerlink" title="RDB备份"></a>RDB备份</h3><p>复制文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@6dd4f2106959:/data<span class="token comment"># cp dump.rdb d.rdb</span>root@6dd4f2106959:/data<span class="token comment"># ls -ll</span>total <span class="token number">12</span>-rw-r--r-- <span class="token number">1</span> redis redis <span class="token number">104</span> Feb <span class="token number">11</span> 03:56 appendonly.aof-rw-r--r-- <span class="token number">1</span> root  root  <span class="token number">112</span> Feb <span class="token number">11</span> 03:58 d.rdb-rw-r--r-- <span class="token number">1</span> redis redis <span class="token number">112</span> Feb <span class="token number">11</span> 03:56 dump.rdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>恢复数据只要把d.rdb改为dump.rdb然后在重启redis服务即可</p><h2 id="持久化操作-AOF"><a href="#持久化操作-AOF" class="headerlink" title="持久化操作-AOF"></a>持久化操作-AOF</h2><p>AOF以日志(appendonly.aof)的形式来记录每个写操作(增量保存),redis启动之初会读取该文件重新构建数据，即完成数据恢复工作。</p><h3 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h3><ol><li>客户端的请求写命令会被 append追加到AOF缓冲区内</li><li>AOF缓沖冲区根据AOF持久化策略[always,everysec,no]将操作同步到磁盘的AOF文件中</li><li>AOF文件大小超过重写策略或手动重写时,会对AOF文件rewrite重写,压缩AOF文件容量</li><li>Redis服务重启时,会重新加载AOF文件中的写操作达到数据恢复的目的</li></ol><h3 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="AOF默认不开启"></a>AOF默认不开启</h3><p>可以在redis.conf中配置文件名称，默认为appendonly.aof,</p><p>设置参数appendonly yes 开启AOF</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220211173920722.png" alt="image-20220211173920722"></p><p>AOF文件的保存路径，同RDB一致</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220211173642952.png" alt="image-20220211173642952"></p><h3 id="AOF和RDB同时开启，redis默认取AOF的数据"><a href="#AOF和RDB同时开启，redis默认取AOF的数据" class="headerlink" title="AOF和RDB同时开启，redis默认取AOF的数据"></a>AOF和RDB同时开启，redis默认取AOF的数据</h3><p>AOF与RDB的正常恢复与RDB基本一致，这里不再赘述</p><h3 id="AOF异常恢复"><a href="#AOF异常恢复" class="headerlink" title="AOF异常恢复"></a>AOF异常恢复</h3><p><img src="http://img-md-js.linjsblog.top/img/image-20220211180141071.png" alt="image-20220211180141071"></p><h3 id="AOF同步频率配置"><a href="#AOF同步频率配置" class="headerlink" title="AOF同步频率配置"></a>AOF同步频率配置</h3><p><img src="http://img-md-js.linjsblog.top/img/image-20220211182337184.png" alt="image-20220211182337184"></p><p>appendfsync always:始终同步，每次Redis的写入都会立刻计入日志；性能较差但数据完整性较好</p><p>appendfsync everysec：每秒同步， 每秒记录日志一次，如果宕机，本秒数据可能丢失</p><p>appendfsync no:redis不主动同步，将同步时机交给操作系统</p><h3 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h3><p>AOF采用文件追加方式,文件会越来越大,为避免出现此种情况,新增了重写机制,当AOF文件的大小超过所设定的阈值时, Redis就会启动AOF文件的内容压缩,只保留可以恢复数据的最小指令集可以使用命令 bgrewriteaof。</p><p>重写原理：AOF文件持续增长而过大时,会fork出一条新进程来将文件重写(也是先写临时文件最后再 rename), redis4.0版本后的重写,是指上就是把rdb的快照,以二级制的形式附在新的aof头部,作为已有的历史数据,替换掉原来的流水账操作。</p><p>Redis 会记录上次重写时AOF的大小，默认配置是当AOF文件大小是上次rewrite且文件大于64M触发</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220211194812406.png" alt="image-20220211194812406"></p><p>auto-aof-rewrite-percentage:设置重写的基准值,文件达到100%时开始重写(文件是原来重写后文件的2倍时触发)</p><p>auto-aof-rewrite-min-size:设置重写的基准值,最小文件64MB。达到这个值开始重写。</p><p>重写流程：</p><p>(1) bgrewriteaof触发重写,判断是否当前有bgsave或bgrewriteaof在运行,如果有,则等待该命令结束后再继续执行。</p><p>(2)主进程fok出子进程执行重写操作,保证主进程不会阻塞。</p><p>(3)子进程遍历redis内存中数据到临时文件,客户端的写请求同时写入 aof_buf缓冲区和aof rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p><p>(4)1).子进程写完新的AOF文件后,向主进程发信号,父进程更新统计信息。2).主进程把 aof_rewrite_buf中的数据写入到新的AOF文件。</p><p>(5)使用新的AOF文件覆盖旧的AOF文件,完成AOF重写。</p><h3 id="用哪个好"><a href="#用哪个好" class="headerlink" title="用哪个好"></a>用哪个好</h3><p>官方建议同时开启AOF和RDB</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 Redis 并以配置文件启动</title>
      <link href="/2022/02/11/docker-%E5%AE%89%E8%A3%85-redis-%E5%B9%B6%E4%BB%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8/"/>
      <url>/2022/02/11/docker-%E5%AE%89%E8%A3%85-redis-%E5%B9%B6%E4%BB%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h1><ol><li><p>下载redis 镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>因为docker 安装的redis 默认没有redis.conf文件，如果我们想以配置文件启动redis的话，必须先去官网下载配置文件<a href="https://redis.io/">https://redis.io/</a></p><p><img src="http://img-md-js.linjsblog.top/img/image-20220211105007726.png" alt="image-20220211105007726"></p></li><li><p>创建redis宿主机的配置文件和数据的挂载目录,将redis.conf文件复制到&#x2F;mydata&#x2F;redis&#x2F;conf下</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /mydata/redis/conf<span class="token function">mkdir</span> /mydata/redis/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>启动docker容器</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> myredis <span class="token parameter variable">-v</span> /mydata/redis/conf/redis.conf:/etc/redis/redis.conf <span class="token parameter variable">-v</span> /mydata/redis/data:/data <span class="token parameter variable">-d</span> redis redis-server /etc/redis/redis.conf <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-p 6379:6379 端口映射：前表示主机部分，：后表示容器部分。</p><p>--name myredis 指定该容器名称，查看和进行操作都比较方便。</p><p>-v 挂载目录，规则与端口映射相同。</p><p>为什么需要挂载目录：个人认为docker是个沙箱隔离级别的容器，这个是它的特点及安全机制，不能随便访问外部（主机）资源目录，所以需要这个挂载目录机制。</p><p>-d redis 表示后台启动redis</p><p>--appendonly yes :开启AOF持久化</p><p>原文链接：<a href="https://blog.csdn.net/weixin_42456466/article/details/87270959">https://blog.csdn.net/weixin_42456466&#x2F;article&#x2F;details&#x2F;87270959</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 秒杀案例</title>
      <link href="/2022/02/05/redis-%E7%A7%92%E6%9D%80%E6%A1%88%E4%BE%8B/"/>
      <url>/2022/02/05/redis-%E7%A7%92%E6%9D%80%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-秒杀案例"><a href="#Redis-秒杀案例" class="headerlink" title="Redis 秒杀案例"></a>Redis 秒杀案例</h1><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><img src="http://img-md-js.linjsblog.top/img/image-20220204122953018.png" alt="image-20220204122953018"></p><p>写一个简单的springboot + thymeleaf页面示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    iPhone 13 Pro !!! 1元秒杀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msfrom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prodid<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prodid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0101<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>miaosha_btn<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seckill_btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>秒杀点我<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery/jquery-3.5.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#miaosha_btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> prodid <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#prodid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/doseckill"</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"prodid"</span><span class="token operator">:</span>prodid                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>                <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"抢光了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#miaosha_btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"disabled"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/doseckill"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doseckill</span><span class="token punctuation">(</span><span class="token class-name">String</span> prodid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> userid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isSuccess <span class="token operator">=</span> <span class="token class-name">SecKill_redis</span><span class="token punctuation">.</span><span class="token function">doSecKill</span><span class="token punctuation">(</span>userid<span class="token punctuation">,</span> prodid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>秒杀过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 秒杀过程</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doSecKill</span><span class="token punctuation">(</span><span class="token class-name">String</span> uid<span class="token punctuation">,</span><span class="token class-name">String</span> prodid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.uid和prodid非空判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">==</span> <span class="token keyword">null</span>  prodid <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.连接redis</span>    <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.0.2"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.拼接Key</span>    <span class="token comment">//3.1 库存key</span>    <span class="token class-name">String</span> kcKey <span class="token operator">=</span> <span class="token string">"sk:"</span><span class="token operator">+</span>prodid<span class="token operator">+</span><span class="token string">":qt"</span><span class="token punctuation">;</span>    <span class="token comment">//3.2 用户key</span>    <span class="token class-name">String</span> userKey <span class="token operator">=</span> <span class="token string">"sk:"</span><span class="token operator">+</span>prodid<span class="token operator">+</span><span class="token string">":user"</span><span class="token punctuation">;</span>    <span class="token comment">//4. 获取库存，如果库存为null，秒杀还没又开始</span>    <span class="token class-name">String</span> kc <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>kc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒杀还没有开始请等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//5. 判断用户是否重复秒杀操作</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">sismember</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token comment">//命令判断成员元素是否是集合的成员</span>    <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经成功秒杀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//6 判断如果商品数量，库存数量小于1，秒杀结束</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>kc<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒杀已经结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//7 秒杀过程</span>    <span class="token comment">//7.1 库存-1</span>    jedis<span class="token punctuation">.</span><span class="token function">decr</span><span class="token punctuation">(</span>kcKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.2 把秒杀成功的用户添加到清单里面</span>    jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span>userKey<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒杀成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis 中添加库存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> sk:0101:qt <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击秒杀</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220204183356621.png" alt="image-20220204183356621">查看控制台输出情况</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220204183726491.png" alt="image-20220204183726491">查看redis，可以看到库存已清空，并且用户id添加到秒杀成功的集合中</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220204183820055.png" alt="image-20220204183820055"></p><h2 id="ab工具模拟并发"><a href="#ab工具模拟并发" class="headerlink" title="ab工具模拟并发"></a>ab工具模拟并发</h2><p>为了模拟并发的效果，我们使用工具ab模拟测测试</p><p>centos7 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> httpd-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ab模拟提交post请求</p><p>在linux中创建postfile文件</p><pre class="line-numbers language-none"><code class="language-none">prodid&#x3D;0101&amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在postfile所在的目录执行命令，1000个请求100个并发</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ab <span class="token parameter variable">-n</span> <span class="token number">1000</span> <span class="token parameter variable">-c</span> <span class="token number">100</span> <span class="token parameter variable">-p</span> /home/xm/postfile <span class="token parameter variable">-T</span> application/x-www-form-urlencoded http://192.168.2.2:8080/doseckill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看控制台和redis中的数据，发现问题</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220204213911363.png" alt="image-20220204213911363"><img src="http://img-md-js.linjsblog.top/img/image-20220204214024900.png" alt="image-20220204214024900"></p><p>还出现了连接超时的问题</p><p><img src="http://img-md-js.linjsblog.top/img/image-20220204214624205.png" alt="image-20220204214624205"></p><h2 id="超卖和超时问题解决"><a href="#超卖和超时问题解决" class="headerlink" title="超卖和超时问题解决"></a>超卖和超时问题解决</h2><h3 id="配置JedisPool连接池来解决超时问题"><a href="#配置JedisPool连接池来解决超时问题" class="headerlink" title="配置JedisPool连接池来解决超时问题"></a>配置JedisPool连接池来解决超时问题</h3><p>编写工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">JedisPoolUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JedisPool</span> <span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> jedisPool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">JedisPoolUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> jedisPool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">JedisPoolConfig</span> poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    poolConfig<span class="token punctuation">.</span><span class="token function">setBlockWhenExhausted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    poolConfig<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span><span class="token string">"192.168.2.2"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">60000</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> jedisPool<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">,</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> jedis<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            jedisPool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改代码，doSecKill方法中通过连接池获取Jedis对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 秒杀过程</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doSecKill</span><span class="token punctuation">(</span><span class="token class-name">String</span> uid<span class="token punctuation">,</span><span class="token class-name">String</span> prodid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.uid和prodid非空判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uid <span class="token operator">==</span> <span class="token keyword">null</span>  prodid <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.通过连接池得到jedis对象</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token class-name">JedisPoolUtil</span><span class="token punctuation">.</span><span class="token function">getJedisPoolInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用乐观锁淘汰用户，解决超卖问题"><a href="#利用乐观锁淘汰用户，解决超卖问题" class="headerlink" title="利用乐观锁淘汰用户，解决超卖问题"></a>利用乐观锁淘汰用户，解决超卖问题</h3><p><img src="http://img-md-js.linjsblog.top/img/image-20220204222739348.png" alt="image-20220204222739348">```java &#x2F;&#x2F; 秒杀过程 public static boolean doSecKill(String uid,String prodid) throws IOException{ &#x2F;&#x2F;1.uid和prodid非空判断 if (uid &#x3D;&#x3D; null prodid &#x3D;&#x3D; null){ return false; } &#x2F;&#x2F;2.通过连接池得到jedis对象 Jedis jedis &#x3D; JedisPoolUtil.getJedisPoolInstance().getResource();</p><pre class="line-numbers language-none"><code class="language-none">    &#x2F;&#x2F;3.拼接Key    &#x2F;&#x2F;3.1 库存key    String kcKey &#x3D; &quot;sk:&quot;+prodid+&quot;:qt&quot;;    &#x2F;&#x2F;3.2 用户key    String userKey &#x3D; &quot;sk:&quot;+prodid+&quot;:user&quot;;    &#x2F;&#x2F;监视库存    jedis.watch(kcKey);    &#x2F;&#x2F;4. 获取库存，如果库存为null，秒杀还没又开始    String kc &#x3D; jedis.get(kcKey);    if (kc &#x3D;&#x3D; null)&#123;        System.out.println(&quot;秒杀还没有开始请等待&quot;);        jedis.close();        return false;    &#125;    &#x2F;&#x2F;5. 判断用户是否重复秒杀操作    if(jedis.sismember(userKey,uid)&#x2F;&#x2F;命令判断成员元素是否是集合的成员    )&#123;        System.out.println(&quot;已经成功秒杀&quot;);        jedis.close();        return false;    &#125;    &#x2F;&#x2F;6 判断如果商品数量，库存数量小于1，秒杀结束    if (Integer.parseInt(kc) &lt; 1)&#123;        System.out.println(&quot;秒杀已经结束&quot;);        jedis.close();        return false;    &#125;    &#x2F;&#x2F;7 秒杀过程    &#x2F;&#x2F; 使用事务    Transaction multi &#x3D; jedis.multi();    &#x2F;&#x2F;组队操作    multi.decr(kcKey);    multi.sadd(userKey,uid);    &#x2F;&#x2F;执行    List results &#x3D; multi.exec();    if (results &#x3D;&#x3D; null  results.size()&#x3D;&#x3D;0)&#123;        System.out.println(&quot;秒杀失败了&quot;);        jedis.close();    &#125;    System.out.println(&quot;秒杀成功&quot;);    jedis.close();    return true;&#125;重新测试,观察控制台输出(太长就不截图了)，和redis key的值![image-20220204230339593](http:&#x2F;&#x2F;img-md-js.linjsblog.top&#x2F;img&#x2F;image-20220204230339593.png)## 库存遗留问题解决在测试中增加库存量![image-20220204230810836](http:&#x2F;&#x2F;img-md-js.linjsblog.top&#x2F;img&#x2F;image-20220204230810836.png)2000个请求300个并发&#96;&#96;&#96;shellab -n 2000 -c 300 -p &#x2F;home&#x2F;xm&#x2F;postfile -T application&#x2F;x-www-form-urlencoded http:&#x2F;&#x2F;192.168.2.2:8080&#x2F;doseckill我们发现库存并没有清零这是乐观锁造成的库存遗留问题，部分请求并没能成功执行秒杀，因为事务执行时，重新检测库存数量，发现和最初watch检测的库存数量不一致（乐观锁版本号的机制）为了解决这个问题，我们使用Lua脚本解决这个问题什么是Lua脚本1. Lua是一个小巧的脚本语言，Lua脚本可以很容易的被C&#x2F;C++代码调用，也可以反过来调用C&#x2F;C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k ,所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。https:&#x2F;&#x2F;www.w3cschool.cn&#x2F;lua&#x2F;Lua脚本在redis中的优势### 编写Lua脚本public class SecKill_redisByScript &#123;    static String secKillScript &#x3D;            &quot;local userid&#x3D;KEYS[1];\r\n&quot; +            &quot;local prodid&#x3D;KEYS[2];\r\n&quot; +            &quot;local qtkey&#x3D;&#39;sk:&#39;..prodid..:qt;\r\n&quot; +            &quot;local usersKey&#x3D;&#39;sk:&#39;..prodid..:user;\r\n&quot; +            &quot;local userExists&#x3D;redis.call(sismember,usersKey,userid);\r\n&quot; +            &quot;if tonumber(userExists)&#x3D;&#x3D;1 then \r\n&quot; +            &quot;   return 2;\r\n&quot; +            &quot;end\r\n&quot; +            &quot;local num&#x3D; redis.call(get ,qtkey);\r\n&quot; +            &quot;if tonumber(num)&lt;&#x3D;0 then \r\n&quot; +            &quot;   return 0;\r\n&quot; +            &quot;else \r\n&quot; +            &quot;   redis.call(decr,qtkey);\r\n&quot; +            &quot;   redis.call(sadd,usersKey,userid);\r\n&quot; +            &quot;end\r\n&quot; +            &quot;return 1&quot; ;    public static boolean doSkillByScript(String userid,String prodid)&#123;        Jedis jedis &#x3D; JedisPoolUtil.getJedisPoolInstance().getResource();        String sha1 &#x3D; jedis.scriptLoad(secKillScript);        Object result &#x3D; jedis.evalsha(sha1, 2, userid, prodid);        String reString &#x3D; String.valueOf(result);        if (&quot;0&quot;.equals( reString )  ) &#123;            System.err.println(&quot;已抢空！！&quot;);        &#125;else if(&quot;1&quot;.equals( reString )  )  &#123;            System.out.println(&quot;抢购成功！！！！&quot;);        &#125;else if(&quot;2&quot;.equals( reString )  )  &#123;            System.err.println(&quot;该用户已抢过！！&quot;);        &#125;else&#123;            System.err.println(&quot;抢购异常！！&quot;);        &#125;        jedis.close();        return true;    &#125;&#125;参考：尚硅谷-Redis 6 入门到精通 超详细 教程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github+git+idea+eclipse团队合作</title>
      <link href="/2022/01/16/githubgitideaeclipse%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/"/>
      <url>/2022/01/16/githubgitideaeclipse%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大二的时候程序设计综合实验的老师布置了一个团队作业，要求我们合作开发一个系统， 考虑到我们组四个人，人比较多，四个人开发一个项目总不能在微信把文件传来传去太麻烦了，而且容易出错。我们需要一个远程的云端仓库，将各自写好的代码同步到一个项目中， 这时候，我们就需要用到idea或eclipse的版本控制功能连接github，将仓库中的代码克隆下来，或者将更新的代码提交到github中。 团队使用github进行版本控制开发的好处：GitHub是世界上最大的代码托管平台，我们可以在上面获取许多优秀的开源框架与项目，还可以将自己写的项目发布在github上进行托管，也可以利用github进行团队合作开发。这也方便了我们团队的开发。 比如说，我在github上建立了一个仓库，将ch17的代码发布上去。</p><p><img src="https://img-blog.csdnimg.cn/20210521170153795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>别人就可以看到我的代码，并可以把我的代码下载下来用，或者对我的项目进行修改。</p><p>但这还远远不够，我们要利用版本控制软件与github一起完成一个简单的项目开发。 网上也有很多类似的教程，但都比较零散，且更多的是对针对其中一些功能的详细讲述，由于github的学习比较复杂，对初学者不太友好，所以我在这里做一个基本操作的教程。 因此，本教程只适合小白完成一些github基本的操作，能满足简单的团队协作开发，不会涉及到一些分支的处理，以及一些git命令处理，我们用eclipse和idea简化操作，大佬轻喷。</p><p>好了，言归正传，本文将从github的注册开始，教你创建仓库，下载git，使用eclipse或idea上传项目和更新代码。</p><h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><p>（看不懂英文可以谷歌翻译哦） 网址：<a href="https://github.com/">https://github.com/</a> 1.点击Sign up <img src="https://img-blog.csdnimg.cn/2021052116020397.png" alt="在这里插入图片描述"> 2.填写信息 <img src="https://img-blog.csdnimg.cn/20210521160239539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.点击create account 4.注册成功后，我们开始创建一个团队，当然如果你是个体开发者的话，就不需要创建团队， 自己给个人账户建个仓库就行。</p><h2 id="github创建团队"><a href="#github创建团队" class="headerlink" title="github创建团队"></a>github创建团队</h2><p>点击如图所示create an organization <img src="https://img-blog.csdnimg.cn/20210521160332766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_20,color_FFFFFF,t_70" alt="在这里插入图片描述"> 选择Free即可 <img src="https://img-blog.csdnimg.cn/20210521160351295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 搜索用户名添加成员 <img src="https://img-blog.csdnimg.cn/20210521160559723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 点击Complete Setup 团队创建完毕如图所示 <img src="https://img-blog.csdnimg.cn/20210521160619490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 此时队员在邮箱中点击同意邀请就可以看到您们团队的成员啦 <img src="https://img-blog.csdnimg.cn/20210521160727997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时就可以看到团队中有两名成员 <img src="https://img-blog.csdnimg.cn/20210521160738966.png" alt="在这里插入图片描述"></p><h2 id="为自己的团队创建仓库"><a href="#为自己的团队创建仓库" class="headerlink" title="为自己的团队创建仓库"></a>为自己的团队创建仓库</h2><p>先进入自己的团队，不然就是为你个人的账号创建仓库： <img src="https://img-blog.csdnimg.cn/20210521160932967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击创建仓库： <img src="https://img-blog.csdnimg.cn/20210521161002169.png" alt="在这里插入图片描述"> 输入仓库（Repository）名字，选择Public <img src="https://img-blog.csdnimg.cn/20210521161022102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 这里只打第一个√，可根据需要多选，点击创建 <img src="https://img-blog.csdnimg.cn/20210521161056956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 好了，我们的仓库就算创建完成了。 <img src="https://img-blog.csdnimg.cn/20210521161112591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="README-md文件（可跳过）"><a href="#README-md文件（可跳过）" class="headerlink" title="README.md文件（可跳过）"></a>README.md文件（可跳过）</h2><p>* 这里简要提一下README.md文件，顾名思义就是，你可以用来向他人介绍你的项目，readme文件支持markdown语法，有兴趣的小伙伴可以花十几分钟学习一下，很快的 我们点击编辑，随便写一下 <img src="https://img-blog.csdnimg.cn/2021052116121590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 网页下拉，点击保存 <img src="https://img-blog.csdnimg.cn/20210521161229428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 效果如图所示: <img src="https://img-blog.csdnimg.cn/20210521161256451.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="git的安装与配置"><a href="#git的安装与配置" class="headerlink" title="git的安装与配置"></a>git的安装与配置</h2><p>接下来我们安装git， git下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a> 安装过程略，反正默认就行，亲测无影响</p><p>安装完成后，我们在开始菜单找到并打开Git Bash <img src="https://img-blog.csdnimg.cn/20210521161342760.png" alt="在这里插入图片描述"> 设置你的github username 和 email 我们输入git config –global user.name “youname”设置用户名 在输入git config –global user.email “<a href="mailto:&#97;&#x73;&#100;&#x61;&#x63;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;">&#97;&#x73;&#100;&#x61;&#x63;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;</a>“设置邮箱</p><p>不同类型项目的导入和创建方式不同，接下来以导入纯java项目为例，使用不同集成开发环境的同学可以选择性阅读，已经创建好项目并上传到github的，成员可以直接导入项目.</p><h2 id="eclipse配置git"><a href="#eclipse配置git" class="headerlink" title="eclipse配置git"></a>eclipse配置git</h2><ol><li>eclipse配置git：我们要将代码上传到远程仓库，必须先配置eclipse，Windows-&gt;preferences-&gt;version control-&gt;Git 记得填写自己github的账号和用户名才能提交哦 <img src="https://img-blog.csdnimg.cn/20210521161551949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="eclipse创建项目"><a href="#eclipse创建项目" class="headerlink" title="eclipse创建项目"></a>eclipse创建项目</h2><p>首先我们打开eclipse，点击新建一个java project</p><p>如果我们的项目创建好并对项目结构进行初始化后， 我们需要先把工程初始化为本地库</p><h3 id="提交项目到本地库"><a href="#提交项目到本地库" class="headerlink" title="提交项目到本地库"></a>提交项目到本地库</h3><p>鼠标右击工程选择team-&gt;share project <img src="https://img-blog.csdnimg.cn/20210521161812527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521162025905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521162104166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 点击create respository 点击finish完成 此时eclipse工程src下文件名字会变成蓝色 <img src="https://img-blog.csdnimg.cn/20210521162113811.png" alt="在这里插入图片描述"> 接下来我们将项目添加到暂存区 右击工程 team-&gt;add to index 此时目录变化如下 <img src="https://img-blog.csdnimg.cn/2021052116214074.png" alt="在这里插入图片描述"></p><p>提交到本地库：team-&gt;commit <img src="https://img-blog.csdnimg.cn/20210521162155925.png" alt="在这里插入图片描述"></p><p>提交时，为了避免冲突。将这些配置文件去掉 <img src="https://img-blog.csdnimg.cn/20210521162218707.png" alt="在这里插入图片描述"></p><p>点击commit <img src="https://img-blog.csdnimg.cn/20210521162225702.png" alt="在这里插入图片描述"></p><p>之后如果你有更改了代码，那你要再提交一次 <img src="https://img-blog.csdnimg.cn/20210521162232750.png" alt="在这里插入图片描述"></p><h3 id="上传到github远程仓库"><a href="#上传到github远程仓库" class="headerlink" title="上传到github远程仓库"></a>上传到github远程仓库</h3><p>将代码上传到远程仓库 经过以上操作后，我们已经将代码提交到本地库，但还没有提交到github网站的远程仓库，所以接下来：team-&gt;reomte-&gt;push…</p><p><img src="https://img-blog.csdnimg.cn/20210521162325366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521162343117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521162348625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击next 最后点finish，上传成功↓ <img src="https://img-blog.csdnimg.cn/20210521162410942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在github切换到master分支 <img src="https://img-blog.csdnimg.cn/2021052116372066.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时我们就可以在github上看到我们上传的项目了</p><p><img src="https://img-blog.csdnimg.cn/20210521163746950.png" alt="在这里插入图片描述"></p><h2 id="eclipse导入项目"><a href="#eclipse导入项目" class="headerlink" title="eclipse导入项目"></a>eclipse导入项目</h2><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><p>首先我们需要将远程库的项目克隆到eclipse中打开 首先打开eclipse，右击工作区，点击import导入工程，找到这个↓，选中点击next <img src="https://img-blog.csdnimg.cn/20210521164136517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521164231423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 复制uri <img src="https://img-blog.csdnimg.cn/20210521164249381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> next <img src="https://img-blog.csdnimg.cn/2021052116430994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 由于我们发项目发到分支master上，所以选一个就好了 <img src="https://img-blog.csdnimg.cn/20210521164331231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> next <img src="https://img-blog.csdnimg.cn/20210521164344517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 选择，import as general project，next <img src="https://img-blog.csdnimg.cn/20210521164438310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> Finish <img src="https://img-blog.csdnimg.cn/2021052116445049.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 导入成功↓ <img src="https://img-blog.csdnimg.cn/20210521164516887.png" alt="在这里插入图片描述"> 此时项目中没有jre，还是无法运行的<img src="https://img-blog.csdnimg.cn/20210521164607635.png" alt="在这里插入图片描述"> 右击项目， <img src="https://img-blog.csdnimg.cn/20210521164718535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521164751926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521164841766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210611154310573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210611154340681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210521164850612.png" alt="在这里插入图片描述"> 这样项目就可以运行了</p><h3 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h3><p>接下来我试着更新代码，给customer添加一些属性。 <img src="https://img-blog.csdnimg.cn/20210521164910923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 提交到本地库 点击commit提交到本地库 <img src="https://img-blog.csdnimg.cn/20210521164943191.png" alt="在这里插入图片描述"> 点击push更新远程仓库 <img src="https://img-blog.csdnimg.cn/20210521164953483.png" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521165054844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 这样一来远程库就更新了 <img src="https://img-blog.csdnimg.cn/20210521165113661.png" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20210521165138580.png" alt="在这里插入图片描述"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>注意！每次提交代码时都要先把代码pull下来，由于我上面是远程端还没有做更改，所以可以直接push提交。团队合作的时候 由于远程端的更改多余你的本地端，你应该先 commit 然后 pull 最后再push。 如果直接强制push 会让远程端的代码跟你本地的保持一致，远程端多的部分就不见了。</strong></p><h3 id="从远程仓库中拉取更新"><a href="#从远程仓库中拉取更新" class="headerlink" title="从远程仓库中拉取更新"></a>从远程仓库中拉取更新</h3><p>而另一个人要获取项目的更新：<br><img src="https://img-blog.csdnimg.cn/20210521165447333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 于是另一个人也将获取到更新 <img src="https://img-blog.csdnimg.cn/20210521165504537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>idea的git、github使用将在后续更新</strong></p><h2 id="idea创建项目"><a href="#idea创建项目" class="headerlink" title="idea创建项目"></a>idea创建项目</h2><h2 id="idea导入项目"><a href="#idea导入项目" class="headerlink" title="idea导入项目"></a>idea导入项目</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> eclipse </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习笔记：继承性</title>
      <link href="/2022/01/16/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%BB%A7%E6%89%BF%E6%80%A7/"/>
      <url>/2022/01/16/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%BB%A7%E6%89%BF%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>一、继承性的好处 ①减少代码的冗余，提高代码的复用性 ②便与功能的扩展 ③为之后的多态性的使用提供了前提。</p><p>二、继承性的格式 ：class A extends B{} A:子类、派生类、subclass B: 父类、超类、基类、superclass</p><pre class="line-numbers language-none"><code class="language-none">    2.1体现：一旦子类A继承父类B以后，子类就获取了父类B中声明的所有的结构：属性、方法            特别的，父类中声明为private的属性和方法，子类继承父类以后，仍然认为获取了父类中的结构。    只是因为封装性的影响，使得子类不能直接调用父类的结构而已。    2.2 子类继承父类以后，还可以声明自己特有的属性或方法，实现功能的扩展extend：延展、扩展<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、java中关于继承的规定： 1.一个类可以被多个子类继承 2.java中类的单继承性：一个类只能有有一个父类 3.子父类是相对的概念。 4.子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类 5.子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</p><p><img src="https://img-blog.csdnimg.cn/20200421214015501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbmppbnNodTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"> 四、 1.如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类 2.所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lahg.Object类 3.意味着，所有的java类具有java.lang.Object类声明的功能</p><p>代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">//Person.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Creature</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">//Student.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//    String name;</span><span class="token comment">//    int age;</span>    <span class="token class-name">String</span> major<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> major<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token comment">//        this.age=age;</span>        <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>major<span class="token operator">=</span>major<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    public void eat()&#123;</span><span class="token comment">//        System.out.println("吃饭");</span><span class="token comment">//    &#125;</span><span class="token comment">//    public void sleep()&#123;</span><span class="token comment">//        System.out.println("睡觉");</span><span class="token comment">//    &#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",age:"</span><span class="token operator">+</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">//Creature.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Creature</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"呼吸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">//ExtendsTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        p1.age=1;</span>        p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> s1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        s1.sleep();</span>        s1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Creature</span> creature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creature<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 日期时间API</title>
      <link href="/2022/01/16/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/"/>
      <url>/2022/01/16/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/</url>
      
        <content type="html"><![CDATA[<h3 id="JDK8之前的日期时间API"><a href="#JDK8之前的日期时间API" class="headerlink" title="JDK8之前的日期时间API"></a>JDK8之前的日期时间API</h3><ol><li><p>获取系统当前时间：System类中的currentTimeMillis()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回当前时间与1970年1月1日0时0秒之间以毫秒为单位的时间差</span><span class="token comment">//称为时间戳</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java.util.Date类与子类java.sql.Date类</p></li><li><p><a href="https://linjsblog.oss-cn-guangzhou.aliyuncs.com/blog1/b6b7451c847d6c9e90df7335c5eefbd9.png" title="ppt"><img src="https://linjsblog.oss-cn-guangzhou.aliyuncs.com/blog1/b6b7451c847d6c9e90df7335c5eefbd9.png" alt="ppt" title="ppt"></a></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/**     * SimpleDateFormat的使用：对日期Date类的格式化和解析     * 1.两个操作     *  1.1格式化：日期 ---》字符串     *  1.2解析：格式化的逆过程     * 2.SimpleDateFormat的实例化     */</span> <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//SimpleDateFormat的实例化:使用默认的构造器</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化：日期 ---》字符串</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      System.out.println(date);</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式化，中文格式</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20-10-23 下午8:26</span>        <span class="token comment">//解析：</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"20-10-23 下午7:54"</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20-10-23 下午8:26</span>        <span class="token comment">//按照指定的方式格式化和解析，调用带参的构造器</span><span class="token comment">//        SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa");</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> format1 <span class="token operator">=</span> simpleDateFormat1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20-10-23 08:26 下午</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-10-23 08:39:54</span>        <span class="token comment">//解析：要求字符串必须是符合SimpleDateFormat识别的格式（通过构造器参数体现）</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> simpleDateFormat1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-02-18 11:48:27"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tue Feb 18 11:48:27 CST 2020</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>Calendar <img src="http://182.61.32.174/wp-content/uploads/2022/01/Image-300x173.png"></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">Calendar</span>日历类<span class="token punctuation">(</span>抽象类<span class="token punctuation">)</span>的使用     <span class="token operator">*</span>     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.实例化</span>        <span class="token comment">//方式一：创建其子类（GregorianCalendar）的对象</span>        <span class="token comment">//方式二：调用其静态方法getInstance()</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(calendar.getClass());</span>        <span class="token comment">//2.常用方法</span>        <span class="token comment">//get()</span>        <span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个月的第几天</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一年的第几天</span>        <span class="token comment">//set()</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个月的第几天</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//22</span>        <span class="token comment">//add()</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个月的第几天</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//25</span>        <span class="token comment">//getTime():日历类--->Date</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//setTime():Date---》日历类</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个月的第几天</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDK8中的日期时间API"><a href="#JDK8中的日期时间API" class="headerlink" title="JDK8中的日期时间API"></a>JDK8中的日期时间API</h3><h4 id="新时间日期API新时间日期API"><a href="#新时间日期API新时间日期API" class="headerlink" title="新时间日期API新时间日期API"></a>新时间日期API新时间日期API</h4><p><strong><em>java.time-包含值对象的基础包 java.time.chrono-提供对不同的日历系统的访问 java.time.format-格式化和解析时间和日期 java.time.temporal-包括底层框架和扩展特性 java.time.zone-包含时区支持的类</em></strong> 说明：大多数开发者只会用到基础包和format包，也可能会用到temporal包。因此，尽管有68个新的公开类型，大多数开发者，大概将只会用到其中的三分之一。</p><ol><li>LocalDate、LocalTime、LocalDateTime LocalDate、LocalTime、LocalDateTime类是其中较重要的几个类，它们的实例是不可变的对象，分别表示使用1$0-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。<ul><li>LocalDate代表OS格式(yyyy-MM-dd)的日期，可以存储生日、纪念日等日期。</li><li>LocalTime表示一个时间，而不是日期。</li><li>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</li></ul></li></ol><p><img src="http://182.61.32.174/wp-content/uploads/2022/01/Image1.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** LocalDate、LocalTime、LocalDateTime的使用* 说明：1.LocalDateTime相较于LocalDate、LocalTime，使用频率要高*      2.类似于Calendar，但Local...不可变*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//now():获取当前的日期、时间、日期+时间</span>    <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-10-23</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//23:06:44.226</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-10-23T23:06:44.226</span>    <span class="token comment">//of():设置指定的年月日时分秒是没有偏移量的</span>    <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//getXxx()</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//体现localDate等的不可变性</span>    <span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//加减</span>    <span class="token class-name">LocalDateTime</span> localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LocalDateTime</span> localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(未完待续) <img src="http://182.61.32.174/wp-content/uploads/2022/01/%E5%A4%B4%E5%83%8F03-300x300.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客说明</title>
      <link href="/2022/01/15/hello-world/"/>
      <url>/2022/01/15/hello-world/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>2024年6月15日</strong> 大家好啊，很久没有发博客了(虽然我知道也没人看)，最近一年因为复习比较忙没空去维护服务器和更新博客导致服务器过期了也没有去管，这两天从百忙的复习中抽出时间重新搭建好博客，并做一下分享。 离开大学有一年了，今天稍微介绍一下我最近一年经历，离开学校后去了秋招签的一家公司，工作两个月觉得自己无论是学历和能力都有很多的不足，并且我觉得一直待在这家公司的数据组并不能提升自己的项目经验和能力。我已我打算提升学历，辞职去考研，再次毕业后找个稳定一点的工作，至少不打算在从事Java或者后端数据库方面的工作了。考研还有一个原因，今年AI和大模型爆火，改变了每一个程序员的生活和工作方式，所以我对这方面非常感兴趣，打算读研期间能够参与这方面的学习和研究。 然而命运总是坎坷，由于复习时间过于紧张准备不够充分，我的初试和复试成绩不是特别理想，最终与研究生失之交臂。所幸在父母的鼓励和支持下，我从失败中走了出来，准备再战。我很幸运出生在这个条件优渥的家庭，父母都是在小城市里月薪过万的公职人员，使得我有充分的试错成本去尝试、去奋斗。 接下来如果有空可能会更新一些考研相关比如408的文章，12月份考完后会更新一些机器学习深度学习的内容。</p></li><li><p><strong>2022年1月</strong> 大家好，我是Jessie，目前是一个大三学生，正在准备参加实习，这个网站是我在2022年1月份搭建的个人网站，主要用于分享我的java学习笔记和开发经验，因为这个网站刚搭建没多久，所以还有很多文章没有从印象笔记搬过来，不过后续我会不断发布之前写的笔记和文章，文章如有谬误，还请大佬多多包涵与指正。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 408 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 工作 </tag>
            
            <tag> 毕业论文 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
